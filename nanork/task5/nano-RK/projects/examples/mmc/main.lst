   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 144               		.data
 145               	.LC0:
 146 0000 5461 736B 		.string	"Task4 PID=%d\r\n"
 146      3420 5049 
 146      443D 2564 
 146      0D0A 00
 147               	.LC1:
 148 000f 5461 736B 		.string	"Task4 cnt=%d\r\n"
 148      3420 636E 
 148      743D 2564 
 148      0D0A 00
 149               		.text
 151               	.global	Task4
 153               	Task4:
 154               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** 
  25:main.c        **** #include <nrk.h>
  26:main.c        **** #include <include.h>
  27:main.c        **** #include <ulib.h>
  28:main.c        **** #include <stdio.h>
  29:main.c        **** #include <avr/sleep.h>
  30:main.c        **** #include <hal.h>
  31:main.c        **** #include <nrk_error.h>
  32:main.c        **** #include <nrk_timer.h>
  33:main.c        **** #include "mmc.h" 
  34:main.c        **** 
  35:main.c        **** 
  36:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  37:main.c        **** nrk_task_type TaskOne;
  38:main.c        **** void Task1(void);
  39:main.c        **** 
  40:main.c        **** NRK_STK Stack2[NRK_APP_STACKSIZE];
  41:main.c        **** nrk_task_type TaskTwo;
  42:main.c        **** void Task2 (void);
  43:main.c        **** 
  44:main.c        **** NRK_STK Stack3[NRK_APP_STACKSIZE];
  45:main.c        **** nrk_task_type TaskThree;
  46:main.c        **** void Task3 (void);
  47:main.c        **** 
  48:main.c        **** 
  49:main.c        **** NRK_STK Stack4[NRK_APP_STACKSIZE];
  50:main.c        **** nrk_task_type TaskFour;
  51:main.c        **** void Task4 (void);
  52:main.c        **** 
  53:main.c        **** void nrk_create_taskset();
  54:main.c        **** uint8_t kill_stack(uint8_t val);
  55:main.c        **** 
  56:main.c        **** // Don't put the MMC buffer in a task or it will go onto the stack!
  57:main.c        **** uint8_t sectorbuffer[512];
  58:main.c        **** 
  59:main.c        **** 
  60:main.c        **** int
  61:main.c        **** main ()
  62:main.c        **** {
  63:main.c        ****   uint16_t div;
  64:main.c        ****   nrk_setup_ports();
  65:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  66:main.c        **** 
  67:main.c        ****   printf( "Starting up...\r\n" );
  68:main.c        **** 
  69:main.c        ****   nrk_init();
  70:main.c        **** 
  71:main.c        ****   nrk_led_clr(0);
  72:main.c        ****   nrk_led_clr(1);
  73:main.c        ****   nrk_led_clr(2);
  74:main.c        ****   nrk_led_clr(3);
  75:main.c        ****   
  76:main.c        ****   nrk_time_set(0,0);
  77:main.c        ****   nrk_create_taskset ();
  78:main.c        ****   nrk_start();
  79:main.c        ****   
  80:main.c        ****   return 0;
  81:main.c        **** }
  82:main.c        **** 
  83:main.c        **** 
  84:main.c        **** void Task1()
  85:main.c        **** {
  86:main.c        **** uint16_t cnt;
  87:main.c        **** int8_t val;
  88:main.c        **** uint32_t sector = 0;
  89:main.c        **** 
  90:main.c        **** 
  91:main.c        ****   printf( "Task1 PID=%d\r\n",nrk_get_pid());
  92:main.c        ****   cnt=0;
  93:main.c        ****   val=mmc_init();
  94:main.c        ****   printf("mmc_init returns %d\n\r", val );
  95:main.c        ****   if(val!=0 ) {
  96:main.c        **** 	printf( "card init failed\r\n" );
  97:main.c        **** 	while(1);
  98:main.c        **** 	}
  99:main.c        ****   
 100:main.c        **** 	printf("\nsector %ld\n\r",sector);                // show sector number
 101:main.c        ****         val=mmc_readsector(sector,sectorbuffer);    // read a data sector
 102:main.c        ****        	printf( "readsector returned %d\n",val );
 103:main.c        **** 	for(cnt=0; cnt<32; cnt++ )
 104:main.c        **** 		printf( "%d ",sectorbuffer[cnt] );
 105:main.c        **** 	printf( "\n\r" ); 
 106:main.c        **** 
 107:main.c        **** 	val=sectorbuffer[0];
 108:main.c        **** 	val++;
 109:main.c        **** 	for(cnt=0; cnt<512; cnt++ )
 110:main.c        **** 	{
 111:main.c        **** 	sectorbuffer[cnt]=val;
 112:main.c        **** 	}
 113:main.c        **** 
 114:main.c        **** 	printf( "Writting\r\n" );
 115:main.c        **** 	val=mmc_writesector(sector,sectorbuffer);    // read a data sector
 116:main.c        ****        	printf( "writesector returned %d\n",val );
 117:main.c        **** 	printf( "After write:\r\n" );
 118:main.c        **** 	val=mmc_readsector(sector,sectorbuffer);    // read a data sector
 119:main.c        ****        	printf( "readsector returned %d\n",val );
 120:main.c        ****        	if(val==0)
 121:main.c        **** 	{
 122:main.c        **** 	 for(cnt=0; cnt<32; cnt++ )
 123:main.c        **** 		printf( "%d ",sectorbuffer[cnt] );
 124:main.c        **** 	printf( "\n\r" ); 
 125:main.c        **** 	}
 126:main.c        **** 
 127:main.c        **** 
 128:main.c        ****   	while(1) {
 129:main.c        **** 	nrk_wait_until_next_period();
 130:main.c        **** 	}
 131:main.c        **** }
 132:main.c        **** 
 133:main.c        **** void Task2()
 134:main.c        **** {
 135:main.c        ****   uint8_t cnt;
 136:main.c        ****   printf( "Task2 PID=%d\r\n",nrk_get_pid());
 137:main.c        ****   cnt=0;
 138:main.c        ****   while(1) {
 139:main.c        **** 	nrk_led_set(BLUE_LED);
 140:main.c        **** 	printf( "Task2 cnt=%d\r\n",cnt );
 141:main.c        **** 	cnt++;
 142:main.c        **** 	//if(cnt>=10) while(1);   // This will test the reservation
 143:main.c        **** 	//if(cnt>=10) kill_stack(100);
 144:main.c        **** 	nrk_wait_until_next_period();
 145:main.c        ****         nrk_led_clr(BLUE_LED);
 146:main.c        **** 	nrk_wait_until_next_period();
 147:main.c        **** 	}
 148:main.c        **** }
 149:main.c        **** 
 150:main.c        **** 
 151:main.c        **** 
 152:main.c        **** void Task3()
 153:main.c        **** {
 154:main.c        **** uint16_t cnt;
 155:main.c        **** nrk_time_t my_time;
 156:main.c        **** 
 157:main.c        ****   printf( "Task3 PID=%d\r\n",nrk_get_pid());
 158:main.c        ****   cnt=0;
 159:main.c        ****   while(1) {
 160:main.c        **** 	
 161:main.c        **** 	nrk_led_set(GREEN_LED);
 162:main.c        **** 	nrk_time_get(&my_time);
 163:main.c        **** 	printf( "Task3 cnt=%d\r\n",cnt );
 164:main.c        **** 	nrk_wait_until_next_period();
 165:main.c        **** 	nrk_led_clr(GREEN_LED);
 166:main.c        **** 	cnt++;
 167:main.c        **** 	nrk_wait_until_next_period();
 168:main.c        **** 	}
 169:main.c        **** }
 170:main.c        **** 
 171:main.c        **** void Task4()
 172:main.c        **** {
 156               	.LM0:
 157               	.LFBB1:
 158 0000 CF92      		push r12
 159 0002 DF92      		push r13
 160 0004 EF92      		push r14
 161 0006 FF92      		push r15
 162 0008 0F93      		push r16
 163 000a 1F93      		push r17
 164 000c DF93      		push r29
 165 000e CF93      		push r28
 166 0010 CDB7      		in r28,__SP_L__
 167 0012 DEB7      		in r29,__SP_H__
 168 0014 2897      		sbiw r28,8
 169 0016 0FB6      		in __tmp_reg__,__SREG__
 170 0018 F894      		cli
 171 001a DEBF      		out __SP_H__,r29
 172 001c 0FBE      		out __SREG__,__tmp_reg__
 173 001e CDBF      		out __SP_L__,r28
 174               	/* prologue: function */
 175               	/* frame size = 8 */
 176               	/* stack size = 16 */
 177               	.L__stack_usage = 16
 173:main.c        **** uint16_t cnt;
 174:main.c        **** nrk_time_t my_time;
 175:main.c        **** 
 176:main.c        ****   printf( "Task4 PID=%d\r\n",nrk_get_pid());
 179               	.LM1:
 180 0020 0E94 0000 		call nrk_get_pid
 181 0024 00D0      		rcall .
 182 0026 00D0      		rcall .
 183 0028 EDB7      		in r30,__SP_L__
 184 002a FEB7      		in r31,__SP_H__
 185 002c 3196      		adiw r30,1
 186 002e 20E0      		ldi r18,lo8(.LC0)
 187 0030 30E0      		ldi r19,hi8(.LC0)
 188 0032 ADB7      		in r26,__SP_L__
 189 0034 BEB7      		in r27,__SP_H__
 190 0036 1296      		adiw r26,1+1
 191 0038 3C93      		st X,r19
 192 003a 2E93      		st -X,r18
 193 003c 1197      		sbiw r26,1
 194 003e 8283      		std Z+2,r24
 195 0040 1382      		std Z+3,__zero_reg__
 196 0042 0E94 0000 		call printf
 197 0046 0F90      		pop __tmp_reg__
 198 0048 0F90      		pop __tmp_reg__
 199 004a 0F90      		pop __tmp_reg__
 200 004c 0F90      		pop __tmp_reg__
 177:main.c        ****   cnt=0;
 202               	.LM2:
 203 004e 00E0      		ldi r16,lo8(0)
 204 0050 10E0      		ldi r17,hi8(0)
 178:main.c        ****   while(1) {
 179:main.c        **** 	
 180:main.c        **** 	nrk_led_set(RED_LED);
 181:main.c        **** 	nrk_time_get(&my_time);
 206               	.LM3:
 207 0052 7E01      		movw r14,r28
 208 0054 0894      		sec
 209 0056 E11C      		adc r14,__zero_reg__
 210 0058 F11C      		adc r15,__zero_reg__
 182:main.c        **** 	printf( "Task4 cnt=%d\r\n",cnt );
 212               	.LM4:
 213 005a 80E0      		ldi r24,lo8(.LC1)
 214 005c C82E      		mov r12,r24
 215 005e 80E0      		ldi r24,hi8(.LC1)
 216 0060 D82E      		mov r13,r24
 217               	.L2:
 180:main.c        **** 	nrk_led_set(RED_LED);
 219               	.LM5:
 220 0062 83E0      		ldi r24,lo8(3)
 221 0064 90E0      		ldi r25,hi8(3)
 222 0066 0E94 0000 		call nrk_led_set
 181:main.c        **** 	nrk_time_get(&my_time);
 224               	.LM6:
 225 006a C701      		movw r24,r14
 226 006c 0E94 0000 		call nrk_time_get
 228               	.LM7:
 229 0070 00D0      		rcall .
 230 0072 00D0      		rcall .
 231 0074 EDB7      		in r30,__SP_L__
 232 0076 FEB7      		in r31,__SP_H__
 233 0078 D282      		std Z+2,r13
 234 007a C182      		std Z+1,r12
 235 007c 1483      		std Z+4,r17
 236 007e 0383      		std Z+3,r16
 237 0080 0E94 0000 		call printf
 183:main.c        **** 	nrk_wait_until_next_period();
 239               	.LM8:
 240 0084 0F90      		pop __tmp_reg__
 241 0086 0F90      		pop __tmp_reg__
 242 0088 0F90      		pop __tmp_reg__
 243 008a 0F90      		pop __tmp_reg__
 244 008c 0E94 0000 		call nrk_wait_until_next_period
 184:main.c        **** 	nrk_led_clr(RED_LED);
 246               	.LM9:
 247 0090 83E0      		ldi r24,lo8(3)
 248 0092 90E0      		ldi r25,hi8(3)
 249 0094 0E94 0000 		call nrk_led_clr
 185:main.c        **** 	cnt++;
 251               	.LM10:
 252 0098 0F5F      		subi r16,lo8(-(1))
 253 009a 1F4F      		sbci r17,hi8(-(1))
 186:main.c        **** 	nrk_wait_until_next_period();
 255               	.LM11:
 256 009c 0E94 0000 		call nrk_wait_until_next_period
 257 00a0 00C0      		rjmp .L2
 263               	.Lscope1:
 265               		.stabd	78,0,0
 266               		.data
 267               	.LC2:
 268 001e 5461 736B 		.string	"Task3 PID=%d\r\n"
 268      3320 5049 
 268      443D 2564 
 268      0D0A 00
 269               	.LC3:
 270 002d 5461 736B 		.string	"Task3 cnt=%d\r\n"
 270      3320 636E 
 270      743D 2564 
 270      0D0A 00
 271               		.text
 273               	.global	Task3
 275               	Task3:
 276               		.stabd	46,0,0
 153:main.c        **** {
 278               	.LM12:
 279               	.LFBB2:
 280 00a2 CF92      		push r12
 281 00a4 DF92      		push r13
 282 00a6 EF92      		push r14
 283 00a8 FF92      		push r15
 284 00aa 0F93      		push r16
 285 00ac 1F93      		push r17
 286 00ae DF93      		push r29
 287 00b0 CF93      		push r28
 288 00b2 CDB7      		in r28,__SP_L__
 289 00b4 DEB7      		in r29,__SP_H__
 290 00b6 2897      		sbiw r28,8
 291 00b8 0FB6      		in __tmp_reg__,__SREG__
 292 00ba F894      		cli
 293 00bc DEBF      		out __SP_H__,r29
 294 00be 0FBE      		out __SREG__,__tmp_reg__
 295 00c0 CDBF      		out __SP_L__,r28
 296               	/* prologue: function */
 297               	/* frame size = 8 */
 298               	/* stack size = 16 */
 299               	.L__stack_usage = 16
 157:main.c        ****   printf( "Task3 PID=%d\r\n",nrk_get_pid());
 301               	.LM13:
 302 00c2 0E94 0000 		call nrk_get_pid
 303 00c6 00D0      		rcall .
 304 00c8 00D0      		rcall .
 305 00ca EDB7      		in r30,__SP_L__
 306 00cc FEB7      		in r31,__SP_H__
 307 00ce 3196      		adiw r30,1
 308 00d0 20E0      		ldi r18,lo8(.LC2)
 309 00d2 30E0      		ldi r19,hi8(.LC2)
 310 00d4 ADB7      		in r26,__SP_L__
 311 00d6 BEB7      		in r27,__SP_H__
 312 00d8 1296      		adiw r26,1+1
 313 00da 3C93      		st X,r19
 314 00dc 2E93      		st -X,r18
 315 00de 1197      		sbiw r26,1
 316 00e0 8283      		std Z+2,r24
 317 00e2 1382      		std Z+3,__zero_reg__
 318 00e4 0E94 0000 		call printf
 319 00e8 0F90      		pop __tmp_reg__
 320 00ea 0F90      		pop __tmp_reg__
 321 00ec 0F90      		pop __tmp_reg__
 322 00ee 0F90      		pop __tmp_reg__
 158:main.c        ****   cnt=0;
 324               	.LM14:
 325 00f0 00E0      		ldi r16,lo8(0)
 326 00f2 10E0      		ldi r17,hi8(0)
 162:main.c        **** 	nrk_time_get(&my_time);
 328               	.LM15:
 329 00f4 7E01      		movw r14,r28
 330 00f6 0894      		sec
 331 00f8 E11C      		adc r14,__zero_reg__
 332 00fa F11C      		adc r15,__zero_reg__
 163:main.c        **** 	printf( "Task3 cnt=%d\r\n",cnt );
 334               	.LM16:
 335 00fc 90E0      		ldi r25,lo8(.LC3)
 336 00fe C92E      		mov r12,r25
 337 0100 90E0      		ldi r25,hi8(.LC3)
 338 0102 D92E      		mov r13,r25
 339               	.L4:
 161:main.c        **** 	nrk_led_set(GREEN_LED);
 341               	.LM17:
 342 0104 82E0      		ldi r24,lo8(2)
 343 0106 90E0      		ldi r25,hi8(2)
 344 0108 0E94 0000 		call nrk_led_set
 162:main.c        **** 	nrk_time_get(&my_time);
 346               	.LM18:
 347 010c C701      		movw r24,r14
 348 010e 0E94 0000 		call nrk_time_get
 163:main.c        **** 	printf( "Task3 cnt=%d\r\n",cnt );
 350               	.LM19:
 351 0112 00D0      		rcall .
 352 0114 00D0      		rcall .
 353 0116 EDB7      		in r30,__SP_L__
 354 0118 FEB7      		in r31,__SP_H__
 355 011a D282      		std Z+2,r13
 356 011c C182      		std Z+1,r12
 357 011e 1483      		std Z+4,r17
 358 0120 0383      		std Z+3,r16
 359 0122 0E94 0000 		call printf
 164:main.c        **** 	nrk_wait_until_next_period();
 361               	.LM20:
 362 0126 0F90      		pop __tmp_reg__
 363 0128 0F90      		pop __tmp_reg__
 364 012a 0F90      		pop __tmp_reg__
 365 012c 0F90      		pop __tmp_reg__
 366 012e 0E94 0000 		call nrk_wait_until_next_period
 165:main.c        **** 	nrk_led_clr(GREEN_LED);
 368               	.LM21:
 369 0132 82E0      		ldi r24,lo8(2)
 370 0134 90E0      		ldi r25,hi8(2)
 371 0136 0E94 0000 		call nrk_led_clr
 166:main.c        **** 	cnt++;
 373               	.LM22:
 374 013a 0F5F      		subi r16,lo8(-(1))
 375 013c 1F4F      		sbci r17,hi8(-(1))
 167:main.c        **** 	nrk_wait_until_next_period();
 377               	.LM23:
 378 013e 0E94 0000 		call nrk_wait_until_next_period
 379 0142 00C0      		rjmp .L4
 385               	.Lscope2:
 387               		.stabd	78,0,0
 388               		.data
 389               	.LC4:
 390 003c 5461 736B 		.string	"Task2 PID=%d\r\n"
 390      3220 5049 
 390      443D 2564 
 390      0D0A 00
 391               	.LC5:
 392 004b 5461 736B 		.string	"Task2 cnt=%d\r\n"
 392      3220 636E 
 392      743D 2564 
 392      0D0A 00
 393               		.text
 395               	.global	Task2
 397               	Task2:
 398               		.stabd	46,0,0
 134:main.c        **** {
 400               	.LM24:
 401               	.LFBB3:
 402 0144 1F93      		push r17
 403 0146 CF93      		push r28
 404 0148 DF93      		push r29
 405               	/* prologue: function */
 406               	/* frame size = 0 */
 407               	/* stack size = 3 */
 408               	.L__stack_usage = 3
 136:main.c        ****   printf( "Task2 PID=%d\r\n",nrk_get_pid());
 410               	.LM25:
 411 014a 0E94 0000 		call nrk_get_pid
 412 014e 00D0      		rcall .
 413 0150 00D0      		rcall .
 414 0152 EDB7      		in r30,__SP_L__
 415 0154 FEB7      		in r31,__SP_H__
 416 0156 3196      		adiw r30,1
 417 0158 20E0      		ldi r18,lo8(.LC4)
 418 015a 30E0      		ldi r19,hi8(.LC4)
 419 015c ADB7      		in r26,__SP_L__
 420 015e BEB7      		in r27,__SP_H__
 421 0160 1296      		adiw r26,1+1
 422 0162 3C93      		st X,r19
 423 0164 2E93      		st -X,r18
 424 0166 1197      		sbiw r26,1
 425 0168 8283      		std Z+2,r24
 426 016a 1382      		std Z+3,__zero_reg__
 427 016c 0E94 0000 		call printf
 428 0170 0F90      		pop __tmp_reg__
 429 0172 0F90      		pop __tmp_reg__
 430 0174 0F90      		pop __tmp_reg__
 431 0176 0F90      		pop __tmp_reg__
 137:main.c        ****   cnt=0;
 433               	.LM26:
 434 0178 10E0      		ldi r17,lo8(0)
 140:main.c        **** 	printf( "Task2 cnt=%d\r\n",cnt );
 436               	.LM27:
 437 017a C0E0      		ldi r28,lo8(.LC5)
 438 017c D0E0      		ldi r29,hi8(.LC5)
 439               	.L6:
 139:main.c        **** 	nrk_led_set(BLUE_LED);
 441               	.LM28:
 442 017e 81E0      		ldi r24,lo8(1)
 443 0180 90E0      		ldi r25,hi8(1)
 444 0182 0E94 0000 		call nrk_led_set
 140:main.c        **** 	printf( "Task2 cnt=%d\r\n",cnt );
 446               	.LM29:
 447 0186 00D0      		rcall .
 448 0188 00D0      		rcall .
 449 018a EDB7      		in r30,__SP_L__
 450 018c FEB7      		in r31,__SP_H__
 451 018e 3196      		adiw r30,1
 452 0190 ADB7      		in r26,__SP_L__
 453 0192 BEB7      		in r27,__SP_H__
 454 0194 1296      		adiw r26,1+1
 455 0196 DC93      		st X,r29
 456 0198 CE93      		st -X,r28
 457 019a 1197      		sbiw r26,1
 458 019c 1283      		std Z+2,r17
 459 019e 1382      		std Z+3,__zero_reg__
 460 01a0 0E94 0000 		call printf
 141:main.c        **** 	cnt++;
 462               	.LM30:
 463 01a4 1F5F      		subi r17,lo8(-(1))
 144:main.c        **** 	nrk_wait_until_next_period();
 465               	.LM31:
 466 01a6 0F90      		pop __tmp_reg__
 467 01a8 0F90      		pop __tmp_reg__
 468 01aa 0F90      		pop __tmp_reg__
 469 01ac 0F90      		pop __tmp_reg__
 470 01ae 0E94 0000 		call nrk_wait_until_next_period
 145:main.c        ****         nrk_led_clr(BLUE_LED);
 472               	.LM32:
 473 01b2 81E0      		ldi r24,lo8(1)
 474 01b4 90E0      		ldi r25,hi8(1)
 475 01b6 0E94 0000 		call nrk_led_clr
 146:main.c        **** 	nrk_wait_until_next_period();
 477               	.LM33:
 478 01ba 0E94 0000 		call nrk_wait_until_next_period
 479 01be 00C0      		rjmp .L6
 484               	.Lscope3:
 486               		.stabd	78,0,0
 487               		.data
 488               	.LC6:
 489 005a 5461 736B 		.string	"Task1 PID=%d\r\n"
 489      3120 5049 
 489      443D 2564 
 489      0D0A 00
 490               	.LC7:
 491 0069 6D6D 635F 		.string	"mmc_init returns %d\n\r"
 491      696E 6974 
 491      2072 6574 
 491      7572 6E73 
 491      2025 640A 
 492               	.LC8:
 493 007f 6361 7264 		.string	"card init failed\r"
 493      2069 6E69 
 493      7420 6661 
 493      696C 6564 
 493      0D00 
 494               	.LC9:
 495 0091 0A73 6563 		.string	"\nsector %ld\n\r"
 495      746F 7220 
 495      256C 640A 
 495      0D00 
 496               	.LC10:
 497 009f 7265 6164 		.string	"readsector returned %d\n"
 497      7365 6374 
 497      6F72 2072 
 497      6574 7572 
 497      6E65 6420 
 498               	.LC11:
 499 00b7 2564 2000 		.string	"%d "
 500               	.LC12:
 501 00bb 0A0D 00   		.string	"\n\r"
 502               	.LC13:
 503 00be 5772 6974 		.string	"Writting\r"
 503      7469 6E67 
 503      0D00 
 504               	.LC14:
 505 00c8 7772 6974 		.string	"writesector returned %d\n"
 505      6573 6563 
 505      746F 7220 
 505      7265 7475 
 505      726E 6564 
 506               	.LC15:
 507 00e1 4166 7465 		.string	"After write:\r"
 507      7220 7772 
 507      6974 653A 
 507      0D00 
 508               		.text
 510               	.global	Task1
 512               	Task1:
 513               		.stabd	46,0,0
  85:main.c        **** {
 515               	.LM34:
 516               	.LFBB4:
 517 01c0 EF92      		push r14
 518 01c2 FF92      		push r15
 519 01c4 0F93      		push r16
 520 01c6 1F93      		push r17
 521 01c8 CF93      		push r28
 522 01ca DF93      		push r29
 523               	/* prologue: function */
 524               	/* frame size = 0 */
 525               	/* stack size = 6 */
 526               	.L__stack_usage = 6
  91:main.c        ****   printf( "Task1 PID=%d\r\n",nrk_get_pid());
 528               	.LM35:
 529 01cc 0E94 0000 		call nrk_get_pid
 530 01d0 00D0      		rcall .
 531 01d2 00D0      		rcall .
 532 01d4 EDB7      		in r30,__SP_L__
 533 01d6 FEB7      		in r31,__SP_H__
 534 01d8 3196      		adiw r30,1
 535 01da 20E0      		ldi r18,lo8(.LC6)
 536 01dc 30E0      		ldi r19,hi8(.LC6)
 537 01de ADB7      		in r26,__SP_L__
 538 01e0 BEB7      		in r27,__SP_H__
 539 01e2 1296      		adiw r26,1+1
 540 01e4 3C93      		st X,r19
 541 01e6 2E93      		st -X,r18
 542 01e8 1197      		sbiw r26,1
 543 01ea 8283      		std Z+2,r24
 544 01ec 1382      		std Z+3,__zero_reg__
 545 01ee 0E94 0000 		call printf
  93:main.c        ****   val=mmc_init();
 547               	.LM36:
 548 01f2 0F90      		pop __tmp_reg__
 549 01f4 0F90      		pop __tmp_reg__
 550 01f6 0F90      		pop __tmp_reg__
 551 01f8 0F90      		pop __tmp_reg__
 552 01fa 0E94 0000 		call mmc_init
 553 01fe 082F      		mov r16,r24
  94:main.c        ****   printf("mmc_init returns %d\n\r", val );
 555               	.LM37:
 556 0200 00D0      		rcall .
 557 0202 00D0      		rcall .
 558 0204 20E0      		ldi r18,lo8(.LC7)
 559 0206 30E0      		ldi r19,hi8(.LC7)
 560 0208 EDB7      		in r30,__SP_L__
 561 020a FEB7      		in r31,__SP_H__
 562 020c 3283      		std Z+2,r19
 563 020e 2183      		std Z+1,r18
 564 0210 282F      		mov r18,r24
 565 0212 3327      		clr r19
 566 0214 27FD      		sbrc r18,7
 567 0216 3095      		com r19
 568 0218 3483      		std Z+4,r19
 569 021a 2383      		std Z+3,r18
 570 021c 0E94 0000 		call printf
  95:main.c        ****   if(val!=0 ) {
 572               	.LM38:
 573 0220 0F90      		pop __tmp_reg__
 574 0222 0F90      		pop __tmp_reg__
 575 0224 0F90      		pop __tmp_reg__
 576 0226 0F90      		pop __tmp_reg__
 577 0228 0023      		tst r16
 578 022a 01F0      		breq .L8
  96:main.c        **** 	printf( "card init failed\r\n" );
 580               	.LM39:
 581 022c 80E0      		ldi r24,lo8(.LC8)
 582 022e 90E0      		ldi r25,hi8(.LC8)
 583 0230 0E94 0000 		call puts
 584               	.L9:
 585 0234 00C0      		rjmp .L9
 586               	.L8:
 100:main.c        **** 	printf("\nsector %ld\n\r",sector);                // show sector number
 588               	.LM40:
 589 0236 00D0      		rcall .
 590 0238 00D0      		rcall .
 591 023a 00D0      		rcall .
 592 023c 80E0      		ldi r24,lo8(.LC9)
 593 023e 90E0      		ldi r25,hi8(.LC9)
 594 0240 ADB7      		in r26,__SP_L__
 595 0242 BEB7      		in r27,__SP_H__
 596 0244 1296      		adiw r26,1+1
 597 0246 9C93      		st X,r25
 598 0248 8E93      		st -X,r24
 599 024a 1197      		sbiw r26,1
 600 024c EDB7      		in r30,__SP_L__
 601 024e FEB7      		in r31,__SP_H__
 602 0250 1382      		std Z+3,__zero_reg__
 603 0252 1482      		std Z+4,__zero_reg__
 604 0254 1582      		std Z+5,__zero_reg__
 605 0256 1682      		std Z+6,__zero_reg__
 606 0258 0E94 0000 		call printf
 101:main.c        ****         val=mmc_readsector(sector,sectorbuffer);    // read a data sector
 608               	.LM41:
 609 025c 8DB7      		in r24,__SP_L__
 610 025e 9EB7      		in r25,__SP_H__
 611 0260 0696      		adiw r24,6
 612 0262 0FB6      		in __tmp_reg__,__SREG__
 613 0264 F894      		cli
 614 0266 9EBF      		out __SP_H__,r25
 615 0268 0FBE      		out __SREG__,__tmp_reg__
 616 026a 8DBF      		out __SP_L__,r24
 617 026c 60E0      		ldi r22,lo8(0)
 618 026e 70E0      		ldi r23,hi8(0)
 619 0270 CB01      		movw r24,r22
 620 0272 40E0      		ldi r20,lo8(sectorbuffer)
 621 0274 50E0      		ldi r21,hi8(sectorbuffer)
 622 0276 0E94 0000 		call mmc_readsector
 102:main.c        ****        	printf( "readsector returned %d\n",val );
 624               	.LM42:
 625 027a 00D0      		rcall .
 626 027c 00D0      		rcall .
 627 027e 20E0      		ldi r18,lo8(.LC10)
 628 0280 30E0      		ldi r19,hi8(.LC10)
 629 0282 ADB7      		in r26,__SP_L__
 630 0284 BEB7      		in r27,__SP_H__
 631 0286 1296      		adiw r26,1+1
 632 0288 3C93      		st X,r19
 633 028a 2E93      		st -X,r18
 634 028c 1197      		sbiw r26,1
 635 028e 9927      		clr r25
 636 0290 87FD      		sbrc r24,7
 637 0292 9095      		com r25
 638 0294 1496      		adiw r26,3+1
 639 0296 9C93      		st X,r25
 640 0298 8E93      		st -X,r24
 641 029a 1397      		sbiw r26,3
 642 029c 0E94 0000 		call printf
 643 02a0 C0E0      		ldi r28,lo8(sectorbuffer)
 644 02a2 D0E0      		ldi r29,hi8(sectorbuffer)
  84:main.c        **** void Task1()
 646               	.LM43:
 647 02a4 0F90      		pop __tmp_reg__
 648 02a6 0F90      		pop __tmp_reg__
 649 02a8 0F90      		pop __tmp_reg__
 650 02aa 0F90      		pop __tmp_reg__
 651 02ac 8E01      		movw r16,r28
 104:main.c        **** 		printf( "%d ",sectorbuffer[cnt] );
 653               	.LM44:
 654 02ae 20E0      		ldi r18,lo8(.LC11)
 655 02b0 E22E      		mov r14,r18
 656 02b2 20E0      		ldi r18,hi8(.LC11)
 657 02b4 F22E      		mov r15,r18
 658               	.L10:
 104:main.c        **** 		printf( "%d ",sectorbuffer[cnt] );
 660               	.LM45:
 661 02b6 F801      		movw r30,r16
 662 02b8 8191      		ld r24,Z+
 663 02ba 8F01      		movw r16,r30
 664 02bc 00D0      		rcall .
 665 02be 00D0      		rcall .
 666 02c0 EDB7      		in r30,__SP_L__
 667 02c2 FEB7      		in r31,__SP_H__
 668 02c4 3196      		adiw r30,1
 669 02c6 ADB7      		in r26,__SP_L__
 670 02c8 BEB7      		in r27,__SP_H__
 671 02ca 1296      		adiw r26,1+1
 672 02cc FC92      		st X,r15
 673 02ce EE92      		st -X,r14
 674 02d0 1197      		sbiw r26,1
 675 02d2 8283      		std Z+2,r24
 676 02d4 1382      		std Z+3,__zero_reg__
 677 02d6 0E94 0000 		call printf
 103:main.c        **** 	for(cnt=0; cnt<32; cnt++ )
 679               	.LM46:
 680 02da 0F90      		pop __tmp_reg__
 681 02dc 0F90      		pop __tmp_reg__
 682 02de 0F90      		pop __tmp_reg__
 683 02e0 0F90      		pop __tmp_reg__
 684 02e2 B0E0      		ldi r27,hi8(sectorbuffer+32)
 685 02e4 0030      		cpi r16,lo8(sectorbuffer+32)
 686 02e6 1B07      		cpc r17,r27
 687 02e8 01F4      		brne .L10
 105:main.c        **** 	printf( "\n\r" ); 
 689               	.LM47:
 690 02ea 00D0      		rcall .
 691 02ec 80E0      		ldi r24,lo8(.LC12)
 692 02ee 90E0      		ldi r25,hi8(.LC12)
 693 02f0 EDB7      		in r30,__SP_L__
 694 02f2 FEB7      		in r31,__SP_H__
 695 02f4 9283      		std Z+2,r25
 696 02f6 8183      		std Z+1,r24
 697 02f8 0E94 0000 		call printf
 107:main.c        **** 	val=sectorbuffer[0];
 699               	.LM48:
 700 02fc 8091 0000 		lds r24,sectorbuffer
 108:main.c        **** 	val++;
 702               	.LM49:
 703 0300 8F5F      		subi r24,lo8(-(1))
  84:main.c        **** void Task1()
 705               	.LM50:
 706 0302 0F90      		pop __tmp_reg__
 707 0304 0F90      		pop __tmp_reg__
 708 0306 F801      		movw r30,r16
 709 0308 B097      		sbiw r30,32
 710               	.L11:
 111:main.c        **** 	sectorbuffer[cnt]=val;
 712               	.LM51:
 713 030a 8193      		st Z+,r24
 109:main.c        **** 	for(cnt=0; cnt<512; cnt++ )
 715               	.LM52:
 716 030c 90E0      		ldi r25,hi8(sectorbuffer+512)
 717 030e E030      		cpi r30,lo8(sectorbuffer+512)
 718 0310 F907      		cpc r31,r25
 719 0312 01F4      		brne .L11
 114:main.c        **** 	printf( "Writting\r\n" );
 721               	.LM53:
 722 0314 80E0      		ldi r24,lo8(.LC13)
 723 0316 90E0      		ldi r25,hi8(.LC13)
 724 0318 0E94 0000 		call puts
 115:main.c        **** 	val=mmc_writesector(sector,sectorbuffer);    // read a data sector
 726               	.LM54:
 727 031c 60E0      		ldi r22,lo8(0)
 728 031e 70E0      		ldi r23,hi8(0)
 729 0320 CB01      		movw r24,r22
 730 0322 40E0      		ldi r20,lo8(sectorbuffer)
 731 0324 50E0      		ldi r21,hi8(sectorbuffer)
 732 0326 0E94 0000 		call mmc_writesector
 116:main.c        ****        	printf( "writesector returned %d\n",val );
 734               	.LM55:
 735 032a 00D0      		rcall .
 736 032c 00D0      		rcall .
 737 032e 20E0      		ldi r18,lo8(.LC14)
 738 0330 30E0      		ldi r19,hi8(.LC14)
 739 0332 ADB7      		in r26,__SP_L__
 740 0334 BEB7      		in r27,__SP_H__
 741 0336 1296      		adiw r26,1+1
 742 0338 3C93      		st X,r19
 743 033a 2E93      		st -X,r18
 744 033c 1197      		sbiw r26,1
 745 033e 9927      		clr r25
 746 0340 87FD      		sbrc r24,7
 747 0342 9095      		com r25
 748 0344 1496      		adiw r26,3+1
 749 0346 9C93      		st X,r25
 750 0348 8E93      		st -X,r24
 751 034a 1397      		sbiw r26,3
 752 034c 0E94 0000 		call printf
 117:main.c        **** 	printf( "After write:\r\n" );
 754               	.LM56:
 755 0350 0F90      		pop __tmp_reg__
 756 0352 0F90      		pop __tmp_reg__
 757 0354 0F90      		pop __tmp_reg__
 758 0356 0F90      		pop __tmp_reg__
 759 0358 80E0      		ldi r24,lo8(.LC15)
 760 035a 90E0      		ldi r25,hi8(.LC15)
 761 035c 0E94 0000 		call puts
 118:main.c        **** 	val=mmc_readsector(sector,sectorbuffer);    // read a data sector
 763               	.LM57:
 764 0360 60E0      		ldi r22,lo8(0)
 765 0362 70E0      		ldi r23,hi8(0)
 766 0364 CB01      		movw r24,r22
 767 0366 40E0      		ldi r20,lo8(sectorbuffer)
 768 0368 50E0      		ldi r21,hi8(sectorbuffer)
 769 036a 0E94 0000 		call mmc_readsector
 770 036e 082F      		mov r16,r24
 119:main.c        ****        	printf( "readsector returned %d\n",val );
 772               	.LM58:
 773 0370 00D0      		rcall .
 774 0372 00D0      		rcall .
 775 0374 20E0      		ldi r18,lo8(.LC10)
 776 0376 30E0      		ldi r19,hi8(.LC10)
 777 0378 EDB7      		in r30,__SP_L__
 778 037a FEB7      		in r31,__SP_H__
 779 037c 3283      		std Z+2,r19
 780 037e 2183      		std Z+1,r18
 781 0380 282F      		mov r18,r24
 782 0382 3327      		clr r19
 783 0384 27FD      		sbrc r18,7
 784 0386 3095      		com r19
 785 0388 3483      		std Z+4,r19
 786 038a 2383      		std Z+3,r18
 787 038c 0E94 0000 		call printf
 120:main.c        ****        	if(val==0)
 789               	.LM59:
 790 0390 0F90      		pop __tmp_reg__
 791 0392 0F90      		pop __tmp_reg__
 792 0394 0F90      		pop __tmp_reg__
 793 0396 0F90      		pop __tmp_reg__
 794 0398 0023      		tst r16
 795 039a 01F4      		brne .L19
 123:main.c        **** 		printf( "%d ",sectorbuffer[cnt] );
 797               	.LM60:
 798 039c 00E0      		ldi r16,lo8(.LC11)
 799 039e 10E0      		ldi r17,hi8(.LC11)
 800               	.L15:
 801 03a0 8991      		ld r24,Y+
 802 03a2 00D0      		rcall .
 803 03a4 00D0      		rcall .
 804 03a6 EDB7      		in r30,__SP_L__
 805 03a8 FEB7      		in r31,__SP_H__
 806 03aa 3196      		adiw r30,1
 807 03ac ADB7      		in r26,__SP_L__
 808 03ae BEB7      		in r27,__SP_H__
 809 03b0 1296      		adiw r26,1+1
 810 03b2 1C93      		st X,r17
 811 03b4 0E93      		st -X,r16
 812 03b6 1197      		sbiw r26,1
 813 03b8 8283      		std Z+2,r24
 814 03ba 1382      		std Z+3,__zero_reg__
 815 03bc 0E94 0000 		call printf
 122:main.c        **** 	 for(cnt=0; cnt<32; cnt++ )
 817               	.LM61:
 818 03c0 0F90      		pop __tmp_reg__
 819 03c2 0F90      		pop __tmp_reg__
 820 03c4 0F90      		pop __tmp_reg__
 821 03c6 0F90      		pop __tmp_reg__
 822 03c8 B0E0      		ldi r27,hi8(sectorbuffer+32)
 823 03ca C030      		cpi r28,lo8(sectorbuffer+32)
 824 03cc DB07      		cpc r29,r27
 825 03ce 01F4      		brne .L15
 124:main.c        **** 	printf( "\n\r" ); 
 827               	.LM62:
 828 03d0 00D0      		rcall .
 829 03d2 80E0      		ldi r24,lo8(.LC12)
 830 03d4 90E0      		ldi r25,hi8(.LC12)
 831 03d6 EDB7      		in r30,__SP_L__
 832 03d8 FEB7      		in r31,__SP_H__
 833 03da 9283      		std Z+2,r25
 834 03dc 8183      		std Z+1,r24
 835 03de 0E94 0000 		call printf
 836 03e2 0F90      		pop __tmp_reg__
 837 03e4 0F90      		pop __tmp_reg__
 838               	.L19:
 129:main.c        **** 	nrk_wait_until_next_period();
 840               	.LM63:
 841 03e6 0E94 0000 		call nrk_wait_until_next_period
 842 03ea 00C0      		rjmp .L19
 844               	.Lscope4:
 846               		.stabd	78,0,0
 848               	.global	nrk_create_taskset
 850               	nrk_create_taskset:
 851               		.stabd	46,0,0
 187:main.c        **** 	}
 188:main.c        **** }
 189:main.c        **** 
 190:main.c        **** 
 191:main.c        **** 
 192:main.c        **** 
 193:main.c        **** 
 194:main.c        **** void
 195:main.c        **** nrk_create_taskset()
 196:main.c        **** {
 853               	.LM64:
 854               	.LFBB5:
 855 03ec CF92      		push r12
 856 03ee DF92      		push r13
 857 03f0 EF92      		push r14
 858 03f2 FF92      		push r15
 859 03f4 1F93      		push r17
 860 03f6 CF93      		push r28
 861 03f8 DF93      		push r29
 862               	/* prologue: function */
 863               	/* frame size = 0 */
 864               	/* stack size = 7 */
 865               	.L__stack_usage = 7
 197:main.c        **** 
 198:main.c        **** 
 199:main.c        ****   nrk_task_set_entry_function( &TaskOne, Task1);
 867               	.LM65:
 868 03fa C0E0      		ldi r28,lo8(TaskOne)
 869 03fc D0E0      		ldi r29,hi8(TaskOne)
 870 03fe CE01      		movw r24,r28
 871 0400 60E0      		ldi r22,lo8(gs(Task1))
 872 0402 70E0      		ldi r23,hi8(gs(Task1))
 873 0404 0E94 0000 		call nrk_task_set_entry_function
 200:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 875               	.LM66:
 876 0408 CE01      		movw r24,r28
 877 040a 60E0      		ldi r22,lo8(Stack1)
 878 040c 70E0      		ldi r23,hi8(Stack1)
 879 040e 40E0      		ldi r20,lo8(256)
 880 0410 51E0      		ldi r21,hi8(256)
 881 0412 0E94 0000 		call nrk_task_set_stk
 201:main.c        ****   TaskOne.prio = 1;
 883               	.LM67:
 884 0416 11E0      		ldi r17,lo8(1)
 885 0418 1093 0000 		sts TaskOne+8,r17
 202:main.c        ****   TaskOne.FirstActivation = TRUE;
 887               	.LM68:
 888 041c 1093 0000 		sts TaskOne+7,r17
 203:main.c        ****   TaskOne.Type = BASIC_TASK;
 890               	.LM69:
 891 0420 1093 0000 		sts TaskOne+9,r17
 204:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 893               	.LM70:
 894 0424 1093 0000 		sts TaskOne+10,r17
 205:main.c        ****   TaskOne.period.secs = 10;
 896               	.LM71:
 897 0428 8AE0      		ldi r24,lo8(10)
 898 042a 90E0      		ldi r25,hi8(10)
 899 042c A0E0      		ldi r26,hlo8(10)
 900 042e B0E0      		ldi r27,hhi8(10)
 901 0430 8093 0000 		sts TaskOne+11,r24
 902 0434 9093 0000 		sts TaskOne+11+1,r25
 903 0438 A093 0000 		sts TaskOne+11+2,r26
 904 043c B093 0000 		sts TaskOne+11+3,r27
 206:main.c        ****   TaskOne.period.nano_secs = 0;
 906               	.LM72:
 907 0440 1092 0000 		sts TaskOne+15,__zero_reg__
 908 0444 1092 0000 		sts TaskOne+15+1,__zero_reg__
 909 0448 1092 0000 		sts TaskOne+15+2,__zero_reg__
 910 044c 1092 0000 		sts TaskOne+15+3,__zero_reg__
 207:main.c        ****   TaskOne.cpu_reserve.secs = 10;
 912               	.LM73:
 913 0450 8093 0000 		sts TaskOne+19,r24
 914 0454 9093 0000 		sts TaskOne+19+1,r25
 915 0458 A093 0000 		sts TaskOne+19+2,r26
 916 045c B093 0000 		sts TaskOne+19+3,r27
 208:main.c        ****   TaskOne.cpu_reserve.nano_secs =  0;
 918               	.LM74:
 919 0460 1092 0000 		sts TaskOne+23,__zero_reg__
 920 0464 1092 0000 		sts TaskOne+23+1,__zero_reg__
 921 0468 1092 0000 		sts TaskOne+23+2,__zero_reg__
 922 046c 1092 0000 		sts TaskOne+23+3,__zero_reg__
 209:main.c        ****   TaskOne.offset.secs = 0;
 924               	.LM75:
 925 0470 1092 0000 		sts TaskOne+27,__zero_reg__
 926 0474 1092 0000 		sts TaskOne+27+1,__zero_reg__
 927 0478 1092 0000 		sts TaskOne+27+2,__zero_reg__
 928 047c 1092 0000 		sts TaskOne+27+3,__zero_reg__
 210:main.c        ****   TaskOne.offset.nano_secs= 0;
 930               	.LM76:
 931 0480 1092 0000 		sts TaskOne+31,__zero_reg__
 932 0484 1092 0000 		sts TaskOne+31+1,__zero_reg__
 933 0488 1092 0000 		sts TaskOne+31+2,__zero_reg__
 934 048c 1092 0000 		sts TaskOne+31+3,__zero_reg__
 211:main.c        ****   nrk_activate_task (&TaskOne);
 936               	.LM77:
 937 0490 CE01      		movw r24,r28
 938 0492 0E94 0000 		call nrk_activate_task
 212:main.c        **** 
 213:main.c        ****   nrk_task_set_entry_function( &TaskTwo, Task2);
 940               	.LM78:
 941 0496 C0E0      		ldi r28,lo8(TaskTwo)
 942 0498 D0E0      		ldi r29,hi8(TaskTwo)
 943 049a CE01      		movw r24,r28
 944 049c 60E0      		ldi r22,lo8(gs(Task2))
 945 049e 70E0      		ldi r23,hi8(gs(Task2))
 946 04a0 0E94 0000 		call nrk_task_set_entry_function
 214:main.c        ****   nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
 948               	.LM79:
 949 04a4 CE01      		movw r24,r28
 950 04a6 60E0      		ldi r22,lo8(Stack2)
 951 04a8 70E0      		ldi r23,hi8(Stack2)
 952 04aa 40E0      		ldi r20,lo8(256)
 953 04ac 51E0      		ldi r21,hi8(256)
 954 04ae 0E94 0000 		call nrk_task_set_stk
 215:main.c        ****   TaskTwo.prio = 2;
 956               	.LM80:
 957 04b2 82E0      		ldi r24,lo8(2)
 958 04b4 8093 0000 		sts TaskTwo+8,r24
 216:main.c        ****   TaskTwo.FirstActivation = TRUE;
 960               	.LM81:
 961 04b8 1093 0000 		sts TaskTwo+7,r17
 217:main.c        ****   TaskTwo.Type = BASIC_TASK;
 963               	.LM82:
 964 04bc 1093 0000 		sts TaskTwo+9,r17
 218:main.c        ****   TaskTwo.SchType = PREEMPTIVE;
 966               	.LM83:
 967 04c0 1093 0000 		sts TaskTwo+10,r17
 219:main.c        ****   TaskTwo.period.secs = 0;
 969               	.LM84:
 970 04c4 1092 0000 		sts TaskTwo+11,__zero_reg__
 971 04c8 1092 0000 		sts TaskTwo+11+1,__zero_reg__
 972 04cc 1092 0000 		sts TaskTwo+11+2,__zero_reg__
 973 04d0 1092 0000 		sts TaskTwo+11+3,__zero_reg__
 220:main.c        ****   TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
 975               	.LM85:
 976 04d4 80E0      		ldi r24,lo8(500000000)
 977 04d6 95E6      		ldi r25,hi8(500000000)
 978 04d8 ADEC      		ldi r26,hlo8(500000000)
 979 04da BDE1      		ldi r27,hhi8(500000000)
 980 04dc 8093 0000 		sts TaskTwo+15,r24
 981 04e0 9093 0000 		sts TaskTwo+15+1,r25
 982 04e4 A093 0000 		sts TaskTwo+15+2,r26
 983 04e8 B093 0000 		sts TaskTwo+15+3,r27
 221:main.c        ****   TaskTwo.cpu_reserve.secs = 0;
 985               	.LM86:
 986 04ec 1092 0000 		sts TaskTwo+19,__zero_reg__
 987 04f0 1092 0000 		sts TaskTwo+19+1,__zero_reg__
 988 04f4 1092 0000 		sts TaskTwo+19+2,__zero_reg__
 989 04f8 1092 0000 		sts TaskTwo+19+3,__zero_reg__
 222:main.c        ****   TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 991               	.LM87:
 992 04fc C12C      		mov r12,__zero_reg__
 993 04fe 31EE      		ldi r19,hi8(100000000)
 994 0500 D32E      		mov r13,r19
 995 0502 35EF      		ldi r19,hlo8(100000000)
 996 0504 E32E      		mov r14,r19
 997 0506 35E0      		ldi r19,hhi8(100000000)
 998 0508 F32E      		mov r15,r19
 999 050a C092 0000 		sts TaskTwo+23,r12
 1000 050e D092 0000 		sts TaskTwo+23+1,r13
 1001 0512 E092 0000 		sts TaskTwo+23+2,r14
 1002 0516 F092 0000 		sts TaskTwo+23+3,r15
 223:main.c        ****   TaskTwo.offset.secs = 0;
 1004               	.LM88:
 1005 051a 1092 0000 		sts TaskTwo+27,__zero_reg__
 1006 051e 1092 0000 		sts TaskTwo+27+1,__zero_reg__
 1007 0522 1092 0000 		sts TaskTwo+27+2,__zero_reg__
 1008 0526 1092 0000 		sts TaskTwo+27+3,__zero_reg__
 224:main.c        ****   TaskTwo.offset.nano_secs= 0;
 1010               	.LM89:
 1011 052a 1092 0000 		sts TaskTwo+31,__zero_reg__
 1012 052e 1092 0000 		sts TaskTwo+31+1,__zero_reg__
 1013 0532 1092 0000 		sts TaskTwo+31+2,__zero_reg__
 1014 0536 1092 0000 		sts TaskTwo+31+3,__zero_reg__
 225:main.c        ****   nrk_activate_task (&TaskTwo);
 1016               	.LM90:
 1017 053a CE01      		movw r24,r28
 1018 053c 0E94 0000 		call nrk_activate_task
 226:main.c        **** 
 227:main.c        **** 
 228:main.c        ****   nrk_task_set_entry_function( &TaskThree, Task3);
 1020               	.LM91:
 1021 0540 C0E0      		ldi r28,lo8(TaskThree)
 1022 0542 D0E0      		ldi r29,hi8(TaskThree)
 1023 0544 CE01      		movw r24,r28
 1024 0546 60E0      		ldi r22,lo8(gs(Task3))
 1025 0548 70E0      		ldi r23,hi8(gs(Task3))
 1026 054a 0E94 0000 		call nrk_task_set_entry_function
 229:main.c        ****   nrk_task_set_stk( &TaskThree, Stack3, NRK_APP_STACKSIZE);
 1028               	.LM92:
 1029 054e CE01      		movw r24,r28
 1030 0550 60E0      		ldi r22,lo8(Stack3)
 1031 0552 70E0      		ldi r23,hi8(Stack3)
 1032 0554 40E0      		ldi r20,lo8(256)
 1033 0556 51E0      		ldi r21,hi8(256)
 1034 0558 0E94 0000 		call nrk_task_set_stk
 230:main.c        ****   TaskThree.prio = 3;
 1036               	.LM93:
 1037 055c 83E0      		ldi r24,lo8(3)
 1038 055e 8093 0000 		sts TaskThree+8,r24
 231:main.c        ****   TaskThree.FirstActivation = TRUE;
 1040               	.LM94:
 1041 0562 1093 0000 		sts TaskThree+7,r17
 232:main.c        ****   TaskThree.Type = BASIC_TASK;
 1043               	.LM95:
 1044 0566 1093 0000 		sts TaskThree+9,r17
 233:main.c        ****   TaskThree.SchType = PREEMPTIVE;
 1046               	.LM96:
 1047 056a 1093 0000 		sts TaskThree+10,r17
 234:main.c        ****   TaskThree.period.secs = 0;
 1049               	.LM97:
 1050 056e 1092 0000 		sts TaskThree+11,__zero_reg__
 1051 0572 1092 0000 		sts TaskThree+11+1,__zero_reg__
 1052 0576 1092 0000 		sts TaskThree+11+2,__zero_reg__
 1053 057a 1092 0000 		sts TaskThree+11+3,__zero_reg__
 235:main.c        ****   TaskThree.period.nano_secs = 750*NANOS_PER_MS;
 1055               	.LM98:
 1056 057e 80E8      		ldi r24,lo8(750000000)
 1057 0580 97E1      		ldi r25,hi8(750000000)
 1058 0582 A4EB      		ldi r26,hlo8(750000000)
 1059 0584 BCE2      		ldi r27,hhi8(750000000)
 1060 0586 8093 0000 		sts TaskThree+15,r24
 1061 058a 9093 0000 		sts TaskThree+15+1,r25
 1062 058e A093 0000 		sts TaskThree+15+2,r26
 1063 0592 B093 0000 		sts TaskThree+15+3,r27
 236:main.c        ****   TaskThree.cpu_reserve.secs = 0;
 1065               	.LM99:
 1066 0596 1092 0000 		sts TaskThree+19,__zero_reg__
 1067 059a 1092 0000 		sts TaskThree+19+1,__zero_reg__
 1068 059e 1092 0000 		sts TaskThree+19+2,__zero_reg__
 1069 05a2 1092 0000 		sts TaskThree+19+3,__zero_reg__
 237:main.c        ****   TaskThree.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 1071               	.LM100:
 1072 05a6 C092 0000 		sts TaskThree+23,r12
 1073 05aa D092 0000 		sts TaskThree+23+1,r13
 1074 05ae E092 0000 		sts TaskThree+23+2,r14
 1075 05b2 F092 0000 		sts TaskThree+23+3,r15
 238:main.c        ****   TaskThree.offset.secs = 0;
 1077               	.LM101:
 1078 05b6 1092 0000 		sts TaskThree+27,__zero_reg__
 1079 05ba 1092 0000 		sts TaskThree+27+1,__zero_reg__
 1080 05be 1092 0000 		sts TaskThree+27+2,__zero_reg__
 1081 05c2 1092 0000 		sts TaskThree+27+3,__zero_reg__
 239:main.c        ****   TaskThree.offset.nano_secs= 0;
 1083               	.LM102:
 1084 05c6 1092 0000 		sts TaskThree+31,__zero_reg__
 1085 05ca 1092 0000 		sts TaskThree+31+1,__zero_reg__
 1086 05ce 1092 0000 		sts TaskThree+31+2,__zero_reg__
 1087 05d2 1092 0000 		sts TaskThree+31+3,__zero_reg__
 240:main.c        ****   nrk_activate_task (&TaskThree);
 1089               	.LM103:
 1090 05d6 CE01      		movw r24,r28
 1091 05d8 0E94 0000 		call nrk_activate_task
 241:main.c        **** 
 242:main.c        **** 
 243:main.c        ****   nrk_task_set_entry_function( &TaskFour, Task4);
 1093               	.LM104:
 1094 05dc C0E0      		ldi r28,lo8(TaskFour)
 1095 05de D0E0      		ldi r29,hi8(TaskFour)
 1096 05e0 CE01      		movw r24,r28
 1097 05e2 60E0      		ldi r22,lo8(gs(Task4))
 1098 05e4 70E0      		ldi r23,hi8(gs(Task4))
 1099 05e6 0E94 0000 		call nrk_task_set_entry_function
 244:main.c        ****   nrk_task_set_stk( &TaskFour, Stack4, NRK_APP_STACKSIZE);
 1101               	.LM105:
 1102 05ea CE01      		movw r24,r28
 1103 05ec 60E0      		ldi r22,lo8(Stack4)
 1104 05ee 70E0      		ldi r23,hi8(Stack4)
 1105 05f0 40E0      		ldi r20,lo8(256)
 1106 05f2 51E0      		ldi r21,hi8(256)
 1107 05f4 0E94 0000 		call nrk_task_set_stk
 245:main.c        ****   TaskFour.prio = 4;
 1109               	.LM106:
 1110 05f8 84E0      		ldi r24,lo8(4)
 1111 05fa 8093 0000 		sts TaskFour+8,r24
 246:main.c        ****   TaskFour.FirstActivation = TRUE;
 1113               	.LM107:
 1114 05fe 1093 0000 		sts TaskFour+7,r17
 247:main.c        ****   TaskFour.Type = BASIC_TASK;
 1116               	.LM108:
 1117 0602 1093 0000 		sts TaskFour+9,r17
 248:main.c        ****   TaskFour.SchType = PREEMPTIVE;
 1119               	.LM109:
 1120 0606 1093 0000 		sts TaskFour+10,r17
 249:main.c        ****   TaskFour.period.secs = 1;
 1122               	.LM110:
 1123 060a 81E0      		ldi r24,lo8(1)
 1124 060c 90E0      		ldi r25,hi8(1)
 1125 060e A0E0      		ldi r26,hlo8(1)
 1126 0610 B0E0      		ldi r27,hhi8(1)
 1127 0612 8093 0000 		sts TaskFour+11,r24
 1128 0616 9093 0000 		sts TaskFour+11+1,r25
 1129 061a A093 0000 		sts TaskFour+11+2,r26
 1130 061e B093 0000 		sts TaskFour+11+3,r27
 250:main.c        ****   TaskFour.period.nano_secs = 0;
 1132               	.LM111:
 1133 0622 1092 0000 		sts TaskFour+15,__zero_reg__
 1134 0626 1092 0000 		sts TaskFour+15+1,__zero_reg__
 1135 062a 1092 0000 		sts TaskFour+15+2,__zero_reg__
 1136 062e 1092 0000 		sts TaskFour+15+3,__zero_reg__
 251:main.c        ****   TaskFour.cpu_reserve.secs = 0;
 1138               	.LM112:
 1139 0632 1092 0000 		sts TaskFour+19,__zero_reg__
 1140 0636 1092 0000 		sts TaskFour+19+1,__zero_reg__
 1141 063a 1092 0000 		sts TaskFour+19+2,__zero_reg__
 1142 063e 1092 0000 		sts TaskFour+19+3,__zero_reg__
 252:main.c        ****   TaskFour.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 1144               	.LM113:
 1145 0642 C092 0000 		sts TaskFour+23,r12
 1146 0646 D092 0000 		sts TaskFour+23+1,r13
 1147 064a E092 0000 		sts TaskFour+23+2,r14
 1148 064e F092 0000 		sts TaskFour+23+3,r15
 253:main.c        ****   TaskFour.offset.secs = 0;
 1150               	.LM114:
 1151 0652 1092 0000 		sts TaskFour+27,__zero_reg__
 1152 0656 1092 0000 		sts TaskFour+27+1,__zero_reg__
 1153 065a 1092 0000 		sts TaskFour+27+2,__zero_reg__
 1154 065e 1092 0000 		sts TaskFour+27+3,__zero_reg__
 254:main.c        ****   TaskFour.offset.nano_secs= 0;
 1156               	.LM115:
 1157 0662 1092 0000 		sts TaskFour+31,__zero_reg__
 1158 0666 1092 0000 		sts TaskFour+31+1,__zero_reg__
 1159 066a 1092 0000 		sts TaskFour+31+2,__zero_reg__
 1160 066e 1092 0000 		sts TaskFour+31+3,__zero_reg__
 255:main.c        ****   nrk_activate_task (&TaskFour);
 1162               	.LM116:
 1163 0672 CE01      		movw r24,r28
 1164 0674 0E94 0000 		call nrk_activate_task
 1165               	/* epilogue start */
 256:main.c        **** 
 257:main.c        **** 
 258:main.c        **** 
 259:main.c        ****   //printf ("Create done\r\n");
 260:main.c        **** }
 1167               	.LM117:
 1168 0678 DF91      		pop r29
 1169 067a CF91      		pop r28
 1170 067c 1F91      		pop r17
 1171 067e FF90      		pop r15
 1172 0680 EF90      		pop r14
 1173 0682 DF90      		pop r13
 1174 0684 CF90      		pop r12
 1175 0686 0895      		ret
 1177               	.Lscope5:
 1179               		.stabd	78,0,0
 1180               		.data
 1181               	.LC16:
 1182 00ef 5374 6172 		.string	"Starting up...\r"
 1182      7469 6E67 
 1182      2075 702E 
 1182      2E2E 0D00 
 1183               		.text
 1185               	.global	main
 1187               	main:
 1188               		.stabd	46,0,0
  62:main.c        **** {
 1190               	.LM118:
 1191               	.LFBB6:
 1192               	/* prologue: function */
 1193               	/* frame size = 0 */
 1194               	/* stack size = 0 */
 1195               	.L__stack_usage = 0
  64:main.c        ****   nrk_setup_ports();
 1197               	.LM119:
 1198 0688 0E94 0000 		call nrk_setup_ports
  65:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 1200               	.LM120:
 1201 068c 87E0      		ldi r24,lo8(7)
 1202 068e 90E0      		ldi r25,hi8(7)
 1203 0690 0E94 0000 		call nrk_setup_uart
  67:main.c        ****   printf( "Starting up...\r\n" );
 1205               	.LM121:
 1206 0694 80E0      		ldi r24,lo8(.LC16)
 1207 0696 90E0      		ldi r25,hi8(.LC16)
 1208 0698 0E94 0000 		call puts
  69:main.c        ****   nrk_init();
 1210               	.LM122:
 1211 069c 0E94 0000 		call nrk_init
  71:main.c        ****   nrk_led_clr(0);
 1213               	.LM123:
 1214 06a0 80E0      		ldi r24,lo8(0)
 1215 06a2 90E0      		ldi r25,hi8(0)
 1216 06a4 0E94 0000 		call nrk_led_clr
  72:main.c        ****   nrk_led_clr(1);
 1218               	.LM124:
 1219 06a8 81E0      		ldi r24,lo8(1)
 1220 06aa 90E0      		ldi r25,hi8(1)
 1221 06ac 0E94 0000 		call nrk_led_clr
  73:main.c        ****   nrk_led_clr(2);
 1223               	.LM125:
 1224 06b0 82E0      		ldi r24,lo8(2)
 1225 06b2 90E0      		ldi r25,hi8(2)
 1226 06b4 0E94 0000 		call nrk_led_clr
  74:main.c        ****   nrk_led_clr(3);
 1228               	.LM126:
 1229 06b8 83E0      		ldi r24,lo8(3)
 1230 06ba 90E0      		ldi r25,hi8(3)
 1231 06bc 0E94 0000 		call nrk_led_clr
  76:main.c        ****   nrk_time_set(0,0);
 1233               	.LM127:
 1234 06c0 60E0      		ldi r22,lo8(0)
 1235 06c2 70E0      		ldi r23,hi8(0)
 1236 06c4 CB01      		movw r24,r22
 1237 06c6 20E0      		ldi r18,lo8(0)
 1238 06c8 30E0      		ldi r19,hi8(0)
 1239 06ca A901      		movw r20,r18
 1240 06cc 0E94 0000 		call nrk_time_set
  77:main.c        ****   nrk_create_taskset ();
 1242               	.LM128:
 1243 06d0 0E94 0000 		call nrk_create_taskset
  78:main.c        ****   nrk_start();
 1245               	.LM129:
 1246 06d4 0E94 0000 		call nrk_start
  81:main.c        **** }
 1248               	.LM130:
 1249 06d8 80E0      		ldi r24,lo8(0)
 1250 06da 90E0      		ldi r25,hi8(0)
 1251               	/* epilogue start */
 1252 06dc 0895      		ret
 1254               	.Lscope6:
 1256               		.stabd	78,0,0
 1257               		.data
 1258               	.LC17:
 1259 00ff 4469 6520 		.string	"Die Stack %d\r\n"
 1259      5374 6163 
 1259      6B20 2564 
 1259      0D0A 00
 1260               		.text
 1263               	.global	kill_stack
 1265               	kill_stack:
 1266               		.stabd	46,0,0
 261:main.c        **** 
 262:main.c        **** 
 263:main.c        **** uint8_t kill_stack(uint8_t val)
 264:main.c        **** {
 1268               	.LM131:
 1269               	.LFBB7:
 1270 06de BF92      		push r11
 1271 06e0 CF92      		push r12
 1272 06e2 DF92      		push r13
 1273 06e4 EF92      		push r14
 1274 06e6 FF92      		push r15
 1275 06e8 0F93      		push r16
 1276 06ea 1F93      		push r17
 1277 06ec DF93      		push r29
 1278 06ee CF93      		push r28
 1279 06f0 CDB7      		in r28,__SP_L__
 1280 06f2 DEB7      		in r29,__SP_H__
 1281 06f4 2A97      		sbiw r28,10
 1282 06f6 0FB6      		in __tmp_reg__,__SREG__
 1283 06f8 F894      		cli
 1284 06fa DEBF      		out __SP_H__,r29
 1285 06fc 0FBE      		out __SREG__,__tmp_reg__
 1286 06fe CDBF      		out __SP_L__,r28
 1287               	/* prologue: function */
 1288               	/* frame size = 10 */
 1289               	/* stack size = 19 */
 1290               	.L__stack_usage = 19
 1291 0700 B82E      		mov r11,r24
 265:main.c        **** char bad_memory[10];
 266:main.c        **** uint8_t i;
 267:main.c        **** for(i=0; i<10; i++ ) bad_memory[i]=i;
 1293               	.LM132:
 1294 0702 8E01      		movw r16,r28
 1295 0704 0F5F      		subi r16,lo8(-(1))
 1296 0706 1F4F      		sbci r17,hi8(-(1))
 264:main.c        **** {
 1298               	.LM133:
 1299 0708 F801      		movw r30,r16
 1301               	.LM134:
 1302 070a 80E0      		ldi r24,lo8(0)
 1303               	.L23:
 1305               	.LM135:
 1306 070c 8193      		st Z+,r24
 1307 070e 8F5F      		subi r24,lo8(-(1))
 1308 0710 8A30      		cpi r24,lo8(10)
 1309 0712 01F4      		brne .L23
 263:main.c        **** uint8_t kill_stack(uint8_t val)
 1311               	.LM136:
 1312 0714 5BE0      		ldi r21,lo8(11)
 1313 0716 E52E      		mov r14,r21
 1314 0718 F12C      		mov r15,__zero_reg__
 1315 071a EC0E      		add r14,r28
 1316 071c FD1E      		adc r15,r29
 268:main.c        **** for(i=0; i<10; i++ ) printf( "%d ", bad_memory[i]);
 1318               	.LM137:
 1319 071e 40E0      		ldi r20,lo8(.LC11)
 1320 0720 C42E      		mov r12,r20
 1321 0722 40E0      		ldi r20,hi8(.LC11)
 1322 0724 D42E      		mov r13,r20
 1323               	.L24:
 1325               	.LM138:
 1326 0726 D801      		movw r26,r16
 1327 0728 8D91      		ld r24,X+
 1328 072a 8D01      		movw r16,r26
 1329 072c 00D0      		rcall .
 1330 072e 00D0      		rcall .
 1331 0730 EDB7      		in r30,__SP_L__
 1332 0732 FEB7      		in r31,__SP_H__
 1333 0734 3196      		adiw r30,1
 1334 0736 ADB7      		in r26,__SP_L__
 1335 0738 BEB7      		in r27,__SP_H__
 1336 073a 1296      		adiw r26,1+1
 1337 073c DC92      		st X,r13
 1338 073e CE92      		st -X,r12
 1339 0740 1197      		sbiw r26,1
 1340 0742 8283      		std Z+2,r24
 1341 0744 1382      		std Z+3,__zero_reg__
 1342 0746 0E94 0000 		call printf
 1343 074a 0F90      		pop __tmp_reg__
 1344 074c 0F90      		pop __tmp_reg__
 1345 074e 0F90      		pop __tmp_reg__
 1346 0750 0F90      		pop __tmp_reg__
 1347 0752 0E15      		cp r16,r14
 1348 0754 1F05      		cpc r17,r15
 1349 0756 01F4      		brne .L24
 269:main.c        ****    printf( "Die Stack %d\r\n",val );
 1351               	.LM139:
 1352 0758 00D0      		rcall .
 1353 075a 00D0      		rcall .
 1354 075c EDB7      		in r30,__SP_L__
 1355 075e FEB7      		in r31,__SP_H__
 1356 0760 3196      		adiw r30,1
 1357 0762 20E0      		ldi r18,lo8(.LC17)
 1358 0764 30E0      		ldi r19,hi8(.LC17)
 1359 0766 ADB7      		in r26,__SP_L__
 1360 0768 BEB7      		in r27,__SP_H__
 1361 076a 1296      		adiw r26,1+1
 1362 076c 3C93      		st X,r19
 1363 076e 2E93      		st -X,r18
 1364 0770 1197      		sbiw r26,1
 1365 0772 B282      		std Z+2,r11
 1366 0774 1382      		std Z+3,__zero_reg__
 1367 0776 0E94 0000 		call printf
 270:main.c        **** if(val>1) kill_stack(val-1);
 1369               	.LM140:
 1370 077a 0F90      		pop __tmp_reg__
 1371 077c 0F90      		pop __tmp_reg__
 1372 077e 0F90      		pop __tmp_reg__
 1373 0780 0F90      		pop __tmp_reg__
 1374 0782 BB2D      		mov r27,r11
 1375 0784 B230      		cpi r27,lo8(2)
 1376 0786 00F0      		brlo .L25
 1378               	.LM141:
 1379 0788 8B2D      		mov r24,r11
 1380 078a 8150      		subi r24,lo8(-(-1))
 1381 078c 0E94 0000 		call kill_stack
 1382               	.L25:
 271:main.c        **** return 0;
 272:main.c        **** }
 1384               	.LM142:
 1385 0790 80E0      		ldi r24,lo8(0)
 1386               	/* epilogue start */
 1387 0792 2A96      		adiw r28,10
 1388 0794 0FB6      		in __tmp_reg__,__SREG__
 1389 0796 F894      		cli
 1390 0798 DEBF      		out __SP_H__,r29
 1391 079a 0FBE      		out __SREG__,__tmp_reg__
 1392 079c CDBF      		out __SP_L__,r28
 1393 079e CF91      		pop r28
 1394 07a0 DF91      		pop r29
 1395 07a2 1F91      		pop r17
 1396 07a4 0F91      		pop r16
 1397 07a6 FF90      		pop r15
 1398 07a8 EF90      		pop r14
 1399 07aa DF90      		pop r13
 1400 07ac CF90      		pop r12
 1401 07ae BF90      		pop r11
 1402 07b0 0895      		ret
 1408               	.Lscope7:
 1410               		.stabd	78,0,0
 1411               		.comm _nrk_signal_list,4,1
 1412               		.comm nrk_idle_task_stk,128,1
 1413               		.comm nrk_kernel_stk_ptr,2,1
 1414               		.comm error_task,1,1
 1415               		.comm error_num,1,1
 1416               		.comm _nrk_prev_timer_val,1,1
 1417               		.comm _nrk_time_trigger,1,1
 1418               		.comm app_timer0_callback,2,1
 1419               		.comm app_timer0_prescale,1,1
 1420               		.comm Stack1,256,1
 1421               		.comm TaskOne,35,1
 1422               		.comm Stack2,256,1
 1423               		.comm TaskTwo,35,1
 1424               		.comm Stack3,256,1
 1425               		.comm TaskThree,35,1
 1426               		.comm Stack4,256,1
 1427               		.comm TaskFour,35,1
 1428               		.comm sectorbuffer,512,1
 1448               	.Letext0:
 1449               	.global __do_copy_data
 1450               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cchai5eg.s:2      *ABS*:0000003f __SREG__
     /tmp/cchai5eg.s:3      *ABS*:0000003e __SP_H__
     /tmp/cchai5eg.s:4      *ABS*:0000003d __SP_L__
     /tmp/cchai5eg.s:5      *ABS*:00000034 __CCP__
     /tmp/cchai5eg.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cchai5eg.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cchai5eg.s:153    .text:00000000 Task4
     /tmp/cchai5eg.s:275    .text:000000a2 Task3
     /tmp/cchai5eg.s:397    .text:00000144 Task2
     /tmp/cchai5eg.s:512    .text:000001c0 Task1
                            *COM*:00000200 sectorbuffer
     /tmp/cchai5eg.s:850    .text:000003ec nrk_create_taskset
                            *COM*:00000023 TaskOne
                            *COM*:00000100 Stack1
                            *COM*:00000023 TaskTwo
                            *COM*:00000100 Stack2
                            *COM*:00000023 TaskThree
                            *COM*:00000100 Stack3
                            *COM*:00000023 TaskFour
                            *COM*:00000100 Stack4
     /tmp/cchai5eg.s:1187   .text:00000688 main
     /tmp/cchai5eg.s:1265   .text:000006de kill_stack
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale

UNDEFINED SYMBOLS
nrk_get_pid
printf
nrk_led_set
nrk_time_get
nrk_wait_until_next_period
nrk_led_clr
mmc_init
puts
mmc_readsector
mmc_writesector
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
