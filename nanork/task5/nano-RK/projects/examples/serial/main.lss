
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001be  00800200  00005888  0000591c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005888  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000678  008003be  008003be  00005ada  2**0
                  ALLOC
  3 .stab         0000ed6c  00000000  00000000  00005adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008aa9  00000000  00000000  00014848  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__ctors_end>
       4:	0c 94 e4 1f 	jmp	0x3fc8	; 0x3fc8 <__vector_1>
       8:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
       c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      10:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      14:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      18:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      1c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      20:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      24:	0c 94 b2 1f 	jmp	0x3f64	; 0x3f64 <__vector_9>
      28:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      2c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      30:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      34:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <__vector_13>
      38:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      3c:	0c 94 10 1e 	jmp	0x3c20	; 0x3c20 <__vector_13>
      40:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      44:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      48:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      4c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      50:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      54:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      58:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      5c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      60:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      64:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      68:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      6c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      70:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      74:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      78:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      7c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      80:	0c 94 43 1e 	jmp	0x3c86	; 0x3c86 <__vector_32>
      84:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      88:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      8c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      90:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      94:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      98:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      9c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      a0:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      a4:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      a8:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      ac:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      b0:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      b4:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      b8:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      bc:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      c0:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      c4:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      c8:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      cc:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      d0:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      d4:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      d8:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      dc:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      e0:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
      e4:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__vector_57>
      e8:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__vector_58>
      ec:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__vector_59>
      f0:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__vector_60>
      f4:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__vector_61>
      f8:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__vector_62>
      fc:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__vector_63>
     100:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__vector_64>
     104:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
     108:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
     10c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
     110:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
     114:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
     118:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
     11c:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__bad_interrupt>
     120:	2b 0f       	add	r18, r27
     122:	31 0f       	add	r19, r17
     124:	34 0f       	add	r19, r20
     126:	37 0f       	add	r19, r23
     128:	3a 0f       	add	r19, r26
     12a:	3d 0f       	add	r19, r29
     12c:	43 0f       	add	r20, r19
     12e:	40 0f       	add	r20, r16
     130:	46 0f       	add	r20, r22
     132:	49 0f       	add	r20, r25
     134:	4c 0f       	add	r20, r28
     136:	55 0f       	add	r21, r21
     138:	58 0f       	add	r21, r24
     13a:	5b 0f       	add	r21, r27
     13c:	5e 0f       	add	r21, r30
     13e:	52 0f       	add	r21, r18
     140:	28 0f       	add	r18, r24
     142:	2e 0f       	add	r18, r30
     144:	61 0f       	add	r22, r17
     146:	64 0f       	add	r22, r20
     148:	4f 0f       	add	r20, r31
     14a:	25 0f       	add	r18, r21

0000014c <__c.2769>:
     14c:	0d 0a 67 6f 74 20 75 61 72 74 20 64 61 74 61 3a     ..got uart data:
     15c:	20 00                                                .

0000015e <__c.2767>:
     15e:	52 58 20 73 69 67 6e 61 6c 20 65 72 72 6f 72 00     RX signal error.

0000016e <__c.2762>:
     16e:	47 65 74 20 53 69 67 6e 61 6c 20 45 52 52 4f 52     Get Signal ERROR
     17e:	21 0d 0a 00                                         !...

00000182 <__c.2209>:
     182:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000189 <__c.2206>:
     189:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000198 <__c.2203>:
     198:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000001a9 <__c.2200>:
     1a9:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1b9:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000001c4 <__c.2197>:
     1c4:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1d4:	20 53 69 67 6e 61 6c 00                              Signal.

000001dc <__c.2194>:
     1dc:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     1ec:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000001fc <__c.2191>:
     1fc:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     20c:	72 6f 72 00                                         ror.

00000210 <__c.2188>:
     210:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000221 <__c.2185>:
     221:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     231:	61 72 74 00                                         art.

00000235 <__c.2182>:
     235:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000244 <__c.2179>:
     244:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     254:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000025f <__c.2176>:
     25f:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000026b <__c.2173>:
     26b:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     27b:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     28b:	20 6f 6b 3f 00                                       ok?.

00000290 <__c.2170>:
     290:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2a0:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002ae <__c.2167>:
     2ae:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2be:	72 74 00                                            rt.

000002c1 <__c.2164>:
     2c1:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     2d1:	49 44 00                                            ID.

000002d4 <__c.2161>:
     2d4:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     2e4:	20 57 61 6b 65 75 70 00                              Wakeup.

000002ec <__c.2158>:
     2ec:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     2fc:	6c 61 74 65 64 00                                   lated.

00000302 <__c.2155>:
     302:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     312:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000031d <__c.2152>:
     31d:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     32d:	69 6e 74 65 72 00                                   inter.

00000333 <__c.2149>:
     333:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     343:	6c 6f 77 00                                         low.

00000347 <__c.2146>:
     347:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     357:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     367:	6e 6f 75 67 68 21 00                                nough!.

0000036e <__c.2142>:
     36e:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     37e:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     38e:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     39e:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000003aa <__c.2139>:
     3aa:	29 3a 20 00                                         ): .

000003ae <__c.2137>:
     3ae:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000003ba <__c.2062>:
     3ba:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000003c9 <__c.1851>:
     3c9:	45 46 47 65 66 67 00                                EFGefg.

000003d0 <__c.1845>:
     3d0:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000003e0 <__ctors_end>:
     3e0:	11 24       	eor	r1, r1
     3e2:	1f be       	out	0x3f, r1	; 63
     3e4:	cf ef       	ldi	r28, 0xFF	; 255
     3e6:	d1 e4       	ldi	r29, 0x41	; 65
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	cd bf       	out	0x3d, r28	; 61

000003ec <__do_copy_data>:
     3ec:	13 e0       	ldi	r17, 0x03	; 3
     3ee:	a0 e0       	ldi	r26, 0x00	; 0
     3f0:	b2 e0       	ldi	r27, 0x02	; 2
     3f2:	e8 e8       	ldi	r30, 0x88	; 136
     3f4:	f8 e5       	ldi	r31, 0x58	; 88
     3f6:	00 e0       	ldi	r16, 0x00	; 0
     3f8:	0b bf       	out	0x3b, r16	; 59
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__do_copy_data+0x14>
     3fc:	07 90       	elpm	r0, Z+
     3fe:	0d 92       	st	X+, r0
     400:	ae 3b       	cpi	r26, 0xBE	; 190
     402:	b1 07       	cpc	r27, r17
     404:	d9 f7       	brne	.-10     	; 0x3fc <__do_copy_data+0x10>

00000406 <__do_clear_bss>:
     406:	1a e0       	ldi	r17, 0x0A	; 10
     408:	ae eb       	ldi	r26, 0xBE	; 190
     40a:	b3 e0       	ldi	r27, 0x03	; 3
     40c:	01 c0       	rjmp	.+2      	; 0x410 <.do_clear_bss_start>

0000040e <.do_clear_bss_loop>:
     40e:	1d 92       	st	X+, r1

00000410 <.do_clear_bss_start>:
     410:	a6 33       	cpi	r26, 0x36	; 54
     412:	b1 07       	cpc	r27, r17
     414:	e1 f7       	brne	.-8      	; 0x40e <.do_clear_bss_loop>
     416:	0e 94 1e 03 	call	0x63c	; 0x63c <main>
     41a:	0c 94 42 2c 	jmp	0x5884	; 0x5884 <_exit>

0000041e <__bad_interrupt>:
     41e:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__vector_default>

00000422 <tx_task>:
}

void tx_task()
{
  uint8_t cnt;
  printf( "tx_task PID=%d\r\n",nrk_get_pid());
     422:	0e 94 77 17 	call	0x2eee	; 0x2eee <nrk_get_pid>
     426:	00 d0       	rcall	.+0      	; 0x428 <tx_task+0x6>
     428:	00 d0       	rcall	.+0      	; 0x42a <tx_task+0x8>
     42a:	ed b7       	in	r30, 0x3d	; 61
     42c:	fe b7       	in	r31, 0x3e	; 62
     42e:	31 96       	adiw	r30, 0x01	; 1
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	32 e0       	ldi	r19, 0x02	; 2
     434:	ad b7       	in	r26, 0x3d	; 61
     436:	be b7       	in	r27, 0x3e	; 62
     438:	12 96       	adiw	r26, 0x02	; 2
     43a:	3c 93       	st	X, r19
     43c:	2e 93       	st	-X, r18
     43e:	11 97       	sbiw	r26, 0x01	; 1
     440:	82 83       	std	Z+2, r24	; 0x02
     442:	13 82       	std	Z+3, r1	; 0x03
     444:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
  cnt=0;
  while(1) {
	nrk_led_toggle(BLUE_LED);
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 9d 0a 	call	0x153a	; 0x153a <nrk_led_toggle>
//	printf( "Task2 cnt=%d\r\n",cnt );
	nrk_wait_until_next_period();
     458:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <nrk_wait_until_next_period>
     45c:	f9 cf       	rjmp	.-14     	; 0x450 <tx_task+0x2e>

0000045e <rx_task>:
  return 0;
}


void rx_task()
{
     45e:	df 92       	push	r13
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
char c;
nrk_sig_t uart_rx_signal;
nrk_sig_mask_t sm;

  printf( "My node's address is %d\r\n",NODE_ADDR );
     468:	00 d0       	rcall	.+0      	; 0x46a <rx_task+0xc>
     46a:	00 d0       	rcall	.+0      	; 0x46c <rx_task+0xe>
     46c:	81 e1       	ldi	r24, 0x11	; 17
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	ad b7       	in	r26, 0x3d	; 61
     472:	be b7       	in	r27, 0x3e	; 62
     474:	12 96       	adiw	r26, 0x02	; 2
     476:	9c 93       	st	X, r25
     478:	8e 93       	st	-X, r24
     47a:	11 97       	sbiw	r26, 0x01	; 1
     47c:	14 96       	adiw	r26, 0x04	; 4
     47e:	1c 92       	st	X, r1
     480:	1e 92       	st	-X, r1
     482:	13 97       	sbiw	r26, 0x03	; 3
     484:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>
  printf( "rx_task PID=%d\r\n",nrk_get_pid());
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0e 94 77 17 	call	0x2eee	; 0x2eee <nrk_get_pid>
     494:	00 d0       	rcall	.+0      	; 0x496 <rx_task+0x38>
     496:	00 d0       	rcall	.+0      	; 0x498 <rx_task+0x3a>
     498:	ed b7       	in	r30, 0x3d	; 61
     49a:	fe b7       	in	r31, 0x3e	; 62
     49c:	31 96       	adiw	r30, 0x01	; 1
     49e:	2b e2       	ldi	r18, 0x2B	; 43
     4a0:	32 e0       	ldi	r19, 0x02	; 2
     4a2:	ad b7       	in	r26, 0x3d	; 61
     4a4:	be b7       	in	r27, 0x3e	; 62
     4a6:	12 96       	adiw	r26, 0x02	; 2
     4a8:	3c 93       	st	X, r19
     4aa:	2e 93       	st	-X, r18
     4ac:	11 97       	sbiw	r26, 0x01	; 1
     4ae:	82 83       	std	Z+2, r24	; 0x02
     4b0:	13 82       	std	Z+3, r1	; 0x03
     4b2:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>

  // Get the signal for UART RX  
  uart_rx_signal=nrk_uart_rx_signal_get();
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0e 94 2b 07 	call	0xe56	; 0xe56 <nrk_uart_rx_signal_get>
     4c2:	d8 2e       	mov	r13, r24
  // Register your task to wakeup on RX Data 
  if(uart_rx_signal==NRK_ERROR) nrk_kprintf( PSTR("Get Signal ERROR!\r\n") );
     4c4:	8f 3f       	cpi	r24, 0xFF	; 255
     4c6:	21 f4       	brne	.+8      	; 0x4d0 <rx_task+0x72>
     4c8:	8e e6       	ldi	r24, 0x6E	; 110
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrk_kprintf>
  nrk_signal_register(uart_rx_signal);
     4d0:	8d 2d       	mov	r24, r13
     4d2:	0e 94 3f 12 	call	0x247e	; 0x247e <nrk_signal_register>
                c=getchar();
		printf( "%c",c);
		if(c=='x') nrk_led_set(GREEN_LED);
		else nrk_led_clr(GREEN_LED);
		}
	sm=nrk_event_wait(SIG(uart_rx_signal));
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	e8 2e       	mov	r14, r24
     4da:	f1 2c       	mov	r15, r1
     4dc:	01 2d       	mov	r16, r1
     4de:	11 2d       	mov	r17, r1
     4e0:	04 c0       	rjmp	.+8      	; 0x4ea <rx_task+0x8c>
     4e2:	ee 0c       	add	r14, r14
     4e4:	ff 1c       	adc	r15, r15
     4e6:	00 1f       	adc	r16, r16
     4e8:	11 1f       	adc	r17, r17
     4ea:	da 94       	dec	r13
     4ec:	d2 f7       	brpl	.-12     	; 0x4e2 <rx_task+0x84>
     4ee:	16 c0       	rjmp	.+44     	; 0x51c <rx_task+0xbe>

	// Wait for UART signal
	while(nrk_uart_data_ready(NRK_DEFAULT_UART)!=0)
                {
		// Read Character
                c=getchar();
     4f0:	80 91 2c 0a 	lds	r24, 0x0A2C
     4f4:	90 91 2d 0a 	lds	r25, 0x0A2D
     4f8:	0e 94 81 29 	call	0x5302	; 0x5302 <fgetc>
     4fc:	d8 2e       	mov	r13, r24
		printf( "%c",c);
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 01 2a 	call	0x5402	; 0x5402 <putchar>
		if(c=='x') nrk_led_set(GREEN_LED);
     504:	bd 2d       	mov	r27, r13
     506:	b8 37       	cpi	r27, 0x78	; 120
     508:	29 f4       	brne	.+10     	; 0x514 <rx_task+0xb6>
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 cd 0a 	call	0x159a	; 0x159a <nrk_led_set>
     512:	04 c0       	rjmp	.+8      	; 0x51c <rx_task+0xbe>
		else nrk_led_clr(GREEN_LED);
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
  nrk_signal_register(uart_rx_signal);

  while(1) {

	// Wait for UART signal
	while(nrk_uart_data_ready(NRK_DEFAULT_UART)!=0)
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <nrk_uart_data_ready>
     522:	88 23       	and	r24, r24
     524:	29 f7       	brne	.-54     	; 0x4f0 <rx_task+0x92>
                c=getchar();
		printf( "%c",c);
		if(c=='x') nrk_led_set(GREEN_LED);
		else nrk_led_clr(GREEN_LED);
		}
	sm=nrk_event_wait(SIG(uart_rx_signal));
     526:	c8 01       	movw	r24, r16
     528:	b7 01       	movw	r22, r14
     52a:	0e 94 e6 12 	call	0x25cc	; 0x25cc <nrk_event_wait>
	if(sm != SIG(uart_rx_signal))
     52e:	6e 15       	cp	r22, r14
     530:	7f 05       	cpc	r23, r15
     532:	80 07       	cpc	r24, r16
     534:	91 07       	cpc	r25, r17
     536:	21 f0       	breq	.+8      	; 0x540 <rx_task+0xe2>
	nrk_kprintf( PSTR("RX signal error") );
     538:	8e e5       	ldi	r24, 0x5E	; 94
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrk_kprintf>
	nrk_kprintf( PSTR("\r\ngot uart data: ") );
     540:	8c e4       	ldi	r24, 0x4C	; 76
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrk_kprintf>
     548:	e9 cf       	rjmp	.-46     	; 0x51c <rx_task+0xbe>

0000054a <nrk_create_taskset>:
	}
}

void
nrk_create_taskset()
{
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
  TaskOne.task = rx_task;
     550:	8f e2       	ldi	r24, 0x2F	; 47
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	90 93 ca 03 	sts	0x03CA, r25
     558:	80 93 c9 03 	sts	0x03C9, r24
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
     55c:	c4 ec       	ldi	r28, 0xC4	; 196
     55e:	d3 e0       	ldi	r29, 0x03	; 3
     560:	ce 01       	movw	r24, r28
     562:	6b ee       	ldi	r22, 0xEB	; 235
     564:	75 e0       	ldi	r23, 0x05	; 5
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	52 e0       	ldi	r21, 0x02	; 2
     56a:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <nrk_task_set_stk>
  TaskOne.prio = 1;
     56e:	11 e0       	ldi	r17, 0x01	; 1
     570:	18 87       	std	Y+8, r17	; 0x08
  TaskOne.FirstActivation = TRUE;
     572:	1f 83       	std	Y+7, r17	; 0x07
  TaskOne.Type = BASIC_TASK;
     574:	19 87       	std	Y+9, r17	; 0x09
  TaskOne.SchType = PREEMPTIVE;
     576:	1a 87       	std	Y+10, r17	; 0x0a
  TaskOne.period.secs = 10;
     578:	8a e0       	ldi	r24, 0x0A	; 10
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	a0 e0       	ldi	r26, 0x00	; 0
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	8b 87       	std	Y+11, r24	; 0x0b
     582:	9c 87       	std	Y+12, r25	; 0x0c
     584:	ad 87       	std	Y+13, r26	; 0x0d
     586:	be 87       	std	Y+14, r27	; 0x0e
  TaskOne.period.nano_secs = 250*NANOS_PER_MS;
     588:	80 e8       	ldi	r24, 0x80	; 128
     58a:	92 eb       	ldi	r25, 0xB2	; 178
     58c:	a6 ee       	ldi	r26, 0xE6	; 230
     58e:	be e0       	ldi	r27, 0x0E	; 14
     590:	8f 87       	std	Y+15, r24	; 0x0f
     592:	98 8b       	std	Y+16, r25	; 0x10
     594:	a9 8b       	std	Y+17, r26	; 0x11
     596:	ba 8b       	std	Y+18, r27	; 0x12
  TaskOne.cpu_reserve.secs = 0;
     598:	1b 8a       	std	Y+19, r1	; 0x13
     59a:	1c 8a       	std	Y+20, r1	; 0x14
     59c:	1d 8a       	std	Y+21, r1	; 0x15
     59e:	1e 8a       	std	Y+22, r1	; 0x16
  TaskOne.cpu_reserve.nano_secs =  50*NANOS_PER_MS;
     5a0:	80 e8       	ldi	r24, 0x80	; 128
     5a2:	90 ef       	ldi	r25, 0xF0	; 240
     5a4:	aa ef       	ldi	r26, 0xFA	; 250
     5a6:	b2 e0       	ldi	r27, 0x02	; 2
     5a8:	8f 8b       	std	Y+23, r24	; 0x17
     5aa:	98 8f       	std	Y+24, r25	; 0x18
     5ac:	a9 8f       	std	Y+25, r26	; 0x19
     5ae:	ba 8f       	std	Y+26, r27	; 0x1a
  TaskOne.offset.secs = 0;
     5b0:	1b 8e       	std	Y+27, r1	; 0x1b
     5b2:	1c 8e       	std	Y+28, r1	; 0x1c
     5b4:	1d 8e       	std	Y+29, r1	; 0x1d
     5b6:	1e 8e       	std	Y+30, r1	; 0x1e
  TaskOne.offset.nano_secs= 0;
     5b8:	1f 8e       	std	Y+31, r1	; 0x1f
     5ba:	18 a2       	std	Y+32, r1	; 0x20
     5bc:	19 a2       	std	Y+33, r1	; 0x21
     5be:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&TaskOne);
     5c0:	ce 01       	movw	r24, r28
     5c2:	0e 94 30 15 	call	0x2a60	; 0x2a60 <nrk_activate_task>

  TaskTwo.task = tx_task;
     5c6:	81 e1       	ldi	r24, 0x11	; 17
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	90 93 f6 08 	sts	0x08F6, r25
     5ce:	80 93 f5 08 	sts	0x08F5, r24
  nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
     5d2:	c0 ef       	ldi	r28, 0xF0	; 240
     5d4:	d8 e0       	ldi	r29, 0x08	; 8
     5d6:	ce 01       	movw	r24, r28
     5d8:	67 ee       	ldi	r22, 0xE7	; 231
     5da:	73 e0       	ldi	r23, 0x03	; 3
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	52 e0       	ldi	r21, 0x02	; 2
     5e0:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <nrk_task_set_stk>
  TaskTwo.prio = 2;
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	88 87       	std	Y+8, r24	; 0x08
  TaskTwo.FirstActivation = TRUE;
     5e8:	1f 83       	std	Y+7, r17	; 0x07
  TaskTwo.Type = BASIC_TASK;
     5ea:	19 87       	std	Y+9, r17	; 0x09
  TaskTwo.SchType = PREEMPTIVE;
     5ec:	1a 87       	std	Y+10, r17	; 0x0a
  TaskTwo.period.secs = 0;
     5ee:	1b 86       	std	Y+11, r1	; 0x0b
     5f0:	1c 86       	std	Y+12, r1	; 0x0c
     5f2:	1d 86       	std	Y+13, r1	; 0x0d
     5f4:	1e 86       	std	Y+14, r1	; 0x0e
  TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	95 e6       	ldi	r25, 0x65	; 101
     5fa:	ad ec       	ldi	r26, 0xCD	; 205
     5fc:	bd e1       	ldi	r27, 0x1D	; 29
     5fe:	8f 87       	std	Y+15, r24	; 0x0f
     600:	98 8b       	std	Y+16, r25	; 0x10
     602:	a9 8b       	std	Y+17, r26	; 0x11
     604:	ba 8b       	std	Y+18, r27	; 0x12
  TaskTwo.cpu_reserve.secs = 0;
     606:	1b 8a       	std	Y+19, r1	; 0x13
     608:	1c 8a       	std	Y+20, r1	; 0x14
     60a:	1d 8a       	std	Y+21, r1	; 0x15
     60c:	1e 8a       	std	Y+22, r1	; 0x16
  TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	91 ee       	ldi	r25, 0xE1	; 225
     612:	a5 ef       	ldi	r26, 0xF5	; 245
     614:	b5 e0       	ldi	r27, 0x05	; 5
     616:	8f 8b       	std	Y+23, r24	; 0x17
     618:	98 8f       	std	Y+24, r25	; 0x18
     61a:	a9 8f       	std	Y+25, r26	; 0x19
     61c:	ba 8f       	std	Y+26, r27	; 0x1a
  TaskTwo.offset.secs = 0;
     61e:	1b 8e       	std	Y+27, r1	; 0x1b
     620:	1c 8e       	std	Y+28, r1	; 0x1c
     622:	1d 8e       	std	Y+29, r1	; 0x1d
     624:	1e 8e       	std	Y+30, r1	; 0x1e
  TaskTwo.offset.nano_secs= 0;
     626:	1f 8e       	std	Y+31, r1	; 0x1f
     628:	18 a2       	std	Y+32, r1	; 0x20
     62a:	19 a2       	std	Y+33, r1	; 0x21
     62c:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&TaskTwo);
     62e:	ce 01       	movw	r24, r28
     630:	0e 94 30 15 	call	0x2a60	; 0x2a60 <nrk_activate_task>


}
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	08 95       	ret

0000063c <main>:

int
main ()
{
  uint8_t t;
  nrk_setup_ports();
     63c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
     640:	80 e1       	ldi	r24, 0x10	; 16
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 20 0b 	call	0x1640	; 0x1640 <nrk_setup_uart>

  printf( "Starting up...\r\n" );
     648:	8c e3       	ldi	r24, 0x3C	; 60
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	0e 94 08 2a 	call	0x5410	; 0x5410 <puts>

  nrk_init();
     650:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <nrk_init>

  nrk_led_clr(ORANGE_LED);
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
  nrk_led_clr(BLUE_LED);
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
  nrk_led_set(GREEN_LED);
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 cd 0a 	call	0x159a	; 0x159a <nrk_led_set>
  nrk_led_clr(RED_LED);
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
 
  nrk_time_set(0,0);
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	cb 01       	movw	r24, r22
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	a9 01       	movw	r20, r18
     680:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <nrk_time_set>
  nrk_create_taskset ();
     684:	0e 94 a5 02 	call	0x54a	; 0x54a <nrk_create_taskset>
  nrk_start();
     688:	0e 94 b4 0c 	call	0x1968	; 0x1968 <nrk_start>
  
  return 0;
}
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	08 95       	ret

00000692 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     692:	90 91 41 01 	lds	r25, 0x0141
     696:	9f 71       	andi	r25, 0x1F	; 31
     698:	9f 31       	cpi	r25, 0x1F	; 31
     69a:	d9 f3       	breq	.-10     	; 0x692 <rf_cmd>
		continue;
	TRX_STATE = cmd;
     69c:	80 93 42 01 	sts	0x0142, r24
}
     6a0:	08 95       	ret

000006a2 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     6a2:	80 91 41 01 	lds	r24, 0x0141
     6a6:	8f 71       	andi	r24, 0x1F	; 31
     6a8:	8f 31       	cpi	r24, 0x1F	; 31
     6aa:	d9 f3       	breq	.-10     	; 0x6a2 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     6ac:	80 91 41 01 	lds	r24, 0x0141
     6b0:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     6b2:	d1 f0       	breq	.+52     	; 0x6e8 <rf_power_down+0x46>
     6b4:	8f 30       	cpi	r24, 0x0F	; 15
     6b6:	c1 f0       	breq	.+48     	; 0x6e8 <rf_power_down+0x46>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     6b8:	80 91 41 01 	lds	r24, 0x0141
     6bc:	8f 71       	andi	r24, 0x1F	; 31
     6be:	88 30       	cpi	r24, 0x08	; 8
     6c0:	41 f0       	breq	.+16     	; 0x6d2 <rf_power_down+0x30>
		rf_cmd(TRX_OFF);
     6c2:	88 e0       	ldi	r24, 0x08	; 8
     6c4:	0e 94 49 03 	call	0x692	; 0x692 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     6c8:	80 91 41 01 	lds	r24, 0x0141
     6cc:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     6ce:	88 30       	cpi	r24, 0x08	; 8
     6d0:	d9 f7       	brne	.-10     	; 0x6c8 <rf_power_down+0x26>
	}

	TRXPR |= (1 << SLPTR);
     6d2:	80 91 39 01 	lds	r24, 0x0139
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	80 93 39 01 	sts	0x0139, r24
	do{
		status = (TRX_STATUS & 0x1F);
     6dc:	80 91 41 01 	lds	r24, 0x0141
     6e0:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     6e2:	11 f0       	breq	.+4      	; 0x6e8 <rf_power_down+0x46>
     6e4:	8f 30       	cpi	r24, 0x0F	; 15
     6e6:	d1 f7       	brne	.-12     	; 0x6dc <rf_power_down+0x3a>
     6e8:	08 95       	ret

000006ea <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     6ea:	80 91 41 01 	lds	r24, 0x0141
     6ee:	8f 71       	andi	r24, 0x1F	; 31
     6f0:	8f 31       	cpi	r24, 0x1F	; 31
     6f2:	d9 f3       	breq	.-10     	; 0x6ea <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     6f4:	80 91 41 01 	lds	r24, 0x0141
     6f8:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     6fa:	11 f0       	breq	.+4      	; 0x700 <rf_power_up+0x16>
     6fc:	8f 30       	cpi	r24, 0x0F	; 15
     6fe:	51 f4       	brne	.+20     	; 0x714 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     700:	80 91 39 01 	lds	r24, 0x0139
     704:	8d 7f       	andi	r24, 0xFD	; 253
     706:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     70a:	80 91 41 01 	lds	r24, 0x0141
     70e:	8f 71       	andi	r24, 0x1F	; 31
     710:	88 30       	cpi	r24, 0x08	; 8
     712:	d9 f7       	brne	.-10     	; 0x70a <rf_power_up+0x20>
     714:	08 95       	ret

00000716 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     716:	e5 e4       	ldi	r30, 0x45	; 69
     718:	f1 e0       	ldi	r31, 0x01	; 1
     71a:	90 81       	ld	r25, Z
     71c:	90 7f       	andi	r25, 0xF0	; 240
     71e:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     720:	90 81       	ld	r25, Z
     722:	8f 70       	andi	r24, 0x0F	; 15
     724:	89 2b       	or	r24, r25
     726:	80 83       	st	Z, r24
}
     728:	08 95       	ret

0000072a <rf_addr_decode_enable>:

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     72a:	e7 e5       	ldi	r30, 0x57	; 87
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	80 81       	ld	r24, Z
     730:	8d 7f       	andi	r24, 0xFD	; 253
     732:	80 83       	st	Z, r24
}
     734:	08 95       	ret

00000736 <rf_addr_decode_disable>:


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     736:	e7 e5       	ldi	r30, 0x57	; 87
     738:	f1 e0       	ldi	r31, 0x01	; 1
     73a:	80 81       	ld	r24, Z
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	80 83       	st	Z, r24
}
     740:	08 95       	ret

00000742 <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     742:	ee e6       	ldi	r30, 0x6E	; 110
     744:	f1 e0       	ldi	r31, 0x01	; 1
     746:	80 81       	ld	r24, Z
     748:	8f 7e       	andi	r24, 0xEF	; 239
     74a:	80 83       	st	Z, r24
}
     74c:	08 95       	ret

0000074e <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     74e:	ee e6       	ldi	r30, 0x6E	; 110
     750:	f1 e0       	ldi	r31, 0x01	; 1
     752:	80 81       	ld	r24, Z
     754:	80 61       	ori	r24, 0x10	; 16
     756:	80 83       	st	Z, r24
}
     758:	08 95       	ret

0000075a <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     75a:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     75e:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     762:	90 93 22 09 	sts	0x0922, r25
     766:	80 93 21 09 	sts	0x0921, r24
}
     76a:	08 95       	ret

0000076c <rf_set_rx>:


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     76c:	90 93 1c 09 	sts	0x091C, r25
     770:	80 93 1b 09 	sts	0x091B, r24
	PHY_CC_CCA &= ~(0x1F);
     774:	e8 e4       	ldi	r30, 0x48	; 72
     776:	f1 e0       	ldi	r31, 0x01	; 1
     778:	80 81       	ld	r24, Z
     77a:	80 7e       	andi	r24, 0xE0	; 224
     77c:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     77e:	80 81       	ld	r24, Z
     780:	68 2b       	or	r22, r24
     782:	60 83       	st	Z, r22
}
     784:	08 95       	ret

00000786 <rx_start_callback>:

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     786:	90 93 bf 03 	sts	0x03BF, r25
     78a:	80 93 be 03 	sts	0x03BE, r24
}
     78e:	08 95       	ret

00000790 <rf_init>:


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     790:	1f 93       	push	r17

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     792:	70 e2       	ldi	r23, 0x20	; 32
     794:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     798:	70 ec       	ldi	r23, 0xC0	; 192
     79a:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     79e:	60 62       	ori	r22, 0x20	; 32
     7a0:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     7a4:	65 ec       	ldi	r22, 0xC5	; 197
     7a6:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     7aa:	67 ea       	ldi	r22, 0xA7	; 167
     7ac:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     7b0:	60 e8       	ldi	r22, 0x80	; 128
     7b2:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     7b6:	20 93 60 01 	sts	0x0160, r18
     7ba:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     7be:	40 93 62 01 	sts	0x0162, r20
     7c2:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     7c6:	e6 e4       	ldi	r30, 0x46	; 70
     7c8:	f1 e0       	ldi	r31, 0x01	; 1
     7ca:	10 81       	ld	r17, Z
     7cc:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     7ce:	60 81       	ld	r22, Z
     7d0:	70 81       	ld	r23, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     7d2:	12 95       	swap	r17
     7d4:	16 95       	lsr	r17
     7d6:	17 70       	andi	r17, 0x07	; 7
     7d8:	12 95       	swap	r17
     7da:	11 0f       	add	r17, r17
     7dc:	11 0f       	add	r17, r17
     7de:	10 7c       	andi	r17, 0xC0	; 192
     7e0:	72 95       	swap	r23
     7e2:	76 95       	lsr	r23
     7e4:	73 70       	andi	r23, 0x03	; 3
     7e6:	17 2b       	or	r17, r23
     7e8:	a2 95       	swap	r26
     7ea:	a6 95       	lsr	r26
     7ec:	a7 70       	andi	r26, 0x07	; 7
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	a3 70       	andi	r26, 0x03	; 3
     7f2:	b0 70       	andi	r27, 0x00	; 0
     7f4:	74 e0       	ldi	r23, 0x04	; 4
     7f6:	aa 0f       	add	r26, r26
     7f8:	bb 1f       	adc	r27, r27
     7fa:	7a 95       	dec	r23
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <rf_init+0x66>
     7fe:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     800:	62 95       	swap	r22
     802:	66 95       	lsr	r22
     804:	67 70       	andi	r22, 0x07	; 7
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	63 70       	andi	r22, 0x03	; 3
     80a:	70 70       	andi	r23, 0x00	; 0
     80c:	66 0f       	add	r22, r22
     80e:	77 1f       	adc	r23, r23
     810:	66 0f       	add	r22, r22
     812:	77 1f       	adc	r23, r23
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     814:	16 2b       	or	r17, r22
     816:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     81a:	60 81       	ld	r22, Z
     81c:	e0 81       	ld	r30, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     81e:	e2 95       	swap	r30
     820:	e6 95       	lsr	r30
     822:	e3 70       	andi	r30, 0x03	; 3
     824:	e0 64       	ori	r30, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     826:	62 95       	swap	r22
     828:	66 95       	lsr	r22
     82a:	67 70       	andi	r22, 0x07	; 7
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	63 70       	andi	r22, 0x03	; 3
     830:	70 70       	andi	r23, 0x00	; 0
     832:	66 0f       	add	r22, r22
     834:	77 1f       	adc	r23, r23
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     836:	e6 2b       	or	r30, r22
     838:	e0 93 6e 01 	sts	0x016E, r30
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     83c:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     840:	6f ef       	ldi	r22, 0xFF	; 255
     842:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     846:	90 93 1c 09 	sts	0x091C, r25
     84a:	80 93 1b 09 	sts	0x091B, r24
	rfSettings.txSeqNumber = 0;
     84e:	10 92 1d 09 	sts	0x091D, r1
	rfSettings.ackReceived = 0;
     852:	10 92 1e 09 	sts	0x091E, r1
	rfSettings.panId = panId;
     856:	50 93 20 09 	sts	0x0920, r21
     85a:	40 93 1f 09 	sts	0x091F, r20
	rfSettings.myAddr = myAddr;
     85e:	30 93 22 09 	sts	0x0922, r19
     862:	20 93 21 09 	sts	0x0921, r18
	rfSettings.receiveOn = 0;
     866:	10 92 23 09 	sts	0x0923, r1

	rf_ready = 1;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 2d 09 	sts	0x092D, r24
	rx_ready = 0;
     870:	10 92 3c 09 	sts	0x093C, r1
	tx_done = 0;
     874:	10 92 2c 09 	sts	0x092C, r1

} // rf_init() 
     878:	1f 91       	pop	r17
     87a:	08 95       	ret

0000087c <rf_rx_on>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
	rf_cmd(RX_AACK_ON);
     87c:	86 e1       	ldi	r24, 0x16	; 22
     87e:	0e 94 49 03 	call	0x692	; 0x692 <rf_cmd>
}
     882:	08 95       	ret

00000884 <rf_polling_rx_on>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
	rf_cmd(RX_AACK_ON);
     884:	86 e1       	ldi	r24, 0x16	; 22
     886:	0e 94 49 03 	call	0x692	; 0x692 <rf_cmd>
}
     88a:	08 95       	ret

0000088c <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
     88c:	88 e0       	ldi	r24, 0x08	; 8
     88e:	0e 94 49 03 	call	0x692	; 0x692 <rf_cmd>
	rx_ready = 0;
     892:	10 92 3c 09 	sts	0x093C, r1
}
     896:	08 95       	ret

00000898 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
     898:	2f 92       	push	r2
     89a:	3f 92       	push	r3
     89c:	4f 92       	push	r4
     89e:	5f 92       	push	r5
     8a0:	7f 92       	push	r7
     8a2:	8f 92       	push	r8
     8a4:	9f 92       	push	r9
     8a6:	af 92       	push	r10
     8a8:	bf 92       	push	r11
     8aa:	cf 92       	push	r12
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
     8bc:	1b 01       	movw	r2, r22
	

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready)
     8be:	80 91 2d 09 	lds	r24, 0x092D
     8c2:	88 23       	and	r24, r24
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <rf_tx_packet_repeat+0x30>
     8c6:	01 c1       	rjmp	.+514    	; 0xaca <rf_tx_packet_repeat+0x232>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     8c8:	8e 81       	ldd	r24, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     8ca:	90 91 1d 09 	lds	r25, 0x091D
     8ce:	9f 5f       	subi	r25, 0xFF	; 255
     8d0:	90 93 1d 09 	sts	0x091D, r25
	machead->fcf = fcf;
     8d4:	e1 e8       	ldi	r30, 0x81	; 129
     8d6:	f1 e0       	ldi	r31, 0x01	; 1
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     8d8:	81 70       	andi	r24, 0x01	; 1
     8da:	82 95       	swap	r24
     8dc:	88 0f       	add	r24, r24
     8de:	80 72       	andi	r24, 0x20	; 32
     8e0:	81 64       	ori	r24, 0x41	; 65
     8e2:	80 93 81 01 	sts	0x0181, r24
     8e6:	88 e8       	ldi	r24, 0x88	; 136
     8e8:	81 83       	std	Z+1, r24	; 0x01
	machead->fcf = fcf;
	machead->seq_num = rfSettings.txSeqNumber;
     8ea:	80 91 1d 09 	lds	r24, 0x091D
     8ee:	82 83       	std	Z+2, r24	; 0x02
	machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     8f0:	90 91 63 01 	lds	r25, 0x0163
     8f4:	80 91 62 01 	lds	r24, 0x0162
     8f8:	39 2f       	mov	r19, r25
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	82 2b       	or	r24, r18
     900:	93 2b       	or	r25, r19
     902:	94 83       	std	Z+4, r25	; 0x04
     904:	83 83       	std	Z+3, r24	; 0x03
	machead->dest_addr = pRTI->destAddr;
     906:	88 81       	ld	r24, Y
     908:	99 81       	ldd	r25, Y+1	; 0x01
     90a:	96 83       	std	Z+6, r25	; 0x06
     90c:	85 83       	std	Z+5, r24	; 0x05
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     90e:	90 91 61 01 	lds	r25, 0x0161
     912:	80 91 60 01 	lds	r24, 0x0160
     916:	39 2f       	mov	r19, r25
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	82 2b       	or	r24, r18
     91e:	93 2b       	or	r25, r19
     920:	90 87       	std	Z+8, r25	; 0x08
     922:	87 83       	std	Z+7, r24	; 0x07
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     924:	4a 81       	ldd	r20, Y+2	; 0x02
     926:	24 2f       	mov	r18, r20
     928:	33 27       	eor	r19, r19
     92a:	27 fd       	sbrc	r18, 7
     92c:	30 95       	com	r19
     92e:	6b 81       	ldd	r22, Y+3	; 0x03
     930:	7c 81       	ldd	r23, Y+4	; 0x04
     932:	8a e8       	ldi	r24, 0x8A	; 138
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	53 2f       	mov	r21, r19
     938:	0e 94 2d 29 	call	0x525a	; 0x525a <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	85 5f       	subi	r24, 0xF5	; 245
     940:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     944:	70 90 41 01 	lds	r7, 0x0141
     948:	8f e1       	ldi	r24, 0x1F	; 31
     94a:	78 22       	and	r7, r24
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     94c:	87 2d       	mov	r24, r7
     94e:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     950:	82 30       	cpi	r24, 0x02	; 2
     952:	c0 f3       	brcs	.-16     	; 0x944 <rf_tx_packet_repeat+0xac>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     954:	87 2d       	mov	r24, r7
     956:	81 31       	cpi	r24, 0x11	; 17
     958:	a9 f3       	breq	.-22     	; 0x944 <rf_tx_packet_repeat+0xac>
     95a:	82 31       	cpi	r24, 0x12	; 18
     95c:	99 f3       	breq	.-26     	; 0x944 <rf_tx_packet_repeat+0xac>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     95e:	8f 31       	cpi	r24, 0x1F	; 31
     960:	89 f3       	breq	.-30     	; 0x944 <rf_tx_packet_repeat+0xac>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     962:	88 30       	cpi	r24, 0x08	; 8
     964:	39 f0       	breq	.+14     	; 0x974 <rf_tx_packet_repeat+0xdc>
     966:	86 30       	cpi	r24, 0x06	; 6
     968:	29 f0       	breq	.+10     	; 0x974 <rf_tx_packet_repeat+0xdc>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
     96a:	86 31       	cpi	r24, 0x16	; 22
     96c:	19 f0       	breq	.+6      	; 0x974 <rf_tx_packet_repeat+0xdc>
     96e:	89 30       	cpi	r24, 0x09	; 9
     970:	09 f0       	breq	.+2      	; 0x974 <rf_tx_packet_repeat+0xdc>
     972:	ab c0       	rjmp	.+342    	; 0xaca <rf_tx_packet_repeat+0x232>
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     974:	86 e1       	ldi	r24, 0x16	; 22
     976:	0e 94 49 03 	call	0x692	; 0x692 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     97a:	8d 81       	ldd	r24, Y+5	; 0x05
     97c:	88 23       	and	r24, r24
     97e:	69 f0       	breq	.+26     	; 0x99a <rf_tx_packet_repeat+0x102>
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     980:	80 91 48 01 	lds	r24, 0x0148
     984:	80 68       	ori	r24, 0x80	; 128
     986:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     98a:	80 91 41 01 	lds	r24, 0x0141
     98e:	87 ff       	sbrs	r24, 7
     990:	fc cf       	rjmp	.-8      	; 0x98a <rf_tx_packet_repeat+0xf2>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     992:	80 91 41 01 	lds	r24, 0x0141
     996:	86 ff       	sbrs	r24, 6
     998:	98 c0       	rjmp	.+304    	; 0xaca <rf_tx_packet_repeat+0x232>
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     99a:	89 e0       	ldi	r24, 0x09	; 9
     99c:	0e 94 49 03 	call	0x692	; 0x692 <rf_cmd>
	if(pRTI->ackRequest)
     9a0:	8e 81       	ldd	r24, Y+6	; 0x06
     9a2:	88 23       	and	r24, r24
     9a4:	19 f0       	breq	.+6      	; 0x9ac <rf_tx_packet_repeat+0x114>
		rf_cmd(TX_ARET_ON);
     9a6:	89 e1       	ldi	r24, 0x19	; 25
     9a8:	0e 94 49 03 	call	0x692	; 0x692 <rf_cmd>
	
	if(ms != 0){
     9ac:	21 14       	cp	r2, r1
     9ae:	31 04       	cpc	r3, r1
     9b0:	a9 f1       	breq	.+106    	; 0xa1c <rf_tx_packet_repeat+0x184>
		nrk_time_get(&curr_t);
     9b2:	84 e2       	ldi	r24, 0x24	; 36
     9b4:	99 e0       	ldi	r25, 0x09	; 9
     9b6:	0e 94 7d 17 	call	0x2efa	; 0x2efa <nrk_time_get>
		target_t.secs = curr_t.secs;
     9ba:	80 91 24 09 	lds	r24, 0x0924
     9be:	90 91 25 09 	lds	r25, 0x0925
     9c2:	a0 91 26 09 	lds	r26, 0x0926
     9c6:	b0 91 27 09 	lds	r27, 0x0927
     9ca:	80 93 2e 09 	sts	0x092E, r24
     9ce:	90 93 2f 09 	sts	0x092F, r25
     9d2:	a0 93 30 09 	sts	0x0930, r26
     9d6:	b0 93 31 09 	sts	0x0931, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
     9da:	b1 01       	movw	r22, r2
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	20 e4       	ldi	r18, 0x40	; 64
     9e2:	32 e4       	ldi	r19, 0x42	; 66
     9e4:	4f e0       	ldi	r20, 0x0F	; 15
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
     9ec:	20 91 28 09 	lds	r18, 0x0928
     9f0:	30 91 29 09 	lds	r19, 0x0929
     9f4:	40 91 2a 09 	lds	r20, 0x092A
     9f8:	50 91 2b 09 	lds	r21, 0x092B
     9fc:	62 0f       	add	r22, r18
     9fe:	73 1f       	adc	r23, r19
     a00:	84 1f       	adc	r24, r20
     a02:	95 1f       	adc	r25, r21
     a04:	60 93 32 09 	sts	0x0932, r22
     a08:	70 93 33 09 	sts	0x0933, r23
     a0c:	80 93 34 09 	sts	0x0934, r24
     a10:	90 93 35 09 	sts	0x0935, r25
		nrk_time_compact_nanos(&target_t);
     a14:	8e e2       	ldi	r24, 0x2E	; 46
     a16:	99 e0       	ldi	r25, 0x09	; 9
     a18:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <nrk_time_compact_nanos>
	}
	
	do{
		tx_done = 0;
     a1c:	10 92 2c 09 	sts	0x092C, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	0e 94 49 03 	call	0x692	; 0x692 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
     a26:	44 24       	eor	r4, r4
     a28:	55 24       	eor	r5, r5
     a2a:	08 c0       	rjmp	.+16     	; 0xa3c <rf_tx_packet_repeat+0x1a4>
     a2c:	08 94       	sec
     a2e:	41 1c       	adc	r4, r1
     a30:	51 1c       	adc	r5, r1
     a32:	88 ee       	ldi	r24, 0xE8	; 232
     a34:	48 16       	cp	r4, r24
     a36:	8d ef       	ldi	r24, 0xFD	; 253
     a38:	58 06       	cpc	r5, r24
     a3a:	21 f0       	breq	.+8      	; 0xa44 <rf_tx_packet_repeat+0x1ac>
     a3c:	80 91 2c 09 	lds	r24, 0x092C
     a40:	88 23       	and	r24, r24
     a42:	a1 f3       	breq	.-24     	; 0xa2c <rf_tx_packet_repeat+0x194>
			continue;
		if(ms == 0)
     a44:	21 14       	cp	r2, r1
     a46:	31 04       	cpc	r3, r1
     a48:	59 f1       	breq	.+86     	; 0xaa0 <rf_tx_packet_repeat+0x208>
			break;
		nrk_time_get(&curr_t);
     a4a:	84 e2       	ldi	r24, 0x24	; 36
     a4c:	99 e0       	ldi	r25, 0x09	; 9
     a4e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
     a52:	8d e3       	ldi	r24, 0x3D	; 61
     a54:	99 e0       	ldi	r25, 0x09	; 9
     a56:	00 91 2e 09 	lds	r16, 0x092E
     a5a:	10 91 2f 09 	lds	r17, 0x092F
     a5e:	20 91 30 09 	lds	r18, 0x0930
     a62:	30 91 31 09 	lds	r19, 0x0931
     a66:	40 91 32 09 	lds	r20, 0x0932
     a6a:	50 91 33 09 	lds	r21, 0x0933
     a6e:	60 91 34 09 	lds	r22, 0x0934
     a72:	70 91 35 09 	lds	r23, 0x0935
     a76:	80 90 24 09 	lds	r8, 0x0924
     a7a:	90 90 25 09 	lds	r9, 0x0925
     a7e:	a0 90 26 09 	lds	r10, 0x0926
     a82:	b0 90 27 09 	lds	r11, 0x0927
     a86:	c0 90 28 09 	lds	r12, 0x0928
     a8a:	d0 90 29 09 	lds	r13, 0x0929
     a8e:	e0 90 2a 09 	lds	r14, 0x092A
     a92:	f0 90 2b 09 	lds	r15, 0x092B
     a96:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <nrk_time_sub>
     a9a:	8f 3f       	cpi	r24, 0xFF	; 255
     a9c:	09 f0       	breq	.+2      	; 0xaa0 <rf_tx_packet_repeat+0x208>
     a9e:	be cf       	rjmp	.-132    	; 0xa1c <rf_tx_packet_repeat+0x184>

	trx_error = ((pRTI->ackRequest && 
     aa0:	8e 81       	ldd	r24, Y+6	; 0x06
     aa2:	88 23       	and	r24, r24
     aa4:	31 f0       	breq	.+12     	; 0xab2 <rf_tx_packet_repeat+0x21a>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     aa6:	80 91 42 01 	lds	r24, 0x0142
     aaa:	82 95       	swap	r24
     aac:	86 95       	lsr	r24
     aae:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     ab0:	29 f4       	brne	.+10     	; 0xabc <rf_tx_packet_repeat+0x224>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     ab2:	88 ee       	ldi	r24, 0xE8	; 232
     ab4:	48 16       	cp	r4, r24
     ab6:	8d ef       	ldi	r24, 0xFD	; 253
     ab8:	58 06       	cpc	r5, r24
     aba:	11 f4       	brne	.+4      	; 0xac0 <rf_tx_packet_repeat+0x228>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     abc:	1f ef       	ldi	r17, 0xFF	; 255
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <rf_tx_packet_repeat+0x22a>
     ac0:	11 e0       	ldi	r17, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     ac2:	87 2d       	mov	r24, r7
     ac4:	0e 94 49 03 	call	0x692	; 0x692 <rf_cmd>

	return trx_error;
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <rf_tx_packet_repeat+0x234>
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
		while(!(TRX_STATUS & (1 << CCA_DONE)))
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
     aca:	1f ef       	ldi	r17, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);

	return trx_error;
}
     acc:	81 2f       	mov	r24, r17
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	df 90       	pop	r13
     adc:	cf 90       	pop	r12
     ade:	bf 90       	pop	r11
     ae0:	af 90       	pop	r10
     ae2:	9f 90       	pop	r9
     ae4:	8f 90       	pop	r8
     ae6:	7f 90       	pop	r7
     ae8:	5f 90       	pop	r5
     aea:	4f 90       	pop	r4
     aec:	3f 90       	pop	r3
     aee:	2f 90       	pop	r2
     af0:	08 95       	ret

00000af2 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	0e 94 4c 04 	call	0x898	; 0x898 <rf_tx_packet_repeat>
}
     afa:	08 95       	ret

00000afc <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     b00:	80 91 2d 09 	lds	r24, 0x092D
     b04:	88 23       	and	r24, r24
     b06:	49 f1       	breq	.+82     	; 0xb5a <rf_cca_check+0x5e>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     b08:	10 91 41 01 	lds	r17, 0x0141
     b0c:	1f 71       	andi	r17, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     b0e:	81 2f       	mov	r24, r17
     b10:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	c8 f3       	brcs	.-14     	; 0xb08 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     b16:	11 31       	cpi	r17, 0x11	; 17
     b18:	b9 f3       	breq	.-18     	; 0xb08 <rf_cca_check+0xc>
     b1a:	12 31       	cpi	r17, 0x12	; 18
     b1c:	a9 f3       	breq	.-22     	; 0xb08 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     b1e:	1f 31       	cpi	r17, 0x1F	; 31
     b20:	99 f3       	breq	.-26     	; 0xb08 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     b22:	18 30       	cpi	r17, 0x08	; 8
     b24:	21 f0       	breq	.+8      	; 0xb2e <rf_cca_check+0x32>
     b26:	16 30       	cpi	r17, 0x06	; 6
     b28:	11 f0       	breq	.+4      	; 0xb2e <rf_cca_check+0x32>
			&& (trx_status != RX_AACK_ON))
     b2a:	16 31       	cpi	r17, 0x16	; 22
     b2c:	b1 f4       	brne	.+44     	; 0xb5a <rf_cca_check+0x5e>
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     b2e:	86 e1       	ldi	r24, 0x16	; 22
     b30:	0e 94 49 03 	call	0x692	; 0x692 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     b34:	80 91 48 01 	lds	r24, 0x0148
     b38:	80 68       	ori	r24, 0x80	; 128
     b3a:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     b3e:	80 91 41 01 	lds	r24, 0x0141
     b42:	87 ff       	sbrs	r24, 7
     b44:	fc cf       	rjmp	.-8      	; 0xb3e <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     b46:	00 91 41 01 	lds	r16, 0x0141
	rf_cmd(trx_status);
     b4a:	81 2f       	mov	r24, r17
     b4c:	0e 94 49 03 	call	0x692	; 0x692 <rf_cmd>

	return cca_value;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	06 fd       	sbrc	r16, 6
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <rf_cca_check+0x60>
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <rf_cca_check+0x60>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	08 95       	ret

00000b62 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
     b62:	80 91 2d 09 	lds	r24, 0x092D
     b66:	88 23       	and	r24, r24
     b68:	09 f4       	brne	.+2      	; 0xb6c <rf_rx_packet_nonblock+0xa>
     b6a:	84 c0       	rjmp	.+264    	; 0xc74 <rf_rx_packet_nonblock+0x112>
		return NRK_ERROR;

	if(!rx_ready)
     b6c:	80 91 3c 09 	lds	r24, 0x093C
     b70:	88 23       	and	r24, r24
     b72:	09 f4       	brne	.+2      	; 0xb76 <rf_rx_packet_nonblock+0x14>
     b74:	81 c0       	rjmp	.+258    	; 0xc78 <rf_rx_packet_nonblock+0x116>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
     b76:	80 91 7b 01 	lds	r24, 0x017B
     b7a:	e0 91 1b 09 	lds	r30, 0x091B
     b7e:	f0 91 1c 09 	lds	r31, 0x091C
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	02 97       	sbiw	r24, 0x02	; 2
     b86:	24 81       	ldd	r18, Z+4	; 0x04
     b88:	33 27       	eor	r19, r19
     b8a:	27 fd       	sbrc	r18, 7
     b8c:	30 95       	com	r19
     b8e:	28 17       	cp	r18, r24
     b90:	39 07       	cpc	r19, r25
     b92:	0c f4       	brge	.+2      	; 0xb96 <rf_rx_packet_nonblock+0x34>
     b94:	73 c0       	rjmp	.+230    	; 0xc7c <rf_rx_packet_nonblock+0x11a>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     b96:	e0 91 1b 09 	lds	r30, 0x091B
     b9a:	f0 91 1c 09 	lds	r31, 0x091C
     b9e:	80 91 82 01 	lds	r24, 0x0182
     ba2:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     ba4:	e0 91 1b 09 	lds	r30, 0x091B
     ba8:	f0 91 1c 09 	lds	r31, 0x091C
     bac:	80 91 87 01 	lds	r24, 0x0187
     bb0:	90 91 88 01 	lds	r25, 0x0188
     bb4:	92 83       	std	Z+2, r25	; 0x02
     bb6:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     bb8:	e0 91 1b 09 	lds	r30, 0x091B
     bbc:	f0 91 1c 09 	lds	r31, 0x091C
     bc0:	80 91 7b 01 	lds	r24, 0x017B
     bc4:	8b 50       	subi	r24, 0x0B	; 11
     bc6:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     bc8:	a0 91 1b 09 	lds	r26, 0x091B
     bcc:	b0 91 1c 09 	lds	r27, 0x091C
     bd0:	e0 91 1b 09 	lds	r30, 0x091B
     bd4:	f0 91 1c 09 	lds	r31, 0x091C
     bd8:	13 96       	adiw	r26, 0x03	; 3
     bda:	9c 91       	ld	r25, X
     bdc:	13 97       	sbiw	r26, 0x03	; 3
     bde:	84 81       	ldd	r24, Z+4	; 0x04
     be0:	89 17       	cp	r24, r25
     be2:	3c f0       	brlt	.+14     	; 0xbf2 <rf_rx_packet_nonblock+0x90>
			|| (rfSettings.pRxInfo->length < 0)){
     be4:	e0 91 1b 09 	lds	r30, 0x091B
     be8:	f0 91 1c 09 	lds	r31, 0x091C
     bec:	83 81       	ldd	r24, Z+3	; 0x03
     bee:	87 ff       	sbrs	r24, 7
     bf0:	0d c0       	rjmp	.+26     	; 0xc0c <rf_rx_packet_nonblock+0xaa>
		rx_ready = 0;
     bf2:	10 92 3c 09 	sts	0x093C, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     bf6:	80 91 4c 01 	lds	r24, 0x014C
     bfa:	8f 77       	andi	r24, 0x7F	; 127
     bfc:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     c00:	80 91 4c 01 	lds	r24, 0x014C
     c04:	80 68       	ori	r24, 0x80	; 128
     c06:	80 93 4c 01 	sts	0x014C, r24
     c0a:	34 c0       	rjmp	.+104    	; 0xc74 <rf_rx_packet_nonblock+0x112>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     c0c:	e0 91 1b 09 	lds	r30, 0x091B
     c10:	f0 91 1c 09 	lds	r31, 0x091C
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     c14:	a0 91 1b 09 	lds	r26, 0x091B
     c18:	b0 91 1c 09 	lds	r27, 0x091C
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     c1c:	13 96       	adiw	r26, 0x03	; 3
     c1e:	4c 91       	ld	r20, X
     c20:	24 2f       	mov	r18, r20
     c22:	33 27       	eor	r19, r19
     c24:	27 fd       	sbrc	r18, 7
     c26:	30 95       	com	r19
     c28:	85 81       	ldd	r24, Z+5	; 0x05
     c2a:	96 81       	ldd	r25, Z+6	; 0x06
     c2c:	69 e8       	ldi	r22, 0x89	; 137
     c2e:	71 e0       	ldi	r23, 0x01	; 1
     c30:	53 2f       	mov	r21, r19
     c32:	0e 94 2d 29 	call	0x525a	; 0x525a <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     c36:	e0 91 1b 09 	lds	r30, 0x091B
     c3a:	f0 91 1c 09 	lds	r31, 0x091C
     c3e:	80 91 80 01 	lds	r24, 0x0180
     c42:	82 95       	swap	r24
     c44:	86 95       	lsr	r24
     c46:	81 70       	andi	r24, 0x01	; 1
     c48:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     c4a:	e0 91 1b 09 	lds	r30, 0x091B
     c4e:	f0 91 1c 09 	lds	r31, 0x091C
     c52:	80 91 47 01 	lds	r24, 0x0147
     c56:	80 87       	std	Z+8, r24	; 0x08

	/* Reset frame buffer protection */
	rx_ready = 0;
     c58:	10 92 3c 09 	sts	0x093C, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     c5c:	80 91 4c 01 	lds	r24, 0x014C
     c60:	8f 77       	andi	r24, 0x7F	; 127
     c62:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     c66:	80 91 4c 01 	lds	r24, 0x014C
     c6a:	80 68       	ori	r24, 0x80	; 128
     c6c:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	08 95       	ret

	if(!rx_ready)
		return 0;
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	08 95       	ret
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
		return NRK_ERROR;
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
     c7e:	08 95       	ret

00000c80 <__vector_60>:


SIGNAL(TRX24_RX_END_vect)
{	
     c80:	1f 92       	push	r1
     c82:	0f 92       	push	r0
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	0f 92       	push	r0
     c88:	11 24       	eor	r1, r1
     c8a:	8f 93       	push	r24
     c8c:	9f 93       	push	r25
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <__vector_60+0x14>
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	90 91 7b 01 	lds	r25, 0x017B
     c98:	89 17       	cp	r24, r25
     c9a:	d8 f3       	brcs	.-10     	; 0xc92 <__vector_60+0x12>
			vprintf("\r\n");
	}
	vprintf("\r\n");


	if((PHY_RSSI >> RX_CRC_VALID) & 0x1)
     c9c:	80 91 46 01 	lds	r24, 0x0146
     ca0:	87 ff       	sbrs	r24, 7
     ca2:	03 c0       	rjmp	.+6      	; 0xcaa <__vector_60+0x2a>
		rx_ready = 1;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 3c 09 	sts	0x093C, r24
	IRQ_STATUS = (1 << RX_END);
     caa:	88 e0       	ldi	r24, 0x08	; 8
     cac:	80 93 4f 01 	sts	0x014F, r24
	
	return;
}
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	0f 90       	pop	r0
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	0f 90       	pop	r0
     cba:	1f 90       	pop	r1
     cbc:	18 95       	reti

00000cbe <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     cbe:	1f 92       	push	r1
     cc0:	0f 92       	push	r0
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	0f 92       	push	r0
     cc6:	11 24       	eor	r1, r1
     cc8:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     cca:	80 e8       	ldi	r24, 0x80	; 128
     ccc:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     cd0:	8f 91       	pop	r24
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{ 
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	80 93 2c 09 	sts	0x092C, r24
	IRQ_STATUS = (1 << TX_END);
     cee:	80 e4       	ldi	r24, 0x40	; 64
     cf0:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     cf4:	8f 91       	pop	r24
     cf6:	0f 90       	pop	r0
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	0f 90       	pop	r0
     cfc:	1f 90       	pop	r1
     cfe:	18 95       	reti

00000d00 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
     d00:	1f 92       	push	r1
     d02:	0f 92       	push	r0
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	0f 92       	push	r0
     d08:	11 24       	eor	r1, r1
     d0a:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     d0c:	80 e2       	ldi	r24, 0x20	; 32
     d0e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     d12:	8f 91       	pop	r24
     d14:	0f 90       	pop	r0
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	0f 90       	pop	r0
     d1a:	1f 90       	pop	r1
     d1c:	18 95       	reti

00000d1e <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	11 24       	eor	r1, r1
     d28:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     d2a:	80 e1       	ldi	r24, 0x10	; 16
     d2c:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     d30:	8f 91       	pop	r24
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	1f 90       	pop	r1
     d3a:	18 95       	reti

00000d3c <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	0b b6       	in	r0, 0x3b	; 59
     d46:	0f 92       	push	r0
     d48:	11 24       	eor	r1, r1
     d4a:	2f 93       	push	r18
     d4c:	3f 93       	push	r19
     d4e:	4f 93       	push	r20
     d50:	5f 93       	push	r21
     d52:	6f 93       	push	r22
     d54:	7f 93       	push	r23
     d56:	8f 93       	push	r24
     d58:	9f 93       	push	r25
     d5a:	af 93       	push	r26
     d5c:	bf 93       	push	r27
     d5e:	ef 93       	push	r30
     d60:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     d62:	84 e0       	ldi	r24, 0x04	; 4
     d64:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     d68:	e0 91 be 03 	lds	r30, 0x03BE
     d6c:	f0 91 bf 03 	lds	r31, 0x03BF
     d70:	30 97       	sbiw	r30, 0x00	; 0
     d72:	09 f0       	breq	.+2      	; 0xd76 <__vector_59+0x3a>
		rx_start_func();
     d74:	09 95       	icall

	return;
}
     d76:	ff 91       	pop	r31
     d78:	ef 91       	pop	r30
     d7a:	bf 91       	pop	r27
     d7c:	af 91       	pop	r26
     d7e:	9f 91       	pop	r25
     d80:	8f 91       	pop	r24
     d82:	7f 91       	pop	r23
     d84:	6f 91       	pop	r22
     d86:	5f 91       	pop	r21
     d88:	4f 91       	pop	r20
     d8a:	3f 91       	pop	r19
     d8c:	2f 91       	pop	r18
     d8e:	0f 90       	pop	r0
     d90:	0b be       	out	0x3b, r0	; 59
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti

00000d9c <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	11 24       	eor	r1, r1
     da6:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     dae:	8f 91       	pop	r24
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
     dba:	1f 92       	push	r1
     dbc:	0f 92       	push	r0
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	0f 92       	push	r0
     dc2:	11 24       	eor	r1, r1
     dc4:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     dcc:	8f 91       	pop	r24
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0f 90       	pop	r0
     dd4:	1f 90       	pop	r1
     dd6:	18 95       	reti

00000dd8 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
     dd8:	e9 e4       	ldi	r30, 0x49	; 73
     dda:	f1 e0       	ldi	r31, 0x01	; 1
     ddc:	90 81       	ld	r25, Z
     dde:	90 7f       	andi	r25, 0xF0	; 240
     de0:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
     de2:	90 81       	ld	r25, Z
     de4:	8f 70       	andi	r24, 0x0F	; 15
     de6:	89 2b       	or	r24, r25
     de8:	80 83       	st	Z, r24
	return;
}
     dea:	08 95       	ret

00000dec <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	08 95       	ret

00000df0 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
	return;
}
     df0:	08 95       	ret

00000df2 <rf_security_set_key>:


void rf_security_set_key(uint8_t *key)
{
	return;
}
     df2:	08 95       	ret

00000df4 <rf_security_disable>:


void rf_security_disable()
{
	return;
}
     df4:	08 95       	ret

00000df6 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	08 95       	ret

00000dfa <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     dfa:	80 91 17 09 	lds	r24, 0x0917
     dfe:	90 91 18 09 	lds	r25, 0x0918
     e02:	08 95       	ret

00000e04 <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	08 95       	ret

00000e08 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
}
     e08:	08 95       	ret

00000e0a <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	08 95       	ret

00000e0e <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	08 95       	ret

00000e12 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	08 95       	ret

00000e16 <rf_carrier_on>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
     e16:	08 95       	ret

00000e18 <rf_carrier_off>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
     e18:	08 95       	ret

00000e1a <rf_test_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
     e1a:	08 95       	ret

00000e1c <rf_data_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
     e1c:	08 95       	ret

00000e1e <rf_rx_set_serial>:
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
}
     e1e:	08 95       	ret

00000e20 <rf_tx_set_serial>:
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
}
     e20:	08 95       	ret

00000e22 <rf_set_preamble_length>:
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
}
     e22:	08 95       	ret

00000e24 <rf_set_cca_mode>:


void rf_set_cca_mode(uint8_t mode)
{
}
     e24:	08 95       	ret

00000e26 <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
     e26:	80 91 c0 00 	lds	r24, 0x00C0
     e2a:	87 ff       	sbrs	r24, 7
     e2c:	fc cf       	rjmp	.-8      	; 0xe26 <getc0>
     e2e:	80 91 c0 00 	lds	r24, 0x00C0
     e32:	8f 77       	andi	r24, 0x7F	; 127
     e34:	80 93 c0 00 	sts	0x00C0, r24
     e38:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
     e3c:	08 95       	ret

00000e3e <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
     e3e:	90 91 c0 00 	lds	r25, 0x00C0
     e42:	95 ff       	sbrs	r25, 5
     e44:	fc cf       	rjmp	.-8      	; 0xe3e <putc0>
     e46:	90 91 c0 00 	lds	r25, 0x00C0
     e4a:	9f 7d       	andi	r25, 0xDF	; 223
     e4c:	90 93 c0 00 	sts	0x00C0, r25
     e50:	80 93 c6 00 	sts	0x00C6, r24
}
     e54:	08 95       	ret

00000e56 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	08 95       	ret

00000e5a <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	19 f4       	brne	.+6      	; 0xe64 <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
     e5e:	80 91 c8 00 	lds	r24, 0x00C8
     e62:	04 c0       	rjmp	.+8      	; 0xe6c <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
     e64:	88 23       	and	r24, r24
     e66:	31 f4       	brne	.+12     	; 0xe74 <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
     e68:	80 91 c0 00 	lds	r24, 0x00C0
{
   return NRK_ERROR;
}


uint8_t nrk_uart_data_ready(uint8_t uart_num)
     e6c:	88 1f       	adc	r24, r24
     e6e:	88 27       	eor	r24, r24
     e70:	88 1f       	adc	r24, r24
     e72:	08 95       	ret
        }
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
     e74:	80 e0       	ldi	r24, 0x00	; 0
}
     e76:	08 95       	ret

00000e78 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	ec 01       	movw	r28, r24
 char c;
   while((c=pgm_read_byte(addr++)))
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <nrk_kprintf+0x16>
        putchar(c);
     e80:	60 91 2e 0a 	lds	r22, 0x0A2E
     e84:	70 91 2f 0a 	lds	r23, 0x0A2F
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
     e8e:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
     e90:	21 96       	adiw	r28, 0x01	; 1
     e92:	84 91       	lpm	r24, Z+
     e94:	88 23       	and	r24, r24
     e96:	a1 f7       	brne	.-24     	; 0xe80 <nrk_kprintf+0x8>
        putchar(c);
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
     e9e:	86 e0       	ldi	r24, 0x06	; 6
     ea0:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
     ea2:	85 b9       	out	0x05, r24	; 5
#endif
       // DDRE  = ; 
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
     ea4:	88 ef       	ldi	r24, 0xF8	; 248
     ea6:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
     ea8:	80 ef       	ldi	r24, 0xF0	; 240
     eaa:	8b b9       	out	0x0b, r24	; 11
        PORTE  = BM(UART0_TXD); 
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) ; 
     eb0:	80 e6       	ldi	r24, 0x60	; 96
     eb2:	81 b9       	out	0x01, r24	; 1
        PORTA |= BM(RESET_N); 
     eb4:	16 9a       	sbi	0x02, 6	; 2
} 
     eb6:	08 95       	ret

00000eb8 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
     eb8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <PORT_INIT>
//SPI_INIT();
}
     ebc:	08 95       	ret

00000ebe <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
     ebe:	8f 3f       	cpi	r24, 0xFF	; 255
     ec0:	09 f4       	brne	.+2      	; 0xec4 <nrk_gpio_set+0x6>
     ec2:	71 c0       	rjmp	.+226    	; 0xfa6 <nrk_gpio_set+0xe8>
        switch (pin & 0x07) {
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	27 70       	andi	r18, 0x07	; 7
     eca:	30 70       	andi	r19, 0x00	; 0
     ecc:	22 30       	cpi	r18, 0x02	; 2
     ece:	31 05       	cpc	r19, r1
     ed0:	89 f1       	breq	.+98     	; 0xf34 <nrk_gpio_set+0x76>
     ed2:	23 30       	cpi	r18, 0x03	; 3
     ed4:	31 05       	cpc	r19, r1
     ed6:	44 f4       	brge	.+16     	; 0xee8 <nrk_gpio_set+0x2a>
     ed8:	21 15       	cp	r18, r1
     eda:	31 05       	cpc	r19, r1
     edc:	89 f0       	breq	.+34     	; 0xf00 <nrk_gpio_set+0x42>
     ede:	21 30       	cpi	r18, 0x01	; 1
     ee0:	31 05       	cpc	r19, r1
     ee2:	09 f0       	breq	.+2      	; 0xee6 <nrk_gpio_set+0x28>
     ee4:	62 c0       	rjmp	.+196    	; 0xfaa <nrk_gpio_set+0xec>
     ee6:	1a c0       	rjmp	.+52     	; 0xf1c <nrk_gpio_set+0x5e>
     ee8:	24 30       	cpi	r18, 0x04	; 4
     eea:	31 05       	cpc	r19, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <nrk_gpio_set+0x32>
     eee:	3f c0       	rjmp	.+126    	; 0xf6e <nrk_gpio_set+0xb0>
     ef0:	24 30       	cpi	r18, 0x04	; 4
     ef2:	31 05       	cpc	r19, r1
     ef4:	74 f1       	brlt	.+92     	; 0xf52 <nrk_gpio_set+0x94>
     ef6:	25 30       	cpi	r18, 0x05	; 5
     ef8:	31 05       	cpc	r19, r1
     efa:	09 f0       	breq	.+2      	; 0xefe <nrk_gpio_set+0x40>
     efc:	56 c0       	rjmp	.+172    	; 0xfaa <nrk_gpio_set+0xec>
     efe:	45 c0       	rjmp	.+138    	; 0xf8a <nrk_gpio_set+0xcc>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
     f00:	92 b1       	in	r25, 0x02	; 2
     f02:	86 95       	lsr	r24
     f04:	86 95       	lsr	r24
     f06:	86 95       	lsr	r24
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <nrk_gpio_set+0x54>
     f0e:	44 0f       	add	r20, r20
     f10:	55 1f       	adc	r21, r21
     f12:	8a 95       	dec	r24
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <nrk_gpio_set+0x50>
     f16:	94 2b       	or	r25, r20
     f18:	92 b9       	out	0x02, r25	; 2
     f1a:	19 c0       	rjmp	.+50     	; 0xf4e <nrk_gpio_set+0x90>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
     f1c:	95 b1       	in	r25, 0x05	; 5
     f1e:	86 95       	lsr	r24
     f20:	86 95       	lsr	r24
     f22:	86 95       	lsr	r24
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <nrk_gpio_set+0x6c>
     f26:	22 0f       	add	r18, r18
     f28:	33 1f       	adc	r19, r19
     f2a:	8a 95       	dec	r24
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <nrk_gpio_set+0x68>
     f2e:	92 2b       	or	r25, r18
     f30:	95 b9       	out	0x05, r25	; 5
     f32:	0d c0       	rjmp	.+26     	; 0xf4e <nrk_gpio_set+0x90>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
     f34:	98 b1       	in	r25, 0x08	; 8
     f36:	86 95       	lsr	r24
     f38:	86 95       	lsr	r24
     f3a:	86 95       	lsr	r24
     f3c:	41 e0       	ldi	r20, 0x01	; 1
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <nrk_gpio_set+0x88>
     f42:	44 0f       	add	r20, r20
     f44:	55 1f       	adc	r21, r21
     f46:	8a 95       	dec	r24
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <nrk_gpio_set+0x84>
     f4a:	94 2b       	or	r25, r20
     f4c:	98 b9       	out	0x08, r25	; 8
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
     f50:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
     f52:	9b b1       	in	r25, 0x0b	; 11
     f54:	86 95       	lsr	r24
     f56:	86 95       	lsr	r24
     f58:	86 95       	lsr	r24
     f5a:	41 e0       	ldi	r20, 0x01	; 1
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <nrk_gpio_set+0xa6>
     f60:	44 0f       	add	r20, r20
     f62:	55 1f       	adc	r21, r21
     f64:	8a 95       	dec	r24
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <nrk_gpio_set+0xa2>
     f68:	94 2b       	or	r25, r20
     f6a:	9b b9       	out	0x0b, r25	; 11
     f6c:	f0 cf       	rjmp	.-32     	; 0xf4e <nrk_gpio_set+0x90>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
     f6e:	9e b1       	in	r25, 0x0e	; 14
     f70:	86 95       	lsr	r24
     f72:	86 95       	lsr	r24
     f74:	86 95       	lsr	r24
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	50 e0       	ldi	r21, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <nrk_gpio_set+0xc2>
     f7c:	44 0f       	add	r20, r20
     f7e:	55 1f       	adc	r21, r21
     f80:	8a 95       	dec	r24
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <nrk_gpio_set+0xbe>
     f84:	94 2b       	or	r25, r20
     f86:	9e b9       	out	0x0e, r25	; 14
     f88:	e2 cf       	rjmp	.-60     	; 0xf4e <nrk_gpio_set+0x90>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
     f8a:	91 b3       	in	r25, 0x11	; 17
     f8c:	86 95       	lsr	r24
     f8e:	86 95       	lsr	r24
     f90:	86 95       	lsr	r24
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <nrk_gpio_set+0xde>
     f98:	44 0f       	add	r20, r20
     f9a:	55 1f       	adc	r21, r21
     f9c:	8a 95       	dec	r24
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <nrk_gpio_set+0xda>
     fa0:	94 2b       	or	r25, r20
     fa2:	91 bb       	out	0x11, r25	; 17
     fa4:	d4 cf       	rjmp	.-88     	; 0xf4e <nrk_gpio_set+0x90>
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	08 95       	ret
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
     faa:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
     fac:	08 95       	ret

00000fae <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
     fae:	8f 3f       	cpi	r24, 0xFF	; 255
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <nrk_gpio_clr+0x6>
     fb2:	77 c0       	rjmp	.+238    	; 0x10a2 <nrk_gpio_clr+0xf4>
        switch (pin & 0x07) {
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	27 70       	andi	r18, 0x07	; 7
     fba:	30 70       	andi	r19, 0x00	; 0
     fbc:	22 30       	cpi	r18, 0x02	; 2
     fbe:	31 05       	cpc	r19, r1
     fc0:	99 f1       	breq	.+102    	; 0x1028 <nrk_gpio_clr+0x7a>
     fc2:	23 30       	cpi	r18, 0x03	; 3
     fc4:	31 05       	cpc	r19, r1
     fc6:	44 f4       	brge	.+16     	; 0xfd8 <nrk_gpio_clr+0x2a>
     fc8:	21 15       	cp	r18, r1
     fca:	31 05       	cpc	r19, r1
     fcc:	89 f0       	breq	.+34     	; 0xff0 <nrk_gpio_clr+0x42>
     fce:	21 30       	cpi	r18, 0x01	; 1
     fd0:	31 05       	cpc	r19, r1
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <nrk_gpio_clr+0x28>
     fd4:	68 c0       	rjmp	.+208    	; 0x10a6 <nrk_gpio_clr+0xf8>
     fd6:	1b c0       	rjmp	.+54     	; 0x100e <nrk_gpio_clr+0x60>
     fd8:	24 30       	cpi	r18, 0x04	; 4
     fda:	31 05       	cpc	r19, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <nrk_gpio_clr+0x32>
     fde:	43 c0       	rjmp	.+134    	; 0x1066 <nrk_gpio_clr+0xb8>
     fe0:	24 30       	cpi	r18, 0x04	; 4
     fe2:	31 05       	cpc	r19, r1
     fe4:	8c f1       	brlt	.+98     	; 0x1048 <nrk_gpio_clr+0x9a>
     fe6:	25 30       	cpi	r18, 0x05	; 5
     fe8:	31 05       	cpc	r19, r1
     fea:	09 f0       	breq	.+2      	; 0xfee <nrk_gpio_clr+0x40>
     fec:	5c c0       	rjmp	.+184    	; 0x10a6 <nrk_gpio_clr+0xf8>
     fee:	4a c0       	rjmp	.+148    	; 0x1084 <nrk_gpio_clr+0xd6>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
     ff0:	92 b1       	in	r25, 0x02	; 2
     ff2:	86 95       	lsr	r24
     ff4:	86 95       	lsr	r24
     ff6:	86 95       	lsr	r24
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <nrk_gpio_clr+0x54>
     ffe:	44 0f       	add	r20, r20
    1000:	55 1f       	adc	r21, r21
    1002:	8a 95       	dec	r24
    1004:	e2 f7       	brpl	.-8      	; 0xffe <nrk_gpio_clr+0x50>
    1006:	40 95       	com	r20
    1008:	49 23       	and	r20, r25
    100a:	42 b9       	out	0x02, r20	; 2
    100c:	1b c0       	rjmp	.+54     	; 0x1044 <nrk_gpio_clr+0x96>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    100e:	95 b1       	in	r25, 0x05	; 5
    1010:	86 95       	lsr	r24
    1012:	86 95       	lsr	r24
    1014:	86 95       	lsr	r24
    1016:	02 c0       	rjmp	.+4      	; 0x101c <nrk_gpio_clr+0x6e>
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	8a 95       	dec	r24
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <nrk_gpio_clr+0x6a>
    1020:	20 95       	com	r18
    1022:	29 23       	and	r18, r25
    1024:	25 b9       	out	0x05, r18	; 5
    1026:	0e c0       	rjmp	.+28     	; 0x1044 <nrk_gpio_clr+0x96>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1028:	98 b1       	in	r25, 0x08	; 8
    102a:	86 95       	lsr	r24
    102c:	86 95       	lsr	r24
    102e:	86 95       	lsr	r24
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	02 c0       	rjmp	.+4      	; 0x103a <nrk_gpio_clr+0x8c>
    1036:	44 0f       	add	r20, r20
    1038:	55 1f       	adc	r21, r21
    103a:	8a 95       	dec	r24
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <nrk_gpio_clr+0x88>
    103e:	40 95       	com	r20
    1040:	49 23       	and	r20, r25
    1042:	48 b9       	out	0x08, r20	; 8
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1046:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1048:	9b b1       	in	r25, 0x0b	; 11
    104a:	86 95       	lsr	r24
    104c:	86 95       	lsr	r24
    104e:	86 95       	lsr	r24
    1050:	41 e0       	ldi	r20, 0x01	; 1
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <nrk_gpio_clr+0xac>
    1056:	44 0f       	add	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	8a 95       	dec	r24
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <nrk_gpio_clr+0xa8>
    105e:	40 95       	com	r20
    1060:	49 23       	and	r20, r25
    1062:	4b b9       	out	0x0b, r20	; 11
    1064:	ef cf       	rjmp	.-34     	; 0x1044 <nrk_gpio_clr+0x96>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1066:	9e b1       	in	r25, 0x0e	; 14
    1068:	86 95       	lsr	r24
    106a:	86 95       	lsr	r24
    106c:	86 95       	lsr	r24
    106e:	41 e0       	ldi	r20, 0x01	; 1
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <nrk_gpio_clr+0xca>
    1074:	44 0f       	add	r20, r20
    1076:	55 1f       	adc	r21, r21
    1078:	8a 95       	dec	r24
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <nrk_gpio_clr+0xc6>
    107c:	40 95       	com	r20
    107e:	49 23       	and	r20, r25
    1080:	4e b9       	out	0x0e, r20	; 14
    1082:	e0 cf       	rjmp	.-64     	; 0x1044 <nrk_gpio_clr+0x96>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1084:	91 b3       	in	r25, 0x11	; 17
    1086:	86 95       	lsr	r24
    1088:	86 95       	lsr	r24
    108a:	86 95       	lsr	r24
    108c:	41 e0       	ldi	r20, 0x01	; 1
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <nrk_gpio_clr+0xe8>
    1092:	44 0f       	add	r20, r20
    1094:	55 1f       	adc	r21, r21
    1096:	8a 95       	dec	r24
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <nrk_gpio_clr+0xe4>
    109a:	40 95       	com	r20
    109c:	49 23       	and	r20, r25
    109e:	41 bb       	out	0x11, r20	; 17
    10a0:	d1 cf       	rjmp	.-94     	; 0x1044 <nrk_gpio_clr+0x96>
        return 1;
}

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	08 95       	ret
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    10a8:	08 95       	ret

000010aa <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    10aa:	8f 3f       	cpi	r24, 0xFF	; 255
    10ac:	89 f1       	breq	.+98     	; 0x1110 <nrk_gpio_get+0x66>
        switch (pin & 0x07) {
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	27 70       	andi	r18, 0x07	; 7
    10b4:	30 70       	andi	r19, 0x00	; 0
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	c1 f0       	breq	.+48     	; 0x10ec <nrk_gpio_get+0x42>
    10bc:	23 30       	cpi	r18, 0x03	; 3
    10be:	31 05       	cpc	r19, r1
    10c0:	3c f4       	brge	.+14     	; 0x10d0 <nrk_gpio_get+0x26>
    10c2:	21 15       	cp	r18, r1
    10c4:	31 05       	cpc	r19, r1
    10c6:	71 f0       	breq	.+28     	; 0x10e4 <nrk_gpio_get+0x3a>
    10c8:	21 30       	cpi	r18, 0x01	; 1
    10ca:	31 05       	cpc	r19, r1
    10cc:	09 f5       	brne	.+66     	; 0x1110 <nrk_gpio_get+0x66>
    10ce:	0c c0       	rjmp	.+24     	; 0x10e8 <nrk_gpio_get+0x3e>
    10d0:	24 30       	cpi	r18, 0x04	; 4
    10d2:	31 05       	cpc	r19, r1
    10d4:	79 f0       	breq	.+30     	; 0x10f4 <nrk_gpio_get+0x4a>
    10d6:	24 30       	cpi	r18, 0x04	; 4
    10d8:	31 05       	cpc	r19, r1
    10da:	54 f0       	brlt	.+20     	; 0x10f0 <nrk_gpio_get+0x46>
    10dc:	25 30       	cpi	r18, 0x05	; 5
    10de:	31 05       	cpc	r19, r1
    10e0:	b9 f4       	brne	.+46     	; 0x1110 <nrk_gpio_get+0x66>
    10e2:	0a c0       	rjmp	.+20     	; 0x10f8 <nrk_gpio_get+0x4e>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    10e4:	20 b1       	in	r18, 0x00	; 0
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <nrk_gpio_get+0x50>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    10e8:	23 b1       	in	r18, 0x03	; 3
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <nrk_gpio_get+0x50>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    10ec:	26 b1       	in	r18, 0x06	; 6
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <nrk_gpio_get+0x50>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    10f0:	29 b1       	in	r18, 0x09	; 9
    10f2:	03 c0       	rjmp	.+6      	; 0x10fa <nrk_gpio_get+0x50>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    10f4:	2c b1       	in	r18, 0x0c	; 12
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <nrk_gpio_get+0x50>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    10f8:	2f b1       	in	r18, 0x0f	; 15
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	86 95       	lsr	r24
    10fe:	86 95       	lsr	r24
    1100:	86 95       	lsr	r24
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <nrk_gpio_get+0x5e>
    1104:	35 95       	asr	r19
    1106:	27 95       	ror	r18
    1108:	8a 95       	dec	r24
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <nrk_gpio_get+0x5a>
    110c:	21 70       	andi	r18, 0x01	; 1
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <nrk_gpio_get+0x68>
                default: return -1;
    1110:	2f ef       	ldi	r18, 0xFF	; 255
        }
        return 1;
}
    1112:	82 2f       	mov	r24, r18
    1114:	08 95       	ret

00001116 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1116:	8f 3f       	cpi	r24, 0xFF	; 255
    1118:	09 f4       	brne	.+2      	; 0x111c <nrk_gpio_toggle+0x6>
    111a:	fa c0       	rjmp	.+500    	; 0x1310 <nrk_gpio_toggle+0x1fa>
        switch (pin & 0x07) {
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	27 70       	andi	r18, 0x07	; 7
    1122:	30 70       	andi	r19, 0x00	; 0
    1124:	22 30       	cpi	r18, 0x02	; 2
    1126:	31 05       	cpc	r19, r1
    1128:	09 f4       	brne	.+2      	; 0x112c <nrk_gpio_toggle+0x16>
    112a:	59 c0       	rjmp	.+178    	; 0x11de <nrk_gpio_toggle+0xc8>
    112c:	23 30       	cpi	r18, 0x03	; 3
    112e:	31 05       	cpc	r19, r1
    1130:	44 f4       	brge	.+16     	; 0x1142 <nrk_gpio_toggle+0x2c>
    1132:	21 15       	cp	r18, r1
    1134:	31 05       	cpc	r19, r1
    1136:	91 f0       	breq	.+36     	; 0x115c <nrk_gpio_toggle+0x46>
    1138:	21 30       	cpi	r18, 0x01	; 1
    113a:	31 05       	cpc	r19, r1
    113c:	09 f0       	breq	.+2      	; 0x1140 <nrk_gpio_toggle+0x2a>
    113e:	ea c0       	rjmp	.+468    	; 0x1314 <nrk_gpio_toggle+0x1fe>
    1140:	33 c0       	rjmp	.+102    	; 0x11a8 <nrk_gpio_toggle+0x92>
    1142:	24 30       	cpi	r18, 0x04	; 4
    1144:	31 05       	cpc	r19, r1
    1146:	09 f4       	brne	.+2      	; 0x114a <nrk_gpio_toggle+0x34>
    1148:	97 c0       	rjmp	.+302    	; 0x1278 <nrk_gpio_toggle+0x162>
    114a:	24 30       	cpi	r18, 0x04	; 4
    114c:	31 05       	cpc	r19, r1
    114e:	0c f4       	brge	.+2      	; 0x1152 <nrk_gpio_toggle+0x3c>
    1150:	6c c0       	rjmp	.+216    	; 0x122a <nrk_gpio_toggle+0x114>
    1152:	25 30       	cpi	r18, 0x05	; 5
    1154:	31 05       	cpc	r19, r1
    1156:	09 f0       	breq	.+2      	; 0x115a <nrk_gpio_toggle+0x44>
    1158:	dd c0       	rjmp	.+442    	; 0x1314 <nrk_gpio_toggle+0x1fe>
    115a:	b4 c0       	rjmp	.+360    	; 0x12c4 <nrk_gpio_toggle+0x1ae>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    115c:	90 b1       	in	r25, 0x00	; 0
    115e:	86 95       	lsr	r24
    1160:	86 95       	lsr	r24
    1162:	86 95       	lsr	r24
    1164:	28 2f       	mov	r18, r24
    1166:	89 2f       	mov	r24, r25
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <nrk_gpio_toggle+0x5c>
    116e:	95 95       	asr	r25
    1170:	87 95       	ror	r24
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <nrk_gpio_toggle+0x58>
    1176:	80 fd       	sbrc	r24, 0
    1178:	0b c0       	rjmp	.+22     	; 0x1190 <nrk_gpio_toggle+0x7a>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    117a:	32 b1       	in	r19, 0x02	; 2
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <nrk_gpio_toggle+0x70>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	2a 95       	dec	r18
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <nrk_gpio_toggle+0x6c>
    118a:	38 2b       	or	r19, r24
    118c:	32 b9       	out	0x02, r19	; 2
    118e:	66 c0       	rjmp	.+204    	; 0x125c <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    1190:	32 b1       	in	r19, 0x02	; 2
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 c0       	rjmp	.+4      	; 0x119c <nrk_gpio_toggle+0x86>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	2a 95       	dec	r18
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <nrk_gpio_toggle+0x82>
    11a0:	80 95       	com	r24
    11a2:	83 23       	and	r24, r19
    11a4:	82 b9       	out	0x02, r24	; 2
    11a6:	5a c0       	rjmp	.+180    	; 0x125c <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    11a8:	43 b1       	in	r20, 0x03	; 3
    11aa:	86 95       	lsr	r24
    11ac:	86 95       	lsr	r24
    11ae:	86 95       	lsr	r24
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	08 2e       	mov	r0, r24
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <nrk_gpio_toggle+0xa4>
    11b6:	55 95       	asr	r21
    11b8:	47 95       	ror	r20
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <nrk_gpio_toggle+0xa0>
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <nrk_gpio_toggle+0xae>
    11c0:	22 0f       	add	r18, r18
    11c2:	33 1f       	adc	r19, r19
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <nrk_gpio_toggle+0xaa>
    11c8:	40 fd       	sbrc	r20, 0
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <nrk_gpio_toggle+0xbe>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    11cc:	85 b1       	in	r24, 0x05	; 5
    11ce:	82 2b       	or	r24, r18
    11d0:	85 b9       	out	0x05, r24	; 5
    11d2:	44 c0       	rjmp	.+136    	; 0x125c <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    11d4:	85 b1       	in	r24, 0x05	; 5
    11d6:	20 95       	com	r18
    11d8:	28 23       	and	r18, r24
    11da:	25 b9       	out	0x05, r18	; 5
    11dc:	3f c0       	rjmp	.+126    	; 0x125c <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    11de:	96 b1       	in	r25, 0x06	; 6
    11e0:	86 95       	lsr	r24
    11e2:	86 95       	lsr	r24
    11e4:	86 95       	lsr	r24
    11e6:	28 2f       	mov	r18, r24
    11e8:	89 2f       	mov	r24, r25
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <nrk_gpio_toggle+0xde>
    11f0:	95 95       	asr	r25
    11f2:	87 95       	ror	r24
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <nrk_gpio_toggle+0xda>
    11f8:	80 fd       	sbrc	r24, 0
    11fa:	0b c0       	rjmp	.+22     	; 0x1212 <nrk_gpio_toggle+0xfc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    11fc:	38 b1       	in	r19, 0x08	; 8
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <nrk_gpio_toggle+0xf2>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	2a 95       	dec	r18
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <nrk_gpio_toggle+0xee>
    120c:	38 2b       	or	r19, r24
    120e:	38 b9       	out	0x08, r19	; 8
    1210:	25 c0       	rjmp	.+74     	; 0x125c <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1212:	38 b1       	in	r19, 0x08	; 8
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <nrk_gpio_toggle+0x108>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	2a 95       	dec	r18
    1220:	e2 f7       	brpl	.-8      	; 0x121a <nrk_gpio_toggle+0x104>
    1222:	80 95       	com	r24
    1224:	83 23       	and	r24, r19
    1226:	88 b9       	out	0x08, r24	; 8
    1228:	19 c0       	rjmp	.+50     	; 0x125c <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    122a:	99 b1       	in	r25, 0x09	; 9
    122c:	86 95       	lsr	r24
    122e:	86 95       	lsr	r24
    1230:	86 95       	lsr	r24
    1232:	28 2f       	mov	r18, r24
    1234:	89 2f       	mov	r24, r25
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <nrk_gpio_toggle+0x12a>
    123c:	95 95       	asr	r25
    123e:	87 95       	ror	r24
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <nrk_gpio_toggle+0x126>
    1244:	80 fd       	sbrc	r24, 0
    1246:	0c c0       	rjmp	.+24     	; 0x1260 <nrk_gpio_toggle+0x14a>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1248:	3b b1       	in	r19, 0x0b	; 11
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <nrk_gpio_toggle+0x13e>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	2a 95       	dec	r18
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <nrk_gpio_toggle+0x13a>
    1258:	38 2b       	or	r19, r24
    125a:	3b b9       	out	0x0b, r19	; 11
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                default: return -1;
        }
        return 1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	08 95       	ret
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    1260:	3b b1       	in	r19, 0x0b	; 11
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <nrk_gpio_toggle+0x156>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	2a 95       	dec	r18
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <nrk_gpio_toggle+0x152>
    1270:	80 95       	com	r24
    1272:	83 23       	and	r24, r19
    1274:	8b b9       	out	0x0b, r24	; 11
    1276:	f2 cf       	rjmp	.-28     	; 0x125c <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    1278:	9c b1       	in	r25, 0x0c	; 12
    127a:	86 95       	lsr	r24
    127c:	86 95       	lsr	r24
    127e:	86 95       	lsr	r24
    1280:	28 2f       	mov	r18, r24
    1282:	89 2f       	mov	r24, r25
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <nrk_gpio_toggle+0x178>
    128a:	95 95       	asr	r25
    128c:	87 95       	ror	r24
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <nrk_gpio_toggle+0x174>
    1292:	80 fd       	sbrc	r24, 0
    1294:	0b c0       	rjmp	.+22     	; 0x12ac <nrk_gpio_toggle+0x196>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1296:	3e b1       	in	r19, 0x0e	; 14
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <nrk_gpio_toggle+0x18c>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	2a 95       	dec	r18
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <nrk_gpio_toggle+0x188>
    12a6:	38 2b       	or	r19, r24
    12a8:	3e b9       	out	0x0e, r19	; 14
    12aa:	d8 cf       	rjmp	.-80     	; 0x125c <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    12ac:	3e b1       	in	r19, 0x0e	; 14
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <nrk_gpio_toggle+0x1a2>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	2a 95       	dec	r18
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <nrk_gpio_toggle+0x19e>
    12bc:	80 95       	com	r24
    12be:	83 23       	and	r24, r19
    12c0:	8e b9       	out	0x0e, r24	; 14
    12c2:	cc cf       	rjmp	.-104    	; 0x125c <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    12c4:	9f b1       	in	r25, 0x0f	; 15
    12c6:	86 95       	lsr	r24
    12c8:	86 95       	lsr	r24
    12ca:	86 95       	lsr	r24
    12cc:	28 2f       	mov	r18, r24
    12ce:	89 2f       	mov	r24, r25
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <nrk_gpio_toggle+0x1c4>
    12d6:	95 95       	asr	r25
    12d8:	87 95       	ror	r24
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <nrk_gpio_toggle+0x1c0>
    12de:	80 fd       	sbrc	r24, 0
    12e0:	0b c0       	rjmp	.+22     	; 0x12f8 <nrk_gpio_toggle+0x1e2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    12e2:	31 b3       	in	r19, 0x11	; 17
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <nrk_gpio_toggle+0x1d8>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	2a 95       	dec	r18
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <nrk_gpio_toggle+0x1d4>
    12f2:	38 2b       	or	r19, r24
    12f4:	31 bb       	out	0x11, r19	; 17
    12f6:	b2 cf       	rjmp	.-156    	; 0x125c <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    12f8:	31 b3       	in	r19, 0x11	; 17
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <nrk_gpio_toggle+0x1ee>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	2a 95       	dec	r18
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <nrk_gpio_toggle+0x1ea>
    1308:	80 95       	com	r24
    130a:	83 23       	and	r24, r19
    130c:	81 bb       	out	0x11, r24	; 17
    130e:	a6 cf       	rjmp	.-180    	; 0x125c <nrk_gpio_toggle+0x146>
        return 1;
}

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	08 95       	ret
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                default: return -1;
    1314:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1316:	08 95       	ret

00001318 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1318:	8f 3f       	cpi	r24, 0xFF	; 255
    131a:	09 f4       	brne	.+2      	; 0x131e <nrk_gpio_direction+0x6>
    131c:	01 c1       	rjmp	.+514    	; 0x1520 <nrk_gpio_direction+0x208>
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    1322:	66 23       	and	r22, r22
    1324:	09 f0       	breq	.+2      	; 0x1328 <nrk_gpio_direction+0x10>
    1326:	8d c0       	rjmp	.+282    	; 0x1442 <nrk_gpio_direction+0x12a>
                switch (pin & 0x07) {
    1328:	27 70       	andi	r18, 0x07	; 7
    132a:	30 70       	andi	r19, 0x00	; 0
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	e1 f1       	breq	.+120    	; 0x13aa <nrk_gpio_direction+0x92>
    1332:	23 30       	cpi	r18, 0x03	; 3
    1334:	31 05       	cpc	r19, r1
    1336:	44 f4       	brge	.+16     	; 0x1348 <nrk_gpio_direction+0x30>
    1338:	21 15       	cp	r18, r1
    133a:	31 05       	cpc	r19, r1
    133c:	91 f0       	breq	.+36     	; 0x1362 <nrk_gpio_direction+0x4a>
    133e:	21 30       	cpi	r18, 0x01	; 1
    1340:	31 05       	cpc	r19, r1
    1342:	09 f0       	breq	.+2      	; 0x1346 <nrk_gpio_direction+0x2e>
    1344:	ed c0       	rjmp	.+474    	; 0x1520 <nrk_gpio_direction+0x208>
    1346:	20 c0       	rjmp	.+64     	; 0x1388 <nrk_gpio_direction+0x70>
    1348:	24 30       	cpi	r18, 0x04	; 4
    134a:	31 05       	cpc	r19, r1
    134c:	09 f4       	brne	.+2      	; 0x1350 <nrk_gpio_direction+0x38>
    134e:	53 c0       	rjmp	.+166    	; 0x13f6 <nrk_gpio_direction+0xde>
    1350:	24 30       	cpi	r18, 0x04	; 4
    1352:	31 05       	cpc	r19, r1
    1354:	0c f4       	brge	.+2      	; 0x1358 <nrk_gpio_direction+0x40>
    1356:	3c c0       	rjmp	.+120    	; 0x13d0 <nrk_gpio_direction+0xb8>
    1358:	25 30       	cpi	r18, 0x05	; 5
    135a:	31 05       	cpc	r19, r1
    135c:	09 f0       	breq	.+2      	; 0x1360 <nrk_gpio_direction+0x48>
    135e:	e0 c0       	rjmp	.+448    	; 0x1520 <nrk_gpio_direction+0x208>
    1360:	5d c0       	rjmp	.+186    	; 0x141c <nrk_gpio_direction+0x104>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    1362:	91 b1       	in	r25, 0x01	; 1
    1364:	86 95       	lsr	r24
    1366:	86 95       	lsr	r24
    1368:	86 95       	lsr	r24
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <nrk_gpio_direction+0x5c>
    1370:	44 0f       	add	r20, r20
    1372:	55 1f       	adc	r21, r21
    1374:	8a 95       	dec	r24
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <nrk_gpio_direction+0x58>
    1378:	84 2f       	mov	r24, r20
    137a:	80 95       	com	r24
    137c:	89 23       	and	r24, r25
    137e:	81 b9       	out	0x01, r24	; 1
                                PORTA |= BM((pin & 0xF8) >> 3); 
    1380:	82 b1       	in	r24, 0x02	; 2
    1382:	84 2b       	or	r24, r20
    1384:	82 b9       	out	0x02, r24	; 2
    1386:	ca c0       	rjmp	.+404    	; 0x151c <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    1388:	94 b1       	in	r25, 0x04	; 4
    138a:	86 95       	lsr	r24
    138c:	86 95       	lsr	r24
    138e:	86 95       	lsr	r24
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <nrk_gpio_direction+0x7e>
    1392:	22 0f       	add	r18, r18
    1394:	33 1f       	adc	r19, r19
    1396:	8a 95       	dec	r24
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <nrk_gpio_direction+0x7a>
    139a:	82 2f       	mov	r24, r18
    139c:	80 95       	com	r24
    139e:	89 23       	and	r24, r25
    13a0:	84 b9       	out	0x04, r24	; 4
                                PORTB |= BM((pin & 0xF8) >> 3); 
    13a2:	85 b1       	in	r24, 0x05	; 5
    13a4:	82 2b       	or	r24, r18
    13a6:	85 b9       	out	0x05, r24	; 5
    13a8:	b9 c0       	rjmp	.+370    	; 0x151c <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    13aa:	97 b1       	in	r25, 0x07	; 7
    13ac:	86 95       	lsr	r24
    13ae:	86 95       	lsr	r24
    13b0:	86 95       	lsr	r24
    13b2:	41 e0       	ldi	r20, 0x01	; 1
    13b4:	50 e0       	ldi	r21, 0x00	; 0
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <nrk_gpio_direction+0xa4>
    13b8:	44 0f       	add	r20, r20
    13ba:	55 1f       	adc	r21, r21
    13bc:	8a 95       	dec	r24
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <nrk_gpio_direction+0xa0>
    13c0:	84 2f       	mov	r24, r20
    13c2:	80 95       	com	r24
    13c4:	89 23       	and	r24, r25
    13c6:	87 b9       	out	0x07, r24	; 7
                                PORTC |= BM((pin & 0xF8) >> 3); 
    13c8:	88 b1       	in	r24, 0x08	; 8
    13ca:	84 2b       	or	r24, r20
    13cc:	88 b9       	out	0x08, r24	; 8
    13ce:	a6 c0       	rjmp	.+332    	; 0x151c <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    13d0:	9a b1       	in	r25, 0x0a	; 10
    13d2:	86 95       	lsr	r24
    13d4:	86 95       	lsr	r24
    13d6:	86 95       	lsr	r24
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <nrk_gpio_direction+0xca>
    13de:	44 0f       	add	r20, r20
    13e0:	55 1f       	adc	r21, r21
    13e2:	8a 95       	dec	r24
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <nrk_gpio_direction+0xc6>
    13e6:	84 2f       	mov	r24, r20
    13e8:	80 95       	com	r24
    13ea:	89 23       	and	r24, r25
    13ec:	8a b9       	out	0x0a, r24	; 10
                                PORTD |= BM((pin & 0xF8) >> 3); 
    13ee:	8b b1       	in	r24, 0x0b	; 11
    13f0:	84 2b       	or	r24, r20
    13f2:	8b b9       	out	0x0b, r24	; 11
    13f4:	93 c0       	rjmp	.+294    	; 0x151c <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    13f6:	9d b1       	in	r25, 0x0d	; 13
    13f8:	86 95       	lsr	r24
    13fa:	86 95       	lsr	r24
    13fc:	86 95       	lsr	r24
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <nrk_gpio_direction+0xf0>
    1404:	44 0f       	add	r20, r20
    1406:	55 1f       	adc	r21, r21
    1408:	8a 95       	dec	r24
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <nrk_gpio_direction+0xec>
    140c:	84 2f       	mov	r24, r20
    140e:	80 95       	com	r24
    1410:	89 23       	and	r24, r25
    1412:	8d b9       	out	0x0d, r24	; 13
                                PORTE |= BM((pin & 0xF8) >> 3); 
    1414:	8e b1       	in	r24, 0x0e	; 14
    1416:	84 2b       	or	r24, r20
    1418:	8e b9       	out	0x0e, r24	; 14
    141a:	80 c0       	rjmp	.+256    	; 0x151c <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    141c:	90 b3       	in	r25, 0x10	; 16
    141e:	86 95       	lsr	r24
    1420:	86 95       	lsr	r24
    1422:	86 95       	lsr	r24
    1424:	41 e0       	ldi	r20, 0x01	; 1
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	02 c0       	rjmp	.+4      	; 0x142e <nrk_gpio_direction+0x116>
    142a:	44 0f       	add	r20, r20
    142c:	55 1f       	adc	r21, r21
    142e:	8a 95       	dec	r24
    1430:	e2 f7       	brpl	.-8      	; 0x142a <nrk_gpio_direction+0x112>
    1432:	84 2f       	mov	r24, r20
    1434:	80 95       	com	r24
    1436:	89 23       	and	r24, r25
    1438:	80 bb       	out	0x10, r24	; 16
                                PORTF |= BM((pin & 0xF8) >> 3); 
    143a:	81 b3       	in	r24, 0x11	; 17
    143c:	84 2b       	or	r24, r20
    143e:	81 bb       	out	0x11, r24	; 17
    1440:	6d c0       	rjmp	.+218    	; 0x151c <nrk_gpio_direction+0x204>
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1442:	27 70       	andi	r18, 0x07	; 7
    1444:	30 70       	andi	r19, 0x00	; 0
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	89 f1       	breq	.+98     	; 0x14ae <nrk_gpio_direction+0x196>
    144c:	23 30       	cpi	r18, 0x03	; 3
    144e:	31 05       	cpc	r19, r1
    1450:	44 f4       	brge	.+16     	; 0x1462 <nrk_gpio_direction+0x14a>
    1452:	21 15       	cp	r18, r1
    1454:	31 05       	cpc	r19, r1
    1456:	89 f0       	breq	.+34     	; 0x147a <nrk_gpio_direction+0x162>
    1458:	21 30       	cpi	r18, 0x01	; 1
    145a:	31 05       	cpc	r19, r1
    145c:	09 f0       	breq	.+2      	; 0x1460 <nrk_gpio_direction+0x148>
    145e:	62 c0       	rjmp	.+196    	; 0x1524 <nrk_gpio_direction+0x20c>
    1460:	1a c0       	rjmp	.+52     	; 0x1496 <nrk_gpio_direction+0x17e>
    1462:	24 30       	cpi	r18, 0x04	; 4
    1464:	31 05       	cpc	r19, r1
    1466:	09 f4       	brne	.+2      	; 0x146a <nrk_gpio_direction+0x152>
    1468:	3e c0       	rjmp	.+124    	; 0x14e6 <nrk_gpio_direction+0x1ce>
    146a:	24 30       	cpi	r18, 0x04	; 4
    146c:	31 05       	cpc	r19, r1
    146e:	6c f1       	brlt	.+90     	; 0x14ca <nrk_gpio_direction+0x1b2>
    1470:	25 30       	cpi	r18, 0x05	; 5
    1472:	31 05       	cpc	r19, r1
    1474:	09 f0       	breq	.+2      	; 0x1478 <nrk_gpio_direction+0x160>
    1476:	56 c0       	rjmp	.+172    	; 0x1524 <nrk_gpio_direction+0x20c>
    1478:	44 c0       	rjmp	.+136    	; 0x1502 <nrk_gpio_direction+0x1ea>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    147a:	91 b1       	in	r25, 0x01	; 1
    147c:	86 95       	lsr	r24
    147e:	86 95       	lsr	r24
    1480:	86 95       	lsr	r24
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	02 c0       	rjmp	.+4      	; 0x148c <nrk_gpio_direction+0x174>
    1488:	44 0f       	add	r20, r20
    148a:	55 1f       	adc	r21, r21
    148c:	8a 95       	dec	r24
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <nrk_gpio_direction+0x170>
    1490:	94 2b       	or	r25, r20
    1492:	91 b9       	out	0x01, r25	; 1
    1494:	43 c0       	rjmp	.+134    	; 0x151c <nrk_gpio_direction+0x204>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    1496:	94 b1       	in	r25, 0x04	; 4
    1498:	86 95       	lsr	r24
    149a:	86 95       	lsr	r24
    149c:	86 95       	lsr	r24
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <nrk_gpio_direction+0x18c>
    14a0:	22 0f       	add	r18, r18
    14a2:	33 1f       	adc	r19, r19
    14a4:	8a 95       	dec	r24
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <nrk_gpio_direction+0x188>
    14a8:	92 2b       	or	r25, r18
    14aa:	94 b9       	out	0x04, r25	; 4
    14ac:	37 c0       	rjmp	.+110    	; 0x151c <nrk_gpio_direction+0x204>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    14ae:	97 b1       	in	r25, 0x07	; 7
    14b0:	86 95       	lsr	r24
    14b2:	86 95       	lsr	r24
    14b4:	86 95       	lsr	r24
    14b6:	41 e0       	ldi	r20, 0x01	; 1
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <nrk_gpio_direction+0x1a8>
    14bc:	44 0f       	add	r20, r20
    14be:	55 1f       	adc	r21, r21
    14c0:	8a 95       	dec	r24
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <nrk_gpio_direction+0x1a4>
    14c4:	94 2b       	or	r25, r20
    14c6:	97 b9       	out	0x07, r25	; 7
    14c8:	29 c0       	rjmp	.+82     	; 0x151c <nrk_gpio_direction+0x204>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    14ca:	9a b1       	in	r25, 0x0a	; 10
    14cc:	86 95       	lsr	r24
    14ce:	86 95       	lsr	r24
    14d0:	86 95       	lsr	r24
    14d2:	41 e0       	ldi	r20, 0x01	; 1
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <nrk_gpio_direction+0x1c4>
    14d8:	44 0f       	add	r20, r20
    14da:	55 1f       	adc	r21, r21
    14dc:	8a 95       	dec	r24
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <nrk_gpio_direction+0x1c0>
    14e0:	94 2b       	or	r25, r20
    14e2:	9a b9       	out	0x0a, r25	; 10
    14e4:	1b c0       	rjmp	.+54     	; 0x151c <nrk_gpio_direction+0x204>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    14e6:	9d b1       	in	r25, 0x0d	; 13
    14e8:	86 95       	lsr	r24
    14ea:	86 95       	lsr	r24
    14ec:	86 95       	lsr	r24
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <nrk_gpio_direction+0x1e0>
    14f4:	44 0f       	add	r20, r20
    14f6:	55 1f       	adc	r21, r21
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <nrk_gpio_direction+0x1dc>
    14fc:	94 2b       	or	r25, r20
    14fe:	9d b9       	out	0x0d, r25	; 13
    1500:	0d c0       	rjmp	.+26     	; 0x151c <nrk_gpio_direction+0x204>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    1502:	90 b3       	in	r25, 0x10	; 16
    1504:	86 95       	lsr	r24
    1506:	86 95       	lsr	r24
    1508:	86 95       	lsr	r24
    150a:	41 e0       	ldi	r20, 0x01	; 1
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <nrk_gpio_direction+0x1fc>
    1510:	44 0f       	add	r20, r20
    1512:	55 1f       	adc	r21, r21
    1514:	8a 95       	dec	r24
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <nrk_gpio_direction+0x1f8>
    1518:	94 2b       	or	r25, r20
    151a:	90 bb       	out	0x10, r25	; 16
                        default: return -1;
                }
        }
        return 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    151e:	08 95       	ret
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
                                PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
    1520:	8f ef       	ldi	r24, 0xFF	; 255
    1522:	08 95       	ret
                                DDRD |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        default: return -1;
    1524:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    1526:	08 95       	ret

00001528 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    1528:	88 23       	and	r24, r24
    152a:	29 f4       	brne	.+10     	; 0x1536 <nrk_get_button+0xe>
	 return( !(PINA & BM(BUTTON))); 
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	01 9b       	sbis	0x00, 1	; 0
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <nrk_get_button+0x10>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	08 95       	ret
	} 
return -1;
    1536:	8f ef       	ldi	r24, 0xFF	; 255
}
    1538:	08 95       	ret

0000153a <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	11 f4       	brne	.+4      	; 0x1542 <nrk_led_toggle+0x8>
    153e:	83 e2       	ldi	r24, 0x23	; 35
    1540:	0e c0       	rjmp	.+28     	; 0x155e <nrk_led_toggle+0x24>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	91 05       	cpc	r25, r1
    1546:	11 f4       	brne	.+4      	; 0x154c <nrk_led_toggle+0x12>
    1548:	8b e2       	ldi	r24, 0x2B	; 43
    154a:	09 c0       	rjmp	.+18     	; 0x155e <nrk_led_toggle+0x24>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    154c:	82 30       	cpi	r24, 0x02	; 2
    154e:	91 05       	cpc	r25, r1
    1550:	11 f4       	brne	.+4      	; 0x1556 <nrk_led_toggle+0x1c>
    1552:	83 e3       	ldi	r24, 0x33	; 51
    1554:	04 c0       	rjmp	.+8      	; 0x155e <nrk_led_toggle+0x24>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	91 05       	cpc	r25, r1
    155a:	29 f4       	brne	.+10     	; 0x1566 <nrk_led_toggle+0x2c>
    155c:	8b e3       	ldi	r24, 0x3B	; 59
    155e:	0e 94 8b 08 	call	0x1116	; 0x1116 <nrk_gpio_toggle>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	08 95       	ret
return -1;
    1566:	8f ef       	ldi	r24, 0xFF	; 255
}
    1568:	08 95       	ret

0000156a <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	11 f4       	brne	.+4      	; 0x1572 <nrk_led_clr+0x8>
    156e:	83 e2       	ldi	r24, 0x23	; 35
    1570:	0e c0       	rjmp	.+28     	; 0x158e <nrk_led_clr+0x24>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	91 05       	cpc	r25, r1
    1576:	11 f4       	brne	.+4      	; 0x157c <nrk_led_clr+0x12>
    1578:	8b e2       	ldi	r24, 0x2B	; 43
    157a:	09 c0       	rjmp	.+18     	; 0x158e <nrk_led_clr+0x24>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    157c:	82 30       	cpi	r24, 0x02	; 2
    157e:	91 05       	cpc	r25, r1
    1580:	11 f4       	brne	.+4      	; 0x1586 <nrk_led_clr+0x1c>
    1582:	83 e3       	ldi	r24, 0x33	; 51
    1584:	04 c0       	rjmp	.+8      	; 0x158e <nrk_led_clr+0x24>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    1586:	83 30       	cpi	r24, 0x03	; 3
    1588:	91 05       	cpc	r25, r1
    158a:	29 f4       	brne	.+10     	; 0x1596 <nrk_led_clr+0x2c>
    158c:	8b e3       	ldi	r24, 0x3B	; 59
    158e:	0e 94 5f 07 	call	0xebe	; 0xebe <nrk_gpio_set>
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	08 95       	ret
return -1;
    1596:	8f ef       	ldi	r24, 0xFF	; 255
}
    1598:	08 95       	ret

0000159a <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	11 f4       	brne	.+4      	; 0x15a2 <nrk_led_set+0x8>
    159e:	83 e2       	ldi	r24, 0x23	; 35
    15a0:	0e c0       	rjmp	.+28     	; 0x15be <nrk_led_set+0x24>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	91 05       	cpc	r25, r1
    15a6:	11 f4       	brne	.+4      	; 0x15ac <nrk_led_set+0x12>
    15a8:	8b e2       	ldi	r24, 0x2B	; 43
    15aa:	09 c0       	rjmp	.+18     	; 0x15be <nrk_led_set+0x24>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	91 05       	cpc	r25, r1
    15b0:	11 f4       	brne	.+4      	; 0x15b6 <nrk_led_set+0x1c>
    15b2:	83 e3       	ldi	r24, 0x33	; 51
    15b4:	04 c0       	rjmp	.+8      	; 0x15be <nrk_led_set+0x24>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    15b6:	83 30       	cpi	r24, 0x03	; 3
    15b8:	91 05       	cpc	r25, r1
    15ba:	29 f4       	brne	.+10     	; 0x15c6 <nrk_led_set+0x2c>
    15bc:	8b e3       	ldi	r24, 0x3B	; 59
    15be:	0e 94 d7 07 	call	0xfae	; 0xfae <nrk_gpio_clr>
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	08 95       	ret
return -1;
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
}
    15c8:	08 95       	ret

000015ca <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    15ca:	88 23       	and	r24, r24
    15cc:	19 f0       	breq	.+6      	; 0x15d4 <nrk_gpio_pullups+0xa>
    15ce:	85 b7       	in	r24, 0x35	; 53
    15d0:	8f 7e       	andi	r24, 0xEF	; 239
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    15d4:	85 b7       	in	r24, 0x35	; 53
    15d6:	80 61       	ori	r24, 0x10	; 16
    15d8:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	08 95       	ret

000015de <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    15de:	90 91 c8 00 	lds	r25, 0x00C8
    15e2:	95 ff       	sbrs	r25, 5
    15e4:	fc cf       	rjmp	.-8      	; 0x15de <putc1>
    15e6:	80 93 ce 00 	sts	0x00CE, r24
}
    15ea:	08 95       	ret

000015ec <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    15ec:	90 93 c5 00 	sts	0x00C5, r25
    15f0:	80 93 c4 00 	sts	0x00C4, r24
    15f4:	86 e0       	ldi	r24, 0x06	; 6
    15f6:	80 93 c2 00 	sts	0x00C2, r24
    15fa:	e1 ec       	ldi	r30, 0xC1	; 193
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8b 7f       	andi	r24, 0xFB	; 251
    1602:	80 83       	st	Z, r24
    1604:	a0 ec       	ldi	r26, 0xC0	; 192
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	8c 91       	ld	r24, X
    160a:	82 60       	ori	r24, 0x02	; 2
    160c:	8c 93       	st	X, r24
ENABLE_UART0();
    160e:	80 81       	ld	r24, Z
    1610:	88 61       	ori	r24, 0x18	; 24
    1612:	80 83       	st	Z, r24
}
    1614:	08 95       	ret

00001616 <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1616:	90 93 cd 00 	sts	0x00CD, r25
    161a:	80 93 cc 00 	sts	0x00CC, r24
    161e:	86 e0       	ldi	r24, 0x06	; 6
    1620:	80 93 ca 00 	sts	0x00CA, r24
    1624:	e9 ec       	ldi	r30, 0xC9	; 201
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	8b 7f       	andi	r24, 0xFB	; 251
    162c:	80 83       	st	Z, r24
    162e:	a8 ec       	ldi	r26, 0xC8	; 200
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	8c 91       	ld	r24, X
    1634:	82 60       	ori	r24, 0x02	; 2
    1636:	8c 93       	st	X, r24
ENABLE_UART1();
    1638:	80 81       	ld	r24, Z
    163a:	88 61       	ori	r24, 0x18	; 24
    163c:	80 83       	st	Z, r24
}
    163e:	08 95       	ret

00001640 <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    1648:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    164c:	cf e1       	ldi	r28, 0x1F	; 31
    164e:	d7 e0       	ldi	r29, 0x07	; 7
    1650:	03 e1       	ldi	r16, 0x13	; 19
    1652:	17 e0       	ldi	r17, 0x07	; 7
    1654:	ce 01       	movw	r24, r28
    1656:	b8 01       	movw	r22, r16
    1658:	0e 94 36 29 	call	0x526c	; 0x526c <fdevopen>
    165c:	90 93 2f 0a 	sts	0x0A2F, r25
    1660:	80 93 2e 0a 	sts	0x0A2E, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    1664:	ce 01       	movw	r24, r28
    1666:	b8 01       	movw	r22, r16
    1668:	0e 94 36 29 	call	0x526c	; 0x526c <fdevopen>
    166c:	90 93 2d 0a 	sts	0x0A2D, r25
    1670:	80 93 2c 0a 	sts	0x0A2C, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    167e:	80 91 c8 00 	lds	r24, 0x00C8
    1682:	87 ff       	sbrs	r24, 7
    1684:	fc cf       	rjmp	.-8      	; 0x167e <getc1>
    1686:	80 91 c8 00 	lds	r24, 0x00C8
    168a:	8f 77       	andi	r24, 0x7F	; 127
    168c:	80 93 c8 00 	sts	0x00C8, r24
    1690:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    1694:	08 95       	ret

00001696 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	d1 f7       	brne	.-12     	; 0x1696 <halWait>

} // halWait
    16a2:	08 95       	ret

000016a4 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    16a4:	0e 94 cd 2a 	call	0x559a	; 0x559a <__eerd_byte_m128rfa1>
return v;
}
    16a8:	08 95       	ret

000016aa <nrk_eeprom_write_byte>:

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    16aa:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <__eewr_byte_m128rfa1>
}
    16ae:	08 95       	ret

000016b0 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    16bc:	e8 2e       	mov	r14, r24
    16be:	e7 01       	movw	r28, r14
    16c0:	7e 01       	movw	r14, r28
    16c2:	f9 2e       	mov	r15, r25
    16c4:	e7 01       	movw	r28, r14
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 cd 2a 	call	0x559a	; 0x559a <__eerd_byte_m128rfa1>
    16ce:	08 2f       	mov	r16, r24
    16d0:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 cd 2a 	call	0x559a	; 0x559a <__eerd_byte_m128rfa1>
    16da:	e8 2e       	mov	r14, r24
    16dc:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 cd 2a 	call	0x559a	; 0x559a <__eerd_byte_m128rfa1>
    16e6:	f8 2e       	mov	r15, r24
    16e8:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    16ea:	83 e0       	ldi	r24, 0x03	; 3
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 cd 2a 	call	0x559a	; 0x559a <__eerd_byte_m128rfa1>
    16f2:	18 2f       	mov	r17, r24
    16f4:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    16f6:	84 e0       	ldi	r24, 0x04	; 4
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 cd 2a 	call	0x559a	; 0x559a <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    16fe:	fe 0c       	add	r15, r14
ct+=buf[2];
    1700:	f0 0e       	add	r15, r16
ct+=buf[3];
    1702:	f1 0e       	add	r15, r17
if(checksum==ct) return NRK_OK;
    1704:	8f 15       	cp	r24, r15
    1706:	11 f4       	brne	.+4      	; 0x170c <read_eeprom_mac_address+0x5c>
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	01 c0       	rjmp	.+2      	; 0x170e <read_eeprom_mac_address+0x5e>

return NRK_ERROR;
    170c:	8f ef       	ldi	r24, 0xFF	; 255
}
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	08 95       	ret

0000171c <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    1722:	85 e0       	ldi	r24, 0x05	; 5
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 cd 2a 	call	0x559a	; 0x559a <__eerd_byte_m128rfa1>
    172a:	88 83       	st	Y, r24
return NRK_OK;
}
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	08 95       	ret

00001734 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    1734:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    1736:	86 e0       	ldi	r24, 0x06	; 6
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	60 81       	ld	r22, Z
    173c:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	08 95       	ret

00001744 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    174a:	86 e0       	ldi	r24, 0x06	; 6
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 cd 2a 	call	0x559a	; 0x559a <__eerd_byte_m128rfa1>
    1752:	88 83       	st	Y, r24
  return NRK_OK;
}
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	08 2f       	mov	r16, r24
    1766:	19 2f       	mov	r17, r25
    1768:	c8 e0       	ldi	r28, 0x08	; 8
    176a:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    176c:	ce 01       	movw	r24, r28
    176e:	0e 94 cd 2a 	call	0x559a	; 0x559a <__eerd_byte_m128rfa1>
    1772:	f8 01       	movw	r30, r16
    1774:	81 93       	st	Z+, r24
    1776:	8f 01       	movw	r16, r30
    1778:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    177a:	c8 31       	cpi	r28, 0x18	; 24
    177c:	d1 05       	cpc	r29, r1
    177e:	b1 f7       	brne	.-20     	; 0x176c <read_eeprom_aes_key+0x10>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	08 2f       	mov	r16, r24
    1796:	19 2f       	mov	r17, r25
    1798:	c8 e0       	ldi	r28, 0x08	; 8
    179a:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    179c:	f8 01       	movw	r30, r16
    179e:	61 91       	ld	r22, Z+
    17a0:	8f 01       	movw	r16, r30
    17a2:	ce 01       	movw	r24, r28
    17a4:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <__eewr_byte_m128rfa1>
    17a8:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    17aa:	c8 31       	cpi	r28, 0x18	; 24
    17ac:	d1 05       	cpc	r29, r1
    17ae:	b1 f7       	brne	.-20     	; 0x179c <write_eeprom_aes_key+0x10>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	08 95       	ret

000017bc <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    17c2:	87 e0       	ldi	r24, 0x07	; 7
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 cd 2a 	call	0x559a	; 0x559a <__eerd_byte_m128rfa1>
    17ca:	88 83       	st	Y, r24
  return NRK_OK;
}
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	08 95       	ret

000017d4 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    17d4:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    17d6:	87 e0       	ldi	r24, 0x07	; 7
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	60 81       	ld	r22, Z
    17dc:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	08 95       	ret

000017e4 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    17e4:	f8 94       	cli
};
    17e6:	08 95       	ret

000017e8 <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    17e8:	78 94       	sei
};
    17ea:	08 95       	ret

000017ec <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    17ec:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
    17f0:	ff cf       	rjmp	.-2      	; 0x17f0 <nrk_halt+0x4>

000017f2 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	a3 97       	sbiw	r28, 0x23	; 35
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    180a:	0e 94 36 11 	call	0x226c	; 0x226c <nrk_signal_create>
    180e:	80 93 f2 09 	sts	0x09F2, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    1812:	8f 3f       	cpi	r24, 0xFF	; 255
    1814:	21 f4       	brne	.+8      	; 0x181e <nrk_init+0x2c>
    1816:	8e e0       	ldi	r24, 0x0E	; 14
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    181e:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    1822:	80 ff       	sbrs	r24, 0
    1824:	04 c0       	rjmp	.+8      	; 0x182e <nrk_init+0x3c>
    1826:	86 e0       	ldi	r24, 0x06	; 6
    1828:	60 e0       	ldi	r22, 0x00	; 0
    182a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    182e:	10 92 f5 09 	sts	0x09F5, r1
    nrk_cur_task_TCB = NULL;
    1832:	10 92 03 0a 	sts	0x0A03, r1
    1836:	10 92 02 0a 	sts	0x0A02, r1
    
    nrk_high_ready_TCB = NULL;
    183a:	10 92 f4 09 	sts	0x09F4, r1
    183e:	10 92 f3 09 	sts	0x09F3, r1
    nrk_high_ready_prio = 0; 
    1842:	10 92 04 0a 	sts	0x0A04, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1846:	10 92 01 0a 	sts	0x0A01, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	80 93 ee 09 	sts	0x09EE, r24
    nrk_sem_list[i].value=-1;
    1850:	80 93 f0 09 	sts	0x09F0, r24
    nrk_sem_list[i].resource_ceiling=-1;
    1854:	80 93 ef 09 	sts	0x09EF, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1858:	93 e6       	ldi	r25, 0x63	; 99
    185a:	90 93 51 09 	sts	0x0951, r25
        nrk_task_TCB[i].task_ID = -1; 
    185e:	80 93 4f 09 	sts	0x094F, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1862:	90 93 72 09 	sts	0x0972, r25
        nrk_task_TCB[i].task_ID = -1; 
    1866:	80 93 70 09 	sts	0x0970, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    186a:	90 93 93 09 	sts	0x0993, r25
        nrk_task_TCB[i].task_ID = -1; 
    186e:	80 93 91 09 	sts	0x0991, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1872:	90 93 b4 09 	sts	0x09B4, r25
        nrk_task_TCB[i].task_ID = -1; 
    1876:	80 93 b2 09 	sts	0x09B2, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    187a:	90 93 d5 09 	sts	0x09D5, r25
        nrk_task_TCB[i].task_ID = -1; 
    187e:	80 93 d3 09 	sts	0x09D3, r24
    1882:	e8 e0       	ldi	r30, 0x08	; 8
    1884:	fa e0       	ldi	r31, 0x0A	; 10
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	01 c0       	rjmp	.+2      	; 0x188e <nrk_init+0x9c>
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    188c:	9a 01       	movw	r18, r20
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    188e:	a9 01       	movw	r20, r18
    1890:	4f 5f       	subi	r20, 0xFF	; 255
    1892:	5f 4f       	sbci	r21, 0xFF	; 255
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1894:	ca 01       	movw	r24, r20
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	84 0f       	add	r24, r20
    18a0:	95 1f       	adc	r25, r21
    18a2:	8b 5f       	subi	r24, 0xFB	; 251
    18a4:	95 4f       	sbci	r25, 0xF5	; 245
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	80 83       	st	Z, r24
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    18aa:	c9 01       	movw	r24, r18
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	82 0f       	add	r24, r18
    18b6:	93 1f       	adc	r25, r19
    18b8:	8b 5f       	subi	r24, 0xFB	; 251
    18ba:	95 4f       	sbci	r25, 0xF5	; 245
    18bc:	94 83       	std	Z+4, r25	; 0x04
    18be:	83 83       	std	Z+3, r24	; 0x03
    18c0:	35 96       	adiw	r30, 0x05	; 5
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    18c2:	45 30       	cpi	r20, 0x05	; 5
    18c4:	51 05       	cpc	r21, r1
    18c6:	11 f7       	brne	.-60     	; 0x188c <nrk_init+0x9a>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    18c8:	10 92 07 0a 	sts	0x0A07, r1
    18cc:	10 92 06 0a 	sts	0x0A06, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    18d0:	10 92 22 0a 	sts	0x0A22, r1
    18d4:	10 92 21 0a 	sts	0x0A21, r1
	_head_node = NULL;
    18d8:	10 92 f8 09 	sts	0x09F8, r1
    18dc:	10 92 f7 09 	sts	0x09F7, r1
	_free_node = &_nrk_readyQ[0];
    18e0:	85 e0       	ldi	r24, 0x05	; 5
    18e2:	9a e0       	ldi	r25, 0x0A	; 10
    18e4:	90 93 46 09 	sts	0x0946, r25
    18e8:	80 93 45 09 	sts	0x0945, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    18ec:	8e 01       	movw	r16, r28
    18ee:	0f 5f       	subi	r16, 0xFF	; 255
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
    18f2:	c8 01       	movw	r24, r16
    18f4:	68 e4       	ldi	r22, 0x48	; 72
    18f6:	7a e1       	ldi	r23, 0x1A	; 26
    18f8:	0e 94 56 20 	call	0x40ac	; 0x40ac <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    18fc:	c8 01       	movw	r24, r16
    18fe:	60 ef       	ldi	r22, 0xF0	; 240
    1900:	77 e0       	ldi	r23, 0x07	; 7
    1902:	40 e8       	ldi	r20, 0x80	; 128
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    190a:	85 e5       	ldi	r24, 0x55	; 85
    190c:	80 93 f0 07 	sts	0x07F0, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    1910:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    1912:	1c 86       	std	Y+12, r1	; 0x0c
    1914:	1d 86       	std	Y+13, r1	; 0x0d
    1916:	1e 86       	std	Y+14, r1	; 0x0e
    1918:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    191a:	18 8a       	std	Y+16, r1	; 0x10
    191c:	19 8a       	std	Y+17, r1	; 0x11
    191e:	1a 8a       	std	Y+18, r1	; 0x12
    1920:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1922:	1c 8a       	std	Y+20, r1	; 0x14
    1924:	1d 8a       	std	Y+21, r1	; 0x15
    1926:	1e 8a       	std	Y+22, r1	; 0x16
    1928:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    192a:	18 8e       	std	Y+24, r1	; 0x18
    192c:	19 8e       	std	Y+25, r1	; 0x19
    192e:	1a 8e       	std	Y+26, r1	; 0x1a
    1930:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1932:	1c 8e       	std	Y+28, r1	; 0x1c
    1934:	1d 8e       	std	Y+29, r1	; 0x1d
    1936:	1e 8e       	std	Y+30, r1	; 0x1e
    1938:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    193a:	18 a2       	std	Y+32, r1	; 0x20
    193c:	19 a2       	std	Y+33, r1	; 0x21
    193e:	1a a2       	std	Y+34, r1	; 0x22
    1940:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1946:	92 e0       	ldi	r25, 0x02	; 2
    1948:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    194a:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    194c:	c8 01       	movw	r24, r16
    194e:	0e 94 30 15 	call	0x2a60	; 0x2a60 <nrk_activate_task>
	
}
    1952:	a3 96       	adiw	r28, 0x23	; 35
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	08 95       	ret

00001968 <nrk_start>:




void nrk_start (void)
{
    1968:	cf 92       	push	r12
    196a:	df 92       	push	r13
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <nrk_start+0x10>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    197c:	bf e4       	ldi	r27, 0x4F	; 79
    197e:	cb 2e       	mov	r12, r27
    1980:	b9 e0       	ldi	r27, 0x09	; 9
    1982:	db 2e       	mov	r13, r27
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1984:	90 e0       	ldi	r25, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1986:	f6 01       	movw	r30, r12
    1988:	f0 80       	ld	r15, Z
	// only check activated tasks
	if(task_ID!=-1)
    198a:	ff 2d       	mov	r31, r15
    198c:	ff 3f       	cpi	r31, 0xFF	; 255
    198e:	b1 f0       	breq	.+44     	; 0x19bc <nrk_start+0x54>
    1990:	0f e4       	ldi	r16, 0x4F	; 79
    1992:	19 e0       	ldi	r17, 0x09	; 9
    1994:	20 e0       	ldi	r18, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1996:	92 17       	cp	r25, r18
    1998:	61 f0       	breq	.+24     	; 0x19b2 <nrk_start+0x4a>
    199a:	f8 01       	movw	r30, r16
    199c:	80 81       	ld	r24, Z
    199e:	f8 16       	cp	r15, r24
    19a0:	41 f4       	brne	.+16     	; 0x19b2 <nrk_start+0x4a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    19a2:	85 e0       	ldi	r24, 0x05	; 5
    19a4:	6f 2d       	mov	r22, r15
    19a6:	29 83       	std	Y+1, r18	; 0x01
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <nrk_kernel_error_add>
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	29 81       	ldd	r18, Y+1	; 0x01
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    19b2:	2f 5f       	subi	r18, 0xFF	; 255
    19b4:	0f 5d       	subi	r16, 0xDF	; 223
    19b6:	1f 4f       	sbci	r17, 0xFF	; 255
    19b8:	25 30       	cpi	r18, 0x05	; 5
    19ba:	69 f7       	brne	.-38     	; 0x1996 <nrk_start+0x2e>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    19bc:	9f 5f       	subi	r25, 0xFF	; 255
    19be:	21 e2       	ldi	r18, 0x21	; 33
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	c2 0e       	add	r12, r18
    19c4:	d3 1e       	adc	r13, r19
    19c6:	95 30       	cpi	r25, 0x05	; 5
    19c8:	f1 f6       	brne	.-68     	; 0x1986 <nrk_start+0x1e>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    19ca:	0e 94 1e 14 	call	0x283c	; 0x283c <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    19ce:	99 27       	eor	r25, r25
    19d0:	87 fd       	sbrc	r24, 7
    19d2:	90 95       	com	r25
    19d4:	fc 01       	movw	r30, r24
    19d6:	a5 e0       	ldi	r26, 0x05	; 5
    19d8:	ee 0f       	add	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	aa 95       	dec	r26
    19de:	e1 f7       	brne	.-8      	; 0x19d8 <nrk_start+0x70>
    19e0:	e8 0f       	add	r30, r24
    19e2:	f9 1f       	adc	r31, r25
    19e4:	e9 5b       	subi	r30, 0xB9	; 185
    19e6:	f6 4f       	sbci	r31, 0xF6	; 246
    19e8:	82 85       	ldd	r24, Z+10	; 0x0a
    19ea:	80 93 04 0a 	sts	0x0A04, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    19ee:	f0 93 03 0a 	sts	0x0A03, r31
    19f2:	e0 93 02 0a 	sts	0x0A02, r30
    19f6:	f0 93 f4 09 	sts	0x09F4, r31
    19fa:	e0 93 f3 09 	sts	0x09F3, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    19fe:	80 93 f5 09 	sts	0x09F5, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    1a02:	0e 94 ba 20 	call	0x4174	; 0x4174 <nrk_target_start>
    nrk_stack_pointer_init(); 
    1a06:	0e 94 a4 20 	call	0x4148	; 0x4148 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    1a0a:	0e 94 bf 20 	call	0x417e	; 0x417e <nrk_start_high_ready_task>
    1a0e:	ff cf       	rjmp	.-2      	; 0x1a0e <nrk_start+0xa6>

00001a10 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	ec 01       	movw	r28, r24
    1a1e:	7b 01       	movw	r14, r22
    1a20:	8a 01       	movw	r16, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    1a22:	89 85       	ldd	r24, Y+9	; 0x09
    1a24:	82 30       	cpi	r24, 0x02	; 2
    1a26:	21 f0       	breq	.+8      	; 0x1a30 <nrk_TCB_init+0x20>
    	Task->task_ID=nrk_task_init_cnt;
    1a28:	80 91 f1 09 	lds	r24, 0x09F1
    1a2c:	88 83       	st	Y, r24
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <nrk_TCB_init+0x22>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1a30:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1a32:	80 91 f1 09 	lds	r24, 0x09F1
    1a36:	85 30       	cpi	r24, 0x05	; 5
    1a38:	20 f0       	brcs	.+8      	; 0x1a42 <nrk_TCB_init+0x32>
    1a3a:	87 e0       	ldi	r24, 0x07	; 7
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	82 30       	cpi	r24, 0x02	; 2
    1a46:	29 f0       	breq	.+10     	; 0x1a52 <nrk_TCB_init+0x42>
    1a48:	80 91 f1 09 	lds	r24, 0x09F1
    1a4c:	8f 5f       	subi	r24, 0xFF	; 255
    1a4e:	80 93 f1 09 	sts	0x09F1, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1a52:	80 91 f1 09 	lds	r24, 0x09F1
    1a56:	88 23       	and	r24, r24
    1a58:	19 f4       	brne	.+6      	; 0x1a60 <nrk_TCB_init+0x50>
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	80 93 f1 09 	sts	0x09F1, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1a60:	88 81       	ld	r24, Y
    1a62:	99 27       	eor	r25, r25
    1a64:	87 fd       	sbrc	r24, 7
    1a66:	90 95       	com	r25
    1a68:	fc 01       	movw	r30, r24
    1a6a:	a5 e0       	ldi	r26, 0x05	; 5
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	ff 1f       	adc	r31, r31
    1a70:	aa 95       	dec	r26
    1a72:	e1 f7       	brne	.-8      	; 0x1a6c <nrk_TCB_init+0x5c>
    1a74:	e8 0f       	add	r30, r24
    1a76:	f9 1f       	adc	r31, r25
    1a78:	e9 5b       	subi	r30, 0xB9	; 185
    1a7a:	f6 4f       	sbci	r31, 0xF6	; 246
    1a7c:	f1 82       	std	Z+1, r15	; 0x01
    1a7e:	e0 82       	st	Z, r14
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    1a80:	88 85       	ldd	r24, Y+8	; 0x08
    1a82:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    1a84:	88 81       	ld	r24, Y
    1a86:	99 27       	eor	r25, r25
    1a88:	87 fd       	sbrc	r24, 7
    1a8a:	90 95       	com	r25
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	75 e0       	ldi	r23, 0x05	; 5
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	7a 95       	dec	r23
    1a96:	e1 f7       	brne	.-8      	; 0x1a90 <nrk_TCB_init+0x80>
    1a98:	e8 0f       	add	r30, r24
    1a9a:	f9 1f       	adc	r31, r25
    1a9c:	e9 5b       	subi	r30, 0xB9	; 185
    1a9e:	f6 4f       	sbci	r31, 0xF6	; 246
    1aa0:	83 e0       	ldi	r24, 0x03	; 3
    1aa2:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    1aa4:	28 81       	ld	r18, Y
    1aa6:	82 2f       	mov	r24, r18
    1aa8:	99 27       	eor	r25, r25
    1aaa:	87 fd       	sbrc	r24, 7
    1aac:	90 95       	com	r25
    1aae:	fc 01       	movw	r30, r24
    1ab0:	65 e0       	ldi	r22, 0x05	; 5
    1ab2:	ee 0f       	add	r30, r30
    1ab4:	ff 1f       	adc	r31, r31
    1ab6:	6a 95       	dec	r22
    1ab8:	e1 f7       	brne	.-8      	; 0x1ab2 <nrk_TCB_init+0xa2>
    1aba:	e8 0f       	add	r30, r24
    1abc:	f9 1f       	adc	r31, r25
    1abe:	e9 5b       	subi	r30, 0xB9	; 185
    1ac0:	f6 4f       	sbci	r31, 0xF6	; 246
    1ac2:	20 87       	std	Z+8, r18	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    1ac4:	88 81       	ld	r24, Y
    1ac6:	99 27       	eor	r25, r25
    1ac8:	87 fd       	sbrc	r24, 7
    1aca:	90 95       	com	r25
    1acc:	7c 01       	movw	r14, r24
    1ace:	55 e0       	ldi	r21, 0x05	; 5
    1ad0:	ee 0c       	add	r14, r14
    1ad2:	ff 1c       	adc	r15, r15
    1ad4:	5a 95       	dec	r21
    1ad6:	e1 f7       	brne	.-8      	; 0x1ad0 <nrk_TCB_init+0xc0>
    1ad8:	e8 0e       	add	r14, r24
    1ada:	f9 1e       	adc	r15, r25
    1adc:	87 e4       	ldi	r24, 0x47	; 71
    1ade:	99 e0       	ldi	r25, 0x09	; 9
    1ae0:	e8 0e       	add	r14, r24
    1ae2:	f9 1e       	adc	r15, r25
    1ae4:	f7 01       	movw	r30, r14
    1ae6:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    1ae8:	ce 01       	movw	r24, r28
    1aea:	0b 96       	adiw	r24, 0x0b	; 11
    1aec:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_nrk_time_to_ticks>
    1af0:	f7 01       	movw	r30, r14
    1af2:	94 8f       	std	Z+28, r25	; 0x1c
    1af4:	83 8f       	std	Z+27, r24	; 0x1b
    if(Task->period.secs > 61) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    1af6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1af8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1afa:	ad 85       	ldd	r26, Y+13	; 0x0d
    1afc:	be 85       	ldd	r27, Y+14	; 0x0e
    1afe:	8e 33       	cpi	r24, 0x3E	; 62
    1b00:	91 05       	cpc	r25, r1
    1b02:	a1 05       	cpc	r26, r1
    1b04:	b1 05       	cpc	r27, r1
    1b06:	20 f0       	brcs	.+8      	; 0x1b10 <nrk_TCB_init+0x100>
    1b08:	86 e1       	ldi	r24, 0x16	; 22
    1b0a:	68 81       	ld	r22, Y
    1b0c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    1b10:	e8 80       	ld	r14, Y
    1b12:	ff 24       	eor	r15, r15
    1b14:	e7 fc       	sbrc	r14, 7
    1b16:	f0 94       	com	r15
    1b18:	ce 01       	movw	r24, r28
    1b1a:	4b 96       	adiw	r24, 0x1b	; 27
    1b1c:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_nrk_time_to_ticks>
    1b20:	f7 01       	movw	r30, r14
    1b22:	45 e0       	ldi	r20, 0x05	; 5
    1b24:	ee 0f       	add	r30, r30
    1b26:	ff 1f       	adc	r31, r31
    1b28:	4a 95       	dec	r20
    1b2a:	e1 f7       	brne	.-8      	; 0x1b24 <nrk_TCB_init+0x114>
    1b2c:	ee 0d       	add	r30, r14
    1b2e:	ff 1d       	adc	r31, r15
    1b30:	e9 5b       	subi	r30, 0xB9	; 185
    1b32:	f6 4f       	sbci	r31, 0xF6	; 246
    1b34:	96 8b       	std	Z+22, r25	; 0x16
    1b36:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    1b38:	88 81       	ld	r24, Y
    1b3a:	99 27       	eor	r25, r25
    1b3c:	87 fd       	sbrc	r24, 7
    1b3e:	90 95       	com	r25
    1b40:	7c 01       	movw	r14, r24
    1b42:	35 e0       	ldi	r19, 0x05	; 5
    1b44:	ee 0c       	add	r14, r14
    1b46:	ff 1c       	adc	r15, r15
    1b48:	3a 95       	dec	r19
    1b4a:	e1 f7       	brne	.-8      	; 0x1b44 <nrk_TCB_init+0x134>
    1b4c:	e8 0e       	add	r14, r24
    1b4e:	f9 1e       	adc	r15, r25
    1b50:	87 e4       	ldi	r24, 0x47	; 71
    1b52:	99 e0       	ldi	r25, 0x09	; 9
    1b54:	e8 0e       	add	r14, r24
    1b56:	f9 1e       	adc	r15, r25
    1b58:	f7 01       	movw	r30, r14
    1b5a:	85 89       	ldd	r24, Z+21	; 0x15
    1b5c:	96 89       	ldd	r25, Z+22	; 0x16
    1b5e:	23 8d       	ldd	r18, Z+27	; 0x1b
    1b60:	34 8d       	ldd	r19, Z+28	; 0x1c
    1b62:	82 0f       	add	r24, r18
    1b64:	93 1f       	adc	r25, r19
    1b66:	90 8f       	std	Z+24, r25	; 0x18
    1b68:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	43 96       	adiw	r24, 0x13	; 19
    1b6e:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_nrk_time_to_ticks>
    1b72:	f7 01       	movw	r30, r14
    1b74:	96 8f       	std	Z+30, r25	; 0x1e
    1b76:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    1b78:	88 81       	ld	r24, Y
    1b7a:	99 27       	eor	r25, r25
    1b7c:	87 fd       	sbrc	r24, 7
    1b7e:	90 95       	com	r25
    1b80:	fc 01       	movw	r30, r24
    1b82:	25 e0       	ldi	r18, 0x05	; 5
    1b84:	ee 0f       	add	r30, r30
    1b86:	ff 1f       	adc	r31, r31
    1b88:	2a 95       	dec	r18
    1b8a:	e1 f7       	brne	.-8      	; 0x1b84 <nrk_TCB_init+0x174>
    1b8c:	e8 0f       	add	r30, r24
    1b8e:	f9 1f       	adc	r31, r25
    1b90:	e9 5b       	subi	r30, 0xB9	; 185
    1b92:	f6 4f       	sbci	r31, 0xF6	; 246
    1b94:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b96:	96 8d       	ldd	r25, Z+30	; 0x1e
    1b98:	92 8f       	std	Z+26, r25	; 0x1a
    1b9a:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	90 a3       	std	Z+32, r25	; 0x20
    1ba2:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    1ba4:	13 83       	std	Z+3, r17	; 0x03
    1ba6:	02 83       	std	Z+2, r16	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	08 95       	ret

00001bba <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    1bba:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <_nrk_scheduler>

  	return;
}
    1bbe:	08 95       	ret

00001bc0 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    1bc0:	85 e6       	ldi	r24, 0x65	; 101
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	08 95       	ret

00001bc6 <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    1bc6:	e0 91 02 0a 	lds	r30, 0x0A02
    1bca:	f0 91 03 0a 	lds	r31, 0x0A03
    1bce:	84 87       	std	Z+12, r24	; 0x0c
}
    1bd0:	08 95       	ret

00001bd2 <nrk_errno_get>:

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    1bd2:	e0 91 02 0a 	lds	r30, 0x0A02
    1bd6:	f0 91 03 0a 	lds	r31, 0x0A03
}
    1bda:	84 85       	ldd	r24, Z+12	; 0x0c
    1bdc:	08 95       	ret

00001bde <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    1bde:	20 91 ef 07 	lds	r18, 0x07EF
    1be2:	22 23       	and	r18, r18
    1be4:	41 f0       	breq	.+16     	; 0x1bf6 <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    1be6:	fb 01       	movw	r30, r22
    1be8:	20 83       	st	Z, r18
    *task_id = error_task;
    1bea:	20 91 c2 03 	lds	r18, 0x03C2
    1bee:	fc 01       	movw	r30, r24
    1bf0:	20 83       	st	Z, r18
    return 1;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    1bf8:	08 95       	ret

00001bfa <pause>:
    }

}

void pause()
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	0f 92       	push	r0
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1c04:	19 82       	std	Y+1, r1	; 0x01
    1c06:	07 c0       	rjmp	.+14     	; 0x1c16 <pause+0x1c>
        nrk_spin_wait_us (2000);
    1c08:	80 ed       	ldi	r24, 0xD0	; 208
    1c0a:	97 e0       	ldi	r25, 0x07	; 7
    1c0c:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	8f 5f       	subi	r24, 0xFF	; 255
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	84 36       	cpi	r24, 0x64	; 100
    1c1a:	b0 f3       	brcs	.-20     	; 0x1c08 <pause+0xe>
        nrk_spin_wait_us (2000);
}
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <blink_dot>:
    pause();
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 cd 0a 	call	0x159a	; 0x159a <nrk_led_set>
    pause();
    1c2c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pause>
    nrk_led_clr(GREEN_LED);
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
    pause();
    1c38:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pause>
}
    1c3c:	08 95       	ret

00001c3e <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 cd 0a 	call	0x159a	; 0x159a <nrk_led_set>
    pause();
    1c46:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pause>
    pause();
    1c4a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pause>
    pause();
    1c4e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pause>
    nrk_led_clr(GREEN_LED);
    1c52:	82 e0       	ldi	r24, 0x02	; 2
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
    pause();
    1c5a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pause>
}
    1c5e:	08 95       	ret

00001c60 <blink_morse_code_error>:
    pause();
}


void blink_morse_code_error( uint8_t number )
{
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <blink_morse_code_error+0xc>
    1c6c:	0f 92       	push	r0
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <blink_morse_code_error+0x14>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <blink_morse_code_error+0x16>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <blink_morse_code_error+0x18>
    1c78:	ed b7       	in	r30, 0x3d	; 61
    1c7a:	fe b7       	in	r31, 0x3e	; 62
    1c7c:	31 96       	adiw	r30, 0x01	; 1
    1c7e:	8e 01       	movw	r16, r28
    1c80:	0f 5f       	subi	r16, 0xFF	; 255
    1c82:	1f 4f       	sbci	r17, 0xFF	; 255
    1c84:	ad b7       	in	r26, 0x3d	; 61
    1c86:	be b7       	in	r27, 0x3e	; 62
    1c88:	12 96       	adiw	r26, 0x02	; 2
    1c8a:	1c 93       	st	X, r17
    1c8c:	0e 93       	st	-X, r16
    1c8e:	11 97       	sbiw	r26, 0x01	; 1
    1c90:	26 e6       	ldi	r18, 0x66	; 102
    1c92:	32 e0       	ldi	r19, 0x02	; 2
    1c94:	33 83       	std	Z+3, r19	; 0x03
    1c96:	22 83       	std	Z+2, r18	; 0x02
    1c98:	84 83       	std	Z+4, r24	; 0x04
    1c9a:	15 82       	std	Z+5, r1	; 0x05
    1c9c:	0e 94 3f 2a 	call	0x547e	; 0x547e <sprintf>

    for(i=0; i<strlen(str); i++ )
    1ca0:	ed b7       	in	r30, 0x3d	; 61
    1ca2:	fe b7       	in	r31, 0x3e	; 62
    1ca4:	36 96       	adiw	r30, 0x06	; 6
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	fe bf       	out	0x3e, r31	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	ed bf       	out	0x3d, r30	; 61
    1cb0:	ff 24       	eor	r15, r15
    1cb2:	72 c0       	rjmp	.+228    	; 0x1d98 <blink_morse_code_error+0x138>
    {
        switch( str[i])
    1cb4:	80 0f       	add	r24, r16
    1cb6:	91 1f       	adc	r25, r17
    1cb8:	dc 01       	movw	r26, r24
    1cba:	8c 91       	ld	r24, X
    1cbc:	84 33       	cpi	r24, 0x34	; 52
    1cbe:	d1 f1       	breq	.+116    	; 0x1d34 <blink_morse_code_error+0xd4>
    1cc0:	85 33       	cpi	r24, 0x35	; 53
    1cc2:	70 f4       	brcc	.+28     	; 0x1ce0 <blink_morse_code_error+0x80>
    1cc4:	81 33       	cpi	r24, 0x31	; 49
    1cc6:	f9 f0       	breq	.+62     	; 0x1d06 <blink_morse_code_error+0xa6>
    1cc8:	82 33       	cpi	r24, 0x32	; 50
    1cca:	20 f4       	brcc	.+8      	; 0x1cd4 <blink_morse_code_error+0x74>
    1ccc:	80 33       	cpi	r24, 0x30	; 48
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <blink_morse_code_error+0x72>
    1cd0:	5c c0       	rjmp	.+184    	; 0x1d8a <blink_morse_code_error+0x12a>
    1cd2:	16 c0       	rjmp	.+44     	; 0x1d00 <blink_morse_code_error+0xa0>
    1cd4:	82 33       	cpi	r24, 0x32	; 50
    1cd6:	11 f1       	breq	.+68     	; 0x1d1c <blink_morse_code_error+0xbc>
    1cd8:	83 33       	cpi	r24, 0x33	; 51
    1cda:	09 f0       	breq	.+2      	; 0x1cde <blink_morse_code_error+0x7e>
    1cdc:	56 c0       	rjmp	.+172    	; 0x1d8a <blink_morse_code_error+0x12a>
    1cde:	23 c0       	rjmp	.+70     	; 0x1d26 <blink_morse_code_error+0xc6>
    1ce0:	87 33       	cpi	r24, 0x37	; 55
    1ce2:	c9 f1       	breq	.+114    	; 0x1d56 <blink_morse_code_error+0xf6>
    1ce4:	88 33       	cpi	r24, 0x38	; 56
    1ce6:	30 f4       	brcc	.+12     	; 0x1cf4 <blink_morse_code_error+0x94>
    1ce8:	85 33       	cpi	r24, 0x35	; 53
    1cea:	69 f1       	breq	.+90     	; 0x1d46 <blink_morse_code_error+0xe6>
    1cec:	86 33       	cpi	r24, 0x36	; 54
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <blink_morse_code_error+0x92>
    1cf0:	4c c0       	rjmp	.+152    	; 0x1d8a <blink_morse_code_error+0x12a>
    1cf2:	2c c0       	rjmp	.+88     	; 0x1d4c <blink_morse_code_error+0xec>
    1cf4:	88 33       	cpi	r24, 0x38	; 56
    1cf6:	b1 f1       	breq	.+108    	; 0x1d64 <blink_morse_code_error+0x104>
    1cf8:	89 33       	cpi	r24, 0x39	; 57
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <blink_morse_code_error+0x9e>
    1cfc:	46 c0       	rjmp	.+140    	; 0x1d8a <blink_morse_code_error+0x12a>
    1cfe:	3b c0       	rjmp	.+118    	; 0x1d76 <blink_morse_code_error+0x116>
        {
        case '0':
            blink_dash();
    1d00:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <blink_morse_code_error+0xaa>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    1d06:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
            blink_dash();
    1d0a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dash();
    1d0e:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dash();
    1d12:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dash();
    1d16:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            break;
    1d1a:	37 c0       	rjmp	.+110    	; 0x1d8a <blink_morse_code_error+0x12a>
        case '2':
            blink_dot();
    1d1c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
            blink_dot();
    1d20:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
    1d24:	f4 cf       	rjmp	.-24     	; 0x1d0e <blink_morse_code_error+0xae>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    1d26:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
            blink_dot();
    1d2a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
            blink_dot();
    1d2e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
    1d32:	ef cf       	rjmp	.-34     	; 0x1d12 <blink_morse_code_error+0xb2>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    1d34:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
            blink_dot();
    1d38:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
            blink_dot();
    1d3c:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
            blink_dot();
    1d40:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
    1d44:	e8 cf       	rjmp	.-48     	; 0x1d16 <blink_morse_code_error+0xb6>
            blink_dash();
            break;
        case '5':
            blink_dot();
    1d46:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <blink_morse_code_error+0xf0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    1d4c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dot();
    1d50:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
    1d54:	04 c0       	rjmp	.+8      	; 0x1d5e <blink_morse_code_error+0xfe>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    1d56:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dash();
    1d5a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dot();
    1d5e:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
    1d62:	06 c0       	rjmp	.+12     	; 0x1d70 <blink_morse_code_error+0x110>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    1d64:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dash();
    1d68:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dash();
    1d6c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dot();
    1d70:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <blink_morse_code_error+0x126>
            blink_dot();
            break;
        case '9':
            blink_dash();
    1d76:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dash();
    1d7a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dash();
    1d7e:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dash();
    1d82:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <blink_dash>
            blink_dot();
    1d86:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <blink_dot>
            break;
        }
        pause();
    1d8a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pause>
        pause();
    1d8e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pause>
        pause();
    1d92:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    1d96:	f3 94       	inc	r15
    1d98:	f8 01       	movw	r30, r16
    1d9a:	01 90       	ld	r0, Z+
    1d9c:	00 20       	and	r0, r0
    1d9e:	e9 f7       	brne	.-6      	; 0x1d9a <blink_morse_code_error+0x13a>
    1da0:	31 97       	sbiw	r30, 0x01	; 1
    1da2:	e0 1b       	sub	r30, r16
    1da4:	f1 0b       	sbc	r31, r17
    1da6:	8f 2d       	mov	r24, r15
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	8e 17       	cp	r24, r30
    1dac:	9f 07       	cpc	r25, r31
    1dae:	08 f4       	brcc	.+2      	; 0x1db2 <blink_morse_code_error+0x152>
    1db0:	81 cf       	rjmp	.-254    	; 0x1cb4 <blink_morse_code_error+0x54>
        pause();
        pause();
        pause();
    }

}
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	ff 90       	pop	r15
    1dc2:	08 95       	ret

00001dc4 <nrk_error_print>:
    *task_id = error_task;
    return 1;
}

int8_t nrk_error_print ()
{
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    int8_t t=0,i=0;
    if (error_num == 0)
    1dc8:	80 91 ef 07 	lds	r24, 0x07EF
    1dcc:	88 23       	and	r24, r24
    1dce:	19 f4       	brne	.+6      	; 0x1dd6 <nrk_error_print+0x12>
    }

#endif  /*  */
    error_num = 0;
    return t;
}
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	08 95       	ret
    int8_t t=0,i=0;
    if (error_num == 0)
        return 0;

#ifdef NRK_HALT_ON_ERROR
    nrk_int_disable ();
    1dd6:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    1dda:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    1dde:	8e ea       	ldi	r24, 0xAE	; 174
    1de0:	93 e0       	ldi	r25, 0x03	; 3
    1de2:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrk_kprintf>
        printf ("%d", error_task);
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <nrk_error_print+0x24>
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <nrk_error_print+0x26>
    1dea:	ed b7       	in	r30, 0x3d	; 61
    1dec:	fe b7       	in	r31, 0x3e	; 62
    1dee:	31 96       	adiw	r30, 0x01	; 1
    1df0:	86 e6       	ldi	r24, 0x66	; 102
    1df2:	92 e0       	ldi	r25, 0x02	; 2
    1df4:	ad b7       	in	r26, 0x3d	; 61
    1df6:	be b7       	in	r27, 0x3e	; 62
    1df8:	12 96       	adiw	r26, 0x02	; 2
    1dfa:	9c 93       	st	X, r25
    1dfc:	8e 93       	st	-X, r24
    1dfe:	11 97       	sbiw	r26, 0x01	; 1
    1e00:	80 91 c2 03 	lds	r24, 0x03C2
    1e04:	82 83       	std	Z+2, r24	; 0x02
    1e06:	13 82       	std	Z+3, r1	; 0x03
    1e08:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>
        nrk_kprintf (PSTR ("): "));
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	8a ea       	ldi	r24, 0xAA	; 170
    1e16:	93 e0       	ldi	r25, 0x03	; 3
    1e18:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    1e1c:	80 91 ef 07 	lds	r24, 0x07EF
    1e20:	88 31       	cpi	r24, 0x18	; 24
    1e22:	10 f0       	brcs	.+4      	; 0x1e28 <nrk_error_print+0x64>
            error_num = NRK_UNKOWN;
    1e24:	10 92 ef 07 	sts	0x07EF, r1
        switch (error_num)
    1e28:	80 91 ef 07 	lds	r24, 0x07EF
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	86 31       	cpi	r24, 0x16	; 22
    1e32:	91 05       	cpc	r25, r1
    1e34:	08 f0       	brcs	.+2      	; 0x1e38 <nrk_error_print+0x74>
    1e36:	4b c0       	rjmp	.+150    	; 0x1ece <nrk_error_print+0x10a>
    1e38:	80 57       	subi	r24, 0x70	; 112
    1e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	ee 0f       	add	r30, r30
    1e40:	ff 1f       	adc	r31, r31
    1e42:	05 90       	lpm	r0, Z+
    1e44:	f4 91       	lpm	r31, Z+
    1e46:	e0 2d       	mov	r30, r0
    1e48:	09 94       	ijmp
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    1e4a:	8e e6       	ldi	r24, 0x6E	; 110
    1e4c:	93 e0       	ldi	r25, 0x03	; 3
    1e4e:	41 c0       	rjmp	.+130    	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    1e50:	87 e4       	ldi	r24, 0x47	; 71
    1e52:	93 e0       	ldi	r25, 0x03	; 3
    1e54:	3e c0       	rjmp	.+124    	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    1e56:	83 e3       	ldi	r24, 0x33	; 51
    1e58:	93 e0       	ldi	r25, 0x03	; 3
    1e5a:	3b c0       	rjmp	.+118    	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    1e5c:	8d e1       	ldi	r24, 0x1D	; 29
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	38 c0       	rjmp	.+112    	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	93 e0       	ldi	r25, 0x03	; 3
    1e66:	35 c0       	rjmp	.+106    	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    1e68:	8c ee       	ldi	r24, 0xEC	; 236
    1e6a:	92 e0       	ldi	r25, 0x02	; 2
    1e6c:	32 c0       	rjmp	.+100    	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    1e6e:	84 ed       	ldi	r24, 0xD4	; 212
    1e70:	92 e0       	ldi	r25, 0x02	; 2
    1e72:	2f c0       	rjmp	.+94     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    1e74:	81 ec       	ldi	r24, 0xC1	; 193
    1e76:	92 e0       	ldi	r25, 0x02	; 2
    1e78:	2c c0       	rjmp	.+88     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    1e7a:	8e ea       	ldi	r24, 0xAE	; 174
    1e7c:	92 e0       	ldi	r25, 0x02	; 2
    1e7e:	29 c0       	rjmp	.+82     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    1e80:	80 e9       	ldi	r24, 0x90	; 144
    1e82:	92 e0       	ldi	r25, 0x02	; 2
    1e84:	26 c0       	rjmp	.+76     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    1e86:	8b e6       	ldi	r24, 0x6B	; 107
    1e88:	92 e0       	ldi	r25, 0x02	; 2
    1e8a:	23 c0       	rjmp	.+70     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    1e8c:	8f e5       	ldi	r24, 0x5F	; 95
    1e8e:	92 e0       	ldi	r25, 0x02	; 2
    1e90:	20 c0       	rjmp	.+64     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    1e92:	84 e4       	ldi	r24, 0x44	; 68
    1e94:	92 e0       	ldi	r25, 0x02	; 2
    1e96:	1d c0       	rjmp	.+58     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    1e98:	85 e3       	ldi	r24, 0x35	; 53
    1e9a:	92 e0       	ldi	r25, 0x02	; 2
    1e9c:	1a c0       	rjmp	.+52     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    1e9e:	81 e2       	ldi	r24, 0x21	; 33
    1ea0:	92 e0       	ldi	r25, 0x02	; 2
    1ea2:	17 c0       	rjmp	.+46     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    1ea4:	80 e1       	ldi	r24, 0x10	; 16
    1ea6:	92 e0       	ldi	r25, 0x02	; 2
    1ea8:	14 c0       	rjmp	.+40     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    1eaa:	8c ef       	ldi	r24, 0xFC	; 252
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	11 c0       	rjmp	.+34     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    1eb0:	8c ed       	ldi	r24, 0xDC	; 220
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	0e c0       	rjmp	.+28     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    1eb6:	84 ec       	ldi	r24, 0xC4	; 196
    1eb8:	91 e0       	ldi	r25, 0x01	; 1
    1eba:	0b c0       	rjmp	.+22     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    1ebc:	89 ea       	ldi	r24, 0xA9	; 169
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
    1ec0:	08 c0       	rjmp	.+16     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    1ec2:	88 e9       	ldi	r24, 0x98	; 152
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	05 c0       	rjmp	.+10     	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    1ec8:	89 e8       	ldi	r24, 0x89	; 137
    1eca:	91 e0       	ldi	r25, 0x01	; 1
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <nrk_error_print+0x10e>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    1ece:	82 e8       	ldi	r24, 0x82	; 130
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrk_kprintf>
        }
        putchar ('\r');
    1ed6:	60 91 2e 0a 	lds	r22, 0x0A2E
    1eda:	70 91 2f 0a 	lds	r23, 0x0A2F
    1ede:	8d e0       	ldi	r24, 0x0D	; 13
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
        putchar ('\n');
    1ee6:	60 91 2e 0a 	lds	r22, 0x0A2E
    1eea:	70 91 2f 0a 	lds	r23, 0x0A2F
    1eee:	8a e0       	ldi	r24, 0x0A	; 10
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    1ef6:	10 e0       	ldi	r17, 0x00	; 0
    1ef8:	1f c0       	rjmp	.+62     	; 0x1f38 <nrk_error_print+0x174>
        {
            nrk_led_set (2);
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0e 94 cd 0a 	call	0x159a	; 0x159a <nrk_led_set>
            nrk_led_clr (3);
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
    1f0a:	04 e6       	ldi	r16, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    1f0c:	88 ee       	ldi	r24, 0xE8	; 232
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_spin_wait_us>
    1f14:	01 50       	subi	r16, 0x01	; 1
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    1f16:	d1 f7       	brne	.-12     	; 0x1f0c <nrk_error_print+0x148>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    1f18:	83 e0       	ldi	r24, 0x03	; 3
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 cd 0a 	call	0x159a	; 0x159a <nrk_led_set>
            nrk_led_clr (2);
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
    1f28:	04 e6       	ldi	r16, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    1f2a:	88 ee       	ldi	r24, 0xE8	; 232
    1f2c:	93 e0       	ldi	r25, 0x03	; 3
    1f2e:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_spin_wait_us>
    1f32:	01 50       	subi	r16, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    1f34:	d1 f7       	brne	.-12     	; 0x1f2a <nrk_error_print+0x166>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    1f36:	1f 5f       	subi	r17, 0xFF	; 255
    1f38:	14 31       	cpi	r17, 0x14	; 20
    1f3a:	fc f2       	brlt	.-66     	; 0x1efa <nrk_error_print+0x136>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    1f3c:	83 e0       	ldi	r24, 0x03	; 3
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
        nrk_led_clr (2);
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
        blink_morse_code_error( error_task );
    1f4c:	80 91 c2 03 	lds	r24, 0x03C2
    1f50:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <blink_morse_code_error>
        pause();
    1f54:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pause>
        nrk_led_set(2);
    1f58:	82 e0       	ldi	r24, 0x02	; 2
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 cd 0a 	call	0x159a	; 0x159a <nrk_led_set>
        pause();
    1f60:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pause>
        nrk_led_clr(2);
    1f64:	82 e0       	ldi	r24, 0x02	; 2
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
        pause();
    1f6c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <pause>
        blink_morse_code_error( error_num);
    1f70:	80 91 ef 07 	lds	r24, 0x07EF
    1f74:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <blink_morse_code_error>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    1f78:	10 e0       	ldi	r17, 0x00	; 0
    1f7a:	bf cf       	rjmp	.-130    	; 0x1efa <nrk_error_print+0x136>

00001f7c <nrk_kernel_error_add>:
    nrk_error_print ();
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    1f7c:	ef 92       	push	r14
    1f7e:	ff 92       	push	r15
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	18 2f       	mov	r17, r24
    1f86:	e6 2e       	mov	r14, r22
    error_num = n;
    1f88:	80 93 ef 07 	sts	0x07EF, r24
    error_task = task;
    1f8c:	60 93 c2 03 	sts	0x03C2, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    1f90:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <nrk_error_print>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    1f94:	00 e0       	ldi	r16, 0x00	; 0
    1f96:	21 c0       	rjmp	.+66     	; 0x1fda <nrk_kernel_error_add+0x5e>
        {
            nrk_led_set (2);
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	0e 94 cd 0a 	call	0x159a	; 0x159a <nrk_led_set>
            nrk_led_clr (3);
    1fa0:	83 e0       	ldi	r24, 0x03	; 3
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
    1fa8:	94 e6       	ldi	r25, 0x64	; 100
    1faa:	f9 2e       	mov	r15, r25
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    1fac:	88 ee       	ldi	r24, 0xE8	; 232
    1fae:	93 e0       	ldi	r25, 0x03	; 3
    1fb0:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_spin_wait_us>
    1fb4:	fa 94       	dec	r15
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    1fb6:	d1 f7       	brne	.-12     	; 0x1fac <nrk_kernel_error_add+0x30>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0e 94 cd 0a 	call	0x159a	; 0x159a <nrk_led_set>
            nrk_led_clr (2);
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
    1fc8:	84 e6       	ldi	r24, 0x64	; 100
    1fca:	f8 2e       	mov	r15, r24
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    1fcc:	88 ee       	ldi	r24, 0xE8	; 232
    1fce:	93 e0       	ldi	r25, 0x03	; 3
    1fd0:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_spin_wait_us>
    1fd4:	fa 94       	dec	r15
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    1fd6:	d1 f7       	brne	.-12     	; 0x1fcc <nrk_kernel_error_add+0x50>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    1fd8:	0f 5f       	subi	r16, 0xFF	; 255
    1fda:	04 31       	cpi	r16, 0x14	; 20
    1fdc:	e8 f2       	brcs	.-70     	; 0x1f98 <nrk_kernel_error_add+0x1c>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    1fde:	83 e0       	ldi	r24, 0x03	; 3
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
        nrk_led_clr (2);
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 b5 0a 	call	0x156a	; 0x156a <nrk_led_clr>
        blink_morse_code_error( task );
    1fee:	8e 2d       	mov	r24, r14
    1ff0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <blink_morse_code_error>
        blink_morse_code_error( n );
    1ff4:	81 2f       	mov	r24, r17
    1ff6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <blink_morse_code_error>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    1ffa:	00 e0       	ldi	r16, 0x00	; 0
    1ffc:	cd cf       	rjmp	.-102    	; 0x1f98 <nrk_kernel_error_add+0x1c>

00001ffe <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    1ffe:	80 93 ef 07 	sts	0x07EF, r24
    error_task = nrk_cur_task_TCB->task_ID;
    2002:	e0 91 02 0a 	lds	r30, 0x0A02
    2006:	f0 91 03 0a 	lds	r31, 0x0A03
    200a:	80 85       	ldd	r24, Z+8	; 0x08
    200c:	80 93 c2 03 	sts	0x03C2, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2010:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <nrk_error_print>
#endif  /*  */
}
    2014:	08 95       	ret

00002016 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2016:	6f 92       	push	r6
    2018:	7f 92       	push	r7
    201a:	8f 92       	push	r8
    201c:	9f 92       	push	r9
    201e:	af 92       	push	r10
    2020:	bf 92       	push	r11
    2022:	cf 92       	push	r12
    2024:	df 92       	push	r13
    2026:	ef 92       	push	r14
    2028:	ff 92       	push	r15
    202a:	0f 93       	push	r16
    202c:	1f 93       	push	r17
    202e:	cf 93       	push	r28
    2030:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2032:	8a eb       	ldi	r24, 0xBA	; 186
    2034:	93 e0       	ldi	r25, 0x03	; 3
    2036:	0e 94 3c 07 	call	0xe78	; 0xe78 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    203a:	00 d0       	rcall	.+0      	; 0x203c <dump_stack_info+0x26>
    203c:	00 d0       	rcall	.+0      	; 0x203e <dump_stack_info+0x28>
    203e:	89 e6       	ldi	r24, 0x69	; 105
    2040:	92 e0       	ldi	r25, 0x02	; 2
    2042:	ad b7       	in	r26, 0x3d	; 61
    2044:	be b7       	in	r27, 0x3e	; 62
    2046:	12 96       	adiw	r26, 0x02	; 2
    2048:	9c 93       	st	X, r25
    204a:	8e 93       	st	-X, r24
    204c:	11 97       	sbiw	r26, 0x01	; 1
    204e:	e0 91 02 0a 	lds	r30, 0x0A02
    2052:	f0 91 03 0a 	lds	r31, 0x0A03
    2056:	80 85       	ldd	r24, Z+8	; 0x08
    2058:	99 27       	eor	r25, r25
    205a:	87 fd       	sbrc	r24, 7
    205c:	90 95       	com	r25
    205e:	14 96       	adiw	r26, 0x04	; 4
    2060:	9c 93       	st	X, r25
    2062:	8e 93       	st	-X, r24
    2064:	13 97       	sbiw	r26, 0x03	; 3
    2066:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    206a:	e0 91 02 0a 	lds	r30, 0x0A02
    206e:	f0 91 03 0a 	lds	r31, 0x0A03
    2072:	c2 81       	ldd	r28, Z+2	; 0x02
    2074:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    2076:	82 e7       	ldi	r24, 0x72	; 114
    2078:	92 e0       	ldi	r25, 0x02	; 2
    207a:	ed b7       	in	r30, 0x3d	; 61
    207c:	fe b7       	in	r31, 0x3e	; 62
    207e:	92 83       	std	Z+2, r25	; 0x02
    2080:	81 83       	std	Z+1, r24	; 0x01
    2082:	d4 83       	std	Z+4, r29	; 0x04
    2084:	c3 83       	std	Z+3, r28	; 0x03
    2086:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>
    printf( "canary = %x ",*stkc );
    208a:	ed b7       	in	r30, 0x3d	; 61
    208c:	fe b7       	in	r31, 0x3e	; 62
    208e:	31 96       	adiw	r30, 0x01	; 1
    2090:	6f e7       	ldi	r22, 0x7F	; 127
    2092:	e6 2e       	mov	r14, r22
    2094:	62 e0       	ldi	r22, 0x02	; 2
    2096:	f6 2e       	mov	r15, r22
    2098:	ad b7       	in	r26, 0x3d	; 61
    209a:	be b7       	in	r27, 0x3e	; 62
    209c:	12 96       	adiw	r26, 0x02	; 2
    209e:	fc 92       	st	X, r15
    20a0:	ee 92       	st	-X, r14
    20a2:	11 97       	sbiw	r26, 0x01	; 1
    20a4:	88 81       	ld	r24, Y
    20a6:	82 83       	std	Z+2, r24	; 0x02
    20a8:	13 82       	std	Z+3, r1	; 0x03
    20aa:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    20ae:	5c e8       	ldi	r21, 0x8C	; 140
    20b0:	c5 2e       	mov	r12, r21
    20b2:	52 e0       	ldi	r21, 0x02	; 2
    20b4:	d5 2e       	mov	r13, r21
    20b6:	ed b7       	in	r30, 0x3d	; 61
    20b8:	fe b7       	in	r31, 0x3e	; 62
    20ba:	d2 82       	std	Z+2, r13	; 0x02
    20bc:	c1 82       	std	Z+1, r12	; 0x01
    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    printf( "canary = %x ",*stkc );
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    20be:	e0 91 02 0a 	lds	r30, 0x0A02
    20c2:	f0 91 03 0a 	lds	r31, 0x0A03
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    20c6:	80 81       	ld	r24, Z
    20c8:	91 81       	ldd	r25, Z+1	; 0x01
    20ca:	ad b7       	in	r26, 0x3d	; 61
    20cc:	be b7       	in	r27, 0x3e	; 62
    20ce:	14 96       	adiw	r26, 0x04	; 4
    20d0:	9c 93       	st	X, r25
    20d2:	8e 93       	st	-X, r24
    20d4:	13 97       	sbiw	r26, 0x03	; 3
    20d6:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    20da:	46 e9       	ldi	r20, 0x96	; 150
    20dc:	a4 2e       	mov	r10, r20
    20de:	42 e0       	ldi	r20, 0x02	; 2
    20e0:	b4 2e       	mov	r11, r20
    20e2:	ed b7       	in	r30, 0x3d	; 61
    20e4:	fe b7       	in	r31, 0x3e	; 62
    20e6:	b2 82       	std	Z+2, r11	; 0x02
    20e8:	a1 82       	std	Z+1, r10	; 0x01
    20ea:	80 91 02 0a 	lds	r24, 0x0A02
    20ee:	90 91 03 0a 	lds	r25, 0x0A03
    20f2:	94 83       	std	Z+4, r25	; 0x04
    20f4:	83 83       	std	Z+3, r24	; 0x03
    20f6:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>
    20fa:	07 e4       	ldi	r16, 0x47	; 71
    20fc:	19 e0       	ldi	r17, 0x09	; 9
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	c0 e0       	ldi	r28, 0x00	; 0
    2108:	d0 e0       	ldi	r29, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    210a:	36 ea       	ldi	r19, 0xA6	; 166
    210c:	63 2e       	mov	r6, r19
    210e:	32 e0       	ldi	r19, 0x02	; 2
    2110:	73 2e       	mov	r7, r19
        printf( "canary = %x ",*stkc );
    2112:	47 01       	movw	r8, r14
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2114:	c6 01       	movw	r24, r12
    2116:	dc 2c       	mov	r13, r12
    2118:	c9 2e       	mov	r12, r25
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    211a:	c5 01       	movw	r24, r10
    211c:	ba 2c       	mov	r11, r10
    211e:	a9 2e       	mov	r10, r25
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2120:	d8 01       	movw	r26, r16
    2122:	12 96       	adiw	r26, 0x02	; 2
    2124:	ed 90       	ld	r14, X+
    2126:	fc 90       	ld	r15, X
    2128:	13 97       	sbiw	r26, 0x03	; 3
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    212a:	00 d0       	rcall	.+0      	; 0x212c <dump_stack_info+0x116>
    212c:	00 d0       	rcall	.+0      	; 0x212e <dump_stack_info+0x118>
    212e:	00 d0       	rcall	.+0      	; 0x2130 <dump_stack_info+0x11a>
    2130:	ed b7       	in	r30, 0x3d	; 61
    2132:	fe b7       	in	r31, 0x3e	; 62
    2134:	31 96       	adiw	r30, 0x01	; 1
    2136:	ad b7       	in	r26, 0x3d	; 61
    2138:	be b7       	in	r27, 0x3e	; 62
    213a:	12 96       	adiw	r26, 0x02	; 2
    213c:	7c 92       	st	X, r7
    213e:	6e 92       	st	-X, r6
    2140:	11 97       	sbiw	r26, 0x01	; 1
    2142:	d3 83       	std	Z+3, r29	; 0x03
    2144:	c2 83       	std	Z+2, r28	; 0x02
    2146:	f5 82       	std	Z+5, r15	; 0x05
    2148:	e4 82       	std	Z+4, r14	; 0x04
    214a:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>
        printf( "canary = %x ",*stkc );
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	ed b7       	in	r30, 0x3d	; 61
    2154:	fe b7       	in	r31, 0x3e	; 62
    2156:	31 96       	adiw	r30, 0x01	; 1
    2158:	ad b7       	in	r26, 0x3d	; 61
    215a:	be b7       	in	r27, 0x3e	; 62
    215c:	11 96       	adiw	r26, 0x01	; 1
    215e:	8c 92       	st	X, r8
    2160:	11 97       	sbiw	r26, 0x01	; 1
    2162:	12 96       	adiw	r26, 0x02	; 2
    2164:	9c 92       	st	X, r9
    2166:	d7 01       	movw	r26, r14
    2168:	8c 91       	ld	r24, X
    216a:	82 83       	std	Z+2, r24	; 0x02
    216c:	13 82       	std	Z+3, r1	; 0x03
    216e:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2172:	ed b7       	in	r30, 0x3d	; 61
    2174:	fe b7       	in	r31, 0x3e	; 62
    2176:	d1 82       	std	Z+1, r13	; 0x01
    2178:	c2 82       	std	Z+2, r12	; 0x02
    217a:	d8 01       	movw	r26, r16
    217c:	8d 91       	ld	r24, X+
    217e:	9c 91       	ld	r25, X
    2180:	94 83       	std	Z+4, r25	; 0x04
    2182:	83 83       	std	Z+3, r24	; 0x03
    2184:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2188:	ed b7       	in	r30, 0x3d	; 61
    218a:	fe b7       	in	r31, 0x3e	; 62
    218c:	b1 82       	std	Z+1, r11	; 0x01
    218e:	a2 82       	std	Z+2, r10	; 0x02
    2190:	ce 01       	movw	r24, r28
    2192:	25 e0       	ldi	r18, 0x05	; 5
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	2a 95       	dec	r18
    219a:	e1 f7       	brne	.-8      	; 0x2194 <dump_stack_info+0x17e>
    219c:	8c 0f       	add	r24, r28
    219e:	9d 1f       	adc	r25, r29
    21a0:	89 5b       	subi	r24, 0xB9	; 185
    21a2:	96 4f       	sbci	r25, 0xF6	; 246
    21a4:	94 83       	std	Z+4, r25	; 0x04
    21a6:	83 83       	std	Z+3, r24	; 0x03
    21a8:	0e 94 ef 29 	call	0x53de	; 0x53de <printf>
    21ac:	21 96       	adiw	r28, 0x01	; 1
    21ae:	0f 5d       	subi	r16, 0xDF	; 223
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	c5 30       	cpi	r28, 0x05	; 5
    21bc:	d1 05       	cpc	r29, r1
    21be:	09 f0       	breq	.+2      	; 0x21c2 <dump_stack_info+0x1ac>
    21c0:	af cf       	rjmp	.-162    	; 0x2120 <dump_stack_info+0x10a>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	ff 90       	pop	r15
    21cc:	ef 90       	pop	r14
    21ce:	df 90       	pop	r13
    21d0:	cf 90       	pop	r12
    21d2:	bf 90       	pop	r11
    21d4:	af 90       	pop	r10
    21d6:	9f 90       	pop	r9
    21d8:	8f 90       	pop	r8
    21da:	7f 90       	pop	r7
    21dc:	6f 90       	pop	r6
    21de:	08 95       	ret

000021e0 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    21e4:	e0 91 02 0a 	lds	r30, 0x0A02
    21e8:	f0 91 03 0a 	lds	r31, 0x0A03
    21ec:	c2 81       	ldd	r28, Z+2	; 0x02
    21ee:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    21f0:	88 81       	ld	r24, Y
    21f2:	85 35       	cpi	r24, 0x55	; 85
    21f4:	39 f0       	breq	.+14     	; 0x2204 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    21f6:	0e 94 0b 10 	call	0x2016	; 0x2016 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    2200:	85 e5       	ldi	r24, 0x55	; 85
    2202:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    2204:	e0 91 02 0a 	lds	r30, 0x0A02
    2208:	f0 91 03 0a 	lds	r31, 0x0A03
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	22 e2       	ldi	r18, 0x22	; 34
    2212:	80 30       	cpi	r24, 0x00	; 0
    2214:	92 07       	cpc	r25, r18
    2216:	28 f0       	brcs	.+10     	; 0x2222 <nrk_stack_check+0x42>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2218:	0e 94 0b 10 	call	0x2016	; 0x2016 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    221c:	82 e1       	ldi	r24, 0x12	; 18
    221e:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <nrk_error_add>




#endif
}
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	08 95       	ret

00002228 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    2228:	99 27       	eor	r25, r25
    222a:	87 fd       	sbrc	r24, 7
    222c:	90 95       	com	r25
    222e:	fc 01       	movw	r30, r24
    2230:	75 e0       	ldi	r23, 0x05	; 5
    2232:	ee 0f       	add	r30, r30
    2234:	ff 1f       	adc	r31, r31
    2236:	7a 95       	dec	r23
    2238:	e1 f7       	brne	.-8      	; 0x2232 <nrk_stack_check_pid+0xa>
    223a:	e8 0f       	add	r30, r24
    223c:	f9 1f       	adc	r31, r25
    223e:	e9 5b       	subi	r30, 0xB9	; 185
    2240:	f6 4f       	sbci	r31, 0xF6	; 246
    2242:	a2 81       	ldd	r26, Z+2	; 0x02
    2244:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2246:	8c 91       	ld	r24, X
    2248:	85 35       	cpi	r24, 0x55	; 85
    224a:	19 f0       	breq	.+6      	; 0x2252 <nrk_stack_check_pid+0x2a>
    {
        *stkc=STK_CANARY_VAL;
    224c:	85 e5       	ldi	r24, 0x55	; 85
    224e:	8c 93       	st	X, r24
    2250:	09 c0       	rjmp	.+18     	; 0x2264 <nrk_stack_check_pid+0x3c>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
    2256:	22 e2       	ldi	r18, 0x22	; 34
    2258:	80 30       	cpi	r24, 0x00	; 0
    225a:	92 07       	cpc	r25, r18
    225c:	28 f0       	brcs	.+10     	; 0x2268 <nrk_stack_check_pid+0x40>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    225e:	82 e1       	ldi	r24, 0x12	; 18
    2260:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <nrk_error_add>
        return NRK_ERROR;
    2264:	8f ef       	ldi	r24, 0xFF	; 255
    2266:	08 95       	ret
    }
#endif
    return NRK_OK;
    2268:	81 e0       	ldi	r24, 0x01	; 1
}
    226a:	08 95       	ret

0000226c <nrk_signal_create>:
int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    226c:	60 91 e7 05 	lds	r22, 0x05E7
    2270:	70 91 e8 05 	lds	r23, 0x05E8
    2274:	80 91 e9 05 	lds	r24, 0x05E9
    2278:	90 91 ea 05 	lds	r25, 0x05EA
    227c:	e0 e0       	ldi	r30, 0x00	; 0
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	9b 01       	movw	r18, r22
    2282:	ac 01       	movw	r20, r24
    2284:	0e 2e       	mov	r0, r30
    2286:	04 c0       	rjmp	.+8      	; 0x2290 <nrk_signal_create+0x24>
    2288:	56 95       	lsr	r21
    228a:	47 95       	ror	r20
    228c:	37 95       	ror	r19
    228e:	27 95       	ror	r18
    2290:	0a 94       	dec	r0
    2292:	d2 f7       	brpl	.-12     	; 0x2288 <nrk_signal_create+0x1c>
    2294:	20 fd       	sbrc	r18, 0
    2296:	1a c0       	rjmp	.+52     	; 0x22cc <nrk_signal_create+0x60>
		{    
			_nrk_signal_list|=SIG(i);
    2298:	21 e0       	ldi	r18, 0x01	; 1
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	0e 2e       	mov	r0, r30
    22a2:	04 c0       	rjmp	.+8      	; 0x22ac <nrk_signal_create+0x40>
    22a4:	22 0f       	add	r18, r18
    22a6:	33 1f       	adc	r19, r19
    22a8:	44 1f       	adc	r20, r20
    22aa:	55 1f       	adc	r21, r21
    22ac:	0a 94       	dec	r0
    22ae:	d2 f7       	brpl	.-12     	; 0x22a4 <nrk_signal_create+0x38>
    22b0:	26 2b       	or	r18, r22
    22b2:	37 2b       	or	r19, r23
    22b4:	48 2b       	or	r20, r24
    22b6:	59 2b       	or	r21, r25
    22b8:	20 93 e7 05 	sts	0x05E7, r18
    22bc:	30 93 e8 05 	sts	0x05E8, r19
    22c0:	40 93 e9 05 	sts	0x05E9, r20
    22c4:	50 93 ea 05 	sts	0x05EA, r21
			return i;
    22c8:	8e 2f       	mov	r24, r30
    22ca:	08 95       	ret
    22cc:	31 96       	adiw	r30, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    22ce:	e0 32       	cpi	r30, 0x20	; 32
    22d0:	f1 05       	cpc	r31, r1
    22d2:	b1 f6       	brne	.-84     	; 0x2280 <nrk_signal_create+0x14>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    22d4:	8f ef       	ldi	r24, 0xFF	; 255


}
    22d6:	08 95       	ret

000022d8 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    22d8:	e0 91 02 0a 	lds	r30, 0x0A02
    22dc:	f0 91 03 0a 	lds	r31, 0x0A03


}

uint32_t nrk_signal_get_registered_mask()
{
    22e0:	65 85       	ldd	r22, Z+13	; 0x0d
    22e2:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    22e4:	87 85       	ldd	r24, Z+15	; 0x0f
    22e6:	90 89       	ldd	r25, Z+16	; 0x10
    22e8:	08 95       	ret

000022ea <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    22ea:	df 92       	push	r13
    22ec:	ef 92       	push	r14
    22ee:	ff 92       	push	r15
    22f0:	0f 93       	push	r16
    22f2:	1f 93       	push	r17
    22f4:	d8 2e       	mov	r13, r24
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	e8 2e       	mov	r14, r24
    22fa:	f1 2c       	mov	r15, r1
    22fc:	01 2d       	mov	r16, r1
    22fe:	11 2d       	mov	r17, r1
    2300:	0d 2c       	mov	r0, r13
    2302:	04 c0       	rjmp	.+8      	; 0x230c <nrk_signal_delete+0x22>
    2304:	ee 0c       	add	r14, r14
    2306:	ff 1c       	adc	r15, r15
    2308:	00 1f       	adc	r16, r16
    230a:	11 1f       	adc	r17, r17
    230c:	0a 94       	dec	r0
    230e:	d2 f7       	brpl	.-12     	; 0x2304 <nrk_signal_delete+0x1a>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2310:	80 91 e7 05 	lds	r24, 0x05E7
    2314:	90 91 e8 05 	lds	r25, 0x05E8
    2318:	a0 91 e9 05 	lds	r26, 0x05E9
    231c:	b0 91 ea 05 	lds	r27, 0x05EA
    2320:	8e 21       	and	r24, r14
    2322:	9f 21       	and	r25, r15
    2324:	a0 23       	and	r26, r16
    2326:	b1 23       	and	r27, r17
    2328:	00 97       	sbiw	r24, 0x00	; 0
    232a:	a1 05       	cpc	r26, r1
    232c:	b1 05       	cpc	r27, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <nrk_signal_delete+0x48>
    2330:	5d c0       	rjmp	.+186    	; 0x23ec <nrk_signal_delete+0x102>

	nrk_int_disable();
    2332:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
    2336:	ee e4       	ldi	r30, 0x4E	; 78
    2338:	f9 e0       	ldi	r31, 0x09	; 9
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    233a:	a8 01       	movw	r20, r16
    233c:	97 01       	movw	r18, r14
    233e:	20 95       	com	r18
    2340:	30 95       	com	r19
    2342:	40 95       	com	r20
    2344:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2346:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2348:	81 81       	ldd	r24, Z+1	; 0x01
    234a:	8f 3f       	cpi	r24, 0xFF	; 255
    234c:	39 f1       	breq	.+78     	; 0x239c <nrk_signal_delete+0xb2>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    234e:	86 81       	ldd	r24, Z+6	; 0x06
    2350:	97 81       	ldd	r25, Z+7	; 0x07
    2352:	a0 85       	ldd	r26, Z+8	; 0x08
    2354:	b1 85       	ldd	r27, Z+9	; 0x09
    2356:	8e 15       	cp	r24, r14
    2358:	9f 05       	cpc	r25, r15
    235a:	a0 07       	cpc	r26, r16
    235c:	b1 07       	cpc	r27, r17
    235e:	31 f4       	brne	.+12     	; 0x236c <nrk_signal_delete+0x82>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2360:	12 86       	std	Z+10, r1	; 0x0a
    2362:	13 86       	std	Z+11, r1	; 0x0b
    2364:	14 86       	std	Z+12, r1	; 0x0c
    2366:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    2368:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    236a:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    236c:	86 81       	ldd	r24, Z+6	; 0x06
    236e:	97 81       	ldd	r25, Z+7	; 0x07
    2370:	a0 85       	ldd	r26, Z+8	; 0x08
    2372:	b1 85       	ldd	r27, Z+9	; 0x09
    2374:	82 23       	and	r24, r18
    2376:	93 23       	and	r25, r19
    2378:	a4 23       	and	r26, r20
    237a:	b5 23       	and	r27, r21
    237c:	86 83       	std	Z+6, r24	; 0x06
    237e:	97 83       	std	Z+7, r25	; 0x07
    2380:	a0 87       	std	Z+8, r26	; 0x08
    2382:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2384:	82 85       	ldd	r24, Z+10	; 0x0a
    2386:	93 85       	ldd	r25, Z+11	; 0x0b
    2388:	a4 85       	ldd	r26, Z+12	; 0x0c
    238a:	b5 85       	ldd	r27, Z+13	; 0x0d
    238c:	82 23       	and	r24, r18
    238e:	93 23       	and	r25, r19
    2390:	a4 23       	and	r26, r20
    2392:	b5 23       	and	r27, r21
    2394:	82 87       	std	Z+10, r24	; 0x0a
    2396:	93 87       	std	Z+11, r25	; 0x0b
    2398:	a4 87       	std	Z+12, r26	; 0x0c
    239a:	b5 87       	std	Z+13, r27	; 0x0d
    239c:	b1 96       	adiw	r30, 0x21	; 33
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    239e:	89 e0       	ldi	r24, 0x09	; 9
    23a0:	e3 3f       	cpi	r30, 0xF3	; 243
    23a2:	f8 07       	cpc	r31, r24
    23a4:	89 f6       	brne	.-94     	; 0x2348 <nrk_signal_delete+0x5e>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    23a6:	2e ef       	ldi	r18, 0xFE	; 254
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f ef       	ldi	r20, 0xFF	; 255
    23ac:	5f ef       	ldi	r21, 0xFF	; 255
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <nrk_signal_delete+0xce>
    23b0:	22 0f       	add	r18, r18
    23b2:	33 1f       	adc	r19, r19
    23b4:	44 1f       	adc	r20, r20
    23b6:	55 1f       	adc	r21, r21
    23b8:	da 94       	dec	r13
    23ba:	d2 f7       	brpl	.-12     	; 0x23b0 <nrk_signal_delete+0xc6>
    23bc:	80 91 e7 05 	lds	r24, 0x05E7
    23c0:	90 91 e8 05 	lds	r25, 0x05E8
    23c4:	a0 91 e9 05 	lds	r26, 0x05E9
    23c8:	b0 91 ea 05 	lds	r27, 0x05EA
    23cc:	82 23       	and	r24, r18
    23ce:	93 23       	and	r25, r19
    23d0:	a4 23       	and	r26, r20
    23d2:	b5 23       	and	r27, r21
    23d4:	80 93 e7 05 	sts	0x05E7, r24
    23d8:	90 93 e8 05 	sts	0x05E8, r25
    23dc:	a0 93 e9 05 	sts	0x05E9, r26
    23e0:	b0 93 ea 05 	sts	0x05EA, r27
	nrk_int_enable();
    23e4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>

	return NRK_OK;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	01 c0       	rjmp	.+2      	; 0x23ee <nrk_signal_delete+0x104>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    23ec:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    23ee:	1f 91       	pop	r17
    23f0:	0f 91       	pop	r16
    23f2:	ff 90       	pop	r15
    23f4:	ef 90       	pop	r14
    23f6:	df 90       	pop	r13
    23f8:	08 95       	ret

000023fa <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    23fa:	ef 92       	push	r14
    23fc:	ff 92       	push	r15
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    2402:	21 e0       	ldi	r18, 0x01	; 1
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	04 c0       	rjmp	.+8      	; 0x2414 <nrk_signal_unregister+0x1a>
    240c:	22 0f       	add	r18, r18
    240e:	33 1f       	adc	r19, r19
    2410:	44 1f       	adc	r20, r20
    2412:	55 1f       	adc	r21, r21
    2414:	8a 95       	dec	r24
    2416:	d2 f7       	brpl	.-12     	; 0x240c <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    2418:	e0 91 02 0a 	lds	r30, 0x0A02
    241c:	f0 91 03 0a 	lds	r31, 0x0A03
    2420:	85 85       	ldd	r24, Z+13	; 0x0d
    2422:	96 85       	ldd	r25, Z+14	; 0x0e
    2424:	a7 85       	ldd	r26, Z+15	; 0x0f
    2426:	b0 89       	ldd	r27, Z+16	; 0x10
    2428:	79 01       	movw	r14, r18
    242a:	8a 01       	movw	r16, r20
    242c:	e8 22       	and	r14, r24
    242e:	f9 22       	and	r15, r25
    2430:	0a 23       	and	r16, r26
    2432:	1b 23       	and	r17, r27
    2434:	e1 14       	cp	r14, r1
    2436:	f1 04       	cpc	r15, r1
    2438:	01 05       	cpc	r16, r1
    243a:	11 05       	cpc	r17, r1
    243c:	d1 f0       	breq	.+52     	; 0x2472 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    243e:	20 95       	com	r18
    2440:	30 95       	com	r19
    2442:	40 95       	com	r20
    2444:	50 95       	com	r21
    2446:	82 23       	and	r24, r18
    2448:	93 23       	and	r25, r19
    244a:	a4 23       	and	r26, r20
    244c:	b5 23       	and	r27, r21
    244e:	85 87       	std	Z+13, r24	; 0x0d
    2450:	96 87       	std	Z+14, r25	; 0x0e
    2452:	a7 87       	std	Z+15, r26	; 0x0f
    2454:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    2456:	81 89       	ldd	r24, Z+17	; 0x11
    2458:	92 89       	ldd	r25, Z+18	; 0x12
    245a:	a3 89       	ldd	r26, Z+19	; 0x13
    245c:	b4 89       	ldd	r27, Z+20	; 0x14
    245e:	82 23       	and	r24, r18
    2460:	93 23       	and	r25, r19
    2462:	a4 23       	and	r26, r20
    2464:	b5 23       	and	r27, r21
    2466:	81 8b       	std	Z+17, r24	; 0x11
    2468:	92 8b       	std	Z+18, r25	; 0x12
    246a:	a3 8b       	std	Z+19, r26	; 0x13
    246c:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <nrk_signal_unregister+0x7a>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    2472:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    2474:	1f 91       	pop	r17
    2476:	0f 91       	pop	r16
    2478:	ff 90       	pop	r15
    247a:	ef 90       	pop	r14
    247c:	08 95       	ret

0000247e <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    247e:	20 91 e7 05 	lds	r18, 0x05E7
    2482:	30 91 e8 05 	lds	r19, 0x05E8
    2486:	40 91 e9 05 	lds	r20, 0x05E9
    248a:	50 91 ea 05 	lds	r21, 0x05EA
    248e:	08 2e       	mov	r0, r24
    2490:	04 c0       	rjmp	.+8      	; 0x249a <nrk_signal_register+0x1c>
    2492:	56 95       	lsr	r21
    2494:	47 95       	ror	r20
    2496:	37 95       	ror	r19
    2498:	27 95       	ror	r18
    249a:	0a 94       	dec	r0
    249c:	d2 f7       	brpl	.-12     	; 0x2492 <nrk_signal_register+0x14>
    249e:	21 70       	andi	r18, 0x01	; 1
    24a0:	30 70       	andi	r19, 0x00	; 0
    24a2:	21 15       	cp	r18, r1
    24a4:	31 05       	cpc	r19, r1
    24a6:	e9 f0       	breq	.+58     	; 0x24e2 <nrk_signal_register+0x64>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    24a8:	e0 91 02 0a 	lds	r30, 0x0A02
    24ac:	f0 91 03 0a 	lds	r31, 0x0A03
    24b0:	21 e0       	ldi	r18, 0x01	; 1
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	04 c0       	rjmp	.+8      	; 0x24c2 <nrk_signal_register+0x44>
    24ba:	22 0f       	add	r18, r18
    24bc:	33 1f       	adc	r19, r19
    24be:	44 1f       	adc	r20, r20
    24c0:	55 1f       	adc	r21, r21
    24c2:	8a 95       	dec	r24
    24c4:	d2 f7       	brpl	.-12     	; 0x24ba <nrk_signal_register+0x3c>
    24c6:	85 85       	ldd	r24, Z+13	; 0x0d
    24c8:	96 85       	ldd	r25, Z+14	; 0x0e
    24ca:	a7 85       	ldd	r26, Z+15	; 0x0f
    24cc:	b0 89       	ldd	r27, Z+16	; 0x10
    24ce:	82 2b       	or	r24, r18
    24d0:	93 2b       	or	r25, r19
    24d2:	a4 2b       	or	r26, r20
    24d4:	b5 2b       	or	r27, r21
    24d6:	85 87       	std	Z+13, r24	; 0x0d
    24d8:	96 87       	std	Z+14, r25	; 0x0e
    24da:	a7 87       	std	Z+15, r26	; 0x0f
    24dc:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	08 95       	ret
	}
            
	return NRK_ERROR;
    24e2:	8f ef       	ldi	r24, 0xFF	; 255
}
    24e4:	08 95       	ret

000024e6 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    24e6:	ef 92       	push	r14
    24e8:	ff 92       	push	r15
    24ea:	0f 93       	push	r16
    24ec:	1f 93       	push	r17
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	0f 92       	push	r0
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    24f8:	91 e0       	ldi	r25, 0x01	; 1
    24fa:	e9 2e       	mov	r14, r25
    24fc:	f1 2c       	mov	r15, r1
    24fe:	01 2d       	mov	r16, r1
    2500:	11 2d       	mov	r17, r1
    2502:	04 c0       	rjmp	.+8      	; 0x250c <nrk_event_signal+0x26>
    2504:	ee 0c       	add	r14, r14
    2506:	ff 1c       	adc	r15, r15
    2508:	00 1f       	adc	r16, r16
    250a:	11 1f       	adc	r17, r17
    250c:	8a 95       	dec	r24
    250e:	d2 f7       	brpl	.-12     	; 0x2504 <nrk_event_signal+0x1e>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    2510:	80 91 e7 05 	lds	r24, 0x05E7
    2514:	90 91 e8 05 	lds	r25, 0x05E8
    2518:	a0 91 e9 05 	lds	r26, 0x05E9
    251c:	b0 91 ea 05 	lds	r27, 0x05EA
    2520:	8e 21       	and	r24, r14
    2522:	9f 21       	and	r25, r15
    2524:	a0 23       	and	r26, r16
    2526:	b1 23       	and	r27, r17
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	a1 05       	cpc	r26, r1
    252c:	b1 05       	cpc	r27, r1
    252e:	11 f4       	brne	.+4      	; 0x2534 <nrk_event_signal+0x4e>
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	3f c0       	rjmp	.+126    	; 0x25b2 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    2534:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
    2538:	ee e4       	ldi	r30, 0x4E	; 78
    253a:	f9 e0       	ldi	r31, 0x09	; 9

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    253c:	20 e0       	ldi	r18, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    253e:	33 e0       	ldi	r19, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    2540:	80 81       	ld	r24, Z
    2542:	81 30       	cpi	r24, 0x01	; 1
    2544:	a9 f4       	brne	.+42     	; 0x2570 <nrk_event_signal+0x8a>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    2546:	82 85       	ldd	r24, Z+10	; 0x0a
    2548:	93 85       	ldd	r25, Z+11	; 0x0b
    254a:	a4 85       	ldd	r26, Z+12	; 0x0c
    254c:	b5 85       	ldd	r27, Z+13	; 0x0d
    254e:	8e 21       	and	r24, r14
    2550:	9f 21       	and	r25, r15
    2552:	a0 23       	and	r26, r16
    2554:	b1 23       	and	r27, r17
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	a1 05       	cpc	r26, r1
    255a:	b1 05       	cpc	r27, r1
    255c:	49 f0       	breq	.+18     	; 0x2570 <nrk_event_signal+0x8a>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    255e:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2560:	17 86       	std	Z+15, r1	; 0x0f
    2562:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    2564:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    2566:	e2 86       	std	Z+10, r14	; 0x0a
    2568:	f3 86       	std	Z+11, r15	; 0x0b
    256a:	04 87       	std	Z+12, r16	; 0x0c
    256c:	15 87       	std	Z+13, r17	; 0x0d
					event_occured=1;
    256e:	21 e0       	ldi	r18, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2570:	80 81       	ld	r24, Z
    2572:	82 30       	cpi	r24, 0x02	; 2
    2574:	91 f4       	brne	.+36     	; 0x259a <nrk_event_signal+0xb4>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    2576:	82 85       	ldd	r24, Z+10	; 0x0a
    2578:	93 85       	ldd	r25, Z+11	; 0x0b
    257a:	a4 85       	ldd	r26, Z+12	; 0x0c
    257c:	b5 85       	ldd	r27, Z+13	; 0x0d
    257e:	8e 15       	cp	r24, r14
    2580:	9f 05       	cpc	r25, r15
    2582:	a0 07       	cpc	r26, r16
    2584:	b1 07       	cpc	r27, r17
    2586:	49 f4       	brne	.+18     	; 0x259a <nrk_event_signal+0xb4>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2588:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    258a:	17 86       	std	Z+15, r1	; 0x0f
    258c:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    258e:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2590:	12 86       	std	Z+10, r1	; 0x0a
    2592:	13 86       	std	Z+11, r1	; 0x0b
    2594:	14 86       	std	Z+12, r1	; 0x0c
    2596:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    2598:	21 e0       	ldi	r18, 0x01	; 1
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
					nrk_task_TCB[task_ID].next_wakeup=0;
					nrk_task_TCB[task_ID].event_suspend=0;
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    259a:	b1 96       	adiw	r30, 0x21	; 33
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    259c:	89 e0       	ldi	r24, 0x09	; 9
    259e:	e3 3f       	cpi	r30, 0xF3	; 243
    25a0:	f8 07       	cpc	r31, r24
    25a2:	71 f6       	brne	.-100    	; 0x2540 <nrk_event_signal+0x5a>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    25a4:	29 83       	std	Y+1, r18	; 0x01
    25a6:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>
	if(event_occured)
    25aa:	29 81       	ldd	r18, Y+1	; 0x01
    25ac:	22 23       	and	r18, r18
    25ae:	29 f4       	brne	.+10     	; 0x25ba <nrk_event_signal+0xd4>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    25b0:	82 e0       	ldi	r24, 0x02	; 2
    25b2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_nrk_errno_set>
	return NRK_ERROR;
    25b6:	8f ef       	ldi	r24, 0xFF	; 255
    25b8:	01 c0       	rjmp	.+2      	; 0x25bc <nrk_event_signal+0xd6>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    25ba:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    25bc:	0f 90       	pop	r0
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	1f 91       	pop	r17
    25c4:	0f 91       	pop	r16
    25c6:	ff 90       	pop	r15
    25c8:	ef 90       	pop	r14
    25ca:	08 95       	ret

000025cc <nrk_event_wait>:

uint32_t nrk_event_wait(uint32_t event_mask)
{

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    25cc:	e0 91 02 0a 	lds	r30, 0x0A02
    25d0:	f0 91 03 0a 	lds	r31, 0x0A03
    25d4:	25 85       	ldd	r18, Z+13	; 0x0d
    25d6:	36 85       	ldd	r19, Z+14	; 0x0e
    25d8:	47 85       	ldd	r20, Z+15	; 0x0f
    25da:	50 89       	ldd	r21, Z+16	; 0x10
    25dc:	26 23       	and	r18, r22
    25de:	37 23       	and	r19, r23
    25e0:	48 23       	and	r20, r24
    25e2:	59 23       	and	r21, r25
    25e4:	21 15       	cp	r18, r1
    25e6:	31 05       	cpc	r19, r1
    25e8:	41 05       	cpc	r20, r1
    25ea:	51 05       	cpc	r21, r1
    25ec:	21 f1       	breq	.+72     	; 0x2636 <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    25ee:	61 8b       	std	Z+17, r22	; 0x11
    25f0:	72 8b       	std	Z+18, r23	; 0x12
    25f2:	83 8b       	std	Z+19, r24	; 0x13
    25f4:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    25f6:	21 e0       	ldi	r18, 0x01	; 1
    25f8:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    25fa:	00 90 f2 09 	lds	r0, 0x09F2
    25fe:	04 c0       	rjmp	.+8      	; 0x2608 <nrk_event_wait+0x3c>
    2600:	96 95       	lsr	r25
    2602:	87 95       	ror	r24
    2604:	77 95       	ror	r23
    2606:	67 95       	ror	r22
    2608:	0a 94       	dec	r0
    260a:	d2 f7       	brpl	.-12     	; 0x2600 <nrk_event_wait+0x34>
    260c:	61 70       	andi	r22, 0x01	; 1
    260e:	70 70       	andi	r23, 0x00	; 0
    2610:	61 15       	cp	r22, r1
    2612:	71 05       	cpc	r23, r1
    2614:	19 f0       	breq	.+6      	; 0x261c <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    2616:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <nrk_wait_until_nw>
    261a:	04 c0       	rjmp	.+8      	; 0x2624 <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    2624:	e0 91 02 0a 	lds	r30, 0x0A02
    2628:	f0 91 03 0a 	lds	r31, 0x0A03
    262c:	21 89       	ldd	r18, Z+17	; 0x11
    262e:	32 89       	ldd	r19, Z+18	; 0x12
    2630:	43 89       	ldd	r20, Z+19	; 0x13
    2632:	54 89       	ldd	r21, Z+20	; 0x14
    2634:	03 c0       	rjmp	.+6      	; 0x263c <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	a9 01       	movw	r20, r18
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    263c:	b9 01       	movw	r22, r18
    263e:	ca 01       	movw	r24, r20
    2640:	08 95       	ret

00002642 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	08 95       	ret

00002648 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    2648:	29 e0       	ldi	r18, 0x09	; 9
    264a:	8e 3e       	cpi	r24, 0xEE	; 238
    264c:	92 07       	cpc	r25, r18
    264e:	11 f4       	brne	.+4      	; 0x2654 <nrk_get_resource_index+0xc>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	08 95       	ret
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
    2654:	8f ef       	ldi	r24, 0xFF	; 255
}
    2656:	08 95       	ret

00002658 <nrk_sem_delete>:
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    2658:	0e 94 24 13 	call	0x2648	; 0x2648 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    265c:	8f 3f       	cpi	r24, 0xFF	; 255
    265e:	11 f4       	brne	.+4      	; 0x2664 <nrk_sem_delete+0xc>
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	03 c0       	rjmp	.+6      	; 0x266a <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	29 f4       	brne	.+10     	; 0x2672 <nrk_sem_delete+0x1a>
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_nrk_errno_set>
    266e:	8f ef       	ldi	r24, 0xFF	; 255
    2670:	08 95       	ret

	nrk_sem_list[id].count=-1;
    2672:	99 27       	eor	r25, r25
    2674:	87 fd       	sbrc	r24, 7
    2676:	90 95       	com	r25
    2678:	fc 01       	movw	r30, r24
    267a:	ee 0f       	add	r30, r30
    267c:	ff 1f       	adc	r31, r31
    267e:	e8 0f       	add	r30, r24
    2680:	f9 1f       	adc	r31, r25
    2682:	e2 51       	subi	r30, 0x12	; 18
    2684:	f6 4f       	sbci	r31, 0xF6	; 246
    2686:	8f ef       	ldi	r24, 0xFF	; 255
    2688:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    268a:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    268c:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    268e:	80 91 01 0a 	lds	r24, 0x0A01
    2692:	81 50       	subi	r24, 0x01	; 1
    2694:	80 93 01 0a 	sts	0x0A01, r24
return NRK_OK;
    2698:	81 e0       	ldi	r24, 0x01	; 1
}
    269a:	08 95       	ret

0000269c <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	0f 92       	push	r0
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    26aa:	0e 94 24 13 	call	0x2648	; 0x2648 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    26ae:	8f 3f       	cpi	r24, 0xFF	; 255
    26b0:	11 f4       	brne	.+4      	; 0x26b6 <nrk_sem_post+0x1a>
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	03 c0       	rjmp	.+6      	; 0x26bc <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    26b6:	81 30       	cpi	r24, 0x01	; 1
    26b8:	29 f4       	brne	.+10     	; 0x26c4 <nrk_sem_post+0x28>
    26ba:	82 e0       	ldi	r24, 0x02	; 2
    26bc:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_nrk_errno_set>
    26c0:	8f ef       	ldi	r24, 0xFF	; 255
    26c2:	43 c0       	rjmp	.+134    	; 0x274a <nrk_sem_post+0xae>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    26c4:	28 2f       	mov	r18, r24
    26c6:	33 27       	eor	r19, r19
    26c8:	27 fd       	sbrc	r18, 7
    26ca:	30 95       	com	r19
    26cc:	89 01       	movw	r16, r18
    26ce:	00 0f       	add	r16, r16
    26d0:	11 1f       	adc	r17, r17
    26d2:	02 0f       	add	r16, r18
    26d4:	13 1f       	adc	r17, r19
    26d6:	02 51       	subi	r16, 0x12	; 18
    26d8:	16 4f       	sbci	r17, 0xF6	; 246
    26da:	d8 01       	movw	r26, r16
    26dc:	12 96       	adiw	r26, 0x02	; 2
    26de:	2c 91       	ld	r18, X
    26e0:	12 97       	sbiw	r26, 0x02	; 2
    26e2:	9c 91       	ld	r25, X
    26e4:	29 17       	cp	r18, r25
    26e6:	84 f5       	brge	.+96     	; 0x2748 <nrk_sem_post+0xac>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>

		nrk_sem_list[id].value++;
    26ee:	f8 01       	movw	r30, r16
    26f0:	92 81       	ldd	r25, Z+2	; 0x02
    26f2:	9f 5f       	subi	r25, 0xFF	; 255
    26f4:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    26f6:	e0 91 02 0a 	lds	r30, 0x0A02
    26fa:	f0 91 03 0a 	lds	r31, 0x0A03
    26fe:	14 82       	std	Z+4, r1	; 0x04
    2700:	ee e4       	ldi	r30, 0x4E	; 78
    2702:	f9 e0       	ldi	r31, 0x09	; 9

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	99 27       	eor	r25, r25
    2708:	87 fd       	sbrc	r24, 7
    270a:	90 95       	com	r25
    270c:	a9 2f       	mov	r26, r25
    270e:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2710:	63 e0       	ldi	r22, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2712:	20 81       	ld	r18, Z
    2714:	22 30       	cpi	r18, 0x02	; 2
    2716:	89 f4       	brne	.+34     	; 0x273a <nrk_sem_post+0x9e>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2718:	22 85       	ldd	r18, Z+10	; 0x0a
    271a:	33 85       	ldd	r19, Z+11	; 0x0b
    271c:	44 85       	ldd	r20, Z+12	; 0x0c
    271e:	55 85       	ldd	r21, Z+13	; 0x0d
    2720:	28 17       	cp	r18, r24
    2722:	39 07       	cpc	r19, r25
    2724:	4a 07       	cpc	r20, r26
    2726:	5b 07       	cpc	r21, r27
    2728:	41 f4       	brne	.+16     	; 0x273a <nrk_sem_post+0x9e>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    272a:	62 83       	std	Z+2, r22	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    272c:	17 86       	std	Z+15, r1	; 0x0f
    272e:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    2730:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2732:	12 86       	std	Z+10, r1	; 0x0a
    2734:	13 86       	std	Z+11, r1	; 0x0b
    2736:	14 86       	std	Z+12, r1	; 0x0c
    2738:	15 86       	std	Z+13, r1	; 0x0d
    273a:	b1 96       	adiw	r30, 0x21	; 33
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    273c:	29 e0       	ldi	r18, 0x09	; 9
    273e:	e3 3f       	cpi	r30, 0xF3	; 243
    2740:	f2 07       	cpc	r31, r18
    2742:	39 f7       	brne	.-50     	; 0x2712 <nrk_sem_post+0x76>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    2744:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>
	}
		
return NRK_OK;
    2748:	81 e0       	ldi	r24, 0x01	; 1
}
    274a:	0f 90       	pop	r0
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	08 95       	ret

00002756 <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	0f 92       	push	r0
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2764:	0e 94 24 13 	call	0x2648	; 0x2648 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2768:	8f 3f       	cpi	r24, 0xFF	; 255
    276a:	11 f4       	brne	.+4      	; 0x2770 <nrk_sem_pend+0x1a>
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	03 c0       	rjmp	.+6      	; 0x2776 <nrk_sem_pend+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2770:	81 30       	cpi	r24, 0x01	; 1
    2772:	29 f4       	brne	.+10     	; 0x277e <nrk_sem_pend+0x28>
    2774:	82 e0       	ldi	r24, 0x02	; 2
    2776:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_nrk_errno_set>
    277a:	8f ef       	ldi	r24, 0xFF	; 255
    277c:	40 c0       	rjmp	.+128    	; 0x27fe <nrk_sem_pend+0xa8>
	
	nrk_int_disable();
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	08 2f       	mov	r16, r24
    2788:	11 27       	eor	r17, r17
    278a:	07 fd       	sbrc	r16, 7
    278c:	10 95       	com	r17
    278e:	f8 01       	movw	r30, r16
    2790:	ee 0f       	add	r30, r30
    2792:	ff 1f       	adc	r31, r31
    2794:	e0 0f       	add	r30, r16
    2796:	f1 1f       	adc	r31, r17
    2798:	e2 51       	subi	r30, 0x12	; 18
    279a:	f6 4f       	sbci	r31, 0xF6	; 246
    279c:	92 81       	ldd	r25, Z+2	; 0x02
    279e:	99 23       	and	r25, r25
    27a0:	b1 f4       	brne	.+44     	; 0x27ce <nrk_sem_pend+0x78>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    27a2:	e0 91 02 0a 	lds	r30, 0x0A02
    27a6:	f0 91 03 0a 	lds	r31, 0x0A03
    27aa:	97 81       	ldd	r25, Z+7	; 0x07
    27ac:	92 60       	ori	r25, 0x02	; 2
    27ae:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    27b0:	99 27       	eor	r25, r25
    27b2:	87 fd       	sbrc	r24, 7
    27b4:	90 95       	com	r25
    27b6:	a9 2f       	mov	r26, r25
    27b8:	b9 2f       	mov	r27, r25
    27ba:	81 8b       	std	Z+17, r24	; 0x11
    27bc:	92 8b       	std	Z+18, r25	; 0x12
    27be:	a3 8b       	std	Z+19, r26	; 0x13
    27c0:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    27c2:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    27ce:	f8 01       	movw	r30, r16
    27d0:	ee 0f       	add	r30, r30
    27d2:	ff 1f       	adc	r31, r31
    27d4:	e0 0f       	add	r30, r16
    27d6:	f1 1f       	adc	r31, r17
    27d8:	e2 51       	subi	r30, 0x12	; 18
    27da:	f6 4f       	sbci	r31, 0xF6	; 246
    27dc:	82 81       	ldd	r24, Z+2	; 0x02
    27de:	81 50       	subi	r24, 0x01	; 1
    27e0:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    27e2:	a0 91 02 0a 	lds	r26, 0x0A02
    27e6:	b0 91 03 0a 	lds	r27, 0x0A03
    27ea:	81 81       	ldd	r24, Z+1	; 0x01
    27ec:	1b 96       	adiw	r26, 0x0b	; 11
    27ee:	8c 93       	st	X, r24
    27f0:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	14 96       	adiw	r26, 0x04	; 4
    27f6:	8c 93       	st	X, r24
	nrk_int_enable();
    27f8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>

	return NRK_OK;
    27fc:	81 e0       	ldi	r24, 0x01	; 1
}
    27fe:	0f 90       	pop	r0
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	1f 91       	pop	r17
    2806:	0f 91       	pop	r16
    2808:	08 95       	ret

0000280a <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    280a:	0e 94 24 13 	call	0x2648	; 0x2648 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    280e:	8f 3f       	cpi	r24, 0xFF	; 255
    2810:	11 f4       	brne	.+4      	; 0x2816 <nrk_sem_query+0xc>
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	03 c0       	rjmp	.+6      	; 0x281c <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2816:	81 30       	cpi	r24, 0x01	; 1
    2818:	29 f4       	brne	.+10     	; 0x2824 <nrk_sem_query+0x1a>
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_nrk_errno_set>
    2820:	8f ef       	ldi	r24, 0xFF	; 255
    2822:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    2824:	99 27       	eor	r25, r25
    2826:	87 fd       	sbrc	r24, 7
    2828:	90 95       	com	r25
    282a:	fc 01       	movw	r30, r24
    282c:	ee 0f       	add	r30, r30
    282e:	ff 1f       	adc	r31, r31
    2830:	e8 0f       	add	r30, r24
    2832:	f9 1f       	adc	r31, r25
    2834:	e2 51       	subi	r30, 0x12	; 18
    2836:	f6 4f       	sbci	r31, 0xF6	; 246
    2838:	82 81       	ldd	r24, Z+2	; 0x02
}
    283a:	08 95       	ret

0000283c <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    283c:	e0 91 f7 09 	lds	r30, 0x09F7
    2840:	f0 91 f8 09 	lds	r31, 0x09F8
}
    2844:	80 81       	ld	r24, Z
    2846:	08 95       	ret

00002848 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    2848:	e0 91 f7 09 	lds	r30, 0x09F7
    284c:	f0 91 f8 09 	lds	r31, 0x09F8
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    2850:	03 c0       	rjmp	.+6      	; 0x2858 <nrk_print_readyQ+0x10>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    2852:	03 80       	ldd	r0, Z+3	; 0x03
    2854:	f4 81       	ldd	r31, Z+4	; 0x04
    2856:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    2858:	30 97       	sbiw	r30, 0x00	; 0
    285a:	d9 f7       	brne	.-10     	; 0x2852 <nrk_print_readyQ+0xa>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    285c:	08 95       	ret

0000285e <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    285e:	df 92       	push	r13
    2860:	ef 92       	push	r14
    2862:	ff 92       	push	r15
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    286c:	e0 91 45 09 	lds	r30, 0x0945
    2870:	f0 91 46 09 	lds	r31, 0x0946
    2874:	30 97       	sbiw	r30, 0x00	; 0
    2876:	09 f4       	brne	.+2      	; 0x287a <nrk_add_to_readyQ+0x1c>
    2878:	9b c0       	rjmp	.+310    	; 0x29b0 <nrk_add_to_readyQ+0x152>
    {
        return;
    }


    NextNode = _head_node;
    287a:	40 91 f7 09 	lds	r20, 0x09F7
    287e:	50 91 f8 09 	lds	r21, 0x09F8
    CurNode = _free_node;

    if (_head_node != NULL)
    2882:	41 15       	cp	r20, r1
    2884:	51 05       	cpc	r21, r1
    2886:	09 f4       	brne	.+2      	; 0x288a <nrk_add_to_readyQ+0x2c>
    2888:	57 c0       	rjmp	.+174    	; 0x2938 <nrk_add_to_readyQ+0xda>
    288a:	da 01       	movw	r26, r20

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    288c:	68 2f       	mov	r22, r24
    288e:	77 27       	eor	r23, r23
    2890:	67 fd       	sbrc	r22, 7
    2892:	70 95       	com	r23
    2894:	9b 01       	movw	r18, r22
    2896:	15 e0       	ldi	r17, 0x05	; 5
    2898:	22 0f       	add	r18, r18
    289a:	33 1f       	adc	r19, r19
    289c:	1a 95       	dec	r17
    289e:	e1 f7       	brne	.-8      	; 0x2898 <nrk_add_to_readyQ+0x3a>
    28a0:	26 0f       	add	r18, r22
    28a2:	37 1f       	adc	r19, r23
    28a4:	29 5b       	subi	r18, 0xB9	; 185
    28a6:	36 4f       	sbci	r19, 0xF6	; 246
    28a8:	b9 01       	movw	r22, r18
    28aa:	66 5f       	subi	r22, 0xF6	; 246
    28ac:	7f 4f       	sbci	r23, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    28ae:	89 01       	movw	r16, r18
    28b0:	0c 5f       	subi	r16, 0xFC	; 252
    28b2:	1f 4f       	sbci	r17, 0xFF	; 255
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    28b4:	9b e0       	ldi	r25, 0x0B	; 11
    28b6:	e9 2e       	mov	r14, r25
    28b8:	f1 2c       	mov	r15, r1
    28ba:	e2 0e       	add	r14, r18
    28bc:	f3 1e       	adc	r15, r19
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    28be:	2c 91       	ld	r18, X
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	e9 01       	movw	r28, r18
    28c4:	95 e0       	ldi	r25, 0x05	; 5
    28c6:	cc 0f       	add	r28, r28
    28c8:	dd 1f       	adc	r29, r29
    28ca:	9a 95       	dec	r25
    28cc:	e1 f7       	brne	.-8      	; 0x28c6 <nrk_add_to_readyQ+0x68>
    28ce:	c2 0f       	add	r28, r18
    28d0:	d3 1f       	adc	r29, r19
    28d2:	c9 5b       	subi	r28, 0xB9	; 185
    28d4:	d6 4f       	sbci	r29, 0xF6	; 246
    28d6:	9c 81       	ldd	r25, Y+4	; 0x04
    28d8:	99 23       	and	r25, r25
    28da:	29 f0       	breq	.+10     	; 0x28e6 <nrk_add_to_readyQ+0x88>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    28dc:	db 84       	ldd	r13, Y+11	; 0x0b
    28de:	eb 01       	movw	r28, r22
    28e0:	98 81       	ld	r25, Y
    28e2:	d9 16       	cp	r13, r25
    28e4:	58 f1       	brcs	.+86     	; 0x293c <nrk_add_to_readyQ+0xde>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    28e6:	e8 01       	movw	r28, r16
    28e8:	98 81       	ld	r25, Y
    28ea:	99 23       	and	r25, r25
    28ec:	79 f0       	breq	.+30     	; 0x290c <nrk_add_to_readyQ+0xae>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    28ee:	e9 01       	movw	r28, r18
    28f0:	95 e0       	ldi	r25, 0x05	; 5
    28f2:	cc 0f       	add	r28, r28
    28f4:	dd 1f       	adc	r29, r29
    28f6:	9a 95       	dec	r25
    28f8:	e1 f7       	brne	.-8      	; 0x28f2 <nrk_add_to_readyQ+0x94>
    28fa:	c2 0f       	add	r28, r18
    28fc:	d3 1f       	adc	r29, r19
    28fe:	c9 5b       	subi	r28, 0xB9	; 185
    2900:	d6 4f       	sbci	r29, 0xF6	; 246
    2902:	da 84       	ldd	r13, Y+10	; 0x0a
    2904:	e7 01       	movw	r28, r14
    2906:	98 81       	ld	r25, Y
    2908:	d9 16       	cp	r13, r25
    290a:	c0 f0       	brcs	.+48     	; 0x293c <nrk_add_to_readyQ+0xde>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    290c:	e9 01       	movw	r28, r18
    290e:	95 e0       	ldi	r25, 0x05	; 5
    2910:	cc 0f       	add	r28, r28
    2912:	dd 1f       	adc	r29, r29
    2914:	9a 95       	dec	r25
    2916:	e1 f7       	brne	.-8      	; 0x2910 <nrk_add_to_readyQ+0xb2>
    2918:	c2 0f       	add	r28, r18
    291a:	d3 1f       	adc	r29, r19
    291c:	c9 5b       	subi	r28, 0xB9	; 185
    291e:	d6 4f       	sbci	r29, 0xF6	; 246
    2920:	2a 85       	ldd	r18, Y+10	; 0x0a
    2922:	eb 01       	movw	r28, r22
    2924:	98 81       	ld	r25, Y
    2926:	29 17       	cp	r18, r25
    2928:	48 f0       	brcs	.+18     	; 0x293c <nrk_add_to_readyQ+0xde>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    292a:	13 96       	adiw	r26, 0x03	; 3
    292c:	0d 90       	ld	r0, X+
    292e:	bc 91       	ld	r27, X
    2930:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    2932:	10 97       	sbiw	r26, 0x00	; 0
    2934:	21 f6       	brne	.-120    	; 0x28be <nrk_add_to_readyQ+0x60>
    2936:	02 c0       	rjmp	.+4      	; 0x293c <nrk_add_to_readyQ+0xde>


    NextNode = _head_node;
    CurNode = _free_node;

    if (_head_node != NULL)
    2938:	a0 e0       	ldi	r26, 0x00	; 0
    293a:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    293c:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    293e:	c3 81       	ldd	r28, Z+3	; 0x03
    2940:	d4 81       	ldd	r29, Z+4	; 0x04
    2942:	d0 93 46 09 	sts	0x0946, r29
    2946:	c0 93 45 09 	sts	0x0945, r28

    if (NextNode == _head_node)
    294a:	a4 17       	cp	r26, r20
    294c:	b5 07       	cpc	r27, r21
    294e:	b1 f4       	brne	.+44     	; 0x297c <nrk_add_to_readyQ+0x11e>
    {
        //at start
        if (_head_node != NULL)
    2950:	10 97       	sbiw	r26, 0x00	; 0
    2952:	49 f0       	breq	.+18     	; 0x2966 <nrk_add_to_readyQ+0x108>
        {
            CurNode->Next = _head_node;
    2954:	b4 83       	std	Z+4, r27	; 0x04
    2956:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    2958:	12 82       	std	Z+2, r1	; 0x02
    295a:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    295c:	12 96       	adiw	r26, 0x02	; 2
    295e:	fc 93       	st	X, r31
    2960:	ee 93       	st	-X, r30
    2962:	11 97       	sbiw	r26, 0x01	; 1
    2964:	06 c0       	rjmp	.+12     	; 0x2972 <nrk_add_to_readyQ+0x114>
        }
        else
        {
            CurNode->Next = NULL;
    2966:	14 82       	std	Z+4, r1	; 0x04
    2968:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    296a:	12 82       	std	Z+2, r1	; 0x02
    296c:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    296e:	fa 83       	std	Y+2, r31	; 0x02
    2970:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    2972:	f0 93 f8 09 	sts	0x09F8, r31
    2976:	e0 93 f7 09 	sts	0x09F7, r30
    297a:	1a c0       	rjmp	.+52     	; 0x29b0 <nrk_add_to_readyQ+0x152>
    297c:	11 96       	adiw	r26, 0x01	; 1
    297e:	8d 91       	ld	r24, X+
    2980:	9c 91       	ld	r25, X
    2982:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    2984:	ac 17       	cp	r26, r28
    2986:	bd 07       	cpc	r27, r29
    2988:	59 f0       	breq	.+22     	; 0x29a0 <nrk_add_to_readyQ+0x142>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    298a:	92 83       	std	Z+2, r25	; 0x02
    298c:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    298e:	b4 83       	std	Z+4, r27	; 0x04
    2990:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    2992:	11 96       	adiw	r26, 0x01	; 1
    2994:	cd 91       	ld	r28, X+
    2996:	dc 91       	ld	r29, X
    2998:	12 97       	sbiw	r26, 0x02	; 2
    299a:	fc 83       	std	Y+4, r31	; 0x04
    299c:	eb 83       	std	Y+3, r30	; 0x03
    299e:	04 c0       	rjmp	.+8      	; 0x29a8 <nrk_add_to_readyQ+0x14a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    29a0:	14 82       	std	Z+4, r1	; 0x04
    29a2:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    29a4:	92 83       	std	Z+2, r25	; 0x02
    29a6:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    29a8:	12 96       	adiw	r26, 0x02	; 2
    29aa:	fc 93       	st	X, r31
    29ac:	ee 93       	st	-X, r30
    29ae:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	1f 91       	pop	r17
    29b6:	0f 91       	pop	r16
    29b8:	ff 90       	pop	r15
    29ba:	ef 90       	pop	r14
    29bc:	df 90       	pop	r13
    29be:	08 95       	ret

000029c0 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    29c4:	e0 91 f7 09 	lds	r30, 0x09F7
    29c8:	f0 91 f8 09 	lds	r31, 0x09F8
    29cc:	30 97       	sbiw	r30, 0x00	; 0
    29ce:	09 f4       	brne	.+2      	; 0x29d2 <nrk_rem_from_readyQ+0x12>
    29d0:	44 c0       	rjmp	.+136    	; 0x2a5a <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    29d2:	99 27       	eor	r25, r25
    29d4:	87 fd       	sbrc	r24, 7
    29d6:	90 95       	com	r25
    29d8:	20 81       	ld	r18, Z
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	28 17       	cp	r18, r24
    29de:	39 07       	cpc	r19, r25
    29e0:	81 f4       	brne	.+32     	; 0x2a02 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    29e2:	a3 81       	ldd	r26, Z+3	; 0x03
    29e4:	b4 81       	ldd	r27, Z+4	; 0x04
    29e6:	b0 93 f8 09 	sts	0x09F8, r27
    29ea:	a0 93 f7 09 	sts	0x09F7, r26
        _head_node->Prev = NULL;
    29ee:	12 96       	adiw	r26, 0x02	; 2
    29f0:	1c 92       	st	X, r1
    29f2:	1e 92       	st	-X, r1
    29f4:	11 97       	sbiw	r26, 0x01	; 1
    29f6:	18 c0       	rjmp	.+48     	; 0x2a28 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    29f8:	03 80       	ldd	r0, Z+3	; 0x03
    29fa:	f4 81       	ldd	r31, Z+4	; 0x04
    29fc:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    29fe:	30 97       	sbiw	r30, 0x00	; 0
    2a00:	61 f1       	breq	.+88     	; 0x2a5a <nrk_rem_from_readyQ+0x9a>
    2a02:	20 81       	ld	r18, Z
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	28 17       	cp	r18, r24
    2a08:	39 07       	cpc	r19, r25
    2a0a:	b1 f7       	brne	.-20     	; 0x29f8 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    2a0c:	c1 81       	ldd	r28, Z+1	; 0x01
    2a0e:	d2 81       	ldd	r29, Z+2	; 0x02
    2a10:	83 81       	ldd	r24, Z+3	; 0x03
    2a12:	94 81       	ldd	r25, Z+4	; 0x04
    2a14:	9c 83       	std	Y+4, r25	; 0x04
    2a16:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    2a18:	a3 81       	ldd	r26, Z+3	; 0x03
    2a1a:	b4 81       	ldd	r27, Z+4	; 0x04
    2a1c:	10 97       	sbiw	r26, 0x00	; 0
    2a1e:	21 f0       	breq	.+8      	; 0x2a28 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    2a20:	12 96       	adiw	r26, 0x02	; 2
    2a22:	dc 93       	st	X, r29
    2a24:	ce 93       	st	-X, r28
    2a26:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    2a28:	a0 91 45 09 	lds	r26, 0x0945
    2a2c:	b0 91 46 09 	lds	r27, 0x0946
    2a30:	10 97       	sbiw	r26, 0x00	; 0
    2a32:	39 f4       	brne	.+14     	; 0x2a42 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    2a34:	f0 93 46 09 	sts	0x0946, r31
    2a38:	e0 93 45 09 	sts	0x0945, r30
        _free_node->Next = NULL;
    2a3c:	14 82       	std	Z+4, r1	; 0x04
    2a3e:	13 82       	std	Z+3, r1	; 0x03
    2a40:	0a c0       	rjmp	.+20     	; 0x2a56 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    2a42:	b4 83       	std	Z+4, r27	; 0x04
    2a44:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    2a46:	12 96       	adiw	r26, 0x02	; 2
    2a48:	fc 93       	st	X, r31
    2a4a:	ee 93       	st	-X, r30
    2a4c:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    2a4e:	f0 93 46 09 	sts	0x0946, r31
    2a52:	e0 93 45 09 	sts	0x0945, r30
    }
    _free_node->Prev = NULL;
    2a56:	12 82       	std	Z+2, r1	; 0x02
    2a58:	11 82       	std	Z+1, r1	; 0x01
}
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	08 95       	ret

00002a60 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    2a60:	ef 92       	push	r14
    2a62:	ff 92       	push	r15
    2a64:	0f 93       	push	r16
    2a66:	1f 93       	push	r17
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    2a6e:	69 81       	ldd	r22, Y+1	; 0x01
    2a70:	7a 81       	ldd	r23, Y+2	; 0x02
    2a72:	4b 81       	ldd	r20, Y+3	; 0x03
    2a74:	5c 81       	ldd	r21, Y+4	; 0x04
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <nrk_task_stk_init>
    2a7e:	bc 01       	movw	r22, r24
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    2a80:	8f 81       	ldd	r24, Y+7	; 0x07
    2a82:	88 23       	and	r24, r24
    2a84:	69 f0       	breq	.+26     	; 0x2aa0 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    2a86:	4b 81       	ldd	r20, Y+3	; 0x03
    2a88:	5c 81       	ldd	r21, Y+4	; 0x04
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	00 e0       	ldi	r16, 0x00	; 0
    2a92:	10 e0       	ldi	r17, 0x00	; 0
    2a94:	ee 24       	eor	r14, r14
    2a96:	ff 24       	eor	r15, r15
    2a98:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    2a9c:	1f 82       	std	Y+7, r1	; 0x07
    2a9e:	13 c0       	rjmp	.+38     	; 0x2ac6 <nrk_activate_task+0x66>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    2aa0:	88 81       	ld	r24, Y
    2aa2:	99 27       	eor	r25, r25
    2aa4:	87 fd       	sbrc	r24, 7
    2aa6:	90 95       	com	r25
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	25 e0       	ldi	r18, 0x05	; 5
    2aac:	ee 0f       	add	r30, r30
    2aae:	ff 1f       	adc	r31, r31
    2ab0:	2a 95       	dec	r18
    2ab2:	e1 f7       	brne	.-8      	; 0x2aac <nrk_activate_task+0x4c>
    2ab4:	e8 0f       	add	r30, r24
    2ab6:	f9 1f       	adc	r31, r25
    2ab8:	e9 5b       	subi	r30, 0xB9	; 185
    2aba:	f6 4f       	sbci	r31, 0xF6	; 246
    2abc:	81 85       	ldd	r24, Z+9	; 0x09
    2abe:	83 30       	cpi	r24, 0x03	; 3
    2ac0:	d1 f4       	brne	.+52     	; 0x2af6 <nrk_activate_task+0x96>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    2ac2:	71 83       	std	Z+1, r23	; 0x01
    2ac4:	60 83       	st	Z, r22
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    2ac6:	88 81       	ld	r24, Y
    2ac8:	99 27       	eor	r25, r25
    2aca:	87 fd       	sbrc	r24, 7
    2acc:	90 95       	com	r25
    2ace:	fc 01       	movw	r30, r24
    2ad0:	05 e0       	ldi	r16, 0x05	; 5
    2ad2:	ee 0f       	add	r30, r30
    2ad4:	ff 1f       	adc	r31, r31
    2ad6:	0a 95       	dec	r16
    2ad8:	e1 f7       	brne	.-8      	; 0x2ad2 <nrk_activate_task+0x72>
    2ada:	e8 0f       	add	r30, r24
    2adc:	f9 1f       	adc	r31, r25
    2ade:	e9 5b       	subi	r30, 0xB9	; 185
    2ae0:	f6 4f       	sbci	r31, 0xF6	; 246
    2ae2:	85 89       	ldd	r24, Z+21	; 0x15
    2ae4:	96 89       	ldd	r25, Z+22	; 0x16
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	41 f4       	brne	.+16     	; 0x2afa <nrk_activate_task+0x9a>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    2aea:	82 e0       	ldi	r24, 0x02	; 2
    2aec:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    2aee:	88 81       	ld	r24, Y
    2af0:	0e 94 2f 14 	call	0x285e	; 0x285e <nrk_add_to_readyQ>
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <nrk_activate_task+0x9a>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    2af6:	8f ef       	ldi	r24, 0xFF	; 255
    2af8:	01 c0       	rjmp	.+2      	; 0x2afc <nrk_activate_task+0x9c>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
}
    2afc:	df 91       	pop	r29
    2afe:	cf 91       	pop	r28
    2b00:	1f 91       	pop	r17
    2b02:	0f 91       	pop	r16
    2b04:	ff 90       	pop	r15
    2b06:	ef 90       	pop	r14
    2b08:	08 95       	ret

00002b0a <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    2b0a:	1f 93       	push	r17
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	28 97       	sbiw	r28, 0x08	; 8
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	29 83       	std	Y+1, r18	; 0x01
    2b22:	3a 83       	std	Y+2, r19	; 0x02
    2b24:	4b 83       	std	Y+3, r20	; 0x03
    2b26:	5c 83       	std	Y+4, r21	; 0x04
    2b28:	6d 83       	std	Y+5, r22	; 0x05
    2b2a:	7e 83       	std	Y+6, r23	; 0x06
    2b2c:	8f 83       	std	Y+7, r24	; 0x07
    2b2e:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    2b30:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    2b34:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_nrk_os_timer_get>
    2b38:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks (&t);
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	01 96       	adiw	r24, 0x01	; 1
    2b3e:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_nrk_time_to_ticks>
    2b42:	9c 01       	movw	r18, r24
    if (nw <= TIME_PAD)
    2b44:	83 30       	cpi	r24, 0x03	; 3
    2b46:	91 05       	cpc	r25, r1
    2b48:	60 f0       	brcs	.+24     	; 0x2b62 <nrk_set_next_wakeup+0x58>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2b4a:	e0 91 02 0a 	lds	r30, 0x0A02
    2b4e:	f0 91 03 0a 	lds	r31, 0x0A03
    2b52:	21 0f       	add	r18, r17
    2b54:	31 1d       	adc	r19, r1
    2b56:	36 8b       	std	Z+22, r19	; 0x16
    2b58:	25 8b       	std	Z+21, r18	; 0x15
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    2b5a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>

    return NRK_OK;
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	01 c0       	rjmp	.+2      	; 0x2b64 <nrk_set_next_wakeup+0x5a>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks (&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    2b62:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    2b64:	28 96       	adiw	r28, 0x08	; 8
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	1f 91       	pop	r17
    2b76:	08 95       	ret

00002b78 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    2b78:	0e 94 4b 20 	call	0x4096	; 0x4096 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    2b7c:	e0 91 02 0a 	lds	r30, 0x0A02
    2b80:	f0 91 03 0a 	lds	r31, 0x0A03
    2b84:	85 81       	ldd	r24, Z+5	; 0x05
    2b86:	88 23       	and	r24, r24
    2b88:	b9 f7       	brne	.-18     	; 0x2b78 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    2b8a:	08 95       	ret

00002b8c <nrk_wait>:
    return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    2b8c:	ff 92       	push	r15
    2b8e:	0f 93       	push	r16
    2b90:	1f 93       	push	r17
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	28 97       	sbiw	r28, 0x08	; 8
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	de bf       	out	0x3e, r29	; 62
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	cd bf       	out	0x3d, r28	; 61
    2ba6:	29 83       	std	Y+1, r18	; 0x01
    2ba8:	3a 83       	std	Y+2, r19	; 0x02
    2baa:	4b 83       	std	Y+3, r20	; 0x03
    2bac:	5c 83       	std	Y+4, r21	; 0x04
    2bae:	6d 83       	std	Y+5, r22	; 0x05
    2bb0:	7e 83       	std	Y+6, r23	; 0x06
    2bb2:	8f 83       	std	Y+7, r24	; 0x07
    2bb4:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;

    nrk_stack_check ();
    2bb6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <nrk_stack_check>

    nrk_int_disable ();
    2bba:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2bbe:	e0 91 02 0a 	lds	r30, 0x0A02
    2bc2:	f0 91 03 0a 	lds	r31, 0x0A03
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	90 a3       	std	Z+32, r25	; 0x20
    2bd0:	87 8f       	std	Z+31, r24	; 0x1f
    timer = _nrk_os_timer_get ();
    2bd2:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_nrk_os_timer_get>
    2bd6:	f8 2e       	mov	r15, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks (&t);
    2bd8:	ce 01       	movw	r24, r28
    2bda:	01 96       	adiw	r24, 0x01	; 1
    2bdc:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <_nrk_time_to_ticks>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2be0:	e0 91 02 0a 	lds	r30, 0x0A02
    2be4:	f0 91 03 0a 	lds	r31, 0x0A03
    2be8:	0f 2d       	mov	r16, r15
    2bea:	10 e0       	ldi	r17, 0x00	; 0
    2bec:	98 01       	movw	r18, r16
    2bee:	28 0f       	add	r18, r24
    2bf0:	39 1f       	adc	r19, r25
    2bf2:	36 8b       	std	Z+22, r19	; 0x16
    2bf4:	25 8b       	std	Z+21, r18	; 0x15
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2bf6:	8f 2d       	mov	r24, r15
    2bf8:	88 3f       	cpi	r24, 0xF8	; 248
    2bfa:	78 f4       	brcc	.+30     	; 0x2c1a <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2bfc:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <_nrk_get_next_wakeup>
    2c00:	0f 5f       	subi	r16, 0xFF	; 255
    2c02:	1f 4f       	sbci	r17, 0xFF	; 255
    2c04:	28 2f       	mov	r18, r24
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	02 17       	cp	r16, r18
    2c0a:	13 07       	cpc	r17, r19
    2c0c:	34 f4       	brge	.+12     	; 0x2c1a <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    2c0e:	8f 2d       	mov	r24, r15
    2c10:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    2c12:	80 93 ee 07 	sts	0x07EE, r24
            _nrk_set_next_wakeup (timer);
    2c16:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    2c1a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    2c1e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	28 96       	adiw	r28, 0x08	; 8
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	f8 94       	cli
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	cd bf       	out	0x3d, r28	; 61
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	1f 91       	pop	r17
    2c36:	0f 91       	pop	r16
    2c38:	ff 90       	pop	r15
    2c3a:	08 95       	ret

00002c3c <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    2c3c:	1f 93       	push	r17
    uint8_t timer;
    nrk_int_disable ();
    2c3e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2c42:	e0 91 02 0a 	lds	r30, 0x0A02
    2c46:	f0 91 03 0a 	lds	r31, 0x0A03
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    2c4e:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    2c50:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_nrk_os_timer_get>
    2c54:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2c56:	88 3f       	cpi	r24, 0xF8	; 248
    2c58:	88 f4       	brcc	.+34     	; 0x2c7c <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2c5a:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <_nrk_get_next_wakeup>
    2c5e:	21 2f       	mov	r18, r17
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	2f 5f       	subi	r18, 0xFF	; 255
    2c64:	3f 4f       	sbci	r19, 0xFF	; 255
    2c66:	48 2f       	mov	r20, r24
    2c68:	50 e0       	ldi	r21, 0x00	; 0
    2c6a:	24 17       	cp	r18, r20
    2c6c:	35 07       	cpc	r19, r21
    2c6e:	34 f4       	brge	.+12     	; 0x2c7c <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    2c70:	81 2f       	mov	r24, r17
    2c72:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    2c74:	80 93 ee 07 	sts	0x07EE, r24
            _nrk_set_next_wakeup (timer);
    2c78:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2c7c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2c80:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	1f 91       	pop	r17
    2c88:	08 95       	ret

00002c8a <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    2c8a:	1f 93       	push	r17
    2c8c:	cf 93       	push	r28
    2c8e:	df 93       	push	r29
    2c90:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    2c92:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2c96:	e0 91 02 0a 	lds	r30, 0x0A02
    2c9a:	f0 91 03 0a 	lds	r31, 0x0A03
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    2ca2:	d6 8b       	std	Z+22, r29	; 0x16
    2ca4:	c5 8b       	std	Z+21, r28	; 0x15
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    2ca6:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_nrk_os_timer_get>
    2caa:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2cac:	88 3f       	cpi	r24, 0xF8	; 248
    2cae:	88 f4       	brcc	.+34     	; 0x2cd2 <nrk_wait_until_ticks+0x48>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2cb0:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <_nrk_get_next_wakeup>
    2cb4:	21 2f       	mov	r18, r17
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	2f 5f       	subi	r18, 0xFF	; 255
    2cba:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbc:	48 2f       	mov	r20, r24
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	24 17       	cp	r18, r20
    2cc2:	35 07       	cpc	r19, r21
    2cc4:	34 f4       	brge	.+12     	; 0x2cd2 <nrk_wait_until_ticks+0x48>
        {
            timer += TIME_PAD;
    2cc6:	81 2f       	mov	r24, r17
    2cc8:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    2cca:	80 93 ee 07 	sts	0x07EE, r24
            _nrk_set_next_wakeup (timer);
    2cce:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2cd2:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2cd6:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	df 91       	pop	r29
    2cde:	cf 91       	pop	r28
    2ce0:	1f 91       	pop	r17
    2ce2:	08 95       	ret

00002ce4 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    2ce4:	ef 92       	push	r14
    2ce6:	ff 92       	push	r15
    2ce8:	0f 93       	push	r16
    2cea:	1f 93       	push	r17
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	0f 92       	push	r0
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    2cf8:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2cfc:	e0 91 02 0a 	lds	r30, 0x0A02
    2d00:	f0 91 03 0a 	lds	r31, 0x0A03
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2d08:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_nrk_os_timer_get>
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    2d0c:	e0 91 02 0a 	lds	r30, 0x0A02
    2d10:	f0 91 03 0a 	lds	r31, 0x0A03
    2d14:	e8 2e       	mov	r14, r24
    2d16:	ff 24       	eor	r15, r15
    2d18:	0e 0d       	add	r16, r14
    2d1a:	1f 1d       	adc	r17, r15
    2d1c:	16 8b       	std	Z+22, r17	; 0x16
    2d1e:	05 8b       	std	Z+21, r16	; 0x15

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2d20:	88 3f       	cpi	r24, 0xF8	; 248
    2d22:	90 f4       	brcc	.+36     	; 0x2d48 <nrk_wait_ticks+0x64>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2d24:	89 83       	std	Y+1, r24	; 0x01
    2d26:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <_nrk_get_next_wakeup>
    2d2a:	08 94       	sec
    2d2c:	e1 1c       	adc	r14, r1
    2d2e:	f1 1c       	adc	r15, r1
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	99 81       	ldd	r25, Y+1	; 0x01
    2d36:	e2 16       	cp	r14, r18
    2d38:	f3 06       	cpc	r15, r19
    2d3a:	34 f4       	brge	.+12     	; 0x2d48 <nrk_wait_ticks+0x64>
        {
            timer += TIME_PAD;
    2d3c:	89 2f       	mov	r24, r25
    2d3e:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    2d40:	80 93 ee 07 	sts	0x07EE, r24
            _nrk_set_next_wakeup (timer);
    2d44:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2d48:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2d4c:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	0f 90       	pop	r0
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	1f 91       	pop	r17
    2d5a:	0f 91       	pop	r16
    2d5c:	ff 90       	pop	r15
    2d5e:	ef 90       	pop	r14
    2d60:	08 95       	ret

00002d62 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    2d62:	1f 93       	push	r17
    2d64:	cf 93       	push	r28
    2d66:	df 93       	push	r29
    2d68:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    2d6a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <nrk_stack_check>

    if (p == 0)
    2d6e:	20 97       	sbiw	r28, 0x00	; 0
    2d70:	11 f4       	brne	.+4      	; 0x2d76 <nrk_wait_until_next_n_periods+0x14>
        p = 1;
    2d72:	c1 e0       	ldi	r28, 0x01	; 1
    2d74:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2d76:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2d7a:	e0 91 02 0a 	lds	r30, 0x0A02
    2d7e:	f0 91 03 0a 	lds	r31, 0x0A03
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    2d86:	d0 a3       	std	Z+32, r29	; 0x20
    2d88:	c7 8f       	std	Z+31, r28	; 0x1f
    timer = _nrk_os_timer_get ();
    2d8a:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_nrk_os_timer_get>
    2d8e:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    2d90:	88 3f       	cpi	r24, 0xF8	; 248
    2d92:	88 f4       	brcc	.+34     	; 0x2db6 <nrk_wait_until_next_n_periods+0x54>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2d94:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <_nrk_get_next_wakeup>
    2d98:	21 2f       	mov	r18, r17
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	2f 5f       	subi	r18, 0xFF	; 255
    2d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2da0:	48 2f       	mov	r20, r24
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	24 17       	cp	r18, r20
    2da6:	35 07       	cpc	r19, r21
    2da8:	34 f4       	brge	.+12     	; 0x2db6 <nrk_wait_until_next_n_periods+0x54>
        {
            timer += TIME_PAD;
    2daa:	81 2f       	mov	r24, r17
    2dac:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    2dae:	80 93 ee 07 	sts	0x07EE, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2db2:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2db6:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2dba:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	df 91       	pop	r29
    2dc2:	cf 91       	pop	r28
    2dc4:	1f 91       	pop	r17
    2dc6:	08 95       	ret

00002dc8 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    2dc8:	1f 93       	push	r17
    uint8_t timer;

    nrk_stack_check ();
    2dca:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2dce:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    2dd2:	e0 91 02 0a 	lds	r30, 0x0A02
    2dd6:	f0 91 03 0a 	lds	r31, 0x0A03
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	90 a3       	std	Z+32, r25	; 0x20
    2de0:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_cur_task_TCB->suspend_flag = 1;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2de6:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_nrk_os_timer_get>
    2dea:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2dec:	88 3f       	cpi	r24, 0xF8	; 248
    2dee:	88 f4       	brcc	.+34     	; 0x2e12 <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2df0:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <_nrk_get_next_wakeup>
    2df4:	21 2f       	mov	r18, r17
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	2f 5f       	subi	r18, 0xFF	; 255
    2dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfc:	48 2f       	mov	r20, r24
    2dfe:	50 e0       	ldi	r21, 0x00	; 0
    2e00:	24 17       	cp	r18, r20
    2e02:	35 07       	cpc	r19, r21
    2e04:	34 f4       	brge	.+12     	; 0x2e12 <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    2e06:	81 2f       	mov	r24, r17
    2e08:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    2e0a:	80 93 ee 07 	sts	0x07EE, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2e0e:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2e12:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2e16:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	1f 91       	pop	r17
    2e1e:	08 95       	ret

00002e20 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    2e20:	e0 91 02 0a 	lds	r30, 0x0A02
    2e24:	f0 91 03 0a 	lds	r31, 0x0A03
    2e28:	80 85       	ldd	r24, Z+8	; 0x08
    2e2a:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    2e2e:	e0 91 02 0a 	lds	r30, 0x0A02
    2e32:	f0 91 03 0a 	lds	r31, 0x0A03
    2e36:	84 e0       	ldi	r24, 0x04	; 4
    2e38:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    2e3a:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <nrk_wait_until_next_period>
    return NRK_OK;
}
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	08 95       	ret

00002e42 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    2e42:	8f 92       	push	r8
    2e44:	9f 92       	push	r9
    2e46:	af 92       	push	r10
    2e48:	bf 92       	push	r11
    2e4a:	cf 92       	push	r12
    2e4c:	df 92       	push	r13
    2e4e:	ef 92       	push	r14
    2e50:	ff 92       	push	r15
    2e52:	0f 93       	push	r16
    2e54:	1f 93       	push	r17
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
    2e5e:	60 97       	sbiw	r28, 0x10	; 16
    2e60:	0f b6       	in	r0, 0x3f	; 63
    2e62:	f8 94       	cli
    2e64:	de bf       	out	0x3e, r29	; 62
    2e66:	0f be       	out	0x3f, r0	; 63
    2e68:	cd bf       	out	0x3d, r28	; 61
    2e6a:	29 87       	std	Y+9, r18	; 0x09
    2e6c:	3a 87       	std	Y+10, r19	; 0x0a
    2e6e:	4b 87       	std	Y+11, r20	; 0x0b
    2e70:	5c 87       	std	Y+12, r21	; 0x0c
    2e72:	6d 87       	std	Y+13, r22	; 0x0d
    2e74:	7e 87       	std	Y+14, r23	; 0x0e
    2e76:	8f 87       	std	Y+15, r24	; 0x0f
    2e78:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    2e7a:	ce 01       	movw	r24, r28
    2e7c:	01 96       	adiw	r24, 0x01	; 1
    2e7e:	0e 94 7d 17 	call	0x2efa	; 0x2efa <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    2e82:	ce 01       	movw	r24, r28
    2e84:	09 96       	adiw	r24, 0x09	; 9
    2e86:	09 85       	ldd	r16, Y+9	; 0x09
    2e88:	1a 85       	ldd	r17, Y+10	; 0x0a
    2e8a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e8c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e8e:	4d 85       	ldd	r20, Y+13	; 0x0d
    2e90:	5e 85       	ldd	r21, Y+14	; 0x0e
    2e92:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e94:	78 89       	ldd	r23, Y+16	; 0x10
    2e96:	89 80       	ldd	r8, Y+1	; 0x01
    2e98:	9a 80       	ldd	r9, Y+2	; 0x02
    2e9a:	ab 80       	ldd	r10, Y+3	; 0x03
    2e9c:	bc 80       	ldd	r11, Y+4	; 0x04
    2e9e:	cd 80       	ldd	r12, Y+5	; 0x05
    2ea0:	de 80       	ldd	r13, Y+6	; 0x06
    2ea2:	ef 80       	ldd	r14, Y+7	; 0x07
    2ea4:	f8 84       	ldd	r15, Y+8	; 0x08
    2ea6:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    2eaa:	8f 3f       	cpi	r24, 0xFF	; 255
    2eac:	61 f0       	breq	.+24     	; 0x2ec6 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    2eae:	29 85       	ldd	r18, Y+9	; 0x09
    2eb0:	3a 85       	ldd	r19, Y+10	; 0x0a
    2eb2:	4b 85       	ldd	r20, Y+11	; 0x0b
    2eb4:	5c 85       	ldd	r21, Y+12	; 0x0c
    2eb6:	6d 85       	ldd	r22, Y+13	; 0x0d
    2eb8:	7e 85       	ldd	r23, Y+14	; 0x0e
    2eba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ebc:	98 89       	ldd	r25, Y+16	; 0x10
    2ebe:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <nrk_wait>

    return NRK_OK;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	01 c0       	rjmp	.+2      	; 0x2ec8 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    2ec6:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    2ec8:	60 96       	adiw	r28, 0x10	; 16
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	de bf       	out	0x3e, r29	; 62
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	cd bf       	out	0x3d, r28	; 61
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	1f 91       	pop	r17
    2eda:	0f 91       	pop	r16
    2edc:	ff 90       	pop	r15
    2ede:	ef 90       	pop	r14
    2ee0:	df 90       	pop	r13
    2ee2:	cf 90       	pop	r12
    2ee4:	bf 90       	pop	r11
    2ee6:	af 90       	pop	r10
    2ee8:	9f 90       	pop	r9
    2eea:	8f 90       	pop	r8
    2eec:	08 95       	ret

00002eee <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    2eee:	e0 91 02 0a 	lds	r30, 0x0A02
    2ef2:	f0 91 03 0a 	lds	r31, 0x0A03
}
    2ef6:	80 85       	ldd	r24, Z+8	; 0x08
    2ef8:	08 95       	ret

00002efa <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    2efa:	ef 92       	push	r14
    2efc:	ff 92       	push	r15
    2efe:	0f 93       	push	r16
    2f00:	1f 93       	push	r17
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    2f08:	1c 82       	std	Y+4, r1	; 0x04
    2f0a:	1d 82       	std	Y+5, r1	; 0x05
    2f0c:	1e 82       	std	Y+6, r1	; 0x06
    2f0e:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    2f10:	80 91 f9 09 	lds	r24, 0x09F9
    2f14:	90 91 fa 09 	lds	r25, 0x09FA
    2f18:	a0 91 fb 09 	lds	r26, 0x09FB
    2f1c:	b0 91 fc 09 	lds	r27, 0x09FC
    2f20:	88 83       	st	Y, r24
    2f22:	99 83       	std	Y+1, r25	; 0x01
    2f24:	aa 83       	std	Y+2, r26	; 0x02
    2f26:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    2f28:	e0 90 fd 09 	lds	r14, 0x09FD
    2f2c:	f0 90 fe 09 	lds	r15, 0x09FE
    2f30:	00 91 ff 09 	lds	r16, 0x09FF
    2f34:	10 91 00 0a 	lds	r17, 0x0A00
    2f38:	ec 82       	std	Y+4, r14	; 0x04
    2f3a:	fd 82       	std	Y+5, r15	; 0x05
    2f3c:	0e 83       	std	Y+6, r16	; 0x06
    2f3e:	1f 83       	std	Y+7, r17	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    2f40:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_nrk_os_timer_get>
    2f44:	68 2f       	mov	r22, r24
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	23 eb       	ldi	r18, 0xB3	; 179
    2f4e:	36 ee       	ldi	r19, 0xE6	; 230
    2f50:	4e e0       	ldi	r20, 0x0E	; 14
    2f52:	50 e0       	ldi	r21, 0x00	; 0
    2f54:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    2f58:	6e 0d       	add	r22, r14
    2f5a:	7f 1d       	adc	r23, r15
    2f5c:	80 1f       	adc	r24, r16
    2f5e:	91 1f       	adc	r25, r17
    2f60:	6c 83       	std	Y+4, r22	; 0x04
    2f62:	7d 83       	std	Y+5, r23	; 0x05
    2f64:	8e 83       	std	Y+6, r24	; 0x06
    2f66:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    2f68:	13 c0       	rjmp	.+38     	; 0x2f90 <nrk_time_get+0x96>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    2f6a:	80 50       	subi	r24, 0x00	; 0
    2f6c:	9a 4c       	sbci	r25, 0xCA	; 202
    2f6e:	aa 49       	sbci	r26, 0x9A	; 154
    2f70:	bb 43       	sbci	r27, 0x3B	; 59
    2f72:	8c 83       	std	Y+4, r24	; 0x04
    2f74:	9d 83       	std	Y+5, r25	; 0x05
    2f76:	ae 83       	std	Y+6, r26	; 0x06
    2f78:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    2f7a:	88 81       	ld	r24, Y
    2f7c:	99 81       	ldd	r25, Y+1	; 0x01
    2f7e:	aa 81       	ldd	r26, Y+2	; 0x02
    2f80:	bb 81       	ldd	r27, Y+3	; 0x03
    2f82:	01 96       	adiw	r24, 0x01	; 1
    2f84:	a1 1d       	adc	r26, r1
    2f86:	b1 1d       	adc	r27, r1
    2f88:	88 83       	st	Y, r24
    2f8a:	99 83       	std	Y+1, r25	; 0x01
    2f8c:	aa 83       	std	Y+2, r26	; 0x02
    2f8e:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    2f90:	8c 81       	ldd	r24, Y+4	; 0x04
    2f92:	9d 81       	ldd	r25, Y+5	; 0x05
    2f94:	ae 81       	ldd	r26, Y+6	; 0x06
    2f96:	bf 81       	ldd	r27, Y+7	; 0x07
    2f98:	80 30       	cpi	r24, 0x00	; 0
    2f9a:	2a ec       	ldi	r18, 0xCA	; 202
    2f9c:	92 07       	cpc	r25, r18
    2f9e:	2a e9       	ldi	r18, 0x9A	; 154
    2fa0:	a2 07       	cpc	r26, r18
    2fa2:	2b e3       	ldi	r18, 0x3B	; 59
    2fa4:	b2 07       	cpc	r27, r18
    2fa6:	08 f7       	brcc	.-62     	; 0x2f6a <nrk_time_get+0x70>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }

}
    2fa8:	df 91       	pop	r29
    2faa:	cf 91       	pop	r28
    2fac:	1f 91       	pop	r17
    2fae:	0f 91       	pop	r16
    2fb0:	ff 90       	pop	r15
    2fb2:	ef 90       	pop	r14
    2fb4:	08 95       	ret

00002fb6 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    2fb6:	8f 92       	push	r8
    2fb8:	9f 92       	push	r9
    2fba:	af 92       	push	r10
    2fbc:	bf 92       	push	r11
    2fbe:	cf 92       	push	r12
    2fc0:	df 92       	push	r13
    2fc2:	ef 92       	push	r14
    2fc4:	ff 92       	push	r15
    2fc6:	0f 93       	push	r16
    2fc8:	1f 93       	push	r17
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	60 97       	sbiw	r28, 0x10	; 16
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	f8 94       	cli
    2fd8:	de bf       	out	0x3e, r29	; 62
    2fda:	0f be       	out	0x3f, r0	; 63
    2fdc:	cd bf       	out	0x3d, r28	; 61
    2fde:	fc 01       	movw	r30, r24
    2fe0:	09 83       	std	Y+1, r16	; 0x01
    2fe2:	1a 83       	std	Y+2, r17	; 0x02
    2fe4:	2b 83       	std	Y+3, r18	; 0x03
    2fe6:	3c 83       	std	Y+4, r19	; 0x04
    2fe8:	4d 83       	std	Y+5, r20	; 0x05
    2fea:	5e 83       	std	Y+6, r21	; 0x06
    2fec:	6f 83       	std	Y+7, r22	; 0x07
    2fee:	78 87       	std	Y+8, r23	; 0x08
    2ff0:	89 86       	std	Y+9, r8	; 0x09
    2ff2:	9a 86       	std	Y+10, r9	; 0x0a
    2ff4:	ab 86       	std	Y+11, r10	; 0x0b
    2ff6:	bc 86       	std	Y+12, r11	; 0x0c
    2ff8:	cd 86       	std	Y+13, r12	; 0x0d
    2ffa:	de 86       	std	Y+14, r13	; 0x0e
    2ffc:	ef 86       	std	Y+15, r14	; 0x0f
    2ffe:	f8 8a       	std	Y+16, r15	; 0x10
	return NRK_OK;
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
    3000:	e9 80       	ldd	r14, Y+1	; 0x01
    3002:	fa 80       	ldd	r15, Y+2	; 0x02
    3004:	0b 81       	ldd	r16, Y+3	; 0x03
    3006:	1c 81       	ldd	r17, Y+4	; 0x04
    3008:	2d 81       	ldd	r18, Y+5	; 0x05
    300a:	3e 81       	ldd	r19, Y+6	; 0x06
    300c:	4f 81       	ldd	r20, Y+7	; 0x07
    300e:	58 85       	ldd	r21, Y+8	; 0x08
    3010:	a9 84       	ldd	r10, Y+9	; 0x09
    3012:	ba 84       	ldd	r11, Y+10	; 0x0a
    3014:	cb 84       	ldd	r12, Y+11	; 0x0b
    3016:	dc 84       	ldd	r13, Y+12	; 0x0c
    3018:	8d 85       	ldd	r24, Y+13	; 0x0d
    301a:	9e 85       	ldd	r25, Y+14	; 0x0e
    301c:	af 85       	ldd	r26, Y+15	; 0x0f
    301e:	b8 89       	ldd	r27, Y+16	; 0x10
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    3020:	ea 14       	cp	r14, r10
    3022:	fb 04       	cpc	r15, r11
    3024:	0c 05       	cpc	r16, r12
    3026:	1d 05       	cpc	r17, r13
    3028:	08 f4       	brcc	.+2      	; 0x302c <nrk_time_sub+0x76>
    302a:	40 c0       	rjmp	.+128    	; 0x30ac <nrk_time_sub+0xf6>
if(low.secs==high.secs)
    302c:	ae 14       	cp	r10, r14
    302e:	bf 04       	cpc	r11, r15
    3030:	c0 06       	cpc	r12, r16
    3032:	d1 06       	cpc	r13, r17
    3034:	91 f4       	brne	.+36     	; 0x305a <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3036:	28 17       	cp	r18, r24
    3038:	39 07       	cpc	r19, r25
    303a:	4a 07       	cpc	r20, r26
    303c:	5b 07       	cpc	r21, r27
    303e:	b0 f1       	brcs	.+108    	; 0x30ac <nrk_time_sub+0xf6>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3040:	28 1b       	sub	r18, r24
    3042:	39 0b       	sbc	r19, r25
    3044:	4a 0b       	sbc	r20, r26
    3046:	5b 0b       	sbc	r21, r27
    3048:	24 83       	std	Z+4, r18	; 0x04
    304a:	35 83       	std	Z+5, r19	; 0x05
    304c:	46 83       	std	Z+6, r20	; 0x06
    304e:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    3050:	10 82       	st	Z, r1
    3052:	11 82       	std	Z+1, r1	; 0x01
    3054:	12 82       	std	Z+2, r1	; 0x02
    3056:	13 82       	std	Z+3, r1	; 0x03
    3058:	27 c0       	rjmp	.+78     	; 0x30a8 <nrk_time_sub+0xf2>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    305a:	28 17       	cp	r18, r24
    305c:	39 07       	cpc	r19, r25
    305e:	4a 07       	cpc	r20, r26
    3060:	5b 07       	cpc	r21, r27
    3062:	90 f4       	brcc	.+36     	; 0x3088 <nrk_time_sub+0xd2>
{
	high.secs--;
    3064:	08 94       	sec
    3066:	e1 08       	sbc	r14, r1
    3068:	f1 08       	sbc	r15, r1
    306a:	01 09       	sbc	r16, r1
    306c:	11 09       	sbc	r17, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    306e:	ea 18       	sub	r14, r10
    3070:	fb 08       	sbc	r15, r11
    3072:	0c 09       	sbc	r16, r12
    3074:	1d 09       	sbc	r17, r13
    3076:	e0 82       	st	Z, r14
    3078:	f1 82       	std	Z+1, r15	; 0x01
    307a:	02 83       	std	Z+2, r16	; 0x02
    307c:	13 83       	std	Z+3, r17	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    307e:	20 50       	subi	r18, 0x00	; 0
    3080:	36 43       	sbci	r19, 0x36	; 54
    3082:	45 46       	sbci	r20, 0x65	; 101
    3084:	54 4c       	sbci	r21, 0xC4	; 196
    3086:	08 c0       	rjmp	.+16     	; 0x3098 <nrk_time_sub+0xe2>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3088:	ea 18       	sub	r14, r10
    308a:	fb 08       	sbc	r15, r11
    308c:	0c 09       	sbc	r16, r12
    308e:	1d 09       	sbc	r17, r13
    3090:	e0 82       	st	Z, r14
    3092:	f1 82       	std	Z+1, r15	; 0x01
    3094:	02 83       	std	Z+2, r16	; 0x02
    3096:	13 83       	std	Z+3, r17	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3098:	28 1b       	sub	r18, r24
    309a:	39 0b       	sbc	r19, r25
    309c:	4a 0b       	sbc	r20, r26
    309e:	5b 0b       	sbc	r21, r27
    30a0:	24 83       	std	Z+4, r18	; 0x04
    30a2:	35 83       	std	Z+5, r19	; 0x05
    30a4:	46 83       	std	Z+6, r20	; 0x06
    30a6:	57 83       	std	Z+7, r21	; 0x07
return NRK_OK;
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	01 c0       	rjmp	.+2      	; 0x30ae <nrk_time_sub+0xf8>
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
if(low.secs==high.secs)
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    30ac:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    30ae:	60 96       	adiw	r28, 0x10	; 16
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	cf 91       	pop	r28
    30bc:	df 91       	pop	r29
    30be:	1f 91       	pop	r17
    30c0:	0f 91       	pop	r16
    30c2:	ff 90       	pop	r15
    30c4:	ef 90       	pop	r14
    30c6:	df 90       	pop	r13
    30c8:	cf 90       	pop	r12
    30ca:	bf 90       	pop	r11
    30cc:	af 90       	pop	r10
    30ce:	9f 90       	pop	r9
    30d0:	8f 90       	pop	r8
    30d2:	08 95       	ret

000030d4 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    30d4:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    30d6:	14 c0       	rjmp	.+40     	; 0x3100 <nrk_time_compact_nanos+0x2c>
    {
    t->nano_secs-=NANOS_PER_SEC;
    30d8:	20 50       	subi	r18, 0x00	; 0
    30da:	3a 4c       	sbci	r19, 0xCA	; 202
    30dc:	4a 49       	sbci	r20, 0x9A	; 154
    30de:	5b 43       	sbci	r21, 0x3B	; 59
    30e0:	24 83       	std	Z+4, r18	; 0x04
    30e2:	35 83       	std	Z+5, r19	; 0x05
    30e4:	46 83       	std	Z+6, r20	; 0x06
    30e6:	57 83       	std	Z+7, r21	; 0x07
    t->secs++;
    30e8:	20 81       	ld	r18, Z
    30ea:	31 81       	ldd	r19, Z+1	; 0x01
    30ec:	42 81       	ldd	r20, Z+2	; 0x02
    30ee:	53 81       	ldd	r21, Z+3	; 0x03
    30f0:	2f 5f       	subi	r18, 0xFF	; 255
    30f2:	3f 4f       	sbci	r19, 0xFF	; 255
    30f4:	4f 4f       	sbci	r20, 0xFF	; 255
    30f6:	5f 4f       	sbci	r21, 0xFF	; 255
    30f8:	20 83       	st	Z, r18
    30fa:	31 83       	std	Z+1, r19	; 0x01
    30fc:	42 83       	std	Z+2, r20	; 0x02
    30fe:	53 83       	std	Z+3, r21	; 0x03
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    3100:	24 81       	ldd	r18, Z+4	; 0x04
    3102:	35 81       	ldd	r19, Z+5	; 0x05
    3104:	46 81       	ldd	r20, Z+6	; 0x06
    3106:	57 81       	ldd	r21, Z+7	; 0x07
    3108:	20 30       	cpi	r18, 0x00	; 0
    310a:	8a ec       	ldi	r24, 0xCA	; 202
    310c:	38 07       	cpc	r19, r24
    310e:	8a e9       	ldi	r24, 0x9A	; 154
    3110:	48 07       	cpc	r20, r24
    3112:	8b e3       	ldi	r24, 0x3B	; 59
    3114:	58 07       	cpc	r21, r24
    3116:	00 f7       	brcc	.-64     	; 0x30d8 <nrk_time_compact_nanos+0x4>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    3118:	08 95       	ret

0000311a <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    311a:	8f 92       	push	r8
    311c:	9f 92       	push	r9
    311e:	af 92       	push	r10
    3120:	bf 92       	push	r11
    3122:	cf 92       	push	r12
    3124:	df 92       	push	r13
    3126:	ef 92       	push	r14
    3128:	ff 92       	push	r15
    312a:	0f 93       	push	r16
    312c:	1f 93       	push	r17
    312e:	df 93       	push	r29
    3130:	cf 93       	push	r28
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	60 97       	sbiw	r28, 0x10	; 16
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	09 83       	std	Y+1, r16	; 0x01
    3144:	1a 83       	std	Y+2, r17	; 0x02
    3146:	2b 83       	std	Y+3, r18	; 0x03
    3148:	3c 83       	std	Y+4, r19	; 0x04
    314a:	4d 83       	std	Y+5, r20	; 0x05
    314c:	5e 83       	std	Y+6, r21	; 0x06
    314e:	6f 83       	std	Y+7, r22	; 0x07
    3150:	78 87       	std	Y+8, r23	; 0x08
    3152:	89 86       	std	Y+9, r8	; 0x09
    3154:	9a 86       	std	Y+10, r9	; 0x0a
    3156:	ab 86       	std	Y+11, r10	; 0x0b
    3158:	bc 86       	std	Y+12, r11	; 0x0c
    315a:	cd 86       	std	Y+13, r12	; 0x0d
    315c:	de 86       	std	Y+14, r13	; 0x0e
    315e:	ef 86       	std	Y+15, r14	; 0x0f
    3160:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3162:	29 85       	ldd	r18, Y+9	; 0x09
    3164:	3a 85       	ldd	r19, Y+10	; 0x0a
    3166:	4b 85       	ldd	r20, Y+11	; 0x0b
    3168:	5c 85       	ldd	r21, Y+12	; 0x0c
    316a:	e9 80       	ldd	r14, Y+1	; 0x01
    316c:	fa 80       	ldd	r15, Y+2	; 0x02
    316e:	0b 81       	ldd	r16, Y+3	; 0x03
    3170:	1c 81       	ldd	r17, Y+4	; 0x04
    3172:	2e 0d       	add	r18, r14
    3174:	3f 1d       	adc	r19, r15
    3176:	40 1f       	adc	r20, r16
    3178:	51 1f       	adc	r21, r17
    317a:	fc 01       	movw	r30, r24
    317c:	20 83       	st	Z, r18
    317e:	31 83       	std	Z+1, r19	; 0x01
    3180:	42 83       	std	Z+2, r20	; 0x02
    3182:	53 83       	std	Z+3, r21	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3184:	2d 85       	ldd	r18, Y+13	; 0x0d
    3186:	3e 85       	ldd	r19, Y+14	; 0x0e
    3188:	4f 85       	ldd	r20, Y+15	; 0x0f
    318a:	58 89       	ldd	r21, Y+16	; 0x10
    318c:	ed 80       	ldd	r14, Y+5	; 0x05
    318e:	fe 80       	ldd	r15, Y+6	; 0x06
    3190:	0f 81       	ldd	r16, Y+7	; 0x07
    3192:	18 85       	ldd	r17, Y+8	; 0x08
    3194:	2e 0d       	add	r18, r14
    3196:	3f 1d       	adc	r19, r15
    3198:	40 1f       	adc	r20, r16
    319a:	51 1f       	adc	r21, r17
    319c:	24 83       	std	Z+4, r18	; 0x04
    319e:	35 83       	std	Z+5, r19	; 0x05
    31a0:	46 83       	std	Z+6, r20	; 0x06
    31a2:	57 83       	std	Z+7, r21	; 0x07
nrk_time_compact_nanos(result);
    31a4:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <nrk_time_compact_nanos>
return NRK_OK;
}
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	60 96       	adiw	r28, 0x10	; 16
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	f8 94       	cli
    31b0:	de bf       	out	0x3e, r29	; 62
    31b2:	0f be       	out	0x3f, r0	; 63
    31b4:	cd bf       	out	0x3d, r28	; 61
    31b6:	cf 91       	pop	r28
    31b8:	df 91       	pop	r29
    31ba:	1f 91       	pop	r17
    31bc:	0f 91       	pop	r16
    31be:	ff 90       	pop	r15
    31c0:	ef 90       	pop	r14
    31c2:	df 90       	pop	r13
    31c4:	cf 90       	pop	r12
    31c6:	bf 90       	pop	r11
    31c8:	af 90       	pop	r10
    31ca:	9f 90       	pop	r9
    31cc:	8f 90       	pop	r8
    31ce:	08 95       	ret

000031d0 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    31d0:	60 93 f9 09 	sts	0x09F9, r22
    31d4:	70 93 fa 09 	sts	0x09FA, r23
    31d8:	80 93 fb 09 	sts	0x09FB, r24
    31dc:	90 93 fc 09 	sts	0x09FC, r25
  nrk_system_time.nano_secs=nano_secs;
    31e0:	20 93 fd 09 	sts	0x09FD, r18
    31e4:	30 93 fe 09 	sts	0x09FE, r19
    31e8:	40 93 ff 09 	sts	0x09FF, r20
    31ec:	50 93 00 0a 	sts	0x0A00, r21
}
    31f0:	08 95       	ret

000031f2 <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    31f2:	8f 92       	push	r8
    31f4:	9f 92       	push	r9
    31f6:	af 92       	push	r10
    31f8:	bf 92       	push	r11
    31fa:	cf 92       	push	r12
    31fc:	df 92       	push	r13
    31fe:	ef 92       	push	r14
    3200:	ff 92       	push	r15
    3202:	0f 93       	push	r16
    3204:	1f 93       	push	r17
    3206:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3208:	20 81       	ld	r18, Z
    320a:	31 81       	ldd	r19, Z+1	; 0x01
    320c:	42 81       	ldd	r20, Z+2	; 0x02
    320e:	53 81       	ldd	r21, Z+3	; 0x03
    3210:	64 81       	ldd	r22, Z+4	; 0x04
    3212:	75 81       	ldd	r23, Z+5	; 0x05
    3214:	86 81       	ldd	r24, Z+6	; 0x06
    3216:	97 81       	ldd	r25, Z+7	; 0x07
    3218:	21 15       	cp	r18, r1
    321a:	31 05       	cpc	r19, r1
    321c:	41 05       	cpc	r20, r1
    321e:	51 05       	cpc	r21, r1
    3220:	09 f4       	brne	.+2      	; 0x3224 <_nrk_time_to_ticks+0x32>
    3222:	61 c0       	rjmp	.+194    	; 0x32e6 <_nrk_time_to_ticks+0xf4>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3224:	22 34       	cpi	r18, 0x42	; 66
    3226:	31 05       	cpc	r19, r1
    3228:	41 05       	cpc	r20, r1
    322a:	51 05       	cpc	r21, r1
    322c:	08 f0       	brcs	.+2      	; 0x3230 <_nrk_time_to_ticks+0x3e>
    322e:	62 c0       	rjmp	.+196    	; 0x32f4 <_nrk_time_to_ticks+0x102>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    3230:	5b 01       	movw	r10, r22
    3232:	6c 01       	movw	r12, r24
    3234:	ee 24       	eor	r14, r14
    3236:	ff 24       	eor	r15, r15
    3238:	87 01       	movw	r16, r14
    323a:	60 e0       	ldi	r22, 0x00	; 0
    323c:	38 c0       	rjmp	.+112    	; 0x32ae <_nrk_time_to_ticks+0xbc>
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    323e:	8a 2c       	mov	r8, r10
    3240:	ab 2d       	mov	r26, r11
    3242:	a6 53       	subi	r26, 0x36	; 54
    3244:	f1 e0       	ldi	r31, 0x01	; 1
    3246:	ab 15       	cp	r26, r11
    3248:	08 f0       	brcs	.+2      	; 0x324c <_nrk_time_to_ticks+0x5a>
    324a:	f0 e0       	ldi	r31, 0x00	; 0
    324c:	8c 2d       	mov	r24, r12
    324e:	86 56       	subi	r24, 0x66	; 102
    3250:	91 e0       	ldi	r25, 0x01	; 1
    3252:	8c 15       	cp	r24, r12
    3254:	08 f0       	brcs	.+2      	; 0x3258 <_nrk_time_to_ticks+0x66>
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	f8 0f       	add	r31, r24
    325a:	71 e0       	ldi	r23, 0x01	; 1
    325c:	f8 17       	cp	r31, r24
    325e:	08 f0       	brcs	.+2      	; 0x3262 <_nrk_time_to_ticks+0x70>
    3260:	70 e0       	ldi	r23, 0x00	; 0
    3262:	97 2b       	or	r25, r23
    3264:	7d 2d       	mov	r23, r13
    3266:	75 5c       	subi	r23, 0xC5	; 197
    3268:	e1 e0       	ldi	r30, 0x01	; 1
    326a:	7d 15       	cp	r23, r13
    326c:	08 f0       	brcs	.+2      	; 0x3270 <_nrk_time_to_ticks+0x7e>
    326e:	e0 e0       	ldi	r30, 0x00	; 0
    3270:	97 0f       	add	r25, r23
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	97 17       	cp	r25, r23
    3276:	08 f0       	brcs	.+2      	; 0x327a <_nrk_time_to_ticks+0x88>
    3278:	80 e0       	ldi	r24, 0x00	; 0
    327a:	8e 2b       	or	r24, r30
    327c:	8e 0d       	add	r24, r14
    327e:	e1 e0       	ldi	r30, 0x01	; 1
    3280:	8e 15       	cp	r24, r14
    3282:	08 f0       	brcs	.+2      	; 0x3286 <_nrk_time_to_ticks+0x94>
    3284:	e0 e0       	ldi	r30, 0x00	; 0
    3286:	ef 0d       	add	r30, r15
    3288:	71 e0       	ldi	r23, 0x01	; 1
    328a:	ef 15       	cp	r30, r15
    328c:	08 f0       	brcs	.+2      	; 0x3290 <_nrk_time_to_ticks+0x9e>
    328e:	70 e0       	ldi	r23, 0x00	; 0
    3290:	70 0f       	add	r23, r16
    3292:	b1 e0       	ldi	r27, 0x01	; 1
    3294:	70 17       	cp	r23, r16
    3296:	08 f0       	brcs	.+2      	; 0x329a <_nrk_time_to_ticks+0xa8>
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	b1 0f       	add	r27, r17
    329c:	a8 2c       	mov	r10, r8
    329e:	ba 2e       	mov	r11, r26
    32a0:	cf 2e       	mov	r12, r31
    32a2:	d9 2e       	mov	r13, r25
    32a4:	e8 2e       	mov	r14, r24
    32a6:	fe 2e       	mov	r15, r30
    32a8:	07 2f       	mov	r16, r23
    32aa:	1b 2f       	mov	r17, r27
    32ac:	6f 5f       	subi	r22, 0xFF	; 255
    32ae:	86 2f       	mov	r24, r22
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	a0 e0       	ldi	r26, 0x00	; 0
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	82 17       	cp	r24, r18
    32b8:	93 07       	cpc	r25, r19
    32ba:	a4 07       	cpc	r26, r20
    32bc:	b5 07       	cpc	r27, r21
    32be:	08 f4       	brcc	.+2      	; 0x32c2 <_nrk_time_to_ticks+0xd0>
    32c0:	be cf       	rjmp	.-132    	; 0x323e <_nrk_time_to_ticks+0x4c>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    32c2:	95 01       	movw	r18, r10
    32c4:	a6 01       	movw	r20, r12
    32c6:	b7 01       	movw	r22, r14
    32c8:	c8 01       	movw	r24, r16
    32ca:	a3 eb       	ldi	r26, 0xB3	; 179
    32cc:	aa 2e       	mov	r10, r26
    32ce:	f6 ee       	ldi	r31, 0xE6	; 230
    32d0:	bf 2e       	mov	r11, r31
    32d2:	ee e0       	ldi	r30, 0x0E	; 14
    32d4:	ce 2e       	mov	r12, r30
    32d6:	dd 24       	eor	r13, r13
    32d8:	ee 24       	eor	r14, r14
    32da:	ff 24       	eor	r15, r15
    32dc:	00 e0       	ldi	r16, 0x00	; 0
    32de:	10 e0       	ldi	r17, 0x00	; 0
    32e0:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <__udivdi3>
    32e4:	09 c0       	rjmp	.+18     	; 0x32f8 <_nrk_time_to_ticks+0x106>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    32e6:	23 eb       	ldi	r18, 0xB3	; 179
    32e8:	36 ee       	ldi	r19, 0xE6	; 230
    32ea:	4e e0       	ldi	r20, 0x0E	; 14
    32ec:	50 e0       	ldi	r21, 0x00	; 0
    32ee:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <_nrk_time_to_ticks+0x106>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    32f8:	c9 01       	movw	r24, r18
    32fa:	1f 91       	pop	r17
    32fc:	0f 91       	pop	r16
    32fe:	ff 90       	pop	r15
    3300:	ef 90       	pop	r14
    3302:	df 90       	pop	r13
    3304:	cf 90       	pop	r12
    3306:	bf 90       	pop	r11
    3308:	af 90       	pop	r10
    330a:	9f 90       	pop	r9
    330c:	8f 90       	pop	r8
    330e:	08 95       	ret

00003310 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3310:	ef 92       	push	r14
    3312:	ff 92       	push	r15
    3314:	0f 93       	push	r16
    3316:	1f 93       	push	r17
    3318:	df 93       	push	r29
    331a:	cf 93       	push	r28
    331c:	cd b7       	in	r28, 0x3d	; 61
    331e:	de b7       	in	r29, 0x3e	; 62
    3320:	28 97       	sbiw	r28, 0x08	; 8
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    332c:	7b 01       	movw	r14, r22
    332e:	8c 01       	movw	r16, r24
    3330:	ba e0       	ldi	r27, 0x0A	; 10
    3332:	16 95       	lsr	r17
    3334:	07 95       	ror	r16
    3336:	f7 94       	ror	r15
    3338:	e7 94       	ror	r14
    333a:	ba 95       	dec	r27
    333c:	d1 f7       	brne	.-12     	; 0x3332 <_nrk_ticks_to_time+0x22>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    333e:	e9 82       	std	Y+1, r14	; 0x01
    3340:	fa 82       	std	Y+2, r15	; 0x02
    3342:	0b 83       	std	Y+3, r16	; 0x03
    3344:	1c 83       	std	Y+4, r17	; 0x04
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    3346:	73 70       	andi	r23, 0x03	; 3
    3348:	80 70       	andi	r24, 0x00	; 0
    334a:	90 70       	andi	r25, 0x00	; 0
    334c:	23 eb       	ldi	r18, 0xB3	; 179
    334e:	36 ee       	ldi	r19, 0xE6	; 230
    3350:	4e e0       	ldi	r20, 0x0E	; 14
    3352:	50 e0       	ldi	r21, 0x00	; 0
    3354:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3358:	6d 83       	std	Y+5, r22	; 0x05
    335a:	7e 83       	std	Y+6, r23	; 0x06
    335c:	8f 83       	std	Y+7, r24	; 0x07
    335e:	98 87       	std	Y+8, r25	; 0x08
    3360:	2e 2d       	mov	r18, r14
    3362:	3a 81       	ldd	r19, Y+2	; 0x02
    3364:	4b 81       	ldd	r20, Y+3	; 0x03
    3366:	5c 81       	ldd	r21, Y+4	; 0x04

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
}
    3368:	28 96       	adiw	r28, 0x08	; 8
    336a:	0f b6       	in	r0, 0x3f	; 63
    336c:	f8 94       	cli
    336e:	de bf       	out	0x3e, r29	; 62
    3370:	0f be       	out	0x3f, r0	; 63
    3372:	cd bf       	out	0x3d, r28	; 61
    3374:	cf 91       	pop	r28
    3376:	df 91       	pop	r29
    3378:	1f 91       	pop	r17
    337a:	0f 91       	pop	r16
    337c:	ff 90       	pop	r15
    337e:	ef 90       	pop	r14
    3380:	08 95       	ret

00003382 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    3382:	8f 92       	push	r8
    3384:	9f 92       	push	r9
    3386:	af 92       	push	r10
    3388:	bf 92       	push	r11
    338a:	cf 92       	push	r12
    338c:	df 92       	push	r13
    338e:	ef 92       	push	r14
    3390:	ff 92       	push	r15
    3392:	0f 93       	push	r16
    3394:	1f 93       	push	r17
    3396:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3398:	20 81       	ld	r18, Z
    339a:	31 81       	ldd	r19, Z+1	; 0x01
    339c:	42 81       	ldd	r20, Z+2	; 0x02
    339e:	53 81       	ldd	r21, Z+3	; 0x03
    33a0:	64 81       	ldd	r22, Z+4	; 0x04
    33a2:	75 81       	ldd	r23, Z+5	; 0x05
    33a4:	86 81       	ldd	r24, Z+6	; 0x06
    33a6:	97 81       	ldd	r25, Z+7	; 0x07
    33a8:	21 15       	cp	r18, r1
    33aa:	31 05       	cpc	r19, r1
    33ac:	41 05       	cpc	r20, r1
    33ae:	51 05       	cpc	r21, r1
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <_nrk_time_to_ticks_long+0x32>
    33b2:	5b c0       	rjmp	.+182    	; 0x346a <_nrk_time_to_ticks_long+0xe8>
{
   tmp=t->nano_secs;
    33b4:	5b 01       	movw	r10, r22
    33b6:	6c 01       	movw	r12, r24
    33b8:	ee 24       	eor	r14, r14
    33ba:	ff 24       	eor	r15, r15
    33bc:	87 01       	movw	r16, r14
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    33be:	60 e0       	ldi	r22, 0x00	; 0
    33c0:	38 c0       	rjmp	.+112    	; 0x3432 <_nrk_time_to_ticks_long+0xb0>
    33c2:	8a 2c       	mov	r8, r10
    33c4:	ab 2d       	mov	r26, r11
    33c6:	a6 53       	subi	r26, 0x36	; 54
    33c8:	f1 e0       	ldi	r31, 0x01	; 1
    33ca:	ab 15       	cp	r26, r11
    33cc:	08 f0       	brcs	.+2      	; 0x33d0 <_nrk_time_to_ticks_long+0x4e>
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	8c 2d       	mov	r24, r12
    33d2:	86 56       	subi	r24, 0x66	; 102
    33d4:	91 e0       	ldi	r25, 0x01	; 1
    33d6:	8c 15       	cp	r24, r12
    33d8:	08 f0       	brcs	.+2      	; 0x33dc <_nrk_time_to_ticks_long+0x5a>
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	f8 0f       	add	r31, r24
    33de:	71 e0       	ldi	r23, 0x01	; 1
    33e0:	f8 17       	cp	r31, r24
    33e2:	08 f0       	brcs	.+2      	; 0x33e6 <_nrk_time_to_ticks_long+0x64>
    33e4:	70 e0       	ldi	r23, 0x00	; 0
    33e6:	97 2b       	or	r25, r23
    33e8:	7d 2d       	mov	r23, r13
    33ea:	75 5c       	subi	r23, 0xC5	; 197
    33ec:	e1 e0       	ldi	r30, 0x01	; 1
    33ee:	7d 15       	cp	r23, r13
    33f0:	08 f0       	brcs	.+2      	; 0x33f4 <_nrk_time_to_ticks_long+0x72>
    33f2:	e0 e0       	ldi	r30, 0x00	; 0
    33f4:	97 0f       	add	r25, r23
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	97 17       	cp	r25, r23
    33fa:	08 f0       	brcs	.+2      	; 0x33fe <_nrk_time_to_ticks_long+0x7c>
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	8e 2b       	or	r24, r30
    3400:	8e 0d       	add	r24, r14
    3402:	e1 e0       	ldi	r30, 0x01	; 1
    3404:	8e 15       	cp	r24, r14
    3406:	08 f0       	brcs	.+2      	; 0x340a <_nrk_time_to_ticks_long+0x88>
    3408:	e0 e0       	ldi	r30, 0x00	; 0
    340a:	ef 0d       	add	r30, r15
    340c:	71 e0       	ldi	r23, 0x01	; 1
    340e:	ef 15       	cp	r30, r15
    3410:	08 f0       	brcs	.+2      	; 0x3414 <_nrk_time_to_ticks_long+0x92>
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	70 0f       	add	r23, r16
    3416:	b1 e0       	ldi	r27, 0x01	; 1
    3418:	70 17       	cp	r23, r16
    341a:	08 f0       	brcs	.+2      	; 0x341e <_nrk_time_to_ticks_long+0x9c>
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	b1 0f       	add	r27, r17
    3420:	a8 2c       	mov	r10, r8
    3422:	ba 2e       	mov	r11, r26
    3424:	cf 2e       	mov	r12, r31
    3426:	d9 2e       	mov	r13, r25
    3428:	e8 2e       	mov	r14, r24
    342a:	fe 2e       	mov	r15, r30
    342c:	07 2f       	mov	r16, r23
    342e:	1b 2f       	mov	r17, r27
    3430:	6f 5f       	subi	r22, 0xFF	; 255
    3432:	86 2f       	mov	r24, r22
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	a0 e0       	ldi	r26, 0x00	; 0
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	82 17       	cp	r24, r18
    343c:	93 07       	cpc	r25, r19
    343e:	a4 07       	cpc	r26, r20
    3440:	b5 07       	cpc	r27, r21
    3442:	08 f4       	brcc	.+2      	; 0x3446 <_nrk_time_to_ticks_long+0xc4>
    3444:	be cf       	rjmp	.-132    	; 0x33c2 <_nrk_time_to_ticks_long+0x40>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3446:	95 01       	movw	r18, r10
    3448:	a6 01       	movw	r20, r12
    344a:	b7 01       	movw	r22, r14
    344c:	c8 01       	movw	r24, r16
    344e:	e3 eb       	ldi	r30, 0xB3	; 179
    3450:	ae 2e       	mov	r10, r30
    3452:	06 ee       	ldi	r16, 0xE6	; 230
    3454:	b0 2e       	mov	r11, r16
    3456:	1e e0       	ldi	r17, 0x0E	; 14
    3458:	c1 2e       	mov	r12, r17
    345a:	dd 24       	eor	r13, r13
    345c:	ee 24       	eor	r14, r14
    345e:	ff 24       	eor	r15, r15
    3460:	00 e0       	ldi	r16, 0x00	; 0
    3462:	10 e0       	ldi	r17, 0x00	; 0
    3464:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <__udivdi3>
    3468:	06 c0       	rjmp	.+12     	; 0x3476 <_nrk_time_to_ticks_long+0xf4>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    346a:	23 eb       	ldi	r18, 0xB3	; 179
    346c:	36 ee       	ldi	r19, 0xE6	; 230
    346e:	4e e0       	ldi	r20, 0x0E	; 14
    3470:	50 e0       	ldi	r21, 0x00	; 0
    3472:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    3476:	b9 01       	movw	r22, r18
    3478:	ca 01       	movw	r24, r20
}
return ticks;
}
    347a:	1f 91       	pop	r17
    347c:	0f 91       	pop	r16
    347e:	ff 90       	pop	r15
    3480:	ef 90       	pop	r14
    3482:	df 90       	pop	r13
    3484:	cf 90       	pop	r12
    3486:	bf 90       	pop	r11
    3488:	af 90       	pop	r10
    348a:	9f 90       	pop	r9
    348c:	8f 90       	pop	r8
    348e:	08 95       	ret

00003490 <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    3490:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    3492:	11 e0       	ldi	r17, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    3494:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    3498:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <_nrk_get_next_wakeup>
    349c:	8b 30       	cpi	r24, 0x0B	; 11
    349e:	10 f4       	brcc	.+4      	; 0x34a4 <nrk_idle_task+0x14>
    {
	    _nrk_cpu_state=CPU_IDLE;
    34a0:	10 93 f6 09 	sts	0x09F6, r17
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
	    nrk_sleep();
	#else
	    nrk_idle();
    34a4:	0e 94 4b 20 	call	0x4096	; 0x4096 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    34a8:	80 91 f0 07 	lds	r24, 0x07F0
    34ac:	85 35       	cpi	r24, 0x55	; 85
    34ae:	19 f0       	breq	.+6      	; 0x34b6 <nrk_idle_task+0x26>
    34b0:	88 e0       	ldi	r24, 0x08	; 8
    34b2:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    34b6:	80 91 7e 21 	lds	r24, 0x217E
    34ba:	85 35       	cpi	r24, 0x55	; 85
    34bc:	59 f3       	breq	.-42     	; 0x3494 <nrk_idle_task+0x4>
    34be:	88 e0       	ldi	r24, 0x08	; 8
    34c0:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <nrk_error_add>
    34c4:	e7 cf       	rjmp	.-50     	; 0x3494 <nrk_idle_task+0x4>

000034c6 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    34c6:	2f 92       	push	r2
    34c8:	3f 92       	push	r3
    34ca:	4f 92       	push	r4
    34cc:	5f 92       	push	r5
    34ce:	6f 92       	push	r6
    34d0:	7f 92       	push	r7
    34d2:	8f 92       	push	r8
    34d4:	9f 92       	push	r9
    34d6:	af 92       	push	r10
    34d8:	bf 92       	push	r11
    34da:	cf 92       	push	r12
    34dc:	df 92       	push	r13
    34de:	ef 92       	push	r14
    34e0:	ff 92       	push	r15
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	df 93       	push	r29
    34e8:	cf 93       	push	r28
    34ea:	0f 92       	push	r0
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    34f0:	0e 94 a8 1c 	call	0x3950	; 0x3950 <_nrk_precision_os_timer_reset>
    nrk_int_disable();   // this should be removed...  Not needed
    34f4:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    34f8:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    34fc:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_nrk_high_speed_timer_get>
    3500:	2c 01       	movw	r4, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    3502:	8a ef       	ldi	r24, 0xFA	; 250
    3504:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    3508:	60 91 ee 07 	lds	r22, 0x07EE
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	23 eb       	ldi	r18, 0xB3	; 179
    3514:	36 ee       	ldi	r19, 0xE6	; 230
    3516:	4e e0       	ldi	r20, 0x0E	; 14
    3518:	50 e0       	ldi	r21, 0x00	; 0
    351a:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    351e:	7b 01       	movw	r14, r22
    3520:	8c 01       	movw	r16, r24
    3522:	80 91 fd 09 	lds	r24, 0x09FD
    3526:	90 91 fe 09 	lds	r25, 0x09FE
    352a:	a0 91 ff 09 	lds	r26, 0x09FF
    352e:	b0 91 00 0a 	lds	r27, 0x0A00
    3532:	e8 0e       	add	r14, r24
    3534:	f9 1e       	adc	r15, r25
    3536:	0a 1f       	adc	r16, r26
    3538:	1b 1f       	adc	r17, r27
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    353a:	c8 01       	movw	r24, r16
    353c:	b7 01       	movw	r22, r14
    353e:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    3542:	e6 1a       	sub	r14, r22
    3544:	f7 0a       	sbc	r15, r23
    3546:	08 0b       	sbc	r16, r24
    3548:	19 0b       	sbc	r17, r25
    354a:	80 91 f9 09 	lds	r24, 0x09F9
    354e:	90 91 fa 09 	lds	r25, 0x09FA
    3552:	a0 91 fb 09 	lds	r26, 0x09FB
    3556:	b0 91 fc 09 	lds	r27, 0x09FC

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    355a:	73 eb       	ldi	r23, 0xB3	; 179
    355c:	a7 2e       	mov	r10, r23
    355e:	76 ee       	ldi	r23, 0xE6	; 230
    3560:	b7 2e       	mov	r11, r23
    3562:	7e e0       	ldi	r23, 0x0E	; 14
    3564:	c7 2e       	mov	r12, r23
    3566:	d1 2c       	mov	r13, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3568:	14 c0       	rjmp	.+40     	; 0x3592 <_nrk_scheduler+0xcc>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	96 e3       	ldi	r25, 0x36	; 54
    356e:	a5 e6       	ldi	r26, 0x65	; 101
    3570:	b4 ec       	ldi	r27, 0xC4	; 196
    3572:	e8 0e       	add	r14, r24
    3574:	f9 1e       	adc	r15, r25
    3576:	0a 1f       	adc	r16, r26
    3578:	1b 1f       	adc	r17, r27
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    357a:	c8 01       	movw	r24, r16
    357c:	b7 01       	movw	r22, r14
    357e:	a6 01       	movw	r20, r12
    3580:	95 01       	movw	r18, r10
    3582:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    3586:	e6 1a       	sub	r14, r22
    3588:	f7 0a       	sbc	r15, r23
    358a:	08 0b       	sbc	r16, r24
    358c:	19 0b       	sbc	r17, r25
    358e:	d4 01       	movw	r26, r8
    3590:	c3 01       	movw	r24, r6
    3592:	3c 01       	movw	r6, r24
    3594:	4d 01       	movw	r8, r26
    3596:	08 94       	sec
    3598:	61 1c       	adc	r6, r1
    359a:	71 1c       	adc	r7, r1
    359c:	81 1c       	adc	r8, r1
    359e:	91 1c       	adc	r9, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    35a0:	e0 e0       	ldi	r30, 0x00	; 0
    35a2:	ee 16       	cp	r14, r30
    35a4:	ea ec       	ldi	r30, 0xCA	; 202
    35a6:	fe 06       	cpc	r15, r30
    35a8:	ea e9       	ldi	r30, 0x9A	; 154
    35aa:	0e 07       	cpc	r16, r30
    35ac:	eb e3       	ldi	r30, 0x3B	; 59
    35ae:	1e 07       	cpc	r17, r30
    35b0:	e0 f6       	brcc	.-72     	; 0x356a <_nrk_scheduler+0xa4>
    35b2:	80 93 f9 09 	sts	0x09F9, r24
    35b6:	90 93 fa 09 	sts	0x09FA, r25
    35ba:	a0 93 fb 09 	sts	0x09FB, r26
    35be:	b0 93 fc 09 	sts	0x09FC, r27
    35c2:	e0 92 fd 09 	sts	0x09FD, r14
    35c6:	f0 92 fe 09 	sts	0x09FE, r15
    35ca:	00 93 ff 09 	sts	0x09FF, r16
    35ce:	10 93 00 0a 	sts	0x0A00, r17
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    35d2:	e0 91 02 0a 	lds	r30, 0x0A02
    35d6:	f0 91 03 0a 	lds	r31, 0x0A03
    35da:	85 81       	ldd	r24, Z+5	; 0x05
    35dc:	88 23       	and	r24, r24
    35de:	b9 f0       	breq	.+46     	; 0x360e <_nrk_scheduler+0x148>
    35e0:	81 85       	ldd	r24, Z+9	; 0x09
    35e2:	84 30       	cpi	r24, 0x04	; 4
    35e4:	a1 f0       	breq	.+40     	; 0x360e <_nrk_scheduler+0x148>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    35e6:	87 81       	ldd	r24, Z+7	; 0x07
    35e8:	82 30       	cpi	r24, 0x02	; 2
    35ea:	29 f0       	breq	.+10     	; 0x35f6 <_nrk_scheduler+0x130>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    35ec:	88 23       	and	r24, r24
    35ee:	41 f0       	breq	.+16     	; 0x3600 <_nrk_scheduler+0x13a>
    35f0:	86 81       	ldd	r24, Z+6	; 0x06
    35f2:	88 23       	and	r24, r24
    35f4:	11 f4       	brne	.+4      	; 0x35fa <_nrk_scheduler+0x134>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    35f6:	85 e0       	ldi	r24, 0x05	; 5
    35f8:	01 c0       	rjmp	.+2      	; 0x35fc <_nrk_scheduler+0x136>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    35fa:	83 e0       	ldi	r24, 0x03	; 3
    35fc:	81 87       	std	Z+9, r24	; 0x09
    35fe:	04 c0       	rjmp	.+8      	; 0x3608 <_nrk_scheduler+0x142>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3600:	83 e0       	ldi	r24, 0x03	; 3
    3602:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    3604:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    3606:	16 82       	std	Z+6, r1	; 0x06
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    3608:	80 85       	ldd	r24, Z+8	; 0x08
    360a:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    360e:	e0 91 02 0a 	lds	r30, 0x0A02
    3612:	f0 91 03 0a 	lds	r31, 0x0A03
    3616:	85 8d       	ldd	r24, Z+29	; 0x1d
    3618:	96 8d       	ldd	r25, Z+30	; 0x1e
    361a:	00 97       	sbiw	r24, 0x00	; 0
    361c:	99 f1       	breq	.+102    	; 0x3684 <_nrk_scheduler+0x1be>
    361e:	60 85       	ldd	r22, Z+8	; 0x08
    3620:	66 23       	and	r22, r22
    3622:	81 f1       	breq	.+96     	; 0x3684 <_nrk_scheduler+0x1be>
    3624:	81 85       	ldd	r24, Z+9	; 0x09
    3626:	84 30       	cpi	r24, 0x04	; 4
    3628:	69 f1       	breq	.+90     	; 0x3684 <_nrk_scheduler+0x1be>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    362a:	21 8d       	ldd	r18, Z+25	; 0x19
    362c:	32 8d       	ldd	r19, Z+26	; 0x1a
    362e:	80 91 ee 07 	lds	r24, 0x07EE
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	28 17       	cp	r18, r24
    3636:	39 07       	cpc	r19, r25
    3638:	50 f4       	brcc	.+20     	; 0x364e <_nrk_scheduler+0x188>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    363a:	82 e0       	ldi	r24, 0x02	; 2
    363c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    3640:	e0 91 02 0a 	lds	r30, 0x0A02
    3644:	f0 91 03 0a 	lds	r31, 0x0A03
    3648:	12 8e       	std	Z+26, r1	; 0x1a
    364a:	11 8e       	std	Z+25, r1	; 0x19
    364c:	04 c0       	rjmp	.+8      	; 0x3656 <_nrk_scheduler+0x190>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    364e:	28 1b       	sub	r18, r24
    3650:	39 0b       	sbc	r19, r25
    3652:	32 8f       	std	Z+26, r19	; 0x1a
    3654:	21 8f       	std	Z+25, r18	; 0x19

        task_ID= nrk_cur_task_TCB->task_ID;
    3656:	e0 91 02 0a 	lds	r30, 0x0A02
    365a:	f0 91 03 0a 	lds	r31, 0x0A03
    365e:	00 85       	ldd	r16, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    3660:	21 8d       	ldd	r18, Z+25	; 0x19
    3662:	32 8d       	ldd	r19, Z+26	; 0x1a
    3664:	21 15       	cp	r18, r1
    3666:	31 05       	cpc	r19, r1
    3668:	69 f4       	brne	.+26     	; 0x3684 <_nrk_scheduler+0x1be>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    366a:	83 e0       	ldi	r24, 0x03	; 3
    366c:	60 2f       	mov	r22, r16
    366e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3672:	e0 91 02 0a 	lds	r30, 0x0A02
    3676:	f0 91 03 0a 	lds	r31, 0x0A03
    367a:	83 e0       	ldi	r24, 0x03	; 3
    367c:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    367e:	80 2f       	mov	r24, r16
    3680:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <nrk_rem_from_readyQ>
    3684:	6c e4       	ldi	r22, 0x4C	; 76
    3686:	26 2e       	mov	r2, r22
    3688:	69 e0       	ldi	r22, 0x09	; 9
    368a:	36 2e       	mov	r3, r22

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    368c:	00 e6       	ldi	r16, 0x60	; 96
    368e:	1a ee       	ldi	r17, 0xEA	; 234
    3690:	20 e0       	ldi	r18, 0x00	; 0
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
                    nrk_task_TCB[task_ID].num_periods=1;
    3692:	51 e0       	ldi	r21, 0x01	; 1
    3694:	65 2e       	mov	r6, r21
    3696:	71 2c       	mov	r7, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3698:	4a ef       	ldi	r20, 0xFA	; 250
    369a:	e4 2e       	mov	r14, r20
    369c:	f1 2c       	mov	r15, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    369e:	32 e0       	ldi	r19, 0x02	; 2
    36a0:	93 2e       	mov	r9, r19
            // printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    36a2:	91 e0       	ldi	r25, 0x01	; 1
    36a4:	a9 2e       	mov	r10, r25
    36a6:	b1 2c       	mov	r11, r1
    36a8:	c1 2c       	mov	r12, r1
    36aa:	d1 2c       	mov	r13, r1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    36ac:	d1 01       	movw	r26, r2
    36ae:	13 96       	adiw	r26, 0x03	; 3
    36b0:	8c 91       	ld	r24, X
    36b2:	13 97       	sbiw	r26, 0x03	; 3
    36b4:	8f 3f       	cpi	r24, 0xFF	; 255
    36b6:	09 f4       	brne	.+2      	; 0x36ba <_nrk_scheduler+0x1f4>
    36b8:	c4 c0       	rjmp	.+392    	; 0x3842 <_nrk_scheduler+0x37c>
        nrk_task_TCB[task_ID].suspend_flag=0;
    36ba:	1c 92       	st	X, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    36bc:	88 23       	and	r24, r24
    36be:	09 f4       	brne	.+2      	; 0x36c2 <_nrk_scheduler+0x1fc>
    36c0:	43 c0       	rjmp	.+134    	; 0x3748 <_nrk_scheduler+0x282>
    36c2:	14 96       	adiw	r26, 0x04	; 4
    36c4:	8c 91       	ld	r24, X
    36c6:	14 97       	sbiw	r26, 0x04	; 4
    36c8:	84 30       	cpi	r24, 0x04	; 4
    36ca:	f1 f1       	breq	.+124    	; 0x3748 <_nrk_scheduler+0x282>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    36cc:	50 96       	adiw	r26, 0x10	; 16
    36ce:	4d 91       	ld	r20, X+
    36d0:	5c 91       	ld	r21, X
    36d2:	51 97       	sbiw	r26, 0x11	; 17
    36d4:	80 91 ee 07 	lds	r24, 0x07EE
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	48 17       	cp	r20, r24
    36dc:	59 07       	cpc	r21, r25
    36de:	38 f0       	brcs	.+14     	; 0x36ee <_nrk_scheduler+0x228>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    36e0:	48 1b       	sub	r20, r24
    36e2:	59 0b       	sbc	r21, r25
    36e4:	51 96       	adiw	r26, 0x11	; 17
    36e6:	5c 93       	st	X, r21
    36e8:	4e 93       	st	-X, r20
    36ea:	50 97       	sbiw	r26, 0x10	; 16
    36ec:	03 c0       	rjmp	.+6      	; 0x36f4 <_nrk_scheduler+0x22e>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    36ee:	f1 01       	movw	r30, r2
    36f0:	11 8a       	std	Z+17, r1	; 0x11
    36f2:	10 8a       	std	Z+16, r1	; 0x10
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    36f4:	d1 01       	movw	r26, r2
    36f6:	52 96       	adiw	r26, 0x12	; 18
    36f8:	4d 91       	ld	r20, X+
    36fa:	5c 91       	ld	r21, X
    36fc:	53 97       	sbiw	r26, 0x13	; 19
    36fe:	48 17       	cp	r20, r24
    3700:	59 07       	cpc	r21, r25
    3702:	38 f0       	brcs	.+14     	; 0x3712 <_nrk_scheduler+0x24c>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    3704:	48 1b       	sub	r20, r24
    3706:	59 0b       	sbc	r21, r25
    3708:	53 96       	adiw	r26, 0x13	; 19
    370a:	5c 93       	st	X, r21
    370c:	4e 93       	st	-X, r20
    370e:	52 97       	sbiw	r26, 0x12	; 18
    3710:	12 c0       	rjmp	.+36     	; 0x3736 <_nrk_scheduler+0x270>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    3712:	f1 01       	movw	r30, r2
    3714:	66 89       	ldd	r22, Z+22	; 0x16
    3716:	77 89       	ldd	r23, Z+23	; 0x17
    3718:	86 17       	cp	r24, r22
    371a:	97 07       	cpc	r25, r23
    371c:	28 f4       	brcc	.+10     	; 0x3728 <_nrk_scheduler+0x262>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    371e:	68 1b       	sub	r22, r24
    3720:	79 0b       	sbc	r23, r25
    3722:	73 8b       	std	Z+19, r23	; 0x13
    3724:	62 8b       	std	Z+18, r22	; 0x12
    3726:	07 c0       	rjmp	.+14     	; 0x3736 <_nrk_scheduler+0x270>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    3728:	0e 94 b5 28 	call	0x516a	; 0x516a <__udivmodhi4>
    372c:	d1 01       	movw	r26, r2
    372e:	53 96       	adiw	r26, 0x13	; 19
    3730:	9c 93       	st	X, r25
    3732:	8e 93       	st	-X, r24
    3734:	52 97       	sbiw	r26, 0x12	; 18
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    3736:	f1 01       	movw	r30, r2
    3738:	82 89       	ldd	r24, Z+18	; 0x12
    373a:	93 89       	ldd	r25, Z+19	; 0x13
    373c:	00 97       	sbiw	r24, 0x00	; 0
    373e:	21 f4       	brne	.+8      	; 0x3748 <_nrk_scheduler+0x282>
    3740:	86 89       	ldd	r24, Z+22	; 0x16
    3742:	97 89       	ldd	r25, Z+23	; 0x17
    3744:	93 8b       	std	Z+19, r25	; 0x13
    3746:	82 8b       	std	Z+18, r24	; 0x12

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    3748:	d1 01       	movw	r26, r2
    374a:	14 96       	adiw	r26, 0x04	; 4
    374c:	8c 91       	ld	r24, X
    374e:	14 97       	sbiw	r26, 0x04	; 4
    3750:	83 30       	cpi	r24, 0x03	; 3
    3752:	09 f0       	breq	.+2      	; 0x3756 <_nrk_scheduler+0x290>
    3754:	76 c0       	rjmp	.+236    	; 0x3842 <_nrk_scheduler+0x37c>
        {
            // printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    3756:	50 96       	adiw	r26, 0x10	; 16
    3758:	8d 91       	ld	r24, X+
    375a:	9c 91       	ld	r25, X
    375c:	51 97       	sbiw	r26, 0x11	; 17
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	09 f0       	breq	.+2      	; 0x3764 <_nrk_scheduler+0x29e>
    3762:	66 c0       	rjmp	.+204    	; 0x3830 <_nrk_scheduler+0x36a>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3764:	12 96       	adiw	r26, 0x02	; 2
    3766:	8c 91       	ld	r24, X
    3768:	12 97       	sbiw	r26, 0x02	; 2
    376a:	88 23       	and	r24, r24
    376c:	a9 f0       	breq	.+42     	; 0x3798 <_nrk_scheduler+0x2d2>
    376e:	11 96       	adiw	r26, 0x01	; 1
    3770:	8c 91       	ld	r24, X
    3772:	11 97       	sbiw	r26, 0x01	; 1
    3774:	88 23       	and	r24, r24
    3776:	81 f0       	breq	.+32     	; 0x3798 <_nrk_scheduler+0x2d2>
    3778:	d6 01       	movw	r26, r12
    377a:	c5 01       	movw	r24, r10
    377c:	00 90 f2 09 	lds	r0, 0x09F2
    3780:	04 c0       	rjmp	.+8      	; 0x378a <_nrk_scheduler+0x2c4>
    3782:	88 0f       	add	r24, r24
    3784:	99 1f       	adc	r25, r25
    3786:	aa 1f       	adc	r26, r26
    3788:	bb 1f       	adc	r27, r27
    378a:	0a 94       	dec	r0
    378c:	d2 f7       	brpl	.-12     	; 0x3782 <_nrk_scheduler+0x2bc>
    378e:	f1 01       	movw	r30, r2
    3790:	84 87       	std	Z+12, r24	; 0x0c
    3792:	95 87       	std	Z+13, r25	; 0x0d
    3794:	a6 87       	std	Z+14, r26	; 0x0e
    3796:	b7 87       	std	Z+15, r27	; 0x0f
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    3798:	d1 01       	movw	r26, r2
    379a:	12 96       	adiw	r26, 0x02	; 2
    379c:	1c 92       	st	X, r1
    379e:	12 97       	sbiw	r26, 0x02	; 2
                nrk_task_TCB[task_ID].nw_flag=0;
    37a0:	11 96       	adiw	r26, 0x01	; 1
    37a2:	1c 92       	st	X, r1
    37a4:	11 97       	sbiw	r26, 0x01	; 1
                nrk_task_TCB[task_ID].suspend_flag=0;
    37a6:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    37a8:	5a 96       	adiw	r26, 0x1a	; 26
    37aa:	4d 91       	ld	r20, X+
    37ac:	5c 91       	ld	r21, X
    37ae:	5b 97       	sbiw	r26, 0x1b	; 27
    37b0:	56 96       	adiw	r26, 0x16	; 22
    37b2:	8d 91       	ld	r24, X+
    37b4:	9c 91       	ld	r25, X
    37b6:	57 97       	sbiw	r26, 0x17	; 23
    37b8:	58 96       	adiw	r26, 0x18	; 24
    37ba:	6d 91       	ld	r22, X+
    37bc:	7c 91       	ld	r23, X
    37be:	59 97       	sbiw	r26, 0x19	; 25
    37c0:	41 30       	cpi	r20, 0x01	; 1
    37c2:	51 05       	cpc	r21, r1
    37c4:	d9 f4       	brne	.+54     	; 0x37fc <_nrk_scheduler+0x336>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    37c6:	55 96       	adiw	r26, 0x15	; 21
    37c8:	7c 93       	st	X, r23
    37ca:	6e 93       	st	-X, r22
    37cc:	54 97       	sbiw	r26, 0x14	; 20
                    nrk_task_TCB[task_ID].task_state = READY;
    37ce:	14 96       	adiw	r26, 0x04	; 4
    37d0:	9c 92       	st	X, r9
    37d2:	14 97       	sbiw	r26, 0x04	; 4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    37d4:	52 96       	adiw	r26, 0x12	; 18
    37d6:	4d 91       	ld	r20, X+
    37d8:	5c 91       	ld	r21, X
    37da:	53 97       	sbiw	r26, 0x13	; 19
    37dc:	51 96       	adiw	r26, 0x11	; 17
    37de:	5c 93       	st	X, r21
    37e0:	4e 93       	st	-X, r20
    37e2:	50 97       	sbiw	r26, 0x10	; 16
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	21 f4       	brne	.+8      	; 0x37f0 <_nrk_scheduler+0x32a>
    37e8:	51 96       	adiw	r26, 0x11	; 17
    37ea:	fc 92       	st	X, r15
    37ec:	ee 92       	st	-X, r14
    37ee:	50 97       	sbiw	r26, 0x10	; 16
                    nrk_add_to_readyQ(task_ID);
    37f0:	82 2f       	mov	r24, r18
    37f2:	29 83       	std	Y+1, r18	; 0x01
    37f4:	0e 94 2f 14 	call	0x285e	; 0x285e <nrk_add_to_readyQ>
    37f8:	29 81       	ldd	r18, Y+1	; 0x01
    37fa:	1a c0       	rjmp	.+52     	; 0x3830 <_nrk_scheduler+0x36a>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    37fc:	f1 01       	movw	r30, r2
    37fe:	75 8b       	std	Z+21, r23	; 0x15
    3800:	64 8b       	std	Z+20, r22	; 0x14
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3802:	ba 01       	movw	r22, r20
    3804:	61 50       	subi	r22, 0x01	; 1
    3806:	70 40       	sbci	r23, 0x00	; 0
    3808:	68 9f       	mul	r22, r24
    380a:	a0 01       	movw	r20, r0
    380c:	69 9f       	mul	r22, r25
    380e:	50 0d       	add	r21, r0
    3810:	78 9f       	mul	r23, r24
    3812:	50 0d       	add	r21, r0
    3814:	11 24       	eor	r1, r1
    3816:	51 8b       	std	Z+17, r21	; 0x11
    3818:	40 8b       	std	Z+16, r20	; 0x10
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    381a:	53 8b       	std	Z+19, r21	; 0x13
    381c:	42 8b       	std	Z+18, r20	; 0x12
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    381e:	00 97       	sbiw	r24, 0x00	; 0
    3820:	11 f4       	brne	.+4      	; 0x3826 <_nrk_scheduler+0x360>
    3822:	f1 8a       	std	Z+17, r15	; 0x11
    3824:	e0 8a       	std	Z+16, r14	; 0x10
                    nrk_task_TCB[task_ID].num_periods=1;
    3826:	d1 01       	movw	r26, r2
    3828:	5b 96       	adiw	r26, 0x1b	; 27
    382a:	7c 92       	st	X, r7
    382c:	6e 92       	st	-X, r6
    382e:	5a 97       	sbiw	r26, 0x1a	; 26
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3830:	f1 01       	movw	r30, r2
    3832:	80 89       	ldd	r24, Z+16	; 0x10
    3834:	91 89       	ldd	r25, Z+17	; 0x11
    3836:	00 97       	sbiw	r24, 0x00	; 0
    3838:	21 f0       	breq	.+8      	; 0x3842 <_nrk_scheduler+0x37c>
    383a:	80 17       	cp	r24, r16
    383c:	91 07       	cpc	r25, r17
    383e:	08 f4       	brcc	.+2      	; 0x3842 <_nrk_scheduler+0x37c>
    3840:	8c 01       	movw	r16, r24

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    3842:	2f 5f       	subi	r18, 0xFF	; 255
    3844:	81 e2       	ldi	r24, 0x21	; 33
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	28 0e       	add	r2, r24
    384a:	39 1e       	adc	r3, r25
    384c:	25 30       	cpi	r18, 0x05	; 5
    384e:	09 f0       	breq	.+2      	; 0x3852 <_nrk_scheduler+0x38c>
    3850:	2d cf       	rjmp	.-422    	; 0x36ac <_nrk_scheduler+0x1e6>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    3852:	0e 94 1e 14 	call	0x283c	; 0x283c <nrk_get_high_ready_task_ID>
    3856:	e8 2e       	mov	r14, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3858:	28 2f       	mov	r18, r24
    385a:	33 27       	eor	r19, r19
    385c:	27 fd       	sbrc	r18, 7
    385e:	30 95       	com	r19
    3860:	f9 01       	movw	r30, r18
    3862:	85 e0       	ldi	r24, 0x05	; 5
    3864:	ee 0f       	add	r30, r30
    3866:	ff 1f       	adc	r31, r31
    3868:	8a 95       	dec	r24
    386a:	e1 f7       	brne	.-8      	; 0x3864 <_nrk_scheduler+0x39e>
    386c:	e2 0f       	add	r30, r18
    386e:	f3 1f       	adc	r31, r19
    3870:	e9 5b       	subi	r30, 0xB9	; 185
    3872:	f6 4f       	sbci	r31, 0xF6	; 246
    3874:	82 85       	ldd	r24, Z+10	; 0x0a
    3876:	80 93 04 0a 	sts	0x0A04, r24
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    387a:	f0 93 f4 09 	sts	0x09F4, r31
    387e:	e0 93 f3 09 	sts	0x09F3, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    3882:	ee 20       	and	r14, r14
    3884:	b9 f0       	breq	.+46     	; 0x38b4 <_nrk_scheduler+0x3ee>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    3886:	25 8d       	ldd	r18, Z+29	; 0x1d
    3888:	36 8d       	ldd	r19, Z+30	; 0x1e
    388a:	21 15       	cp	r18, r1
    388c:	31 05       	cpc	r19, r1
    388e:	51 f0       	breq	.+20     	; 0x38a4 <_nrk_scheduler+0x3de>
    3890:	21 8d       	ldd	r18, Z+25	; 0x19
    3892:	32 8d       	ldd	r19, Z+26	; 0x1a
    3894:	2a 3f       	cpi	r18, 0xFA	; 250
    3896:	31 05       	cpc	r19, r1
    3898:	28 f4       	brcc	.+10     	; 0x38a4 <_nrk_scheduler+0x3de>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    389a:	20 17       	cp	r18, r16
    389c:	31 07       	cpc	r19, r17
    389e:	08 f4       	brcc	.+2      	; 0x38a2 <_nrk_scheduler+0x3dc>
    38a0:	4b c0       	rjmp	.+150    	; 0x3938 <_nrk_scheduler+0x472>
    38a2:	0d c0       	rjmp	.+26     	; 0x38be <_nrk_scheduler+0x3f8>
    38a4:	98 01       	movw	r18, r16
    38a6:	0b 3f       	cpi	r16, 0xFB	; 251
    38a8:	11 05       	cpc	r17, r1
    38aa:	08 f4       	brcc	.+2      	; 0x38ae <_nrk_scheduler+0x3e8>
    38ac:	45 c0       	rjmp	.+138    	; 0x3938 <_nrk_scheduler+0x472>
    38ae:	2a ef       	ldi	r18, 0xFA	; 250
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	42 c0       	rjmp	.+132    	; 0x3938 <_nrk_scheduler+0x472>
    }*/


    //  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
    38b4:	0b 3f       	cpi	r16, 0xFB	; 251
    38b6:	11 05       	cpc	r17, r1
    38b8:	10 f0       	brcs	.+4      	; 0x38be <_nrk_scheduler+0x3f8>
    38ba:	0a ef       	ldi	r16, 0xFA	; 250
    38bc:	10 e0       	ldi	r17, 0x00	; 0
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    38be:	80 93 f5 09 	sts	0x09F5, r24
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    38c2:	f0 93 03 0a 	sts	0x0A03, r31
    38c6:	e0 93 02 0a 	sts	0x0A02, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    38ca:	00 93 ee 07 	sts	0x07EE, r16


    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    38ce:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_nrk_os_timer_get>
    38d2:	28 2f       	mov	r18, r24
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	2f 5f       	subi	r18, 0xFF	; 255
    38d8:	3f 4f       	sbci	r19, 0xFF	; 255
    38da:	20 17       	cp	r18, r16
    38dc:	31 07       	cpc	r19, r17
    38de:	40 f0       	brcs	.+16     	; 0x38f0 <_nrk_scheduler+0x42a>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    38e0:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <_nrk_os_timer_get>
    38e4:	08 2f       	mov	r16, r24
    38e6:	10 e0       	ldi	r17, 0x00	; 0
    38e8:	0e 5f       	subi	r16, 0xFE	; 254
    38ea:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    38ec:	00 93 ee 07 	sts	0x07EE, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    38f0:	ee 20       	and	r14, r14
    38f2:	11 f0       	breq	.+4      	; 0x38f8 <_nrk_scheduler+0x432>
    38f4:	10 92 f6 09 	sts	0x09F6, r1

    _nrk_set_next_wakeup(next_wake);
    38f8:	80 2f       	mov	r24, r16
    38fa:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    38fe:	c2 01       	movw	r24, r4
    3900:	6e ee       	ldi	r22, 0xEE	; 238
    3902:	72 e0       	ldi	r23, 0x02	; 2
    3904:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    3908:	0e 94 b3 20 	call	0x4166	; 0x4166 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();
    390c:	0e 94 bf 20 	call	0x417e	; 0x417e <nrk_start_high_ready_task>

}
    3910:	0f 90       	pop	r0
    3912:	cf 91       	pop	r28
    3914:	df 91       	pop	r29
    3916:	1f 91       	pop	r17
    3918:	0f 91       	pop	r16
    391a:	ff 90       	pop	r15
    391c:	ef 90       	pop	r14
    391e:	df 90       	pop	r13
    3920:	cf 90       	pop	r12
    3922:	bf 90       	pop	r11
    3924:	af 90       	pop	r10
    3926:	9f 90       	pop	r9
    3928:	8f 90       	pop	r8
    392a:	7f 90       	pop	r7
    392c:	6f 90       	pop	r6
    392e:	5f 90       	pop	r5
    3930:	4f 90       	pop	r4
    3932:	3f 90       	pop	r3
    3934:	2f 90       	pop	r2
    3936:	08 95       	ret

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    3938:	89 01       	movw	r16, r18
    393a:	c1 cf       	rjmp	.-126    	; 0x38be <_nrk_scheduler+0x3f8>

0000393c <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    393c:	89 e0       	ldi	r24, 0x09	; 9
    393e:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    3942:	8d e8       	ldi	r24, 0x8D	; 141
    3944:	9c e3       	ldi	r25, 0x3C	; 60
    3946:	90 93 29 01 	sts	0x0129, r25
    394a:	80 93 28 01 	sts	0x0128, r24
}
    394e:	08 95       	ret

00003950 <_nrk_precision_os_timer_reset>:

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3950:	10 92 25 01 	sts	0x0125, r1
    3954:	10 92 24 01 	sts	0x0124, r1
}
    3958:	08 95       	ret

0000395a <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	91 f7       	brne	.-28     	; 0x395a <nrk_spin_wait_us>

}
    3976:	08 95       	ret

00003978 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    3978:	10 92 21 01 	sts	0x0121, r1
}
    397c:	08 95       	ret

0000397e <_nrk_precision_os_timer_get>:
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
}

inline uint16_t _nrk_precision_os_timer_get()
{
    397e:	df 93       	push	r29
    3980:	cf 93       	push	r28
    3982:	00 d0       	rcall	.+0      	; 0x3984 <_nrk_precision_os_timer_get+0x6>
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    3988:	80 91 24 01 	lds	r24, 0x0124
    398c:	90 91 25 01 	lds	r25, 0x0125
    3990:	9a 83       	std	Y+2, r25	; 0x02
    3992:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    3994:	29 81       	ldd	r18, Y+1	; 0x01
    3996:	3a 81       	ldd	r19, Y+2	; 0x02
}
    3998:	c9 01       	movw	r24, r18
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	cf 91       	pop	r28
    39a0:	df 91       	pop	r29
    39a2:	08 95       	ret

000039a4 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    39a4:	10 92 81 00 	sts	0x0081, r1
}
    39a8:	08 95       	ret

000039aa <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	80 93 81 00 	sts	0x0081, r24
}
    39b0:	08 95       	ret

000039b2 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    39b2:	83 b5       	in	r24, 0x23	; 35
    39b4:	81 60       	ori	r24, 0x01	; 1
    39b6:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    39b8:	10 92 85 00 	sts	0x0085, r1
    39bc:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    39c0:	08 95       	ret

000039c2 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    39c2:	df 93       	push	r29
    39c4:	cf 93       	push	r28
    39c6:	00 d0       	rcall	.+0      	; 0x39c8 <_nrk_high_speed_timer_get+0x6>
    39c8:	cd b7       	in	r28, 0x3d	; 61
    39ca:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    39cc:	80 91 84 00 	lds	r24, 0x0084
    39d0:	90 91 85 00 	lds	r25, 0x0085
    39d4:	9a 83       	std	Y+2, r25	; 0x02
    39d6:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    39d8:	29 81       	ldd	r18, Y+1	; 0x01
    39da:	3a 81       	ldd	r19, Y+2	; 0x02
}
    39dc:	c9 01       	movw	r24, r18
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	cf 91       	pop	r28
    39e4:	df 91       	pop	r29
    39e6:	08 95       	ret

000039e8 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    39e8:	ef 92       	push	r14
    39ea:	ff 92       	push	r15
    39ec:	0f 93       	push	r16
    39ee:	1f 93       	push	r17
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    39f4:	ec 01       	movw	r28, r24
    39f6:	cc 0f       	add	r28, r28
    39f8:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    39fa:	8f ef       	ldi	r24, 0xFF	; 255
    39fc:	c9 37       	cpi	r28, 0x79	; 121
    39fe:	d8 07       	cpc	r29, r24
    3a00:	10 f0       	brcs	.+4      	; 0x3a06 <nrk_high_speed_timer_wait+0x1e>
    3a02:	c0 e0       	ldi	r28, 0x00	; 0
    3a04:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    3a06:	7e 01       	movw	r14, r28
    3a08:	00 e0       	ldi	r16, 0x00	; 0
    3a0a:	10 e0       	ldi	r17, 0x00	; 0
    3a0c:	80 e0       	ldi	r24, 0x00	; 0
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	e6 0e       	add	r14, r22
    3a12:	f7 1e       	adc	r15, r23
    3a14:	08 1f       	adc	r16, r24
    3a16:	19 1f       	adc	r17, r25
if(tmp>65536) 
    3a18:	91 e0       	ldi	r25, 0x01	; 1
    3a1a:	e9 16       	cp	r14, r25
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	f9 06       	cpc	r15, r25
    3a20:	91 e0       	ldi	r25, 0x01	; 1
    3a22:	09 07       	cpc	r16, r25
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	19 07       	cpc	r17, r25
    3a28:	68 f0       	brcs	.+26     	; 0x3a44 <nrk_high_speed_timer_wait+0x5c>
	{
	tmp-=65536;
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	af ef       	ldi	r26, 0xFF	; 255
    3a30:	bf ef       	ldi	r27, 0xFF	; 255
    3a32:	e8 0e       	add	r14, r24
    3a34:	f9 1e       	adc	r15, r25
    3a36:	0a 1f       	adc	r16, r26
    3a38:	1b 1f       	adc	r17, r27
	do{}while(_nrk_high_speed_timer_get()>start);
    3a3a:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_nrk_high_speed_timer_get>
    3a3e:	c8 17       	cp	r28, r24
    3a40:	d9 07       	cpc	r29, r25
    3a42:	d8 f3       	brcs	.-10     	; 0x3a3a <nrk_high_speed_timer_wait+0x52>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    3a44:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_nrk_high_speed_timer_get>
    3a48:	8e 15       	cp	r24, r14
    3a4a:	9f 05       	cpc	r25, r15
    3a4c:	d8 f3       	brcs	.-10     	; 0x3a44 <nrk_high_speed_timer_wait+0x5c>
}
    3a4e:	df 91       	pop	r29
    3a50:	cf 91       	pop	r28
    3a52:	1f 91       	pop	r17
    3a54:	0f 91       	pop	r16
    3a56:	ff 90       	pop	r15
    3a58:	ef 90       	pop	r14
    3a5a:	08 95       	ret

00003a5c <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    3a5c:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    3a60:	e0 e7       	ldi	r30, 0x70	; 112
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	80 81       	ld	r24, Z
    3a66:	8d 7f       	andi	r24, 0xFD	; 253
    3a68:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    3a6a:	80 81       	ld	r24, Z
    3a6c:	8e 7f       	andi	r24, 0xFE	; 254
    3a6e:	80 83       	st	Z, r24
}
    3a70:	08 95       	ret

00003a72 <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    3a72:	80 93 b2 00 	sts	0x00B2, r24
}
    3a76:	08 95       	ret

00003a78 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    3a78:	e0 e7       	ldi	r30, 0x70	; 112
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	80 81       	ld	r24, Z
    3a7e:	83 60       	ori	r24, 0x03	; 3
    3a80:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    3a82:	83 e0       	ldi	r24, 0x03	; 3
    3a84:	80 93 b1 00 	sts	0x00B1, r24
}
    3a88:	08 95       	ret

00003a8a <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    3a8a:	83 b5       	in	r24, 0x23	; 35
    3a8c:	82 60       	ori	r24, 0x02	; 2
    3a8e:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    3a90:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    3a94:	10 92 c3 03 	sts	0x03C3, r1
    _nrk_prev_timer_val=0;
    3a98:	10 92 ee 07 	sts	0x07EE, r1
}
    3a9c:	08 95       	ret

00003a9e <_nrk_setup_timer>:

}


void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
    3a9e:	8e ef       	ldi	r24, 0xFE	; 254
    3aa0:	80 93 ee 07 	sts	0x07EE, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    3aa4:	90 e2       	ldi	r25, 0x20	; 32
    3aa6:	90 93 b6 00 	sts	0x00B6, r25
  OCR2A = _nrk_prev_timer_val;
    3aaa:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    3aae:	83 e0       	ldi	r24, 0x03	; 3
    3ab0:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    3ab2:	92 e0       	ldi	r25, 0x02	; 2
    3ab4:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    3ab8:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    3abc:	93 b5       	in	r25, 0x23	; 35
    3abe:	92 60       	ori	r25, 0x02	; 2
    3ac0:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    3ac2:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    3ac4:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    3ac6:	83 b5       	in	r24, 0x23	; 35
    3ac8:	82 60       	ori	r24, 0x02	; 2
    3aca:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    3acc:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    3ad6:	10 92 85 00 	sts	0x0085, r1
    3ada:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3ade:	83 b5       	in	r24, 0x23	; 35
    3ae0:	82 60       	ori	r24, 0x02	; 2
    3ae2:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3ae4:	83 b5       	in	r24, 0x23	; 35
    3ae6:	81 60       	ori	r24, 0x01	; 1
    3ae8:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    3aea:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    3aee:	10 92 25 01 	sts	0x0125, r1
    3af2:	10 92 24 01 	sts	0x0124, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3af6:	83 b5       	in	r24, 0x23	; 35
    3af8:	82 60       	ori	r24, 0x02	; 2
    3afa:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3afc:	83 b5       	in	r24, 0x23	; 35
    3afe:	81 60       	ori	r24, 0x01	; 1
    3b00:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    3b02:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <_nrk_os_timer_reset>
  _nrk_precision_os_timer_reset();
    3b06:	0e 94 a8 1c 	call	0x3950	; 0x3950 <_nrk_precision_os_timer_reset>
  _nrk_os_timer_start();
    3b0a:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    3b0e:	0e 94 9e 1c 	call	0x393c	; 0x393c <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    3b12:	10 92 c3 03 	sts	0x03C3, r1
}
    3b16:	08 95       	ret

00003b18 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    3b18:	80 91 b3 00 	lds	r24, 0x00B3
}
    3b1c:	8f 5f       	subi	r24, 0xFF	; 255
    3b1e:	08 95       	ret

00003b20 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    3b20:	81 50       	subi	r24, 0x01	; 1
    3b22:	80 93 b3 00 	sts	0x00B3, r24
}
    3b26:	08 95       	ret

00003b28 <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3b28:	88 23       	and	r24, r24
    3b2a:	11 f4       	brne	.+4      	; 0x3b30 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    3b2c:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    3b30:	8f ef       	ldi	r24, 0xFF	; 255
    3b32:	08 95       	ret

00003b34 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3b34:	88 23       	and	r24, r24
    3b36:	31 f4       	brne	.+12     	; 0x3b44 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    3b38:	10 92 95 00 	sts	0x0095, r1
    3b3c:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	08 95       	ret
	}
return NRK_ERROR;
    3b44:	8f ef       	ldi	r24, 0xFF	; 255
}
    3b46:	08 95       	ret

00003b48 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3b48:	88 23       	and	r24, r24
    3b4a:	29 f4       	brne	.+10     	; 0x3b56 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    3b4c:	20 91 94 00 	lds	r18, 0x0094
    3b50:	30 91 95 00 	lds	r19, 0x0095
    3b54:	02 c0       	rjmp	.+4      	; 0x3b5a <nrk_timer_int_read+0x12>
	}
return 0;
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0

}
    3b5a:	c9 01       	movw	r24, r18
    3b5c:	08 95       	ret

00003b5e <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    3b5e:	88 23       	and	r24, r24
    3b60:	29 f4       	brne	.+10     	; 0x3b6c <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    3b62:	82 e0       	ldi	r24, 0x02	; 2
    3b64:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	08 95       	ret
	}
return NRK_ERROR;
    3b6c:	8f ef       	ldi	r24, 0xFF	; 255
}
    3b6e:	08 95       	ret

00003b70 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    3b70:	88 23       	and	r24, r24
    3b72:	b9 f5       	brne	.+110    	; 0x3be2 <nrk_timer_int_configure+0x72>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    3b74:	cb 01       	movw	r24, r22
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	85 30       	cpi	r24, 0x05	; 5
    3b7a:	91 05       	cpc	r25, r1
    3b7c:	10 f4       	brcc	.+4      	; 0x3b82 <nrk_timer_int_configure+0x12>
    3b7e:	60 93 ed 07 	sts	0x07ED, r22
	TCCR3A = 0;  
    3b82:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    3b86:	88 e0       	ldi	r24, 0x08	; 8
    3b88:	80 93 91 00 	sts	0x0091, r24
  	OCR3AH = (compare_value >> 8) & 0xFF;	
    3b8c:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    3b90:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    3b94:	30 93 c1 03 	sts	0x03C1, r19
    3b98:	20 93 c0 03 	sts	0x03C0, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    3b9c:	80 91 ed 07 	lds	r24, 0x07ED
    3ba0:	81 30       	cpi	r24, 0x01	; 1
    3ba2:	21 f4       	brne	.+8      	; 0x3bac <nrk_timer_int_configure+0x3c>
    3ba4:	80 91 91 00 	lds	r24, 0x0091
    3ba8:	81 60       	ori	r24, 0x01	; 1
    3baa:	0b c0       	rjmp	.+22     	; 0x3bc2 <nrk_timer_int_configure+0x52>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    3bac:	82 30       	cpi	r24, 0x02	; 2
    3bae:	21 f4       	brne	.+8      	; 0x3bb8 <nrk_timer_int_configure+0x48>
    3bb0:	80 91 91 00 	lds	r24, 0x0091
    3bb4:	82 60       	ori	r24, 0x02	; 2
    3bb6:	05 c0       	rjmp	.+10     	; 0x3bc2 <nrk_timer_int_configure+0x52>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    3bb8:	83 30       	cpi	r24, 0x03	; 3
    3bba:	39 f4       	brne	.+14     	; 0x3bca <nrk_timer_int_configure+0x5a>
    3bbc:	80 91 91 00 	lds	r24, 0x0091
    3bc0:	83 60       	ori	r24, 0x03	; 3
    3bc2:	80 93 91 00 	sts	0x0091, r24
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	08 95       	ret
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    3bca:	84 30       	cpi	r24, 0x04	; 4
    3bcc:	21 f4       	brne	.+8      	; 0x3bd6 <nrk_timer_int_configure+0x66>
    3bce:	80 91 91 00 	lds	r24, 0x0091
    3bd2:	84 60       	ori	r24, 0x04	; 4
    3bd4:	f6 cf       	rjmp	.-20     	; 0x3bc2 <nrk_timer_int_configure+0x52>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    3bd6:	85 30       	cpi	r24, 0x05	; 5
    3bd8:	31 f4       	brne	.+12     	; 0x3be6 <nrk_timer_int_configure+0x76>
    3bda:	80 91 91 00 	lds	r24, 0x0091
    3bde:	85 60       	ori	r24, 0x05	; 5
    3be0:	f0 cf       	rjmp	.-32     	; 0x3bc2 <nrk_timer_int_configure+0x52>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    3be2:	8f ef       	ldi	r24, 0xFF	; 255
    3be4:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    3be6:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    3be8:	08 95       	ret

00003bea <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    3bea:	80 91 b2 00 	lds	r24, 0x00B2
}
    3bee:	08 95       	ret

00003bf0 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    3bf0:	1f 92       	push	r1
    3bf2:	0f 92       	push	r0
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	0f 92       	push	r0
    3bf8:	0b b6       	in	r0, 0x3b	; 59
    3bfa:	0f 92       	push	r0
    3bfc:	11 24       	eor	r1, r1
    3bfe:	2f 93       	push	r18
    3c00:	3f 93       	push	r19
    3c02:	4f 93       	push	r20
    3c04:	5f 93       	push	r21
    3c06:	6f 93       	push	r22
    3c08:	7f 93       	push	r23
    3c0a:	8f 93       	push	r24
    3c0c:	9f 93       	push	r25
    3c0e:	af 93       	push	r26
    3c10:	bf 93       	push	r27
    3c12:	ef 93       	push	r30
    3c14:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3c16:	8a e0       	ldi	r24, 0x0A	; 10
    3c18:	60 e0       	ldi	r22, 0x00	; 0
    3c1a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <nrk_kernel_error_add>
    3c1e:	ff cf       	rjmp	.-2      	; 0x3c1e <__vector_default+0x2e>

00003c20 <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    3c20:	0f 92       	push	r0
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	0f 92       	push	r0
    3c26:	1f 92       	push	r1
    3c28:	2f 92       	push	r2
    3c2a:	3f 92       	push	r3
    3c2c:	4f 92       	push	r4
    3c2e:	5f 92       	push	r5
    3c30:	6f 92       	push	r6
    3c32:	7f 92       	push	r7
    3c34:	8f 92       	push	r8
    3c36:	9f 92       	push	r9
    3c38:	af 92       	push	r10
    3c3a:	bf 92       	push	r11
    3c3c:	cf 92       	push	r12
    3c3e:	df 92       	push	r13
    3c40:	ef 92       	push	r14
    3c42:	ff 92       	push	r15
    3c44:	0f 93       	push	r16
    3c46:	1f 93       	push	r17
    3c48:	2f 93       	push	r18
    3c4a:	3f 93       	push	r19
    3c4c:	4f 93       	push	r20
    3c4e:	5f 93       	push	r21
    3c50:	6f 93       	push	r22
    3c52:	7f 93       	push	r23
    3c54:	8f 93       	push	r24
    3c56:	9f 93       	push	r25
    3c58:	af 93       	push	r26
    3c5a:	bf 93       	push	r27
    3c5c:	cf 93       	push	r28
    3c5e:	df 93       	push	r29
    3c60:	ef 93       	push	r30
    3c62:	ff 93       	push	r31
    3c64:	a0 91 02 0a 	lds	r26, 0x0A02
    3c68:	b0 91 03 0a 	lds	r27, 0x0A03
    3c6c:	0d b6       	in	r0, 0x3d	; 61
    3c6e:	0d 92       	st	X+, r0
    3c70:	0e b6       	in	r0, 0x3e	; 62
    3c72:	0d 92       	st	X+, r0
    3c74:	1f 92       	push	r1
    3c76:	a0 91 eb 07 	lds	r26, 0x07EB
    3c7a:	b0 91 ec 07 	lds	r27, 0x07EC
    3c7e:	1e 90       	ld	r1, -X
    3c80:	be bf       	out	0x3e, r27	; 62
    3c82:	ad bf       	out	0x3d, r26	; 61
    3c84:	08 95       	ret

00003c86 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    3c86:	1f 92       	push	r1
    3c88:	0f 92       	push	r0
    3c8a:	0f b6       	in	r0, 0x3f	; 63
    3c8c:	0f 92       	push	r0
    3c8e:	0b b6       	in	r0, 0x3b	; 59
    3c90:	0f 92       	push	r0
    3c92:	11 24       	eor	r1, r1
    3c94:	2f 93       	push	r18
    3c96:	3f 93       	push	r19
    3c98:	4f 93       	push	r20
    3c9a:	5f 93       	push	r21
    3c9c:	6f 93       	push	r22
    3c9e:	7f 93       	push	r23
    3ca0:	8f 93       	push	r24
    3ca2:	9f 93       	push	r25
    3ca4:	af 93       	push	r26
    3ca6:	bf 93       	push	r27
    3ca8:	ef 93       	push	r30
    3caa:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    3cac:	e0 91 c0 03 	lds	r30, 0x03C0
    3cb0:	f0 91 c1 03 	lds	r31, 0x03C1
    3cb4:	30 97       	sbiw	r30, 0x00	; 0
    3cb6:	11 f0       	breq	.+4      	; 0x3cbc <__vector_32+0x36>
    3cb8:	09 95       	icall
    3cba:	04 c0       	rjmp	.+8      	; 0x3cc4 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3cbc:	8a e0       	ldi	r24, 0x0A	; 10
    3cbe:	60 e0       	ldi	r22, 0x00	; 0
    3cc0:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <nrk_kernel_error_add>
	return;  	
}
    3cc4:	ff 91       	pop	r31
    3cc6:	ef 91       	pop	r30
    3cc8:	bf 91       	pop	r27
    3cca:	af 91       	pop	r26
    3ccc:	9f 91       	pop	r25
    3cce:	8f 91       	pop	r24
    3cd0:	7f 91       	pop	r23
    3cd2:	6f 91       	pop	r22
    3cd4:	5f 91       	pop	r21
    3cd6:	4f 91       	pop	r20
    3cd8:	3f 91       	pop	r19
    3cda:	2f 91       	pop	r18
    3cdc:	0f 90       	pop	r0
    3cde:	0b be       	out	0x3b, r0	; 59
    3ce0:	0f 90       	pop	r0
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	0f 90       	pop	r0
    3ce6:	1f 90       	pop	r1
    3ce8:	18 95       	reti

00003cea <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    3cea:	1f 92       	push	r1
    3cec:	0f 92       	push	r0
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	0f 92       	push	r0
    3cf2:	11 24       	eor	r1, r1

	return;  	
} 
    3cf4:	0f 90       	pop	r0
    3cf6:	0f be       	out	0x3f, r0	; 63
    3cf8:	0f 90       	pop	r0
    3cfa:	1f 90       	pop	r1
    3cfc:	18 95       	reti

00003cfe <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    3cfe:	04 b6       	in	r0, 0x34	; 52
    3d00:	03 fc       	sbrc	r0, 3
    3d02:	02 c0       	rjmp	.+4      	; 0x3d08 <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	01 c0       	rjmp	.+2      	; 0x3d0a <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    3d08:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    3d0a:	04 b6       	in	r0, 0x34	; 52
    3d0c:	02 fe       	sbrs	r0, 2
    3d0e:	06 c0       	rjmp	.+12     	; 0x3d1c <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    3d10:	94 b7       	in	r25, 0x34	; 52
    3d12:	9b 7f       	andi	r25, 0xFB	; 251
    3d14:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    3d16:	04 b6       	in	r0, 0x34	; 52
    3d18:	00 fe       	sbrs	r0, 0
		error|=0x04;
    3d1a:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    3d1c:	04 b6       	in	r0, 0x34	; 52
    3d1e:	01 fe       	sbrs	r0, 1
    3d20:	05 c0       	rjmp	.+10     	; 0x3d2c <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    3d22:	94 b7       	in	r25, 0x34	; 52
    3d24:	9d 7f       	andi	r25, 0xFD	; 253
    3d26:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    3d28:	82 60       	ori	r24, 0x02	; 2
    3d2a:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    3d2c:	88 23       	and	r24, r24
    3d2e:	61 f4       	brne	.+24     	; 0x3d48 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    3d30:	04 b6       	in	r0, 0x34	; 52
    3d32:	00 fe       	sbrs	r0, 0
    3d34:	04 c0       	rjmp	.+8      	; 0x3d3e <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    3d36:	94 b7       	in	r25, 0x34	; 52
    3d38:	9e 7f       	andi	r25, 0xFE	; 254
    3d3a:	94 bf       	out	0x34, r25	; 52
    3d3c:	01 c0       	rjmp	.+2      	; 0x3d40 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    3d40:	90 91 b0 00 	lds	r25, 0x00B0
    3d44:	91 11       	cpse	r25, r1
    3d46:	81 60       	ori	r24, 0x01	; 1

return error;
}
    3d48:	08 95       	ret

00003d4a <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    3d4a:	88 23       	and	r24, r24
    3d4c:	11 f4       	brne	.+4      	; 0x3d52 <nrk_ext_int_enable+0x8>
    3d4e:	e8 9a       	sbi	0x1d, 0	; 29
    3d50:	39 c0       	rjmp	.+114    	; 0x3dc4 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    3d52:	81 30       	cpi	r24, 0x01	; 1
    3d54:	11 f4       	brne	.+4      	; 0x3d5a <nrk_ext_int_enable+0x10>
    3d56:	e9 9a       	sbi	0x1d, 1	; 29
    3d58:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    3d5a:	82 30       	cpi	r24, 0x02	; 2
    3d5c:	11 f4       	brne	.+4      	; 0x3d62 <nrk_ext_int_enable+0x18>
    3d5e:	ea 9a       	sbi	0x1d, 2	; 29
    3d60:	31 c0       	rjmp	.+98     	; 0x3dc4 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    3d62:	83 30       	cpi	r24, 0x03	; 3
    3d64:	21 f4       	brne	.+8      	; 0x3d6e <nrk_ext_int_enable+0x24>
    3d66:	80 91 6b 00 	lds	r24, 0x006B
    3d6a:	81 60       	ori	r24, 0x01	; 1
    3d6c:	29 c0       	rjmp	.+82     	; 0x3dc0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    3d6e:	84 30       	cpi	r24, 0x04	; 4
    3d70:	21 f4       	brne	.+8      	; 0x3d7a <nrk_ext_int_enable+0x30>
    3d72:	80 91 6b 00 	lds	r24, 0x006B
    3d76:	82 60       	ori	r24, 0x02	; 2
    3d78:	23 c0       	rjmp	.+70     	; 0x3dc0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    3d7a:	85 30       	cpi	r24, 0x05	; 5
    3d7c:	21 f4       	brne	.+8      	; 0x3d86 <nrk_ext_int_enable+0x3c>
    3d7e:	80 91 6b 00 	lds	r24, 0x006B
    3d82:	84 60       	ori	r24, 0x04	; 4
    3d84:	1d c0       	rjmp	.+58     	; 0x3dc0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    3d86:	86 30       	cpi	r24, 0x06	; 6
    3d88:	21 f4       	brne	.+8      	; 0x3d92 <nrk_ext_int_enable+0x48>
    3d8a:	80 91 6b 00 	lds	r24, 0x006B
    3d8e:	88 60       	ori	r24, 0x08	; 8
    3d90:	17 c0       	rjmp	.+46     	; 0x3dc0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    3d92:	87 30       	cpi	r24, 0x07	; 7
    3d94:	21 f4       	brne	.+8      	; 0x3d9e <nrk_ext_int_enable+0x54>
    3d96:	80 91 6b 00 	lds	r24, 0x006B
    3d9a:	80 61       	ori	r24, 0x10	; 16
    3d9c:	11 c0       	rjmp	.+34     	; 0x3dc0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    3d9e:	88 30       	cpi	r24, 0x08	; 8
    3da0:	21 f4       	brne	.+8      	; 0x3daa <nrk_ext_int_enable+0x60>
    3da2:	80 91 6b 00 	lds	r24, 0x006B
    3da6:	80 62       	ori	r24, 0x20	; 32
    3da8:	0b c0       	rjmp	.+22     	; 0x3dc0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    3daa:	89 30       	cpi	r24, 0x09	; 9
    3dac:	21 f4       	brne	.+8      	; 0x3db6 <nrk_ext_int_enable+0x6c>
    3dae:	80 91 6b 00 	lds	r24, 0x006B
    3db2:	80 64       	ori	r24, 0x40	; 64
    3db4:	05 c0       	rjmp	.+10     	; 0x3dc0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    3db6:	8a 30       	cpi	r24, 0x0A	; 10
    3db8:	39 f4       	brne	.+14     	; 0x3dc8 <nrk_ext_int_enable+0x7e>
    3dba:	80 91 6b 00 	lds	r24, 0x006B
    3dbe:	80 68       	ori	r24, 0x80	; 128
    3dc0:	80 93 6b 00 	sts	0x006B, r24
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	08 95       	ret
return NRK_ERROR;
    3dc8:	8f ef       	ldi	r24, 0xFF	; 255
}
    3dca:	08 95       	ret

00003dcc <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    3dcc:	88 23       	and	r24, r24
    3dce:	11 f4       	brne	.+4      	; 0x3dd4 <nrk_ext_int_disable+0x8>
    3dd0:	e8 98       	cbi	0x1d, 0	; 29
    3dd2:	39 c0       	rjmp	.+114    	; 0x3e46 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    3dd4:	81 30       	cpi	r24, 0x01	; 1
    3dd6:	11 f4       	brne	.+4      	; 0x3ddc <nrk_ext_int_disable+0x10>
    3dd8:	e9 98       	cbi	0x1d, 1	; 29
    3dda:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    3ddc:	82 30       	cpi	r24, 0x02	; 2
    3dde:	11 f4       	brne	.+4      	; 0x3de4 <nrk_ext_int_disable+0x18>
    3de0:	e9 98       	cbi	0x1d, 1	; 29
    3de2:	31 c0       	rjmp	.+98     	; 0x3e46 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    3de4:	83 30       	cpi	r24, 0x03	; 3
    3de6:	21 f4       	brne	.+8      	; 0x3df0 <nrk_ext_int_disable+0x24>
    3de8:	80 91 6b 00 	lds	r24, 0x006B
    3dec:	8e 7f       	andi	r24, 0xFE	; 254
    3dee:	29 c0       	rjmp	.+82     	; 0x3e42 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    3df0:	84 30       	cpi	r24, 0x04	; 4
    3df2:	21 f4       	brne	.+8      	; 0x3dfc <nrk_ext_int_disable+0x30>
    3df4:	80 91 6b 00 	lds	r24, 0x006B
    3df8:	8d 7f       	andi	r24, 0xFD	; 253
    3dfa:	23 c0       	rjmp	.+70     	; 0x3e42 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    3dfc:	85 30       	cpi	r24, 0x05	; 5
    3dfe:	21 f4       	brne	.+8      	; 0x3e08 <nrk_ext_int_disable+0x3c>
    3e00:	80 91 6b 00 	lds	r24, 0x006B
    3e04:	8b 7f       	andi	r24, 0xFB	; 251
    3e06:	1d c0       	rjmp	.+58     	; 0x3e42 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    3e08:	86 30       	cpi	r24, 0x06	; 6
    3e0a:	21 f4       	brne	.+8      	; 0x3e14 <nrk_ext_int_disable+0x48>
    3e0c:	80 91 6b 00 	lds	r24, 0x006B
    3e10:	87 7f       	andi	r24, 0xF7	; 247
    3e12:	17 c0       	rjmp	.+46     	; 0x3e42 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    3e14:	87 30       	cpi	r24, 0x07	; 7
    3e16:	21 f4       	brne	.+8      	; 0x3e20 <nrk_ext_int_disable+0x54>
    3e18:	80 91 6b 00 	lds	r24, 0x006B
    3e1c:	8f 7e       	andi	r24, 0xEF	; 239
    3e1e:	11 c0       	rjmp	.+34     	; 0x3e42 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    3e20:	88 30       	cpi	r24, 0x08	; 8
    3e22:	21 f4       	brne	.+8      	; 0x3e2c <nrk_ext_int_disable+0x60>
    3e24:	80 91 6b 00 	lds	r24, 0x006B
    3e28:	8f 7d       	andi	r24, 0xDF	; 223
    3e2a:	0b c0       	rjmp	.+22     	; 0x3e42 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    3e2c:	89 30       	cpi	r24, 0x09	; 9
    3e2e:	21 f4       	brne	.+8      	; 0x3e38 <nrk_ext_int_disable+0x6c>
    3e30:	80 91 6b 00 	lds	r24, 0x006B
    3e34:	8f 7b       	andi	r24, 0xBF	; 191
    3e36:	05 c0       	rjmp	.+10     	; 0x3e42 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    3e38:	8a 30       	cpi	r24, 0x0A	; 10
    3e3a:	39 f4       	brne	.+14     	; 0x3e4a <nrk_ext_int_disable+0x7e>
    3e3c:	80 91 6b 00 	lds	r24, 0x006B
    3e40:	8f 77       	andi	r24, 0x7F	; 127
    3e42:	80 93 6b 00 	sts	0x006B, r24
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	08 95       	ret
return NRK_ERROR;
    3e4a:	8f ef       	ldi	r24, 0xFF	; 255
}
    3e4c:	08 95       	ret

00003e4e <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    3e4e:	88 23       	and	r24, r24
    3e50:	39 f5       	brne	.+78     	; 0x3ea0 <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    3e52:	50 93 27 0a 	sts	0x0A27, r21
    3e56:	40 93 26 0a 	sts	0x0A26, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    3e5a:	66 23       	and	r22, r22
    3e5c:	21 f4       	brne	.+8      	; 0x3e66 <nrk_ext_int_configure+0x18>
    3e5e:	80 91 69 00 	lds	r24, 0x0069
    3e62:	8c 7f       	andi	r24, 0xFC	; 252
    3e64:	66 c0       	rjmp	.+204    	; 0x3f32 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    3e66:	61 30       	cpi	r22, 0x01	; 1
    3e68:	49 f4       	brne	.+18     	; 0x3e7c <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    3e6a:	80 91 69 00 	lds	r24, 0x0069
    3e6e:	8d 7f       	andi	r24, 0xFD	; 253
    3e70:	80 93 69 00 	sts	0x0069, r24
    3e74:	80 91 69 00 	lds	r24, 0x0069
    3e78:	81 60       	ori	r24, 0x01	; 1
    3e7a:	5b c0       	rjmp	.+182    	; 0x3f32 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    3e7c:	62 30       	cpi	r22, 0x02	; 2
    3e7e:	49 f4       	brne	.+18     	; 0x3e92 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    3e80:	80 91 69 00 	lds	r24, 0x0069
    3e84:	82 60       	ori	r24, 0x02	; 2
    3e86:	80 93 69 00 	sts	0x0069, r24
    3e8a:	80 91 69 00 	lds	r24, 0x0069
    3e8e:	8e 7f       	andi	r24, 0xFE	; 254
    3e90:	50 c0       	rjmp	.+160    	; 0x3f32 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    3e92:	63 30       	cpi	r22, 0x03	; 3
    3e94:	09 f0       	breq	.+2      	; 0x3e98 <nrk_ext_int_configure+0x4a>
    3e96:	62 c0       	rjmp	.+196    	; 0x3f5c <nrk_ext_int_configure+0x10e>
    3e98:	80 91 69 00 	lds	r24, 0x0069
    3e9c:	83 60       	ori	r24, 0x03	; 3
    3e9e:	49 c0       	rjmp	.+146    	; 0x3f32 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    3ea0:	81 30       	cpi	r24, 0x01	; 1
    3ea2:	31 f5       	brne	.+76     	; 0x3ef0 <nrk_ext_int_configure+0xa2>
	{
	ext_int1_callback=callback_func;
    3ea4:	50 93 25 0a 	sts	0x0A25, r21
    3ea8:	40 93 24 0a 	sts	0x0A24, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    3eac:	66 23       	and	r22, r22
    3eae:	21 f4       	brne	.+8      	; 0x3eb8 <nrk_ext_int_configure+0x6a>
    3eb0:	80 91 69 00 	lds	r24, 0x0069
    3eb4:	83 7f       	andi	r24, 0xF3	; 243
    3eb6:	3d c0       	rjmp	.+122    	; 0x3f32 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    3eb8:	61 30       	cpi	r22, 0x01	; 1
    3eba:	49 f4       	brne	.+18     	; 0x3ece <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    3ebc:	80 91 69 00 	lds	r24, 0x0069
    3ec0:	87 7f       	andi	r24, 0xF7	; 247
    3ec2:	80 93 69 00 	sts	0x0069, r24
    3ec6:	80 91 69 00 	lds	r24, 0x0069
    3eca:	84 60       	ori	r24, 0x04	; 4
    3ecc:	32 c0       	rjmp	.+100    	; 0x3f32 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    3ece:	62 30       	cpi	r22, 0x02	; 2
    3ed0:	49 f4       	brne	.+18     	; 0x3ee4 <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    3ed2:	80 91 69 00 	lds	r24, 0x0069
    3ed6:	88 60       	ori	r24, 0x08	; 8
    3ed8:	80 93 69 00 	sts	0x0069, r24
    3edc:	80 91 69 00 	lds	r24, 0x0069
    3ee0:	8b 7f       	andi	r24, 0xFB	; 251
    3ee2:	27 c0       	rjmp	.+78     	; 0x3f32 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    3ee4:	63 30       	cpi	r22, 0x03	; 3
    3ee6:	d1 f5       	brne	.+116    	; 0x3f5c <nrk_ext_int_configure+0x10e>
    3ee8:	80 91 69 00 	lds	r24, 0x0069
    3eec:	8c 60       	ori	r24, 0x0C	; 12
    3eee:	21 c0       	rjmp	.+66     	; 0x3f32 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    3ef0:	82 30       	cpi	r24, 0x02	; 2
    3ef2:	41 f5       	brne	.+80     	; 0x3f44 <nrk_ext_int_configure+0xf6>
	{
	ext_int1_callback=callback_func;
    3ef4:	50 93 25 0a 	sts	0x0A25, r21
    3ef8:	40 93 24 0a 	sts	0x0A24, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    3efc:	66 23       	and	r22, r22
    3efe:	21 f4       	brne	.+8      	; 0x3f08 <nrk_ext_int_configure+0xba>
    3f00:	80 91 69 00 	lds	r24, 0x0069
    3f04:	8f 7c       	andi	r24, 0xCF	; 207
    3f06:	15 c0       	rjmp	.+42     	; 0x3f32 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    3f08:	61 30       	cpi	r22, 0x01	; 1
    3f0a:	49 f4       	brne	.+18     	; 0x3f1e <nrk_ext_int_configure+0xd0>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    3f0c:	80 91 69 00 	lds	r24, 0x0069
    3f10:	8f 7d       	andi	r24, 0xDF	; 223
    3f12:	80 93 69 00 	sts	0x0069, r24
    3f16:	80 91 69 00 	lds	r24, 0x0069
    3f1a:	80 61       	ori	r24, 0x10	; 16
    3f1c:	0a c0       	rjmp	.+20     	; 0x3f32 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    3f1e:	62 30       	cpi	r22, 0x02	; 2
    3f20:	59 f4       	brne	.+22     	; 0x3f38 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    3f22:	80 91 69 00 	lds	r24, 0x0069
    3f26:	80 62       	ori	r24, 0x20	; 32
    3f28:	80 93 69 00 	sts	0x0069, r24
    3f2c:	80 91 69 00 	lds	r24, 0x0069
    3f30:	8f 7e       	andi	r24, 0xEF	; 239
    3f32:	80 93 69 00 	sts	0x0069, r24
    3f36:	12 c0       	rjmp	.+36     	; 0x3f5c <nrk_ext_int_configure+0x10e>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    3f38:	63 30       	cpi	r22, 0x03	; 3
    3f3a:	81 f4       	brne	.+32     	; 0x3f5c <nrk_ext_int_configure+0x10e>
    3f3c:	80 91 69 00 	lds	r24, 0x0069
    3f40:	80 63       	ori	r24, 0x30	; 48
    3f42:	f7 cf       	rjmp	.-18     	; 0x3f32 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    3f44:	83 50       	subi	r24, 0x03	; 3
    3f46:	88 30       	cpi	r24, 0x08	; 8
    3f48:	58 f4       	brcc	.+22     	; 0x3f60 <nrk_ext_int_configure+0x112>
	PCICR |= BM(PCIE0);	
    3f4a:	80 91 68 00 	lds	r24, 0x0068
    3f4e:	81 60       	ori	r24, 0x01	; 1
    3f50:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    3f54:	50 93 2b 0a 	sts	0x0A2B, r21
    3f58:	40 93 2a 0a 	sts	0x0A2A, r20
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
	return NRK_OK;
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	08 95       	ret
if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
	PCICR |= BM(PCIE0);	
	pc_int0_callback=callback_func;
	return NRK_OK;
	}
return NRK_ERROR;
    3f60:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f62:	08 95       	ret

00003f64 <__vector_9>:


SIGNAL(PCINT0_vect) {
    3f64:	1f 92       	push	r1
    3f66:	0f 92       	push	r0
    3f68:	0f b6       	in	r0, 0x3f	; 63
    3f6a:	0f 92       	push	r0
    3f6c:	0b b6       	in	r0, 0x3b	; 59
    3f6e:	0f 92       	push	r0
    3f70:	11 24       	eor	r1, r1
    3f72:	2f 93       	push	r18
    3f74:	3f 93       	push	r19
    3f76:	4f 93       	push	r20
    3f78:	5f 93       	push	r21
    3f7a:	6f 93       	push	r22
    3f7c:	7f 93       	push	r23
    3f7e:	8f 93       	push	r24
    3f80:	9f 93       	push	r25
    3f82:	af 93       	push	r26
    3f84:	bf 93       	push	r27
    3f86:	ef 93       	push	r30
    3f88:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    3f8a:	e0 91 2a 0a 	lds	r30, 0x0A2A
    3f8e:	f0 91 2b 0a 	lds	r31, 0x0A2B
    3f92:	30 97       	sbiw	r30, 0x00	; 0
    3f94:	11 f0       	breq	.+4      	; 0x3f9a <__vector_9+0x36>
    3f96:	09 95       	icall
    3f98:	04 c0       	rjmp	.+8      	; 0x3fa2 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3f9a:	8a e0       	ldi	r24, 0x0A	; 10
    3f9c:	60 e0       	ldi	r22, 0x00	; 0
    3f9e:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <nrk_kernel_error_add>
	return;  	
}
    3fa2:	ff 91       	pop	r31
    3fa4:	ef 91       	pop	r30
    3fa6:	bf 91       	pop	r27
    3fa8:	af 91       	pop	r26
    3faa:	9f 91       	pop	r25
    3fac:	8f 91       	pop	r24
    3fae:	7f 91       	pop	r23
    3fb0:	6f 91       	pop	r22
    3fb2:	5f 91       	pop	r21
    3fb4:	4f 91       	pop	r20
    3fb6:	3f 91       	pop	r19
    3fb8:	2f 91       	pop	r18
    3fba:	0f 90       	pop	r0
    3fbc:	0b be       	out	0x3b, r0	; 59
    3fbe:	0f 90       	pop	r0
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	0f 90       	pop	r0
    3fc4:	1f 90       	pop	r1
    3fc6:	18 95       	reti

00003fc8 <__vector_1>:


SIGNAL(INT0_vect) {
    3fc8:	1f 92       	push	r1
    3fca:	0f 92       	push	r0
    3fcc:	0f b6       	in	r0, 0x3f	; 63
    3fce:	0f 92       	push	r0
    3fd0:	0b b6       	in	r0, 0x3b	; 59
    3fd2:	0f 92       	push	r0
    3fd4:	11 24       	eor	r1, r1
    3fd6:	2f 93       	push	r18
    3fd8:	3f 93       	push	r19
    3fda:	4f 93       	push	r20
    3fdc:	5f 93       	push	r21
    3fde:	6f 93       	push	r22
    3fe0:	7f 93       	push	r23
    3fe2:	8f 93       	push	r24
    3fe4:	9f 93       	push	r25
    3fe6:	af 93       	push	r26
    3fe8:	bf 93       	push	r27
    3fea:	ef 93       	push	r30
    3fec:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    3fee:	e0 91 26 0a 	lds	r30, 0x0A26
    3ff2:	f0 91 27 0a 	lds	r31, 0x0A27
    3ff6:	30 97       	sbiw	r30, 0x00	; 0
    3ff8:	11 f0       	breq	.+4      	; 0x3ffe <__vector_1+0x36>
    3ffa:	09 95       	icall
    3ffc:	04 c0       	rjmp	.+8      	; 0x4006 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3ffe:	8a e0       	ldi	r24, 0x0A	; 10
    4000:	60 e0       	ldi	r22, 0x00	; 0
    4002:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <nrk_kernel_error_add>
	return;  	
}
    4006:	ff 91       	pop	r31
    4008:	ef 91       	pop	r30
    400a:	bf 91       	pop	r27
    400c:	af 91       	pop	r26
    400e:	9f 91       	pop	r25
    4010:	8f 91       	pop	r24
    4012:	7f 91       	pop	r23
    4014:	6f 91       	pop	r22
    4016:	5f 91       	pop	r21
    4018:	4f 91       	pop	r20
    401a:	3f 91       	pop	r19
    401c:	2f 91       	pop	r18
    401e:	0f 90       	pop	r0
    4020:	0b be       	out	0x3b, r0	; 59
    4022:	0f 90       	pop	r0
    4024:	0f be       	out	0x3f, r0	; 63
    4026:	0f 90       	pop	r0
    4028:	1f 90       	pop	r1
    402a:	18 95       	reti

0000402c <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    402c:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4030:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4032:	84 b7       	in	r24, 0x34	; 52
    4034:	87 7f       	andi	r24, 0xF7	; 247
    4036:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4038:	e0 e6       	ldi	r30, 0x60	; 96
    403a:	f0 e0       	ldi	r31, 0x00	; 0
    403c:	80 81       	ld	r24, Z
    403e:	88 61       	ori	r24, 0x18	; 24
    4040:	80 83       	st	Z, r24
WDTCSR = 0;
    4042:	10 82       	st	Z, r1
nrk_int_enable();
    4044:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>
}
    4048:	08 95       	ret

0000404a <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    404a:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    404e:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4050:	84 b7       	in	r24, 0x34	; 52
    4052:	87 7f       	andi	r24, 0xF7	; 247
    4054:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4056:	e0 e6       	ldi	r30, 0x60	; 96
    4058:	f0 e0       	ldi	r31, 0x00	; 0
    405a:	80 81       	ld	r24, Z
    405c:	88 61       	ori	r24, 0x18	; 24
    405e:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4060:	8d e0       	ldi	r24, 0x0D	; 13
    4062:	80 83       	st	Z, r24
nrk_int_enable();
    4064:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>
}
    4068:	08 95       	ret

0000406a <nrk_watchdog_check>:

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    406a:	04 b6       	in	r0, 0x34	; 52
    406c:	03 fc       	sbrc	r0, 3
    406e:	02 c0       	rjmp	.+4      	; 0x4074 <nrk_watchdog_check+0xa>
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	08 95       	ret
return NRK_ERROR;
    4074:	8f ef       	ldi	r24, 0xFF	; 255
}
    4076:	08 95       	ret

00004078 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    4078:	a8 95       	wdr

}
    407a:	08 95       	ret

0000407c <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    407c:	08 95       	ret

0000407e <nrk_sleep>:

void nrk_sleep()
{

    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    407e:	83 b7       	in	r24, 0x33	; 51
    4080:	81 7f       	andi	r24, 0xF1	; 241
    4082:	86 60       	ori	r24, 0x06	; 6
    4084:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4086:	83 b7       	in	r24, 0x33	; 51
    4088:	81 60       	ori	r24, 0x01	; 1
    408a:	83 bf       	out	0x33, r24	; 51
    408c:	88 95       	sleep
    408e:	83 b7       	in	r24, 0x33	; 51
    4090:	8e 7f       	andi	r24, 0xFE	; 254
    4092:	83 bf       	out	0x33, r24	; 51

}
    4094:	08 95       	ret

00004096 <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4096:	83 b7       	in	r24, 0x33	; 51
    4098:	81 7f       	andi	r24, 0xF1	; 241
    409a:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    409c:	83 b7       	in	r24, 0x33	; 51
    409e:	81 60       	ori	r24, 0x01	; 1
    40a0:	83 bf       	out	0x33, r24	; 51
    40a2:	88 95       	sleep
    40a4:	83 b7       	in	r24, 0x33	; 51
    40a6:	8e 7f       	andi	r24, 0xFE	; 254
    40a8:	83 bf       	out	0x33, r24	; 51

}
    40aa:	08 95       	ret

000040ac <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    40ac:	fc 01       	movw	r30, r24
    40ae:	76 83       	std	Z+6, r23	; 0x06
    40b0:	65 83       	std	Z+5, r22	; 0x05
}
    40b2:	08 95       	ret

000040b4 <nrk_task_set_stk>:

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    40b4:	ef 92       	push	r14
    40b6:	ff 92       	push	r15
    40b8:	0f 93       	push	r16
    40ba:	1f 93       	push	r17
    40bc:	cf 93       	push	r28
    40be:	df 93       	push	r29
    40c0:	ec 01       	movw	r28, r24
    40c2:	8b 01       	movw	r16, r22
    40c4:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    40c6:	40 32       	cpi	r20, 0x20	; 32
    40c8:	51 05       	cpc	r21, r1
    40ca:	18 f4       	brcc	.+6      	; 0x40d2 <nrk_task_set_stk+0x1e>
    40cc:	81 e1       	ldi	r24, 0x11	; 17
    40ce:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    40d2:	08 94       	sec
    40d4:	e1 08       	sbc	r14, r1
    40d6:	f1 08       	sbc	r15, r1
    40d8:	e0 0e       	add	r14, r16
    40da:	f1 1e       	adc	r15, r17
    40dc:	fa 82       	std	Y+2, r15	; 0x02
    40de:	e9 82       	std	Y+1, r14	; 0x01
task->Pbos = (void *) &stk_base[0];
    40e0:	1c 83       	std	Y+4, r17	; 0x04
    40e2:	0b 83       	std	Y+3, r16	; 0x03

}
    40e4:	df 91       	pop	r29
    40e6:	cf 91       	pop	r28
    40e8:	1f 91       	pop	r17
    40ea:	0f 91       	pop	r16
    40ec:	ff 90       	pop	r15
    40ee:	ef 90       	pop	r14
    40f0:	08 95       	ret

000040f2 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    40f2:	25 e5       	ldi	r18, 0x55	; 85
    40f4:	fa 01       	movw	r30, r20
    40f6:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    40f8:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    40fa:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    40fc:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    40fe:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    4100:	12 92       	st	-Z, r1
    4102:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    4104:	12 92       	st	-Z, r1
    4106:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4108:	12 92       	st	-Z, r1
    410a:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    410c:	12 92       	st	-Z, r1
    410e:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    4110:	12 92       	st	-Z, r1
    4112:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    4114:	12 92       	st	-Z, r1
    4116:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4118:	12 92       	st	-Z, r1
    411a:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    411c:	12 92       	st	-Z, r1
    411e:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    4120:	12 92       	st	-Z, r1
    4122:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4124:	12 92       	st	-Z, r1
    4126:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4128:	12 92       	st	-Z, r1
    412a:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    412c:	12 92       	st	-Z, r1
    412e:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4130:	12 92       	st	-Z, r1
    4132:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4134:	12 92       	st	-Z, r1
    4136:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4138:	12 92       	st	-Z, r1
    413a:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    413c:	12 92       	st	-Z, r1
    413e:	12 92       	st	-Z, r1
    *(--stk) = 0;
    4140:	12 92       	st	-Z, r1
    4142:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    4144:	cf 01       	movw	r24, r30
    4146:	08 95       	ret

00004148 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    4148:	85 e5       	ldi	r24, 0x55	; 85
    414a:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    414e:	ee ef       	ldi	r30, 0xFE	; 254
    4150:	f1 e4       	ldi	r31, 0x41	; 65
    4152:	f0 93 ec 07 	sts	0x07EC, r31
    4156:	e0 93 eb 07 	sts	0x07EB, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    415a:	8d ed       	ldi	r24, 0xDD	; 221
    415c:	9d e0       	ldi	r25, 0x0D	; 13
    415e:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4160:	80 93 ff 41 	sts	0x41FF, r24

}
    4164:	08 95       	ret

00004166 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4166:	8d ed       	ldi	r24, 0xDD	; 221
    4168:	9d e0       	ldi	r25, 0x0D	; 13
    416a:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    416e:	80 93 ff 41 	sts	0x41FF, r24
}
    4172:	08 95       	ret

00004174 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    4174:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <_nrk_setup_timer>
  nrk_int_enable();  
    4178:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <nrk_int_enable>
	
}
    417c:	08 95       	ret

0000417e <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    417e:	a0 91 f3 09 	lds	r26, 0x09F3
	lds r27,nrk_high_ready_TCB+1
    4182:	b0 91 f4 09 	lds	r27, 0x09F4

    	;x points to &OSTCB[x]
    
	ld r28,x+
    4186:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    4188:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    418a:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    418c:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    418e:	ff 91       	pop	r31
	pop r30
    4190:	ef 91       	pop	r30
	pop r29
    4192:	df 91       	pop	r29
	pop r28
    4194:	cf 91       	pop	r28
	pop r27
    4196:	bf 91       	pop	r27
	pop r26
    4198:	af 91       	pop	r26
	pop r25
    419a:	9f 91       	pop	r25
	pop r24			
    419c:	8f 91       	pop	r24
	pop r23
    419e:	7f 91       	pop	r23
	pop r22
    41a0:	6f 91       	pop	r22
	pop r21
    41a2:	5f 91       	pop	r21
	pop r20	
    41a4:	4f 91       	pop	r20
	pop r19
    41a6:	3f 91       	pop	r19
	pop r18	
    41a8:	2f 91       	pop	r18
	pop r17
    41aa:	1f 91       	pop	r17
	pop r16
    41ac:	0f 91       	pop	r16
	pop r15
    41ae:	ff 90       	pop	r15
	pop r14
    41b0:	ef 90       	pop	r14
	pop r13
    41b2:	df 90       	pop	r13
	pop r12
    41b4:	cf 90       	pop	r12
	pop r11
    41b6:	bf 90       	pop	r11
	pop r10
    41b8:	af 90       	pop	r10
	pop r9
    41ba:	9f 90       	pop	r9
	pop r8
    41bc:	8f 90       	pop	r8
	pop r7
    41be:	7f 90       	pop	r7
	pop r6
    41c0:	6f 90       	pop	r6
	pop r5
    41c2:	5f 90       	pop	r5
	pop r4
    41c4:	4f 90       	pop	r4
	pop r3
    41c6:	3f 90       	pop	r3
	pop r2
    41c8:	2f 90       	pop	r2
	pop r1
    41ca:	1f 90       	pop	r1
	pop r0
    41cc:	0f 90       	pop	r0
	out __SREG__, r0
    41ce:	0f be       	out	0x3f, r0	; 63
	pop r0	
    41d0:	0f 90       	pop	r0
	   
    	reti 
    41d2:	18 95       	reti

000041d4 <__udivdi3>:
    41d4:	a8 e3       	ldi	r26, 0x38	; 56
    41d6:	b0 e0       	ldi	r27, 0x00	; 0
    41d8:	e0 ef       	ldi	r30, 0xF0	; 240
    41da:	f0 e2       	ldi	r31, 0x20	; 32
    41dc:	0c 94 eb 28 	jmp	0x51d6	; 0x51d6 <__prologue_saves__>
    41e0:	29 83       	std	Y+1, r18	; 0x01
    41e2:	3a 83       	std	Y+2, r19	; 0x02
    41e4:	4b 83       	std	Y+3, r20	; 0x03
    41e6:	5c 83       	std	Y+4, r21	; 0x04
    41e8:	6d 83       	std	Y+5, r22	; 0x05
    41ea:	7e 83       	std	Y+6, r23	; 0x06
    41ec:	8f 83       	std	Y+7, r24	; 0x07
    41ee:	98 87       	std	Y+8, r25	; 0x08
    41f0:	a9 86       	std	Y+9, r10	; 0x09
    41f2:	ba 86       	std	Y+10, r11	; 0x0a
    41f4:	cb 86       	std	Y+11, r12	; 0x0b
    41f6:	dc 86       	std	Y+12, r13	; 0x0c
    41f8:	ed 86       	std	Y+13, r14	; 0x0d
    41fa:	fe 86       	std	Y+14, r15	; 0x0e
    41fc:	0f 87       	std	Y+15, r16	; 0x0f
    41fe:	18 8b       	std	Y+16, r17	; 0x10
    4200:	e9 84       	ldd	r14, Y+9	; 0x09
    4202:	fa 84       	ldd	r15, Y+10	; 0x0a
    4204:	0b 85       	ldd	r16, Y+11	; 0x0b
    4206:	1c 85       	ldd	r17, Y+12	; 0x0c
    4208:	2d 85       	ldd	r18, Y+13	; 0x0d
    420a:	3e 85       	ldd	r19, Y+14	; 0x0e
    420c:	4f 85       	ldd	r20, Y+15	; 0x0f
    420e:	58 89       	ldd	r21, Y+16	; 0x10
    4210:	29 80       	ldd	r2, Y+1	; 0x01
    4212:	3a 80       	ldd	r3, Y+2	; 0x02
    4214:	4b 80       	ldd	r4, Y+3	; 0x03
    4216:	5c 80       	ldd	r5, Y+4	; 0x04
    4218:	2d a2       	std	Y+37, r2	; 0x25
    421a:	3e a2       	std	Y+38, r3	; 0x26
    421c:	4f a2       	std	Y+39, r4	; 0x27
    421e:	58 a6       	std	Y+40, r5	; 0x28
    4220:	ad 80       	ldd	r10, Y+5	; 0x05
    4222:	be 80       	ldd	r11, Y+6	; 0x06
    4224:	cf 80       	ldd	r12, Y+7	; 0x07
    4226:	d8 84       	ldd	r13, Y+8	; 0x08
    4228:	21 15       	cp	r18, r1
    422a:	31 05       	cpc	r19, r1
    422c:	41 05       	cpc	r20, r1
    422e:	51 05       	cpc	r21, r1
    4230:	09 f0       	breq	.+2      	; 0x4234 <__stack+0x35>
    4232:	be c3       	rjmp	.+1916   	; 0x49b0 <__stack+0x7b1>
    4234:	ae 14       	cp	r10, r14
    4236:	bf 04       	cpc	r11, r15
    4238:	c0 06       	cpc	r12, r16
    423a:	d1 06       	cpc	r13, r17
    423c:	08 f0       	brcs	.+2      	; 0x4240 <__stack+0x41>
    423e:	4f c1       	rjmp	.+670    	; 0x44de <__stack+0x2df>
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	e2 16       	cp	r14, r18
    4244:	20 e0       	ldi	r18, 0x00	; 0
    4246:	f2 06       	cpc	r15, r18
    4248:	21 e0       	ldi	r18, 0x01	; 1
    424a:	02 07       	cpc	r16, r18
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	12 07       	cpc	r17, r18
    4250:	58 f4       	brcc	.+22     	; 0x4268 <__stack+0x69>
    4252:	3f ef       	ldi	r19, 0xFF	; 255
    4254:	e3 16       	cp	r14, r19
    4256:	f1 04       	cpc	r15, r1
    4258:	01 05       	cpc	r16, r1
    425a:	11 05       	cpc	r17, r1
    425c:	09 f0       	breq	.+2      	; 0x4260 <__stack+0x61>
    425e:	90 f4       	brcc	.+36     	; 0x4284 <__stack+0x85>
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	a9 01       	movw	r20, r18
    4266:	17 c0       	rjmp	.+46     	; 0x4296 <__stack+0x97>
    4268:	40 e0       	ldi	r20, 0x00	; 0
    426a:	e4 16       	cp	r14, r20
    426c:	40 e0       	ldi	r20, 0x00	; 0
    426e:	f4 06       	cpc	r15, r20
    4270:	40 e0       	ldi	r20, 0x00	; 0
    4272:	04 07       	cpc	r16, r20
    4274:	41 e0       	ldi	r20, 0x01	; 1
    4276:	14 07       	cpc	r17, r20
    4278:	50 f4       	brcc	.+20     	; 0x428e <__stack+0x8f>
    427a:	20 e1       	ldi	r18, 0x10	; 16
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	40 e0       	ldi	r20, 0x00	; 0
    4280:	50 e0       	ldi	r21, 0x00	; 0
    4282:	09 c0       	rjmp	.+18     	; 0x4296 <__stack+0x97>
    4284:	28 e0       	ldi	r18, 0x08	; 8
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	40 e0       	ldi	r20, 0x00	; 0
    428a:	50 e0       	ldi	r21, 0x00	; 0
    428c:	04 c0       	rjmp	.+8      	; 0x4296 <__stack+0x97>
    428e:	28 e1       	ldi	r18, 0x18	; 24
    4290:	30 e0       	ldi	r19, 0x00	; 0
    4292:	40 e0       	ldi	r20, 0x00	; 0
    4294:	50 e0       	ldi	r21, 0x00	; 0
    4296:	d8 01       	movw	r26, r16
    4298:	c7 01       	movw	r24, r14
    429a:	02 2e       	mov	r0, r18
    429c:	04 c0       	rjmp	.+8      	; 0x42a6 <__stack+0xa7>
    429e:	b6 95       	lsr	r27
    42a0:	a7 95       	ror	r26
    42a2:	97 95       	ror	r25
    42a4:	87 95       	ror	r24
    42a6:	0a 94       	dec	r0
    42a8:	d2 f7       	brpl	.-12     	; 0x429e <__stack+0x9f>
    42aa:	89 54       	subi	r24, 0x49	; 73
    42ac:	9d 4f       	sbci	r25, 0xFD	; 253
    42ae:	dc 01       	movw	r26, r24
    42b0:	6c 91       	ld	r22, X
    42b2:	80 e2       	ldi	r24, 0x20	; 32
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	a0 e0       	ldi	r26, 0x00	; 0
    42b8:	b0 e0       	ldi	r27, 0x00	; 0
    42ba:	82 1b       	sub	r24, r18
    42bc:	93 0b       	sbc	r25, r19
    42be:	a4 0b       	sbc	r26, r20
    42c0:	b5 0b       	sbc	r27, r21
    42c2:	86 1b       	sub	r24, r22
    42c4:	91 09       	sbc	r25, r1
    42c6:	a1 09       	sbc	r26, r1
    42c8:	b1 09       	sbc	r27, r1
    42ca:	00 97       	sbiw	r24, 0x00	; 0
    42cc:	a1 05       	cpc	r26, r1
    42ce:	b1 05       	cpc	r27, r1
    42d0:	a1 f1       	breq	.+104    	; 0x433a <__stack+0x13b>
    42d2:	08 2e       	mov	r0, r24
    42d4:	04 c0       	rjmp	.+8      	; 0x42de <__stack+0xdf>
    42d6:	ee 0c       	add	r14, r14
    42d8:	ff 1c       	adc	r15, r15
    42da:	00 1f       	adc	r16, r16
    42dc:	11 1f       	adc	r17, r17
    42de:	0a 94       	dec	r0
    42e0:	d2 f7       	brpl	.-12     	; 0x42d6 <__stack+0xd7>
    42e2:	a6 01       	movw	r20, r12
    42e4:	95 01       	movw	r18, r10
    42e6:	08 2e       	mov	r0, r24
    42e8:	04 c0       	rjmp	.+8      	; 0x42f2 <__stack+0xf3>
    42ea:	22 0f       	add	r18, r18
    42ec:	33 1f       	adc	r19, r19
    42ee:	44 1f       	adc	r20, r20
    42f0:	55 1f       	adc	r21, r21
    42f2:	0a 94       	dec	r0
    42f4:	d2 f7       	brpl	.-12     	; 0x42ea <__stack+0xeb>
    42f6:	60 e2       	ldi	r22, 0x20	; 32
    42f8:	70 e0       	ldi	r23, 0x00	; 0
    42fa:	68 1b       	sub	r22, r24
    42fc:	79 0b       	sbc	r23, r25
    42fe:	ad a0       	ldd	r10, Y+37	; 0x25
    4300:	be a0       	ldd	r11, Y+38	; 0x26
    4302:	cf a0       	ldd	r12, Y+39	; 0x27
    4304:	d8 a4       	ldd	r13, Y+40	; 0x28
    4306:	04 c0       	rjmp	.+8      	; 0x4310 <__stack+0x111>
    4308:	d6 94       	lsr	r13
    430a:	c7 94       	ror	r12
    430c:	b7 94       	ror	r11
    430e:	a7 94       	ror	r10
    4310:	6a 95       	dec	r22
    4312:	d2 f7       	brpl	.-12     	; 0x4308 <__stack+0x109>
    4314:	a2 2a       	or	r10, r18
    4316:	b3 2a       	or	r11, r19
    4318:	c4 2a       	or	r12, r20
    431a:	d5 2a       	or	r13, r21
    431c:	2d a0       	ldd	r2, Y+37	; 0x25
    431e:	3e a0       	ldd	r3, Y+38	; 0x26
    4320:	4f a0       	ldd	r4, Y+39	; 0x27
    4322:	58 a4       	ldd	r5, Y+40	; 0x28
    4324:	04 c0       	rjmp	.+8      	; 0x432e <__stack+0x12f>
    4326:	22 0c       	add	r2, r2
    4328:	33 1c       	adc	r3, r3
    432a:	44 1c       	adc	r4, r4
    432c:	55 1c       	adc	r5, r5
    432e:	8a 95       	dec	r24
    4330:	d2 f7       	brpl	.-12     	; 0x4326 <__stack+0x127>
    4332:	2d a2       	std	Y+37, r2	; 0x25
    4334:	3e a2       	std	Y+38, r3	; 0x26
    4336:	4f a2       	std	Y+39, r4	; 0x27
    4338:	58 a6       	std	Y+40, r5	; 0x28
    433a:	38 01       	movw	r6, r16
    433c:	88 24       	eor	r8, r8
    433e:	99 24       	eor	r9, r9
    4340:	a8 01       	movw	r20, r16
    4342:	97 01       	movw	r18, r14
    4344:	40 70       	andi	r20, 0x00	; 0
    4346:	50 70       	andi	r21, 0x00	; 0
    4348:	2d 8f       	std	Y+29, r18	; 0x1d
    434a:	3e 8f       	std	Y+30, r19	; 0x1e
    434c:	4f 8f       	std	Y+31, r20	; 0x1f
    434e:	58 a3       	std	Y+32, r21	; 0x20
    4350:	c6 01       	movw	r24, r12
    4352:	b5 01       	movw	r22, r10
    4354:	a4 01       	movw	r20, r8
    4356:	93 01       	movw	r18, r6
    4358:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    435c:	22 2e       	mov	r2, r18
    435e:	53 2e       	mov	r5, r19
    4360:	44 2e       	mov	r4, r20
    4362:	35 2e       	mov	r3, r21
    4364:	69 a3       	std	Y+33, r22	; 0x21
    4366:	7a a3       	std	Y+34, r23	; 0x22
    4368:	8b a3       	std	Y+35, r24	; 0x23
    436a:	9c a3       	std	Y+36, r25	; 0x24
    436c:	c6 01       	movw	r24, r12
    436e:	b5 01       	movw	r22, r10
    4370:	a4 01       	movw	r20, r8
    4372:	93 01       	movw	r18, r6
    4374:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    4378:	82 2d       	mov	r24, r2
    437a:	95 2d       	mov	r25, r5
    437c:	a4 2d       	mov	r26, r4
    437e:	b3 2d       	mov	r27, r3
    4380:	89 8f       	std	Y+25, r24	; 0x19
    4382:	9a 8f       	std	Y+26, r25	; 0x1a
    4384:	ab 8f       	std	Y+27, r26	; 0x1b
    4386:	bc 8f       	std	Y+28, r27	; 0x1c
    4388:	bc 01       	movw	r22, r24
    438a:	cd 01       	movw	r24, r26
    438c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    438e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4390:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4392:	58 a1       	ldd	r21, Y+32	; 0x20
    4394:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    4398:	5b 01       	movw	r10, r22
    439a:	6c 01       	movw	r12, r24
    439c:	49 a1       	ldd	r20, Y+33	; 0x21
    439e:	5a a1       	ldd	r21, Y+34	; 0x22
    43a0:	6b a1       	ldd	r22, Y+35	; 0x23
    43a2:	7c a1       	ldd	r23, Y+36	; 0x24
    43a4:	da 01       	movw	r26, r20
    43a6:	99 27       	eor	r25, r25
    43a8:	88 27       	eor	r24, r24
    43aa:	2d a0       	ldd	r2, Y+37	; 0x25
    43ac:	3e a0       	ldd	r3, Y+38	; 0x26
    43ae:	4f a0       	ldd	r4, Y+39	; 0x27
    43b0:	58 a4       	ldd	r5, Y+40	; 0x28
    43b2:	92 01       	movw	r18, r4
    43b4:	44 27       	eor	r20, r20
    43b6:	55 27       	eor	r21, r21
    43b8:	82 2b       	or	r24, r18
    43ba:	93 2b       	or	r25, r19
    43bc:	a4 2b       	or	r26, r20
    43be:	b5 2b       	or	r27, r21
    43c0:	8a 15       	cp	r24, r10
    43c2:	9b 05       	cpc	r25, r11
    43c4:	ac 05       	cpc	r26, r12
    43c6:	bd 05       	cpc	r27, r13
    43c8:	30 f5       	brcc	.+76     	; 0x4416 <__stack+0x217>
    43ca:	29 8d       	ldd	r18, Y+25	; 0x19
    43cc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    43ce:	4b 8d       	ldd	r20, Y+27	; 0x1b
    43d0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    43d2:	21 50       	subi	r18, 0x01	; 1
    43d4:	30 40       	sbci	r19, 0x00	; 0
    43d6:	40 40       	sbci	r20, 0x00	; 0
    43d8:	50 40       	sbci	r21, 0x00	; 0
    43da:	29 8f       	std	Y+25, r18	; 0x19
    43dc:	3a 8f       	std	Y+26, r19	; 0x1a
    43de:	4b 8f       	std	Y+27, r20	; 0x1b
    43e0:	5c 8f       	std	Y+28, r21	; 0x1c
    43e2:	8e 0d       	add	r24, r14
    43e4:	9f 1d       	adc	r25, r15
    43e6:	a0 1f       	adc	r26, r16
    43e8:	b1 1f       	adc	r27, r17
    43ea:	8e 15       	cp	r24, r14
    43ec:	9f 05       	cpc	r25, r15
    43ee:	a0 07       	cpc	r26, r16
    43f0:	b1 07       	cpc	r27, r17
    43f2:	88 f0       	brcs	.+34     	; 0x4416 <__stack+0x217>
    43f4:	8a 15       	cp	r24, r10
    43f6:	9b 05       	cpc	r25, r11
    43f8:	ac 05       	cpc	r26, r12
    43fa:	bd 05       	cpc	r27, r13
    43fc:	60 f4       	brcc	.+24     	; 0x4416 <__stack+0x217>
    43fe:	21 50       	subi	r18, 0x01	; 1
    4400:	30 40       	sbci	r19, 0x00	; 0
    4402:	40 40       	sbci	r20, 0x00	; 0
    4404:	50 40       	sbci	r21, 0x00	; 0
    4406:	29 8f       	std	Y+25, r18	; 0x19
    4408:	3a 8f       	std	Y+26, r19	; 0x1a
    440a:	4b 8f       	std	Y+27, r20	; 0x1b
    440c:	5c 8f       	std	Y+28, r21	; 0x1c
    440e:	8e 0d       	add	r24, r14
    4410:	9f 1d       	adc	r25, r15
    4412:	a0 1f       	adc	r26, r16
    4414:	b1 1f       	adc	r27, r17
    4416:	ac 01       	movw	r20, r24
    4418:	bd 01       	movw	r22, r26
    441a:	4a 19       	sub	r20, r10
    441c:	5b 09       	sbc	r21, r11
    441e:	6c 09       	sbc	r22, r12
    4420:	7d 09       	sbc	r23, r13
    4422:	5a 01       	movw	r10, r20
    4424:	6b 01       	movw	r12, r22
    4426:	cb 01       	movw	r24, r22
    4428:	ba 01       	movw	r22, r20
    442a:	a4 01       	movw	r20, r8
    442c:	93 01       	movw	r18, r6
    442e:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    4432:	22 2e       	mov	r2, r18
    4434:	53 2e       	mov	r5, r19
    4436:	44 2e       	mov	r4, r20
    4438:	35 2e       	mov	r3, r21
    443a:	69 a3       	std	Y+33, r22	; 0x21
    443c:	7a a3       	std	Y+34, r23	; 0x22
    443e:	8b a3       	std	Y+35, r24	; 0x23
    4440:	9c a3       	std	Y+36, r25	; 0x24
    4442:	c6 01       	movw	r24, r12
    4444:	b5 01       	movw	r22, r10
    4446:	a4 01       	movw	r20, r8
    4448:	93 01       	movw	r18, r6
    444a:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    444e:	a2 2c       	mov	r10, r2
    4450:	b5 2c       	mov	r11, r5
    4452:	c4 2c       	mov	r12, r4
    4454:	d3 2c       	mov	r13, r3
    4456:	c6 01       	movw	r24, r12
    4458:	b5 01       	movw	r22, r10
    445a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    445c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    445e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4460:	58 a1       	ldd	r21, Y+32	; 0x20
    4462:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    4466:	3b 01       	movw	r6, r22
    4468:	4c 01       	movw	r8, r24
    446a:	69 a1       	ldd	r22, Y+33	; 0x21
    446c:	7a a1       	ldd	r23, Y+34	; 0x22
    446e:	8b a1       	ldd	r24, Y+35	; 0x23
    4470:	9c a1       	ldd	r25, Y+36	; 0x24
    4472:	ab 01       	movw	r20, r22
    4474:	33 27       	eor	r19, r19
    4476:	22 27       	eor	r18, r18
    4478:	8d a1       	ldd	r24, Y+37	; 0x25
    447a:	9e a1       	ldd	r25, Y+38	; 0x26
    447c:	af a1       	ldd	r26, Y+39	; 0x27
    447e:	b8 a5       	ldd	r27, Y+40	; 0x28
    4480:	a0 70       	andi	r26, 0x00	; 0
    4482:	b0 70       	andi	r27, 0x00	; 0
    4484:	28 2b       	or	r18, r24
    4486:	39 2b       	or	r19, r25
    4488:	4a 2b       	or	r20, r26
    448a:	5b 2b       	or	r21, r27
    448c:	26 15       	cp	r18, r6
    448e:	37 05       	cpc	r19, r7
    4490:	48 05       	cpc	r20, r8
    4492:	59 05       	cpc	r21, r9
    4494:	c0 f4       	brcc	.+48     	; 0x44c6 <__stack+0x2c7>
    4496:	08 94       	sec
    4498:	a1 08       	sbc	r10, r1
    449a:	b1 08       	sbc	r11, r1
    449c:	c1 08       	sbc	r12, r1
    449e:	d1 08       	sbc	r13, r1
    44a0:	2e 0d       	add	r18, r14
    44a2:	3f 1d       	adc	r19, r15
    44a4:	40 1f       	adc	r20, r16
    44a6:	51 1f       	adc	r21, r17
    44a8:	2e 15       	cp	r18, r14
    44aa:	3f 05       	cpc	r19, r15
    44ac:	40 07       	cpc	r20, r16
    44ae:	51 07       	cpc	r21, r17
    44b0:	50 f0       	brcs	.+20     	; 0x44c6 <__stack+0x2c7>
    44b2:	26 15       	cp	r18, r6
    44b4:	37 05       	cpc	r19, r7
    44b6:	48 05       	cpc	r20, r8
    44b8:	59 05       	cpc	r21, r9
    44ba:	28 f4       	brcc	.+10     	; 0x44c6 <__stack+0x2c7>
    44bc:	08 94       	sec
    44be:	a1 08       	sbc	r10, r1
    44c0:	b1 08       	sbc	r11, r1
    44c2:	c1 08       	sbc	r12, r1
    44c4:	d1 08       	sbc	r13, r1
    44c6:	89 8d       	ldd	r24, Y+25	; 0x19
    44c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    44ca:	ab 8d       	ldd	r26, Y+27	; 0x1b
    44cc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    44ce:	8c 01       	movw	r16, r24
    44d0:	ff 24       	eor	r15, r15
    44d2:	ee 24       	eor	r14, r14
    44d4:	ea 28       	or	r14, r10
    44d6:	fb 28       	or	r15, r11
    44d8:	0c 29       	or	r16, r12
    44da:	1d 29       	or	r17, r13
    44dc:	b3 c4       	rjmp	.+2406   	; 0x4e44 <__stack+0xc45>
    44de:	e1 14       	cp	r14, r1
    44e0:	f1 04       	cpc	r15, r1
    44e2:	01 05       	cpc	r16, r1
    44e4:	11 05       	cpc	r17, r1
    44e6:	59 f4       	brne	.+22     	; 0x44fe <__stack+0x2ff>
    44e8:	61 e0       	ldi	r22, 0x01	; 1
    44ea:	70 e0       	ldi	r23, 0x00	; 0
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	90 e0       	ldi	r25, 0x00	; 0
    44f0:	a8 01       	movw	r20, r16
    44f2:	97 01       	movw	r18, r14
    44f4:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    44f8:	79 01       	movw	r14, r18
    44fa:	8a 01       	movw	r16, r20
    44fc:	10 c0       	rjmp	.+32     	; 0x451e <__stack+0x31f>
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	e9 16       	cp	r14, r25
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	f9 06       	cpc	r15, r25
    4506:	91 e0       	ldi	r25, 0x01	; 1
    4508:	09 07       	cpc	r16, r25
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	19 07       	cpc	r17, r25
    450e:	58 f4       	brcc	.+22     	; 0x4526 <__stack+0x327>
    4510:	af ef       	ldi	r26, 0xFF	; 255
    4512:	ea 16       	cp	r14, r26
    4514:	f1 04       	cpc	r15, r1
    4516:	01 05       	cpc	r16, r1
    4518:	11 05       	cpc	r17, r1
    451a:	09 f0       	breq	.+2      	; 0x451e <__stack+0x31f>
    451c:	90 f4       	brcc	.+36     	; 0x4542 <__stack+0x343>
    451e:	20 e0       	ldi	r18, 0x00	; 0
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	a9 01       	movw	r20, r18
    4524:	17 c0       	rjmp	.+46     	; 0x4554 <__stack+0x355>
    4526:	b0 e0       	ldi	r27, 0x00	; 0
    4528:	eb 16       	cp	r14, r27
    452a:	b0 e0       	ldi	r27, 0x00	; 0
    452c:	fb 06       	cpc	r15, r27
    452e:	b0 e0       	ldi	r27, 0x00	; 0
    4530:	0b 07       	cpc	r16, r27
    4532:	b1 e0       	ldi	r27, 0x01	; 1
    4534:	1b 07       	cpc	r17, r27
    4536:	50 f4       	brcc	.+20     	; 0x454c <__stack+0x34d>
    4538:	20 e1       	ldi	r18, 0x10	; 16
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	40 e0       	ldi	r20, 0x00	; 0
    453e:	50 e0       	ldi	r21, 0x00	; 0
    4540:	09 c0       	rjmp	.+18     	; 0x4554 <__stack+0x355>
    4542:	28 e0       	ldi	r18, 0x08	; 8
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	40 e0       	ldi	r20, 0x00	; 0
    4548:	50 e0       	ldi	r21, 0x00	; 0
    454a:	04 c0       	rjmp	.+8      	; 0x4554 <__stack+0x355>
    454c:	28 e1       	ldi	r18, 0x18	; 24
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	40 e0       	ldi	r20, 0x00	; 0
    4552:	50 e0       	ldi	r21, 0x00	; 0
    4554:	d8 01       	movw	r26, r16
    4556:	c7 01       	movw	r24, r14
    4558:	02 2e       	mov	r0, r18
    455a:	04 c0       	rjmp	.+8      	; 0x4564 <__stack+0x365>
    455c:	b6 95       	lsr	r27
    455e:	a7 95       	ror	r26
    4560:	97 95       	ror	r25
    4562:	87 95       	ror	r24
    4564:	0a 94       	dec	r0
    4566:	d2 f7       	brpl	.-12     	; 0x455c <__stack+0x35d>
    4568:	89 54       	subi	r24, 0x49	; 73
    456a:	9d 4f       	sbci	r25, 0xFD	; 253
    456c:	fc 01       	movw	r30, r24
    456e:	80 81       	ld	r24, Z
    4570:	28 0f       	add	r18, r24
    4572:	31 1d       	adc	r19, r1
    4574:	41 1d       	adc	r20, r1
    4576:	51 1d       	adc	r21, r1
    4578:	80 e2       	ldi	r24, 0x20	; 32
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	a0 e0       	ldi	r26, 0x00	; 0
    457e:	b0 e0       	ldi	r27, 0x00	; 0
    4580:	82 1b       	sub	r24, r18
    4582:	93 0b       	sbc	r25, r19
    4584:	a4 0b       	sbc	r26, r20
    4586:	b5 0b       	sbc	r27, r21
    4588:	61 f4       	brne	.+24     	; 0x45a2 <__stack+0x3a3>
    458a:	15 01       	movw	r2, r10
    458c:	26 01       	movw	r4, r12
    458e:	2e 18       	sub	r2, r14
    4590:	3f 08       	sbc	r3, r15
    4592:	40 0a       	sbc	r4, r16
    4594:	51 0a       	sbc	r5, r17
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	a8 2e       	mov	r10, r24
    459a:	b1 2c       	mov	r11, r1
    459c:	c1 2c       	mov	r12, r1
    459e:	d1 2c       	mov	r13, r1
    45a0:	29 c1       	rjmp	.+594    	; 0x47f4 <__stack+0x5f5>
    45a2:	08 2e       	mov	r0, r24
    45a4:	04 c0       	rjmp	.+8      	; 0x45ae <__stack+0x3af>
    45a6:	ee 0c       	add	r14, r14
    45a8:	ff 1c       	adc	r15, r15
    45aa:	00 1f       	adc	r16, r16
    45ac:	11 1f       	adc	r17, r17
    45ae:	0a 94       	dec	r0
    45b0:	d2 f7       	brpl	.-12     	; 0x45a6 <__stack+0x3a7>
    45b2:	15 01       	movw	r2, r10
    45b4:	26 01       	movw	r4, r12
    45b6:	02 2e       	mov	r0, r18
    45b8:	04 c0       	rjmp	.+8      	; 0x45c2 <__stack+0x3c3>
    45ba:	56 94       	lsr	r5
    45bc:	47 94       	ror	r4
    45be:	37 94       	ror	r3
    45c0:	27 94       	ror	r2
    45c2:	0a 94       	dec	r0
    45c4:	d2 f7       	brpl	.-12     	; 0x45ba <__stack+0x3bb>
    45c6:	29 8e       	std	Y+25, r2	; 0x19
    45c8:	3a 8e       	std	Y+26, r3	; 0x1a
    45ca:	4b 8e       	std	Y+27, r4	; 0x1b
    45cc:	5c 8e       	std	Y+28, r5	; 0x1c
    45ce:	b6 01       	movw	r22, r12
    45d0:	a5 01       	movw	r20, r10
    45d2:	08 2e       	mov	r0, r24
    45d4:	04 c0       	rjmp	.+8      	; 0x45de <__stack+0x3df>
    45d6:	44 0f       	add	r20, r20
    45d8:	55 1f       	adc	r21, r21
    45da:	66 1f       	adc	r22, r22
    45dc:	77 1f       	adc	r23, r23
    45de:	0a 94       	dec	r0
    45e0:	d2 f7       	brpl	.-12     	; 0x45d6 <__stack+0x3d7>
    45e2:	4d 8f       	std	Y+29, r20	; 0x1d
    45e4:	5e 8f       	std	Y+30, r21	; 0x1e
    45e6:	6f 8f       	std	Y+31, r22	; 0x1f
    45e8:	78 a3       	std	Y+32, r23	; 0x20
    45ea:	2d a0       	ldd	r2, Y+37	; 0x25
    45ec:	3e a0       	ldd	r3, Y+38	; 0x26
    45ee:	4f a0       	ldd	r4, Y+39	; 0x27
    45f0:	58 a4       	ldd	r5, Y+40	; 0x28
    45f2:	04 c0       	rjmp	.+8      	; 0x45fc <__stack+0x3fd>
    45f4:	56 94       	lsr	r5
    45f6:	47 94       	ror	r4
    45f8:	37 94       	ror	r3
    45fa:	27 94       	ror	r2
    45fc:	2a 95       	dec	r18
    45fe:	d2 f7       	brpl	.-12     	; 0x45f4 <__stack+0x3f5>
    4600:	ad 8c       	ldd	r10, Y+29	; 0x1d
    4602:	be 8c       	ldd	r11, Y+30	; 0x1e
    4604:	cf 8c       	ldd	r12, Y+31	; 0x1f
    4606:	d8 a0       	ldd	r13, Y+32	; 0x20
    4608:	a2 28       	or	r10, r2
    460a:	b3 28       	or	r11, r3
    460c:	c4 28       	or	r12, r4
    460e:	d5 28       	or	r13, r5
    4610:	ad 8e       	std	Y+29, r10	; 0x1d
    4612:	be 8e       	std	Y+30, r11	; 0x1e
    4614:	cf 8e       	std	Y+31, r12	; 0x1f
    4616:	d8 a2       	std	Y+32, r13	; 0x20
    4618:	2d a1       	ldd	r18, Y+37	; 0x25
    461a:	3e a1       	ldd	r19, Y+38	; 0x26
    461c:	4f a1       	ldd	r20, Y+39	; 0x27
    461e:	58 a5       	ldd	r21, Y+40	; 0x28
    4620:	04 c0       	rjmp	.+8      	; 0x462a <__stack+0x42b>
    4622:	22 0f       	add	r18, r18
    4624:	33 1f       	adc	r19, r19
    4626:	44 1f       	adc	r20, r20
    4628:	55 1f       	adc	r21, r21
    462a:	8a 95       	dec	r24
    462c:	d2 f7       	brpl	.-12     	; 0x4622 <__stack+0x423>
    462e:	2d a3       	std	Y+37, r18	; 0x25
    4630:	3e a3       	std	Y+38, r19	; 0x26
    4632:	4f a3       	std	Y+39, r20	; 0x27
    4634:	58 a7       	std	Y+40, r21	; 0x28
    4636:	38 01       	movw	r6, r16
    4638:	88 24       	eor	r8, r8
    463a:	99 24       	eor	r9, r9
    463c:	b8 01       	movw	r22, r16
    463e:	a7 01       	movw	r20, r14
    4640:	60 70       	andi	r22, 0x00	; 0
    4642:	70 70       	andi	r23, 0x00	; 0
    4644:	49 a3       	std	Y+33, r20	; 0x21
    4646:	5a a3       	std	Y+34, r21	; 0x22
    4648:	6b a3       	std	Y+35, r22	; 0x23
    464a:	7c a3       	std	Y+36, r23	; 0x24
    464c:	69 8d       	ldd	r22, Y+25	; 0x19
    464e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4654:	a4 01       	movw	r20, r8
    4656:	93 01       	movw	r18, r6
    4658:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    465c:	22 2e       	mov	r2, r18
    465e:	53 2e       	mov	r5, r19
    4660:	44 2e       	mov	r4, r20
    4662:	35 2e       	mov	r3, r21
    4664:	69 a7       	std	Y+41, r22	; 0x29
    4666:	7a a7       	std	Y+42, r23	; 0x2a
    4668:	8b a7       	std	Y+43, r24	; 0x2b
    466a:	9c a7       	std	Y+44, r25	; 0x2c
    466c:	69 8d       	ldd	r22, Y+25	; 0x19
    466e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4670:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4672:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4674:	a4 01       	movw	r20, r8
    4676:	93 01       	movw	r18, r6
    4678:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    467c:	a2 2c       	mov	r10, r2
    467e:	b5 2c       	mov	r11, r5
    4680:	c4 2c       	mov	r12, r4
    4682:	d3 2c       	mov	r13, r3
    4684:	a9 8e       	std	Y+25, r10	; 0x19
    4686:	ba 8e       	std	Y+26, r11	; 0x1a
    4688:	cb 8e       	std	Y+27, r12	; 0x1b
    468a:	dc 8e       	std	Y+28, r13	; 0x1c
    468c:	c6 01       	movw	r24, r12
    468e:	b5 01       	movw	r22, r10
    4690:	29 a1       	ldd	r18, Y+33	; 0x21
    4692:	3a a1       	ldd	r19, Y+34	; 0x22
    4694:	4b a1       	ldd	r20, Y+35	; 0x23
    4696:	5c a1       	ldd	r21, Y+36	; 0x24
    4698:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    469c:	5b 01       	movw	r10, r22
    469e:	6c 01       	movw	r12, r24
    46a0:	29 a4       	ldd	r2, Y+41	; 0x29
    46a2:	3a a4       	ldd	r3, Y+42	; 0x2a
    46a4:	4b a4       	ldd	r4, Y+43	; 0x2b
    46a6:	5c a4       	ldd	r5, Y+44	; 0x2c
    46a8:	d1 01       	movw	r26, r2
    46aa:	99 27       	eor	r25, r25
    46ac:	88 27       	eor	r24, r24
    46ae:	2d 8c       	ldd	r2, Y+29	; 0x1d
    46b0:	3e 8c       	ldd	r3, Y+30	; 0x1e
    46b2:	4f 8c       	ldd	r4, Y+31	; 0x1f
    46b4:	58 a0       	ldd	r5, Y+32	; 0x20
    46b6:	92 01       	movw	r18, r4
    46b8:	44 27       	eor	r20, r20
    46ba:	55 27       	eor	r21, r21
    46bc:	82 2b       	or	r24, r18
    46be:	93 2b       	or	r25, r19
    46c0:	a4 2b       	or	r26, r20
    46c2:	b5 2b       	or	r27, r21
    46c4:	8a 15       	cp	r24, r10
    46c6:	9b 05       	cpc	r25, r11
    46c8:	ac 05       	cpc	r26, r12
    46ca:	bd 05       	cpc	r27, r13
    46cc:	30 f5       	brcc	.+76     	; 0x471a <__stack+0x51b>
    46ce:	29 8d       	ldd	r18, Y+25	; 0x19
    46d0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    46d2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    46d4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    46d6:	21 50       	subi	r18, 0x01	; 1
    46d8:	30 40       	sbci	r19, 0x00	; 0
    46da:	40 40       	sbci	r20, 0x00	; 0
    46dc:	50 40       	sbci	r21, 0x00	; 0
    46de:	29 8f       	std	Y+25, r18	; 0x19
    46e0:	3a 8f       	std	Y+26, r19	; 0x1a
    46e2:	4b 8f       	std	Y+27, r20	; 0x1b
    46e4:	5c 8f       	std	Y+28, r21	; 0x1c
    46e6:	8e 0d       	add	r24, r14
    46e8:	9f 1d       	adc	r25, r15
    46ea:	a0 1f       	adc	r26, r16
    46ec:	b1 1f       	adc	r27, r17
    46ee:	8e 15       	cp	r24, r14
    46f0:	9f 05       	cpc	r25, r15
    46f2:	a0 07       	cpc	r26, r16
    46f4:	b1 07       	cpc	r27, r17
    46f6:	88 f0       	brcs	.+34     	; 0x471a <__stack+0x51b>
    46f8:	8a 15       	cp	r24, r10
    46fa:	9b 05       	cpc	r25, r11
    46fc:	ac 05       	cpc	r26, r12
    46fe:	bd 05       	cpc	r27, r13
    4700:	60 f4       	brcc	.+24     	; 0x471a <__stack+0x51b>
    4702:	21 50       	subi	r18, 0x01	; 1
    4704:	30 40       	sbci	r19, 0x00	; 0
    4706:	40 40       	sbci	r20, 0x00	; 0
    4708:	50 40       	sbci	r21, 0x00	; 0
    470a:	29 8f       	std	Y+25, r18	; 0x19
    470c:	3a 8f       	std	Y+26, r19	; 0x1a
    470e:	4b 8f       	std	Y+27, r20	; 0x1b
    4710:	5c 8f       	std	Y+28, r21	; 0x1c
    4712:	8e 0d       	add	r24, r14
    4714:	9f 1d       	adc	r25, r15
    4716:	a0 1f       	adc	r26, r16
    4718:	b1 1f       	adc	r27, r17
    471a:	ac 01       	movw	r20, r24
    471c:	bd 01       	movw	r22, r26
    471e:	4a 19       	sub	r20, r10
    4720:	5b 09       	sbc	r21, r11
    4722:	6c 09       	sbc	r22, r12
    4724:	7d 09       	sbc	r23, r13
    4726:	5a 01       	movw	r10, r20
    4728:	6b 01       	movw	r12, r22
    472a:	cb 01       	movw	r24, r22
    472c:	ba 01       	movw	r22, r20
    472e:	a4 01       	movw	r20, r8
    4730:	93 01       	movw	r18, r6
    4732:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    4736:	22 2e       	mov	r2, r18
    4738:	53 2e       	mov	r5, r19
    473a:	44 2e       	mov	r4, r20
    473c:	35 2e       	mov	r3, r21
    473e:	69 a7       	std	Y+41, r22	; 0x29
    4740:	7a a7       	std	Y+42, r23	; 0x2a
    4742:	8b a7       	std	Y+43, r24	; 0x2b
    4744:	9c a7       	std	Y+44, r25	; 0x2c
    4746:	c6 01       	movw	r24, r12
    4748:	b5 01       	movw	r22, r10
    474a:	a4 01       	movw	r20, r8
    474c:	93 01       	movw	r18, r6
    474e:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    4752:	62 2c       	mov	r6, r2
    4754:	75 2c       	mov	r7, r5
    4756:	84 2c       	mov	r8, r4
    4758:	93 2c       	mov	r9, r3
    475a:	c4 01       	movw	r24, r8
    475c:	b3 01       	movw	r22, r6
    475e:	29 a1       	ldd	r18, Y+33	; 0x21
    4760:	3a a1       	ldd	r19, Y+34	; 0x22
    4762:	4b a1       	ldd	r20, Y+35	; 0x23
    4764:	5c a1       	ldd	r21, Y+36	; 0x24
    4766:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    476a:	9b 01       	movw	r18, r22
    476c:	ac 01       	movw	r20, r24
    476e:	69 a5       	ldd	r22, Y+41	; 0x29
    4770:	7a a5       	ldd	r23, Y+42	; 0x2a
    4772:	8b a5       	ldd	r24, Y+43	; 0x2b
    4774:	9c a5       	ldd	r25, Y+44	; 0x2c
    4776:	6b 01       	movw	r12, r22
    4778:	bb 24       	eor	r11, r11
    477a:	aa 24       	eor	r10, r10
    477c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    477e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4780:	af 8d       	ldd	r26, Y+31	; 0x1f
    4782:	b8 a1       	ldd	r27, Y+32	; 0x20
    4784:	a0 70       	andi	r26, 0x00	; 0
    4786:	b0 70       	andi	r27, 0x00	; 0
    4788:	a8 2a       	or	r10, r24
    478a:	b9 2a       	or	r11, r25
    478c:	ca 2a       	or	r12, r26
    478e:	db 2a       	or	r13, r27
    4790:	a2 16       	cp	r10, r18
    4792:	b3 06       	cpc	r11, r19
    4794:	c4 06       	cpc	r12, r20
    4796:	d5 06       	cpc	r13, r21
    4798:	e0 f4       	brcc	.+56     	; 0x47d2 <__stack+0x5d3>
    479a:	08 94       	sec
    479c:	61 08       	sbc	r6, r1
    479e:	71 08       	sbc	r7, r1
    47a0:	81 08       	sbc	r8, r1
    47a2:	91 08       	sbc	r9, r1
    47a4:	ae 0c       	add	r10, r14
    47a6:	bf 1c       	adc	r11, r15
    47a8:	c0 1e       	adc	r12, r16
    47aa:	d1 1e       	adc	r13, r17
    47ac:	ae 14       	cp	r10, r14
    47ae:	bf 04       	cpc	r11, r15
    47b0:	c0 06       	cpc	r12, r16
    47b2:	d1 06       	cpc	r13, r17
    47b4:	70 f0       	brcs	.+28     	; 0x47d2 <__stack+0x5d3>
    47b6:	a2 16       	cp	r10, r18
    47b8:	b3 06       	cpc	r11, r19
    47ba:	c4 06       	cpc	r12, r20
    47bc:	d5 06       	cpc	r13, r21
    47be:	48 f4       	brcc	.+18     	; 0x47d2 <__stack+0x5d3>
    47c0:	08 94       	sec
    47c2:	61 08       	sbc	r6, r1
    47c4:	71 08       	sbc	r7, r1
    47c6:	81 08       	sbc	r8, r1
    47c8:	91 08       	sbc	r9, r1
    47ca:	ae 0c       	add	r10, r14
    47cc:	bf 1c       	adc	r11, r15
    47ce:	c0 1e       	adc	r12, r16
    47d0:	d1 1e       	adc	r13, r17
    47d2:	15 01       	movw	r2, r10
    47d4:	26 01       	movw	r4, r12
    47d6:	22 1a       	sub	r2, r18
    47d8:	33 0a       	sbc	r3, r19
    47da:	44 0a       	sbc	r4, r20
    47dc:	55 0a       	sbc	r5, r21
    47de:	89 8d       	ldd	r24, Y+25	; 0x19
    47e0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    47e2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    47e4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    47e6:	6c 01       	movw	r12, r24
    47e8:	bb 24       	eor	r11, r11
    47ea:	aa 24       	eor	r10, r10
    47ec:	a6 28       	or	r10, r6
    47ee:	b7 28       	or	r11, r7
    47f0:	c8 28       	or	r12, r8
    47f2:	d9 28       	or	r13, r9
    47f4:	98 01       	movw	r18, r16
    47f6:	44 27       	eor	r20, r20
    47f8:	55 27       	eor	r21, r21
    47fa:	2d 8f       	std	Y+29, r18	; 0x1d
    47fc:	3e 8f       	std	Y+30, r19	; 0x1e
    47fe:	4f 8f       	std	Y+31, r20	; 0x1f
    4800:	58 a3       	std	Y+32, r21	; 0x20
    4802:	b8 01       	movw	r22, r16
    4804:	a7 01       	movw	r20, r14
    4806:	60 70       	andi	r22, 0x00	; 0
    4808:	70 70       	andi	r23, 0x00	; 0
    480a:	49 a3       	std	Y+33, r20	; 0x21
    480c:	5a a3       	std	Y+34, r21	; 0x22
    480e:	6b a3       	std	Y+35, r22	; 0x23
    4810:	7c a3       	std	Y+36, r23	; 0x24
    4812:	c2 01       	movw	r24, r4
    4814:	b1 01       	movw	r22, r2
    4816:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4818:	3e 8d       	ldd	r19, Y+30	; 0x1e
    481a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    481c:	58 a1       	ldd	r21, Y+32	; 0x20
    481e:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    4822:	62 2e       	mov	r6, r18
    4824:	93 2e       	mov	r9, r19
    4826:	84 2e       	mov	r8, r20
    4828:	75 2e       	mov	r7, r21
    482a:	69 a7       	std	Y+41, r22	; 0x29
    482c:	7a a7       	std	Y+42, r23	; 0x2a
    482e:	8b a7       	std	Y+43, r24	; 0x2b
    4830:	9c a7       	std	Y+44, r25	; 0x2c
    4832:	c2 01       	movw	r24, r4
    4834:	b1 01       	movw	r22, r2
    4836:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4838:	3e 8d       	ldd	r19, Y+30	; 0x1e
    483a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    483c:	58 a1       	ldd	r21, Y+32	; 0x20
    483e:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    4842:	86 2d       	mov	r24, r6
    4844:	99 2d       	mov	r25, r9
    4846:	a8 2d       	mov	r26, r8
    4848:	b7 2d       	mov	r27, r7
    484a:	89 8f       	std	Y+25, r24	; 0x19
    484c:	9a 8f       	std	Y+26, r25	; 0x1a
    484e:	ab 8f       	std	Y+27, r26	; 0x1b
    4850:	bc 8f       	std	Y+28, r27	; 0x1c
    4852:	bc 01       	movw	r22, r24
    4854:	cd 01       	movw	r24, r26
    4856:	29 a1       	ldd	r18, Y+33	; 0x21
    4858:	3a a1       	ldd	r19, Y+34	; 0x22
    485a:	4b a1       	ldd	r20, Y+35	; 0x23
    485c:	5c a1       	ldd	r21, Y+36	; 0x24
    485e:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    4862:	3b 01       	movw	r6, r22
    4864:	4c 01       	movw	r8, r24
    4866:	29 a4       	ldd	r2, Y+41	; 0x29
    4868:	3a a4       	ldd	r3, Y+42	; 0x2a
    486a:	4b a4       	ldd	r4, Y+43	; 0x2b
    486c:	5c a4       	ldd	r5, Y+44	; 0x2c
    486e:	d1 01       	movw	r26, r2
    4870:	99 27       	eor	r25, r25
    4872:	88 27       	eor	r24, r24
    4874:	2d a0       	ldd	r2, Y+37	; 0x25
    4876:	3e a0       	ldd	r3, Y+38	; 0x26
    4878:	4f a0       	ldd	r4, Y+39	; 0x27
    487a:	58 a4       	ldd	r5, Y+40	; 0x28
    487c:	92 01       	movw	r18, r4
    487e:	44 27       	eor	r20, r20
    4880:	55 27       	eor	r21, r21
    4882:	82 2b       	or	r24, r18
    4884:	93 2b       	or	r25, r19
    4886:	a4 2b       	or	r26, r20
    4888:	b5 2b       	or	r27, r21
    488a:	86 15       	cp	r24, r6
    488c:	97 05       	cpc	r25, r7
    488e:	a8 05       	cpc	r26, r8
    4890:	b9 05       	cpc	r27, r9
    4892:	30 f5       	brcc	.+76     	; 0x48e0 <__stack+0x6e1>
    4894:	29 8d       	ldd	r18, Y+25	; 0x19
    4896:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4898:	4b 8d       	ldd	r20, Y+27	; 0x1b
    489a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    489c:	21 50       	subi	r18, 0x01	; 1
    489e:	30 40       	sbci	r19, 0x00	; 0
    48a0:	40 40       	sbci	r20, 0x00	; 0
    48a2:	50 40       	sbci	r21, 0x00	; 0
    48a4:	29 8f       	std	Y+25, r18	; 0x19
    48a6:	3a 8f       	std	Y+26, r19	; 0x1a
    48a8:	4b 8f       	std	Y+27, r20	; 0x1b
    48aa:	5c 8f       	std	Y+28, r21	; 0x1c
    48ac:	8e 0d       	add	r24, r14
    48ae:	9f 1d       	adc	r25, r15
    48b0:	a0 1f       	adc	r26, r16
    48b2:	b1 1f       	adc	r27, r17
    48b4:	8e 15       	cp	r24, r14
    48b6:	9f 05       	cpc	r25, r15
    48b8:	a0 07       	cpc	r26, r16
    48ba:	b1 07       	cpc	r27, r17
    48bc:	88 f0       	brcs	.+34     	; 0x48e0 <__stack+0x6e1>
    48be:	86 15       	cp	r24, r6
    48c0:	97 05       	cpc	r25, r7
    48c2:	a8 05       	cpc	r26, r8
    48c4:	b9 05       	cpc	r27, r9
    48c6:	60 f4       	brcc	.+24     	; 0x48e0 <__stack+0x6e1>
    48c8:	21 50       	subi	r18, 0x01	; 1
    48ca:	30 40       	sbci	r19, 0x00	; 0
    48cc:	40 40       	sbci	r20, 0x00	; 0
    48ce:	50 40       	sbci	r21, 0x00	; 0
    48d0:	29 8f       	std	Y+25, r18	; 0x19
    48d2:	3a 8f       	std	Y+26, r19	; 0x1a
    48d4:	4b 8f       	std	Y+27, r20	; 0x1b
    48d6:	5c 8f       	std	Y+28, r21	; 0x1c
    48d8:	8e 0d       	add	r24, r14
    48da:	9f 1d       	adc	r25, r15
    48dc:	a0 1f       	adc	r26, r16
    48de:	b1 1f       	adc	r27, r17
    48e0:	ac 01       	movw	r20, r24
    48e2:	bd 01       	movw	r22, r26
    48e4:	46 19       	sub	r20, r6
    48e6:	57 09       	sbc	r21, r7
    48e8:	68 09       	sbc	r22, r8
    48ea:	79 09       	sbc	r23, r9
    48ec:	3a 01       	movw	r6, r20
    48ee:	4b 01       	movw	r8, r22
    48f0:	cb 01       	movw	r24, r22
    48f2:	ba 01       	movw	r22, r20
    48f4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    48f6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    48f8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    48fa:	58 a1       	ldd	r21, Y+32	; 0x20
    48fc:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    4900:	52 2e       	mov	r5, r18
    4902:	43 2e       	mov	r4, r19
    4904:	34 2e       	mov	r3, r20
    4906:	25 2e       	mov	r2, r21
    4908:	69 a7       	std	Y+41, r22	; 0x29
    490a:	7a a7       	std	Y+42, r23	; 0x2a
    490c:	8b a7       	std	Y+43, r24	; 0x2b
    490e:	9c a7       	std	Y+44, r25	; 0x2c
    4910:	c4 01       	movw	r24, r8
    4912:	b3 01       	movw	r22, r6
    4914:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4916:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4918:	4f 8d       	ldd	r20, Y+31	; 0x1f
    491a:	58 a1       	ldd	r21, Y+32	; 0x20
    491c:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    4920:	65 2c       	mov	r6, r5
    4922:	74 2c       	mov	r7, r4
    4924:	83 2c       	mov	r8, r3
    4926:	92 2c       	mov	r9, r2
    4928:	c4 01       	movw	r24, r8
    492a:	b3 01       	movw	r22, r6
    492c:	29 a1       	ldd	r18, Y+33	; 0x21
    492e:	3a a1       	ldd	r19, Y+34	; 0x22
    4930:	4b a1       	ldd	r20, Y+35	; 0x23
    4932:	5c a1       	ldd	r21, Y+36	; 0x24
    4934:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    4938:	1b 01       	movw	r2, r22
    493a:	2c 01       	movw	r4, r24
    493c:	69 a5       	ldd	r22, Y+41	; 0x29
    493e:	7a a5       	ldd	r23, Y+42	; 0x2a
    4940:	8b a5       	ldd	r24, Y+43	; 0x2b
    4942:	9c a5       	ldd	r25, Y+44	; 0x2c
    4944:	ab 01       	movw	r20, r22
    4946:	33 27       	eor	r19, r19
    4948:	22 27       	eor	r18, r18
    494a:	8d a1       	ldd	r24, Y+37	; 0x25
    494c:	9e a1       	ldd	r25, Y+38	; 0x26
    494e:	af a1       	ldd	r26, Y+39	; 0x27
    4950:	b8 a5       	ldd	r27, Y+40	; 0x28
    4952:	a0 70       	andi	r26, 0x00	; 0
    4954:	b0 70       	andi	r27, 0x00	; 0
    4956:	28 2b       	or	r18, r24
    4958:	39 2b       	or	r19, r25
    495a:	4a 2b       	or	r20, r26
    495c:	5b 2b       	or	r21, r27
    495e:	22 15       	cp	r18, r2
    4960:	33 05       	cpc	r19, r3
    4962:	44 05       	cpc	r20, r4
    4964:	55 05       	cpc	r21, r5
    4966:	c0 f4       	brcc	.+48     	; 0x4998 <__stack+0x799>
    4968:	08 94       	sec
    496a:	61 08       	sbc	r6, r1
    496c:	71 08       	sbc	r7, r1
    496e:	81 08       	sbc	r8, r1
    4970:	91 08       	sbc	r9, r1
    4972:	2e 0d       	add	r18, r14
    4974:	3f 1d       	adc	r19, r15
    4976:	40 1f       	adc	r20, r16
    4978:	51 1f       	adc	r21, r17
    497a:	2e 15       	cp	r18, r14
    497c:	3f 05       	cpc	r19, r15
    497e:	40 07       	cpc	r20, r16
    4980:	51 07       	cpc	r21, r17
    4982:	50 f0       	brcs	.+20     	; 0x4998 <__stack+0x799>
    4984:	22 15       	cp	r18, r2
    4986:	33 05       	cpc	r19, r3
    4988:	44 05       	cpc	r20, r4
    498a:	55 05       	cpc	r21, r5
    498c:	28 f4       	brcc	.+10     	; 0x4998 <__stack+0x799>
    498e:	08 94       	sec
    4990:	61 08       	sbc	r6, r1
    4992:	71 08       	sbc	r7, r1
    4994:	81 08       	sbc	r8, r1
    4996:	91 08       	sbc	r9, r1
    4998:	89 8d       	ldd	r24, Y+25	; 0x19
    499a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    499c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    499e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    49a0:	8c 01       	movw	r16, r24
    49a2:	ff 24       	eor	r15, r15
    49a4:	ee 24       	eor	r14, r14
    49a6:	e6 28       	or	r14, r6
    49a8:	f7 28       	or	r15, r7
    49aa:	08 29       	or	r16, r8
    49ac:	19 29       	or	r17, r9
    49ae:	4d c2       	rjmp	.+1178   	; 0x4e4a <__stack+0xc4b>
    49b0:	a2 16       	cp	r10, r18
    49b2:	b3 06       	cpc	r11, r19
    49b4:	c4 06       	cpc	r12, r20
    49b6:	d5 06       	cpc	r13, r21
    49b8:	08 f4       	brcc	.+2      	; 0x49bc <__stack+0x7bd>
    49ba:	34 c2       	rjmp	.+1128   	; 0x4e24 <__stack+0xc25>
    49bc:	20 30       	cpi	r18, 0x00	; 0
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	39 07       	cpc	r19, r25
    49c2:	91 e0       	ldi	r25, 0x01	; 1
    49c4:	49 07       	cpc	r20, r25
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	59 07       	cpc	r21, r25
    49ca:	50 f4       	brcc	.+20     	; 0x49e0 <__stack+0x7e1>
    49cc:	2f 3f       	cpi	r18, 0xFF	; 255
    49ce:	31 05       	cpc	r19, r1
    49d0:	41 05       	cpc	r20, r1
    49d2:	51 05       	cpc	r21, r1
    49d4:	09 f0       	breq	.+2      	; 0x49d8 <__stack+0x7d9>
    49d6:	90 f4       	brcc	.+36     	; 0x49fc <__stack+0x7fd>
    49d8:	66 24       	eor	r6, r6
    49da:	77 24       	eor	r7, r7
    49dc:	43 01       	movw	r8, r6
    49de:	19 c0       	rjmp	.+50     	; 0x4a12 <__stack+0x813>
    49e0:	20 30       	cpi	r18, 0x00	; 0
    49e2:	a0 e0       	ldi	r26, 0x00	; 0
    49e4:	3a 07       	cpc	r19, r26
    49e6:	a0 e0       	ldi	r26, 0x00	; 0
    49e8:	4a 07       	cpc	r20, r26
    49ea:	a1 e0       	ldi	r26, 0x01	; 1
    49ec:	5a 07       	cpc	r21, r26
    49ee:	60 f4       	brcc	.+24     	; 0x4a08 <__stack+0x809>
    49f0:	90 e1       	ldi	r25, 0x10	; 16
    49f2:	69 2e       	mov	r6, r25
    49f4:	71 2c       	mov	r7, r1
    49f6:	81 2c       	mov	r8, r1
    49f8:	91 2c       	mov	r9, r1
    49fa:	0b c0       	rjmp	.+22     	; 0x4a12 <__stack+0x813>
    49fc:	88 e0       	ldi	r24, 0x08	; 8
    49fe:	68 2e       	mov	r6, r24
    4a00:	71 2c       	mov	r7, r1
    4a02:	81 2c       	mov	r8, r1
    4a04:	91 2c       	mov	r9, r1
    4a06:	05 c0       	rjmp	.+10     	; 0x4a12 <__stack+0x813>
    4a08:	b8 e1       	ldi	r27, 0x18	; 24
    4a0a:	6b 2e       	mov	r6, r27
    4a0c:	71 2c       	mov	r7, r1
    4a0e:	81 2c       	mov	r8, r1
    4a10:	91 2c       	mov	r9, r1
    4a12:	da 01       	movw	r26, r20
    4a14:	c9 01       	movw	r24, r18
    4a16:	06 2c       	mov	r0, r6
    4a18:	04 c0       	rjmp	.+8      	; 0x4a22 <__stack+0x823>
    4a1a:	b6 95       	lsr	r27
    4a1c:	a7 95       	ror	r26
    4a1e:	97 95       	ror	r25
    4a20:	87 95       	ror	r24
    4a22:	0a 94       	dec	r0
    4a24:	d2 f7       	brpl	.-12     	; 0x4a1a <__stack+0x81b>
    4a26:	89 54       	subi	r24, 0x49	; 73
    4a28:	9d 4f       	sbci	r25, 0xFD	; 253
    4a2a:	fc 01       	movw	r30, r24
    4a2c:	80 81       	ld	r24, Z
    4a2e:	68 0e       	add	r6, r24
    4a30:	71 1c       	adc	r7, r1
    4a32:	81 1c       	adc	r8, r1
    4a34:	91 1c       	adc	r9, r1
    4a36:	80 e2       	ldi	r24, 0x20	; 32
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	a0 e0       	ldi	r26, 0x00	; 0
    4a3c:	b0 e0       	ldi	r27, 0x00	; 0
    4a3e:	86 19       	sub	r24, r6
    4a40:	97 09       	sbc	r25, r7
    4a42:	a8 09       	sbc	r26, r8
    4a44:	b9 09       	sbc	r27, r9
    4a46:	89 f4       	brne	.+34     	; 0x4a6a <__stack+0x86b>
    4a48:	2a 15       	cp	r18, r10
    4a4a:	3b 05       	cpc	r19, r11
    4a4c:	4c 05       	cpc	r20, r12
    4a4e:	5d 05       	cpc	r21, r13
    4a50:	08 f4       	brcc	.+2      	; 0x4a54 <__stack+0x855>
    4a52:	ef c1       	rjmp	.+990    	; 0x4e32 <__stack+0xc33>
    4a54:	2d a0       	ldd	r2, Y+37	; 0x25
    4a56:	3e a0       	ldd	r3, Y+38	; 0x26
    4a58:	4f a0       	ldd	r4, Y+39	; 0x27
    4a5a:	58 a4       	ldd	r5, Y+40	; 0x28
    4a5c:	2e 14       	cp	r2, r14
    4a5e:	3f 04       	cpc	r3, r15
    4a60:	40 06       	cpc	r4, r16
    4a62:	51 06       	cpc	r5, r17
    4a64:	08 f0       	brcs	.+2      	; 0x4a68 <__stack+0x869>
    4a66:	e5 c1       	rjmp	.+970    	; 0x4e32 <__stack+0xc33>
    4a68:	dd c1       	rjmp	.+954    	; 0x4e24 <__stack+0xc25>
    4a6a:	89 a7       	std	Y+41, r24	; 0x29
    4a6c:	19 01       	movw	r2, r18
    4a6e:	2a 01       	movw	r4, r20
    4a70:	04 c0       	rjmp	.+8      	; 0x4a7a <__stack+0x87b>
    4a72:	22 0c       	add	r2, r2
    4a74:	33 1c       	adc	r3, r3
    4a76:	44 1c       	adc	r4, r4
    4a78:	55 1c       	adc	r5, r5
    4a7a:	8a 95       	dec	r24
    4a7c:	d2 f7       	brpl	.-12     	; 0x4a72 <__stack+0x873>
    4a7e:	d8 01       	movw	r26, r16
    4a80:	c7 01       	movw	r24, r14
    4a82:	06 2c       	mov	r0, r6
    4a84:	04 c0       	rjmp	.+8      	; 0x4a8e <__stack+0x88f>
    4a86:	b6 95       	lsr	r27
    4a88:	a7 95       	ror	r26
    4a8a:	97 95       	ror	r25
    4a8c:	87 95       	ror	r24
    4a8e:	0a 94       	dec	r0
    4a90:	d2 f7       	brpl	.-12     	; 0x4a86 <__stack+0x887>
    4a92:	28 2a       	or	r2, r24
    4a94:	39 2a       	or	r3, r25
    4a96:	4a 2a       	or	r4, r26
    4a98:	5b 2a       	or	r5, r27
    4a9a:	a8 01       	movw	r20, r16
    4a9c:	97 01       	movw	r18, r14
    4a9e:	09 a4       	ldd	r0, Y+41	; 0x29
    4aa0:	04 c0       	rjmp	.+8      	; 0x4aaa <__stack+0x8ab>
    4aa2:	22 0f       	add	r18, r18
    4aa4:	33 1f       	adc	r19, r19
    4aa6:	44 1f       	adc	r20, r20
    4aa8:	55 1f       	adc	r21, r21
    4aaa:	0a 94       	dec	r0
    4aac:	d2 f7       	brpl	.-12     	; 0x4aa2 <__stack+0x8a3>
    4aae:	29 ab       	std	Y+49, r18	; 0x31
    4ab0:	3a ab       	std	Y+50, r19	; 0x32
    4ab2:	4b ab       	std	Y+51, r20	; 0x33
    4ab4:	5c ab       	std	Y+52, r21	; 0x34
    4ab6:	86 01       	movw	r16, r12
    4ab8:	75 01       	movw	r14, r10
    4aba:	06 2c       	mov	r0, r6
    4abc:	04 c0       	rjmp	.+8      	; 0x4ac6 <__stack+0x8c7>
    4abe:	16 95       	lsr	r17
    4ac0:	07 95       	ror	r16
    4ac2:	f7 94       	ror	r15
    4ac4:	e7 94       	ror	r14
    4ac6:	0a 94       	dec	r0
    4ac8:	d2 f7       	brpl	.-12     	; 0x4abe <__stack+0x8bf>
    4aca:	b6 01       	movw	r22, r12
    4acc:	a5 01       	movw	r20, r10
    4ace:	09 a4       	ldd	r0, Y+41	; 0x29
    4ad0:	04 c0       	rjmp	.+8      	; 0x4ada <__stack+0x8db>
    4ad2:	44 0f       	add	r20, r20
    4ad4:	55 1f       	adc	r21, r21
    4ad6:	66 1f       	adc	r22, r22
    4ad8:	77 1f       	adc	r23, r23
    4ada:	0a 94       	dec	r0
    4adc:	d2 f7       	brpl	.-12     	; 0x4ad2 <__stack+0x8d3>
    4ade:	4d 8f       	std	Y+29, r20	; 0x1d
    4ae0:	5e 8f       	std	Y+30, r21	; 0x1e
    4ae2:	6f 8f       	std	Y+31, r22	; 0x1f
    4ae4:	78 a3       	std	Y+32, r23	; 0x20
    4ae6:	6d a1       	ldd	r22, Y+37	; 0x25
    4ae8:	7e a1       	ldd	r23, Y+38	; 0x26
    4aea:	8f a1       	ldd	r24, Y+39	; 0x27
    4aec:	98 a5       	ldd	r25, Y+40	; 0x28
    4aee:	04 c0       	rjmp	.+8      	; 0x4af8 <__stack+0x8f9>
    4af0:	96 95       	lsr	r25
    4af2:	87 95       	ror	r24
    4af4:	77 95       	ror	r23
    4af6:	67 95       	ror	r22
    4af8:	6a 94       	dec	r6
    4afa:	d2 f7       	brpl	.-12     	; 0x4af0 <__stack+0x8f1>
    4afc:	3b 01       	movw	r6, r22
    4afe:	4c 01       	movw	r8, r24
    4b00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b04:	af 8d       	ldd	r26, Y+31	; 0x1f
    4b06:	b8 a1       	ldd	r27, Y+32	; 0x20
    4b08:	86 29       	or	r24, r6
    4b0a:	97 29       	or	r25, r7
    4b0c:	a8 29       	or	r26, r8
    4b0e:	b9 29       	or	r27, r9
    4b10:	8d 8f       	std	Y+29, r24	; 0x1d
    4b12:	9e 8f       	std	Y+30, r25	; 0x1e
    4b14:	af 8f       	std	Y+31, r26	; 0x1f
    4b16:	b8 a3       	std	Y+32, r27	; 0x20
    4b18:	52 01       	movw	r10, r4
    4b1a:	cc 24       	eor	r12, r12
    4b1c:	dd 24       	eor	r13, r13
    4b1e:	a9 a2       	std	Y+33, r10	; 0x21
    4b20:	ba a2       	std	Y+34, r11	; 0x22
    4b22:	cb a2       	std	Y+35, r12	; 0x23
    4b24:	dc a2       	std	Y+36, r13	; 0x24
    4b26:	a2 01       	movw	r20, r4
    4b28:	91 01       	movw	r18, r2
    4b2a:	40 70       	andi	r20, 0x00	; 0
    4b2c:	50 70       	andi	r21, 0x00	; 0
    4b2e:	2d ab       	std	Y+53, r18	; 0x35
    4b30:	3e ab       	std	Y+54, r19	; 0x36
    4b32:	4f ab       	std	Y+55, r20	; 0x37
    4b34:	58 af       	std	Y+56, r21	; 0x38
    4b36:	c8 01       	movw	r24, r16
    4b38:	b7 01       	movw	r22, r14
    4b3a:	a6 01       	movw	r20, r12
    4b3c:	95 01       	movw	r18, r10
    4b3e:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    4b42:	62 2e       	mov	r6, r18
    4b44:	a3 2e       	mov	r10, r19
    4b46:	d4 2e       	mov	r13, r20
    4b48:	c5 2e       	mov	r12, r21
    4b4a:	6d a7       	std	Y+45, r22	; 0x2d
    4b4c:	7e a7       	std	Y+46, r23	; 0x2e
    4b4e:	8f a7       	std	Y+47, r24	; 0x2f
    4b50:	98 ab       	std	Y+48, r25	; 0x30
    4b52:	c8 01       	movw	r24, r16
    4b54:	b7 01       	movw	r22, r14
    4b56:	29 a1       	ldd	r18, Y+33	; 0x21
    4b58:	3a a1       	ldd	r19, Y+34	; 0x22
    4b5a:	4b a1       	ldd	r20, Y+35	; 0x23
    4b5c:	5c a1       	ldd	r21, Y+36	; 0x24
    4b5e:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    4b62:	e6 2c       	mov	r14, r6
    4b64:	fa 2c       	mov	r15, r10
    4b66:	0d 2d       	mov	r16, r13
    4b68:	1c 2d       	mov	r17, r12
    4b6a:	e9 8e       	std	Y+25, r14	; 0x19
    4b6c:	fa 8e       	std	Y+26, r15	; 0x1a
    4b6e:	0b 8f       	std	Y+27, r16	; 0x1b
    4b70:	1c 8f       	std	Y+28, r17	; 0x1c
    4b72:	c8 01       	movw	r24, r16
    4b74:	b7 01       	movw	r22, r14
    4b76:	2d a9       	ldd	r18, Y+53	; 0x35
    4b78:	3e a9       	ldd	r19, Y+54	; 0x36
    4b7a:	4f a9       	ldd	r20, Y+55	; 0x37
    4b7c:	58 ad       	ldd	r21, Y+56	; 0x38
    4b7e:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    4b82:	ad a4       	ldd	r10, Y+45	; 0x2d
    4b84:	be a4       	ldd	r11, Y+46	; 0x2e
    4b86:	cf a4       	ldd	r12, Y+47	; 0x2f
    4b88:	d8 a8       	ldd	r13, Y+48	; 0x30
    4b8a:	85 01       	movw	r16, r10
    4b8c:	ff 24       	eor	r15, r15
    4b8e:	ee 24       	eor	r14, r14
    4b90:	ad 8c       	ldd	r10, Y+29	; 0x1d
    4b92:	be 8c       	ldd	r11, Y+30	; 0x1e
    4b94:	cf 8c       	ldd	r12, Y+31	; 0x1f
    4b96:	d8 a0       	ldd	r13, Y+32	; 0x20
    4b98:	96 01       	movw	r18, r12
    4b9a:	44 27       	eor	r20, r20
    4b9c:	55 27       	eor	r21, r21
    4b9e:	e2 2a       	or	r14, r18
    4ba0:	f3 2a       	or	r15, r19
    4ba2:	04 2b       	or	r16, r20
    4ba4:	15 2b       	or	r17, r21
    4ba6:	e6 16       	cp	r14, r22
    4ba8:	f7 06       	cpc	r15, r23
    4baa:	08 07       	cpc	r16, r24
    4bac:	19 07       	cpc	r17, r25
    4bae:	30 f5       	brcc	.+76     	; 0x4bfc <__stack+0x9fd>
    4bb0:	29 8d       	ldd	r18, Y+25	; 0x19
    4bb2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4bb4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4bb6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4bb8:	21 50       	subi	r18, 0x01	; 1
    4bba:	30 40       	sbci	r19, 0x00	; 0
    4bbc:	40 40       	sbci	r20, 0x00	; 0
    4bbe:	50 40       	sbci	r21, 0x00	; 0
    4bc0:	29 8f       	std	Y+25, r18	; 0x19
    4bc2:	3a 8f       	std	Y+26, r19	; 0x1a
    4bc4:	4b 8f       	std	Y+27, r20	; 0x1b
    4bc6:	5c 8f       	std	Y+28, r21	; 0x1c
    4bc8:	e2 0c       	add	r14, r2
    4bca:	f3 1c       	adc	r15, r3
    4bcc:	04 1d       	adc	r16, r4
    4bce:	15 1d       	adc	r17, r5
    4bd0:	e2 14       	cp	r14, r2
    4bd2:	f3 04       	cpc	r15, r3
    4bd4:	04 05       	cpc	r16, r4
    4bd6:	15 05       	cpc	r17, r5
    4bd8:	88 f0       	brcs	.+34     	; 0x4bfc <__stack+0x9fd>
    4bda:	e6 16       	cp	r14, r22
    4bdc:	f7 06       	cpc	r15, r23
    4bde:	08 07       	cpc	r16, r24
    4be0:	19 07       	cpc	r17, r25
    4be2:	60 f4       	brcc	.+24     	; 0x4bfc <__stack+0x9fd>
    4be4:	21 50       	subi	r18, 0x01	; 1
    4be6:	30 40       	sbci	r19, 0x00	; 0
    4be8:	40 40       	sbci	r20, 0x00	; 0
    4bea:	50 40       	sbci	r21, 0x00	; 0
    4bec:	29 8f       	std	Y+25, r18	; 0x19
    4bee:	3a 8f       	std	Y+26, r19	; 0x1a
    4bf0:	4b 8f       	std	Y+27, r20	; 0x1b
    4bf2:	5c 8f       	std	Y+28, r21	; 0x1c
    4bf4:	e2 0c       	add	r14, r2
    4bf6:	f3 1c       	adc	r15, r3
    4bf8:	04 1d       	adc	r16, r4
    4bfa:	15 1d       	adc	r17, r5
    4bfc:	e6 1a       	sub	r14, r22
    4bfe:	f7 0a       	sbc	r15, r23
    4c00:	08 0b       	sbc	r16, r24
    4c02:	19 0b       	sbc	r17, r25
    4c04:	c8 01       	movw	r24, r16
    4c06:	b7 01       	movw	r22, r14
    4c08:	29 a1       	ldd	r18, Y+33	; 0x21
    4c0a:	3a a1       	ldd	r19, Y+34	; 0x22
    4c0c:	4b a1       	ldd	r20, Y+35	; 0x23
    4c0e:	5c a1       	ldd	r21, Y+36	; 0x24
    4c10:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    4c14:	a2 2e       	mov	r10, r18
    4c16:	d3 2e       	mov	r13, r19
    4c18:	c4 2e       	mov	r12, r20
    4c1a:	b5 2e       	mov	r11, r21
    4c1c:	6d a7       	std	Y+45, r22	; 0x2d
    4c1e:	7e a7       	std	Y+46, r23	; 0x2e
    4c20:	8f a7       	std	Y+47, r24	; 0x2f
    4c22:	98 ab       	std	Y+48, r25	; 0x30
    4c24:	c8 01       	movw	r24, r16
    4c26:	b7 01       	movw	r22, r14
    4c28:	29 a1       	ldd	r18, Y+33	; 0x21
    4c2a:	3a a1       	ldd	r19, Y+34	; 0x22
    4c2c:	4b a1       	ldd	r20, Y+35	; 0x23
    4c2e:	5c a1       	ldd	r21, Y+36	; 0x24
    4c30:	0e 94 c9 28 	call	0x5192	; 0x5192 <__udivmodsi4>
    4c34:	6a 2c       	mov	r6, r10
    4c36:	7d 2c       	mov	r7, r13
    4c38:	8c 2c       	mov	r8, r12
    4c3a:	9b 2c       	mov	r9, r11
    4c3c:	c4 01       	movw	r24, r8
    4c3e:	b3 01       	movw	r22, r6
    4c40:	2d a9       	ldd	r18, Y+53	; 0x35
    4c42:	3e a9       	ldd	r19, Y+54	; 0x36
    4c44:	4f a9       	ldd	r20, Y+55	; 0x37
    4c46:	58 ad       	ldd	r21, Y+56	; 0x38
    4c48:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    4c4c:	9b 01       	movw	r18, r22
    4c4e:	ac 01       	movw	r20, r24
    4c50:	ad a4       	ldd	r10, Y+45	; 0x2d
    4c52:	be a4       	ldd	r11, Y+46	; 0x2e
    4c54:	cf a4       	ldd	r12, Y+47	; 0x2f
    4c56:	d8 a8       	ldd	r13, Y+48	; 0x30
    4c58:	d5 01       	movw	r26, r10
    4c5a:	99 27       	eor	r25, r25
    4c5c:	88 27       	eor	r24, r24
    4c5e:	ad 8c       	ldd	r10, Y+29	; 0x1d
    4c60:	be 8c       	ldd	r11, Y+30	; 0x1e
    4c62:	cf 8c       	ldd	r12, Y+31	; 0x1f
    4c64:	d8 a0       	ldd	r13, Y+32	; 0x20
    4c66:	6f ef       	ldi	r22, 0xFF	; 255
    4c68:	e6 2e       	mov	r14, r22
    4c6a:	6f ef       	ldi	r22, 0xFF	; 255
    4c6c:	f6 2e       	mov	r15, r22
    4c6e:	01 2d       	mov	r16, r1
    4c70:	11 2d       	mov	r17, r1
    4c72:	ae 20       	and	r10, r14
    4c74:	bf 20       	and	r11, r15
    4c76:	c0 22       	and	r12, r16
    4c78:	d1 22       	and	r13, r17
    4c7a:	8a 29       	or	r24, r10
    4c7c:	9b 29       	or	r25, r11
    4c7e:	ac 29       	or	r26, r12
    4c80:	bd 29       	or	r27, r13
    4c82:	82 17       	cp	r24, r18
    4c84:	93 07       	cpc	r25, r19
    4c86:	a4 07       	cpc	r26, r20
    4c88:	b5 07       	cpc	r27, r21
    4c8a:	e0 f4       	brcc	.+56     	; 0x4cc4 <__stack+0xac5>
    4c8c:	08 94       	sec
    4c8e:	61 08       	sbc	r6, r1
    4c90:	71 08       	sbc	r7, r1
    4c92:	81 08       	sbc	r8, r1
    4c94:	91 08       	sbc	r9, r1
    4c96:	82 0d       	add	r24, r2
    4c98:	93 1d       	adc	r25, r3
    4c9a:	a4 1d       	adc	r26, r4
    4c9c:	b5 1d       	adc	r27, r5
    4c9e:	82 15       	cp	r24, r2
    4ca0:	93 05       	cpc	r25, r3
    4ca2:	a4 05       	cpc	r26, r4
    4ca4:	b5 05       	cpc	r27, r5
    4ca6:	70 f0       	brcs	.+28     	; 0x4cc4 <__stack+0xac5>
    4ca8:	82 17       	cp	r24, r18
    4caa:	93 07       	cpc	r25, r19
    4cac:	a4 07       	cpc	r26, r20
    4cae:	b5 07       	cpc	r27, r21
    4cb0:	48 f4       	brcc	.+18     	; 0x4cc4 <__stack+0xac5>
    4cb2:	08 94       	sec
    4cb4:	61 08       	sbc	r6, r1
    4cb6:	71 08       	sbc	r7, r1
    4cb8:	81 08       	sbc	r8, r1
    4cba:	91 08       	sbc	r9, r1
    4cbc:	82 0d       	add	r24, r2
    4cbe:	93 1d       	adc	r25, r3
    4cc0:	a4 1d       	adc	r26, r4
    4cc2:	b5 1d       	adc	r27, r5
    4cc4:	1c 01       	movw	r2, r24
    4cc6:	2d 01       	movw	r4, r26
    4cc8:	22 1a       	sub	r2, r18
    4cca:	33 0a       	sbc	r3, r19
    4ccc:	44 0a       	sbc	r4, r20
    4cce:	55 0a       	sbc	r5, r21
    4cd0:	2d 8e       	std	Y+29, r2	; 0x1d
    4cd2:	3e 8e       	std	Y+30, r3	; 0x1e
    4cd4:	4f 8e       	std	Y+31, r4	; 0x1f
    4cd6:	58 a2       	std	Y+32, r5	; 0x20
    4cd8:	a9 8c       	ldd	r10, Y+25	; 0x19
    4cda:	ba 8c       	ldd	r11, Y+26	; 0x1a
    4cdc:	cb 8c       	ldd	r12, Y+27	; 0x1b
    4cde:	dc 8c       	ldd	r13, Y+28	; 0x1c
    4ce0:	85 01       	movw	r16, r10
    4ce2:	ff 24       	eor	r15, r15
    4ce4:	ee 24       	eor	r14, r14
    4ce6:	e6 28       	or	r14, r6
    4ce8:	f7 28       	or	r15, r7
    4cea:	08 29       	or	r16, r8
    4cec:	19 29       	or	r17, r9
    4cee:	af ef       	ldi	r26, 0xFF	; 255
    4cf0:	aa 2e       	mov	r10, r26
    4cf2:	af ef       	ldi	r26, 0xFF	; 255
    4cf4:	ba 2e       	mov	r11, r26
    4cf6:	c1 2c       	mov	r12, r1
    4cf8:	d1 2c       	mov	r13, r1
    4cfa:	ae 20       	and	r10, r14
    4cfc:	bf 20       	and	r11, r15
    4cfe:	c0 22       	and	r12, r16
    4d00:	d1 22       	and	r13, r17
    4d02:	18 01       	movw	r2, r16
    4d04:	44 24       	eor	r4, r4
    4d06:	55 24       	eor	r5, r5
    4d08:	69 a8       	ldd	r6, Y+49	; 0x31
    4d0a:	7a a8       	ldd	r7, Y+50	; 0x32
    4d0c:	8b a8       	ldd	r8, Y+51	; 0x33
    4d0e:	9c a8       	ldd	r9, Y+52	; 0x34
    4d10:	2f ef       	ldi	r18, 0xFF	; 255
    4d12:	3f ef       	ldi	r19, 0xFF	; 255
    4d14:	40 e0       	ldi	r20, 0x00	; 0
    4d16:	50 e0       	ldi	r21, 0x00	; 0
    4d18:	62 22       	and	r6, r18
    4d1a:	73 22       	and	r7, r19
    4d1c:	84 22       	and	r8, r20
    4d1e:	95 22       	and	r9, r21
    4d20:	69 a9       	ldd	r22, Y+49	; 0x31
    4d22:	7a a9       	ldd	r23, Y+50	; 0x32
    4d24:	8b a9       	ldd	r24, Y+51	; 0x33
    4d26:	9c a9       	ldd	r25, Y+52	; 0x34
    4d28:	ac 01       	movw	r20, r24
    4d2a:	66 27       	eor	r22, r22
    4d2c:	77 27       	eor	r23, r23
    4d2e:	49 8f       	std	Y+25, r20	; 0x19
    4d30:	5a 8f       	std	Y+26, r21	; 0x1a
    4d32:	6b 8f       	std	Y+27, r22	; 0x1b
    4d34:	7c 8f       	std	Y+28, r23	; 0x1c
    4d36:	c6 01       	movw	r24, r12
    4d38:	b5 01       	movw	r22, r10
    4d3a:	a4 01       	movw	r20, r8
    4d3c:	93 01       	movw	r18, r6
    4d3e:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    4d42:	69 a3       	std	Y+33, r22	; 0x21
    4d44:	7a a3       	std	Y+34, r23	; 0x22
    4d46:	8b a3       	std	Y+35, r24	; 0x23
    4d48:	9c a3       	std	Y+36, r25	; 0x24
    4d4a:	c6 01       	movw	r24, r12
    4d4c:	b5 01       	movw	r22, r10
    4d4e:	29 8d       	ldd	r18, Y+25	; 0x19
    4d50:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4d52:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4d54:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4d56:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    4d5a:	5b 01       	movw	r10, r22
    4d5c:	6c 01       	movw	r12, r24
    4d5e:	c2 01       	movw	r24, r4
    4d60:	b1 01       	movw	r22, r2
    4d62:	a4 01       	movw	r20, r8
    4d64:	93 01       	movw	r18, r6
    4d66:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    4d6a:	3b 01       	movw	r6, r22
    4d6c:	4c 01       	movw	r8, r24
    4d6e:	c2 01       	movw	r24, r4
    4d70:	b1 01       	movw	r22, r2
    4d72:	29 8d       	ldd	r18, Y+25	; 0x19
    4d74:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4d76:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4d78:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4d7a:	0e 94 96 28 	call	0x512c	; 0x512c <__mulsi3>
    4d7e:	9b 01       	movw	r18, r22
    4d80:	ac 01       	movw	r20, r24
    4d82:	a6 0c       	add	r10, r6
    4d84:	b7 1c       	adc	r11, r7
    4d86:	c8 1c       	adc	r12, r8
    4d88:	d9 1c       	adc	r13, r9
    4d8a:	29 a0       	ldd	r2, Y+33	; 0x21
    4d8c:	3a a0       	ldd	r3, Y+34	; 0x22
    4d8e:	4b a0       	ldd	r4, Y+35	; 0x23
    4d90:	5c a0       	ldd	r5, Y+36	; 0x24
    4d92:	c2 01       	movw	r24, r4
    4d94:	aa 27       	eor	r26, r26
    4d96:	bb 27       	eor	r27, r27
    4d98:	a8 0e       	add	r10, r24
    4d9a:	b9 1e       	adc	r11, r25
    4d9c:	ca 1e       	adc	r12, r26
    4d9e:	db 1e       	adc	r13, r27
    4da0:	a6 14       	cp	r10, r6
    4da2:	b7 04       	cpc	r11, r7
    4da4:	c8 04       	cpc	r12, r8
    4da6:	d9 04       	cpc	r13, r9
    4da8:	20 f4       	brcc	.+8      	; 0x4db2 <__stack+0xbb3>
    4daa:	20 50       	subi	r18, 0x00	; 0
    4dac:	30 40       	sbci	r19, 0x00	; 0
    4dae:	4f 4f       	sbci	r20, 0xFF	; 255
    4db0:	5f 4f       	sbci	r21, 0xFF	; 255
    4db2:	c6 01       	movw	r24, r12
    4db4:	aa 27       	eor	r26, r26
    4db6:	bb 27       	eor	r27, r27
    4db8:	82 0f       	add	r24, r18
    4dba:	93 1f       	adc	r25, r19
    4dbc:	a4 1f       	adc	r26, r20
    4dbe:	b5 1f       	adc	r27, r21
    4dc0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4dc2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4dc4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4dc6:	58 a1       	ldd	r21, Y+32	; 0x20
    4dc8:	28 17       	cp	r18, r24
    4dca:	39 07       	cpc	r19, r25
    4dcc:	4a 07       	cpc	r20, r26
    4dce:	5b 07       	cpc	r21, r27
    4dd0:	18 f1       	brcs	.+70     	; 0x4e18 <__stack+0xc19>
    4dd2:	82 17       	cp	r24, r18
    4dd4:	93 07       	cpc	r25, r19
    4dd6:	a4 07       	cpc	r26, r20
    4dd8:	b5 07       	cpc	r27, r21
    4dda:	a1 f5       	brne	.+104    	; 0x4e44 <__stack+0xc45>
    4ddc:	65 01       	movw	r12, r10
    4dde:	bb 24       	eor	r11, r11
    4de0:	aa 24       	eor	r10, r10
    4de2:	89 a1       	ldd	r24, Y+33	; 0x21
    4de4:	9a a1       	ldd	r25, Y+34	; 0x22
    4de6:	ab a1       	ldd	r26, Y+35	; 0x23
    4de8:	bc a1       	ldd	r27, Y+36	; 0x24
    4dea:	a0 70       	andi	r26, 0x00	; 0
    4dec:	b0 70       	andi	r27, 0x00	; 0
    4dee:	a8 0e       	add	r10, r24
    4df0:	b9 1e       	adc	r11, r25
    4df2:	ca 1e       	adc	r12, r26
    4df4:	db 1e       	adc	r13, r27
    4df6:	8d a1       	ldd	r24, Y+37	; 0x25
    4df8:	9e a1       	ldd	r25, Y+38	; 0x26
    4dfa:	af a1       	ldd	r26, Y+39	; 0x27
    4dfc:	b8 a5       	ldd	r27, Y+40	; 0x28
    4dfe:	09 a4       	ldd	r0, Y+41	; 0x29
    4e00:	04 c0       	rjmp	.+8      	; 0x4e0a <__stack+0xc0b>
    4e02:	88 0f       	add	r24, r24
    4e04:	99 1f       	adc	r25, r25
    4e06:	aa 1f       	adc	r26, r26
    4e08:	bb 1f       	adc	r27, r27
    4e0a:	0a 94       	dec	r0
    4e0c:	d2 f7       	brpl	.-12     	; 0x4e02 <__stack+0xc03>
    4e0e:	8a 15       	cp	r24, r10
    4e10:	9b 05       	cpc	r25, r11
    4e12:	ac 05       	cpc	r26, r12
    4e14:	bd 05       	cpc	r27, r13
    4e16:	b0 f4       	brcc	.+44     	; 0x4e44 <__stack+0xc45>
    4e18:	08 94       	sec
    4e1a:	e1 08       	sbc	r14, r1
    4e1c:	f1 08       	sbc	r15, r1
    4e1e:	01 09       	sbc	r16, r1
    4e20:	11 09       	sbc	r17, r1
    4e22:	10 c0       	rjmp	.+32     	; 0x4e44 <__stack+0xc45>
    4e24:	aa 24       	eor	r10, r10
    4e26:	bb 24       	eor	r11, r11
    4e28:	65 01       	movw	r12, r10
    4e2a:	ee 24       	eor	r14, r14
    4e2c:	ff 24       	eor	r15, r15
    4e2e:	87 01       	movw	r16, r14
    4e30:	0c c0       	rjmp	.+24     	; 0x4e4a <__stack+0xc4b>
    4e32:	aa 24       	eor	r10, r10
    4e34:	bb 24       	eor	r11, r11
    4e36:	65 01       	movw	r12, r10
    4e38:	81 e0       	ldi	r24, 0x01	; 1
    4e3a:	e8 2e       	mov	r14, r24
    4e3c:	f1 2c       	mov	r15, r1
    4e3e:	01 2d       	mov	r16, r1
    4e40:	11 2d       	mov	r17, r1
    4e42:	03 c0       	rjmp	.+6      	; 0x4e4a <__stack+0xc4b>
    4e44:	aa 24       	eor	r10, r10
    4e46:	bb 24       	eor	r11, r11
    4e48:	65 01       	movw	r12, r10
    4e4a:	fe 01       	movw	r30, r28
    4e4c:	71 96       	adiw	r30, 0x11	; 17
    4e4e:	88 e0       	ldi	r24, 0x08	; 8
    4e50:	df 01       	movw	r26, r30
    4e52:	1d 92       	st	X+, r1
    4e54:	8a 95       	dec	r24
    4e56:	e9 f7       	brne	.-6      	; 0x4e52 <__stack+0xc53>
    4e58:	e9 8a       	std	Y+17, r14	; 0x11
    4e5a:	fa 8a       	std	Y+18, r15	; 0x12
    4e5c:	0b 8b       	std	Y+19, r16	; 0x13
    4e5e:	1c 8b       	std	Y+20, r17	; 0x14
    4e60:	ad 8a       	std	Y+21, r10	; 0x15
    4e62:	be 8a       	std	Y+22, r11	; 0x16
    4e64:	cf 8a       	std	Y+23, r12	; 0x17
    4e66:	d8 8e       	std	Y+24, r13	; 0x18
    4e68:	2e 2d       	mov	r18, r14
    4e6a:	3a 89       	ldd	r19, Y+18	; 0x12
    4e6c:	4b 89       	ldd	r20, Y+19	; 0x13
    4e6e:	5c 89       	ldd	r21, Y+20	; 0x14
    4e70:	6a 2d       	mov	r22, r10
    4e72:	7e 89       	ldd	r23, Y+22	; 0x16
    4e74:	8f 89       	ldd	r24, Y+23	; 0x17
    4e76:	98 8d       	ldd	r25, Y+24	; 0x18
    4e78:	e8 96       	adiw	r28, 0x38	; 56
    4e7a:	e2 e1       	ldi	r30, 0x12	; 18
    4e7c:	0c 94 07 29 	jmp	0x520e	; 0x520e <__epilogue_restores__>

00004e80 <vfprintf>:
    4e80:	6f 92       	push	r6
    4e82:	7f 92       	push	r7
    4e84:	8f 92       	push	r8
    4e86:	9f 92       	push	r9
    4e88:	af 92       	push	r10
    4e8a:	bf 92       	push	r11
    4e8c:	cf 92       	push	r12
    4e8e:	df 92       	push	r13
    4e90:	ef 92       	push	r14
    4e92:	ff 92       	push	r15
    4e94:	0f 93       	push	r16
    4e96:	1f 93       	push	r17
    4e98:	df 93       	push	r29
    4e9a:	cf 93       	push	r28
    4e9c:	cd b7       	in	r28, 0x3d	; 61
    4e9e:	de b7       	in	r29, 0x3e	; 62
    4ea0:	2c 97       	sbiw	r28, 0x0c	; 12
    4ea2:	0f b6       	in	r0, 0x3f	; 63
    4ea4:	f8 94       	cli
    4ea6:	de bf       	out	0x3e, r29	; 62
    4ea8:	0f be       	out	0x3f, r0	; 63
    4eaa:	cd bf       	out	0x3d, r28	; 61
    4eac:	6c 01       	movw	r12, r24
    4eae:	3b 01       	movw	r6, r22
    4eb0:	8a 01       	movw	r16, r20
    4eb2:	fc 01       	movw	r30, r24
    4eb4:	17 82       	std	Z+7, r1	; 0x07
    4eb6:	16 82       	std	Z+6, r1	; 0x06
    4eb8:	83 81       	ldd	r24, Z+3	; 0x03
    4eba:	81 fd       	sbrc	r24, 1
    4ebc:	03 c0       	rjmp	.+6      	; 0x4ec4 <vfprintf+0x44>
    4ebe:	1e c1       	rjmp	.+572    	; 0x50fc <vfprintf+0x27c>
    4ec0:	85 01       	movw	r16, r10
    4ec2:	04 c0       	rjmp	.+8      	; 0x4ecc <vfprintf+0x4c>
    4ec4:	4e 01       	movw	r8, r28
    4ec6:	08 94       	sec
    4ec8:	81 1c       	adc	r8, r1
    4eca:	91 1c       	adc	r9, r1
    4ecc:	f6 01       	movw	r30, r12
    4ece:	e3 80       	ldd	r14, Z+3	; 0x03
    4ed0:	f3 01       	movw	r30, r6
    4ed2:	e3 fc       	sbrc	r14, 3
    4ed4:	85 91       	lpm	r24, Z+
    4ed6:	e3 fe       	sbrs	r14, 3
    4ed8:	81 91       	ld	r24, Z+
    4eda:	3f 01       	movw	r6, r30
    4edc:	88 23       	and	r24, r24
    4ede:	09 f4       	brne	.+2      	; 0x4ee2 <vfprintf+0x62>
    4ee0:	09 c1       	rjmp	.+530    	; 0x50f4 <vfprintf+0x274>
    4ee2:	85 32       	cpi	r24, 0x25	; 37
    4ee4:	51 f4       	brne	.+20     	; 0x4efa <vfprintf+0x7a>
    4ee6:	e3 fc       	sbrc	r14, 3
    4ee8:	25 91       	lpm	r18, Z+
    4eea:	e3 fe       	sbrs	r14, 3
    4eec:	21 91       	ld	r18, Z+
    4eee:	3f 01       	movw	r6, r30
    4ef0:	25 32       	cpi	r18, 0x25	; 37
    4ef2:	11 f0       	breq	.+4      	; 0x4ef8 <vfprintf+0x78>
    4ef4:	ff 24       	eor	r15, r15
    4ef6:	23 c0       	rjmp	.+70     	; 0x4f3e <vfprintf+0xbe>
    4ef8:	85 e2       	ldi	r24, 0x25	; 37
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	b6 01       	movw	r22, r12
    4efe:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    4f02:	58 01       	movw	r10, r16
    4f04:	dd cf       	rjmp	.-70     	; 0x4ec0 <vfprintf+0x40>
    4f06:	22 23       	and	r18, r18
    4f08:	09 f4       	brne	.+2      	; 0x4f0c <vfprintf+0x8c>
    4f0a:	89 c0       	rjmp	.+274    	; 0x501e <vfprintf+0x19e>
    4f0c:	80 ed       	ldi	r24, 0xD0	; 208
    4f0e:	93 e0       	ldi	r25, 0x03	; 3
    4f10:	62 2f       	mov	r22, r18
    4f12:	70 e0       	ldi	r23, 0x00	; 0
    4f14:	2c 87       	std	Y+12, r18	; 0x0c
    4f16:	0e 94 22 29 	call	0x5244	; 0x5244 <strchr_P>
    4f1a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f1c:	00 97       	sbiw	r24, 0x00	; 0
    4f1e:	49 f4       	brne	.+18     	; 0x4f32 <vfprintf+0xb2>
    4f20:	23 32       	cpi	r18, 0x23	; 35
    4f22:	19 f4       	brne	.+6      	; 0x4f2a <vfprintf+0xaa>
    4f24:	f0 e1       	ldi	r31, 0x10	; 16
    4f26:	ff 2a       	or	r15, r31
    4f28:	04 c0       	rjmp	.+8      	; 0x4f32 <vfprintf+0xb2>
    4f2a:	2c 36       	cpi	r18, 0x6C	; 108
    4f2c:	69 f4       	brne	.+26     	; 0x4f48 <vfprintf+0xc8>
    4f2e:	20 e8       	ldi	r18, 0x80	; 128
    4f30:	f2 2a       	or	r15, r18
    4f32:	f3 01       	movw	r30, r6
    4f34:	e3 fc       	sbrc	r14, 3
    4f36:	25 91       	lpm	r18, Z+
    4f38:	e3 fe       	sbrs	r14, 3
    4f3a:	21 91       	ld	r18, Z+
    4f3c:	3f 01       	movw	r6, r30
    4f3e:	f7 fe       	sbrs	r15, 7
    4f40:	e2 cf       	rjmp	.-60     	; 0x4f06 <vfprintf+0x86>
    4f42:	22 23       	and	r18, r18
    4f44:	09 f4       	brne	.+2      	; 0x4f48 <vfprintf+0xc8>
    4f46:	3f c0       	rjmp	.+126    	; 0x4fc6 <vfprintf+0x146>
    4f48:	89 ec       	ldi	r24, 0xC9	; 201
    4f4a:	93 e0       	ldi	r25, 0x03	; 3
    4f4c:	62 2f       	mov	r22, r18
    4f4e:	70 e0       	ldi	r23, 0x00	; 0
    4f50:	2c 87       	std	Y+12, r18	; 0x0c
    4f52:	0e 94 22 29 	call	0x5244	; 0x5244 <strchr_P>
    4f56:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f58:	00 97       	sbiw	r24, 0x00	; 0
    4f5a:	41 f0       	breq	.+16     	; 0x4f6c <vfprintf+0xec>
    4f5c:	64 e0       	ldi	r22, 0x04	; 4
    4f5e:	a6 2e       	mov	r10, r22
    4f60:	b1 2c       	mov	r11, r1
    4f62:	a0 0e       	add	r10, r16
    4f64:	b1 1e       	adc	r11, r17
    4f66:	8f e3       	ldi	r24, 0x3F	; 63
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	0f c0       	rjmp	.+30     	; 0x4f8a <vfprintf+0x10a>
    4f6c:	23 36       	cpi	r18, 0x63	; 99
    4f6e:	29 f0       	breq	.+10     	; 0x4f7a <vfprintf+0xfa>
    4f70:	23 37       	cpi	r18, 0x73	; 115
    4f72:	89 f0       	breq	.+34     	; 0x4f96 <vfprintf+0x116>
    4f74:	23 35       	cpi	r18, 0x53	; 83
    4f76:	29 f5       	brne	.+74     	; 0x4fc2 <vfprintf+0x142>
    4f78:	0c c0       	rjmp	.+24     	; 0x4f92 <vfprintf+0x112>
    4f7a:	52 e0       	ldi	r21, 0x02	; 2
    4f7c:	a5 2e       	mov	r10, r21
    4f7e:	b1 2c       	mov	r11, r1
    4f80:	a0 0e       	add	r10, r16
    4f82:	b1 1e       	adc	r11, r17
    4f84:	f8 01       	movw	r30, r16
    4f86:	80 81       	ld	r24, Z
    4f88:	91 81       	ldd	r25, Z+1	; 0x01
    4f8a:	b6 01       	movw	r22, r12
    4f8c:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    4f90:	97 cf       	rjmp	.-210    	; 0x4ec0 <vfprintf+0x40>
    4f92:	f1 e0       	ldi	r31, 0x01	; 1
    4f94:	ff 2a       	or	r15, r31
    4f96:	42 e0       	ldi	r20, 0x02	; 2
    4f98:	a4 2e       	mov	r10, r20
    4f9a:	b1 2c       	mov	r11, r1
    4f9c:	a0 0e       	add	r10, r16
    4f9e:	b1 1e       	adc	r11, r17
    4fa0:	f8 01       	movw	r30, r16
    4fa2:	00 81       	ld	r16, Z
    4fa4:	11 81       	ldd	r17, Z+1	; 0x01
    4fa6:	04 c0       	rjmp	.+8      	; 0x4fb0 <vfprintf+0x130>
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	b6 01       	movw	r22, r12
    4fac:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    4fb0:	f8 01       	movw	r30, r16
    4fb2:	f0 fc       	sbrc	r15, 0
    4fb4:	85 91       	lpm	r24, Z+
    4fb6:	f0 fe       	sbrs	r15, 0
    4fb8:	81 91       	ld	r24, Z+
    4fba:	8f 01       	movw	r16, r30
    4fbc:	88 23       	and	r24, r24
    4fbe:	a1 f7       	brne	.-24     	; 0x4fa8 <vfprintf+0x128>
    4fc0:	7f cf       	rjmp	.-258    	; 0x4ec0 <vfprintf+0x40>
    4fc2:	24 36       	cpi	r18, 0x64	; 100
    4fc4:	11 f0       	breq	.+4      	; 0x4fca <vfprintf+0x14a>
    4fc6:	29 36       	cpi	r18, 0x69	; 105
    4fc8:	51 f5       	brne	.+84     	; 0x501e <vfprintf+0x19e>
    4fca:	f7 fe       	sbrs	r15, 7
    4fcc:	0b c0       	rjmp	.+22     	; 0x4fe4 <vfprintf+0x164>
    4fce:	34 e0       	ldi	r19, 0x04	; 4
    4fd0:	a3 2e       	mov	r10, r19
    4fd2:	b1 2c       	mov	r11, r1
    4fd4:	a0 0e       	add	r10, r16
    4fd6:	b1 1e       	adc	r11, r17
    4fd8:	f8 01       	movw	r30, r16
    4fda:	60 81       	ld	r22, Z
    4fdc:	71 81       	ldd	r23, Z+1	; 0x01
    4fde:	82 81       	ldd	r24, Z+2	; 0x02
    4fe0:	93 81       	ldd	r25, Z+3	; 0x03
    4fe2:	0c c0       	rjmp	.+24     	; 0x4ffc <vfprintf+0x17c>
    4fe4:	22 e0       	ldi	r18, 0x02	; 2
    4fe6:	a2 2e       	mov	r10, r18
    4fe8:	b1 2c       	mov	r11, r1
    4fea:	a0 0e       	add	r10, r16
    4fec:	b1 1e       	adc	r11, r17
    4fee:	f8 01       	movw	r30, r16
    4ff0:	60 81       	ld	r22, Z
    4ff2:	71 81       	ldd	r23, Z+1	; 0x01
    4ff4:	88 27       	eor	r24, r24
    4ff6:	77 fd       	sbrc	r23, 7
    4ff8:	80 95       	com	r24
    4ffa:	98 2f       	mov	r25, r24
    4ffc:	ff ee       	ldi	r31, 0xEF	; 239
    4ffe:	ff 22       	and	r15, r31
    5000:	97 ff       	sbrs	r25, 7
    5002:	09 c0       	rjmp	.+18     	; 0x5016 <vfprintf+0x196>
    5004:	90 95       	com	r25
    5006:	80 95       	com	r24
    5008:	70 95       	com	r23
    500a:	61 95       	neg	r22
    500c:	7f 4f       	sbci	r23, 0xFF	; 255
    500e:	8f 4f       	sbci	r24, 0xFF	; 255
    5010:	9f 4f       	sbci	r25, 0xFF	; 255
    5012:	20 e4       	ldi	r18, 0x40	; 64
    5014:	f2 2a       	or	r15, r18
    5016:	a4 01       	movw	r20, r8
    5018:	2a e0       	ldi	r18, 0x0A	; 10
    501a:	30 e0       	ldi	r19, 0x00	; 0
    501c:	3b c0       	rjmp	.+118    	; 0x5094 <vfprintf+0x214>
    501e:	20 37       	cpi	r18, 0x70	; 112
    5020:	99 f0       	breq	.+38     	; 0x5048 <vfprintf+0x1c8>
    5022:	21 37       	cpi	r18, 0x71	; 113
    5024:	30 f4       	brcc	.+12     	; 0x5032 <vfprintf+0x1b2>
    5026:	28 35       	cpi	r18, 0x58	; 88
    5028:	b1 f0       	breq	.+44     	; 0x5056 <vfprintf+0x1d6>
    502a:	2f 36       	cpi	r18, 0x6F	; 111
    502c:	09 f0       	breq	.+2      	; 0x5030 <vfprintf+0x1b0>
    502e:	62 c0       	rjmp	.+196    	; 0x50f4 <vfprintf+0x274>
    5030:	17 c0       	rjmp	.+46     	; 0x5060 <vfprintf+0x1e0>
    5032:	25 37       	cpi	r18, 0x75	; 117
    5034:	21 f0       	breq	.+8      	; 0x503e <vfprintf+0x1be>
    5036:	28 37       	cpi	r18, 0x78	; 120
    5038:	09 f0       	breq	.+2      	; 0x503c <vfprintf+0x1bc>
    503a:	5c c0       	rjmp	.+184    	; 0x50f4 <vfprintf+0x274>
    503c:	07 c0       	rjmp	.+14     	; 0x504c <vfprintf+0x1cc>
    503e:	8f ee       	ldi	r24, 0xEF	; 239
    5040:	f8 22       	and	r15, r24
    5042:	2a e0       	ldi	r18, 0x0A	; 10
    5044:	30 e0       	ldi	r19, 0x00	; 0
    5046:	0e c0       	rjmp	.+28     	; 0x5064 <vfprintf+0x1e4>
    5048:	e0 e1       	ldi	r30, 0x10	; 16
    504a:	fe 2a       	or	r15, r30
    504c:	f4 e2       	ldi	r31, 0x24	; 36
    504e:	ff 2a       	or	r15, r31
    5050:	20 e1       	ldi	r18, 0x10	; 16
    5052:	30 e0       	ldi	r19, 0x00	; 0
    5054:	07 c0       	rjmp	.+14     	; 0x5064 <vfprintf+0x1e4>
    5056:	24 e0       	ldi	r18, 0x04	; 4
    5058:	f2 2a       	or	r15, r18
    505a:	20 e1       	ldi	r18, 0x10	; 16
    505c:	32 e0       	ldi	r19, 0x02	; 2
    505e:	02 c0       	rjmp	.+4      	; 0x5064 <vfprintf+0x1e4>
    5060:	28 e0       	ldi	r18, 0x08	; 8
    5062:	30 e0       	ldi	r19, 0x00	; 0
    5064:	f7 fe       	sbrs	r15, 7
    5066:	0b c0       	rjmp	.+22     	; 0x507e <vfprintf+0x1fe>
    5068:	94 e0       	ldi	r25, 0x04	; 4
    506a:	a9 2e       	mov	r10, r25
    506c:	b1 2c       	mov	r11, r1
    506e:	a0 0e       	add	r10, r16
    5070:	b1 1e       	adc	r11, r17
    5072:	f8 01       	movw	r30, r16
    5074:	60 81       	ld	r22, Z
    5076:	71 81       	ldd	r23, Z+1	; 0x01
    5078:	82 81       	ldd	r24, Z+2	; 0x02
    507a:	93 81       	ldd	r25, Z+3	; 0x03
    507c:	0a c0       	rjmp	.+20     	; 0x5092 <vfprintf+0x212>
    507e:	82 e0       	ldi	r24, 0x02	; 2
    5080:	a8 2e       	mov	r10, r24
    5082:	b1 2c       	mov	r11, r1
    5084:	a0 0e       	add	r10, r16
    5086:	b1 1e       	adc	r11, r17
    5088:	f8 01       	movw	r30, r16
    508a:	60 81       	ld	r22, Z
    508c:	71 81       	ldd	r23, Z+1	; 0x01
    508e:	80 e0       	ldi	r24, 0x00	; 0
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	a4 01       	movw	r20, r8
    5094:	0e 94 6f 2a 	call	0x54de	; 0x54de <__ultoa_invert>
    5098:	e8 2e       	mov	r14, r24
    509a:	e8 18       	sub	r14, r8
    509c:	0f 2d       	mov	r16, r15
    509e:	10 e0       	ldi	r17, 0x00	; 0
    50a0:	f6 fe       	sbrs	r15, 6
    50a2:	05 c0       	rjmp	.+10     	; 0x50ae <vfprintf+0x22e>
    50a4:	8d e2       	ldi	r24, 0x2D	; 45
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	b6 01       	movw	r22, r12
    50aa:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    50ae:	04 ff       	sbrs	r16, 4
    50b0:	15 c0       	rjmp	.+42     	; 0x50dc <vfprintf+0x25c>
    50b2:	fe 01       	movw	r30, r28
    50b4:	ee 0d       	add	r30, r14
    50b6:	f1 1d       	adc	r31, r1
    50b8:	80 81       	ld	r24, Z
    50ba:	80 33       	cpi	r24, 0x30	; 48
    50bc:	79 f0       	breq	.+30     	; 0x50dc <vfprintf+0x25c>
    50be:	80 e3       	ldi	r24, 0x30	; 48
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	b6 01       	movw	r22, r12
    50c4:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    50c8:	02 ff       	sbrs	r16, 2
    50ca:	08 c0       	rjmp	.+16     	; 0x50dc <vfprintf+0x25c>
    50cc:	c8 01       	movw	r24, r16
    50ce:	80 72       	andi	r24, 0x20	; 32
    50d0:	90 70       	andi	r25, 0x00	; 0
    50d2:	88 5a       	subi	r24, 0xA8	; 168
    50d4:	9f 4f       	sbci	r25, 0xFF	; 255
    50d6:	b6 01       	movw	r22, r12
    50d8:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    50dc:	ea 94       	dec	r14
    50de:	f4 01       	movw	r30, r8
    50e0:	ee 0d       	add	r30, r14
    50e2:	f1 1d       	adc	r31, r1
    50e4:	80 81       	ld	r24, Z
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	b6 01       	movw	r22, r12
    50ea:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    50ee:	ee 20       	and	r14, r14
    50f0:	a9 f7       	brne	.-22     	; 0x50dc <vfprintf+0x25c>
    50f2:	e6 ce       	rjmp	.-564    	; 0x4ec0 <vfprintf+0x40>
    50f4:	f6 01       	movw	r30, r12
    50f6:	26 81       	ldd	r18, Z+6	; 0x06
    50f8:	37 81       	ldd	r19, Z+7	; 0x07
    50fa:	02 c0       	rjmp	.+4      	; 0x5100 <vfprintf+0x280>
    50fc:	2f ef       	ldi	r18, 0xFF	; 255
    50fe:	3f ef       	ldi	r19, 0xFF	; 255
    5100:	c9 01       	movw	r24, r18
    5102:	2c 96       	adiw	r28, 0x0c	; 12
    5104:	0f b6       	in	r0, 0x3f	; 63
    5106:	f8 94       	cli
    5108:	de bf       	out	0x3e, r29	; 62
    510a:	0f be       	out	0x3f, r0	; 63
    510c:	cd bf       	out	0x3d, r28	; 61
    510e:	cf 91       	pop	r28
    5110:	df 91       	pop	r29
    5112:	1f 91       	pop	r17
    5114:	0f 91       	pop	r16
    5116:	ff 90       	pop	r15
    5118:	ef 90       	pop	r14
    511a:	df 90       	pop	r13
    511c:	cf 90       	pop	r12
    511e:	bf 90       	pop	r11
    5120:	af 90       	pop	r10
    5122:	9f 90       	pop	r9
    5124:	8f 90       	pop	r8
    5126:	7f 90       	pop	r7
    5128:	6f 90       	pop	r6
    512a:	08 95       	ret

0000512c <__mulsi3>:
    512c:	62 9f       	mul	r22, r18
    512e:	d0 01       	movw	r26, r0
    5130:	73 9f       	mul	r23, r19
    5132:	f0 01       	movw	r30, r0
    5134:	82 9f       	mul	r24, r18
    5136:	e0 0d       	add	r30, r0
    5138:	f1 1d       	adc	r31, r1
    513a:	64 9f       	mul	r22, r20
    513c:	e0 0d       	add	r30, r0
    513e:	f1 1d       	adc	r31, r1
    5140:	92 9f       	mul	r25, r18
    5142:	f0 0d       	add	r31, r0
    5144:	83 9f       	mul	r24, r19
    5146:	f0 0d       	add	r31, r0
    5148:	74 9f       	mul	r23, r20
    514a:	f0 0d       	add	r31, r0
    514c:	65 9f       	mul	r22, r21
    514e:	f0 0d       	add	r31, r0
    5150:	99 27       	eor	r25, r25
    5152:	72 9f       	mul	r23, r18
    5154:	b0 0d       	add	r27, r0
    5156:	e1 1d       	adc	r30, r1
    5158:	f9 1f       	adc	r31, r25
    515a:	63 9f       	mul	r22, r19
    515c:	b0 0d       	add	r27, r0
    515e:	e1 1d       	adc	r30, r1
    5160:	f9 1f       	adc	r31, r25
    5162:	bd 01       	movw	r22, r26
    5164:	cf 01       	movw	r24, r30
    5166:	11 24       	eor	r1, r1
    5168:	08 95       	ret

0000516a <__udivmodhi4>:
    516a:	aa 1b       	sub	r26, r26
    516c:	bb 1b       	sub	r27, r27
    516e:	51 e1       	ldi	r21, 0x11	; 17
    5170:	07 c0       	rjmp	.+14     	; 0x5180 <__udivmodhi4_ep>

00005172 <__udivmodhi4_loop>:
    5172:	aa 1f       	adc	r26, r26
    5174:	bb 1f       	adc	r27, r27
    5176:	a6 17       	cp	r26, r22
    5178:	b7 07       	cpc	r27, r23
    517a:	10 f0       	brcs	.+4      	; 0x5180 <__udivmodhi4_ep>
    517c:	a6 1b       	sub	r26, r22
    517e:	b7 0b       	sbc	r27, r23

00005180 <__udivmodhi4_ep>:
    5180:	88 1f       	adc	r24, r24
    5182:	99 1f       	adc	r25, r25
    5184:	5a 95       	dec	r21
    5186:	a9 f7       	brne	.-22     	; 0x5172 <__udivmodhi4_loop>
    5188:	80 95       	com	r24
    518a:	90 95       	com	r25
    518c:	bc 01       	movw	r22, r24
    518e:	cd 01       	movw	r24, r26
    5190:	08 95       	ret

00005192 <__udivmodsi4>:
    5192:	a1 e2       	ldi	r26, 0x21	; 33
    5194:	1a 2e       	mov	r1, r26
    5196:	aa 1b       	sub	r26, r26
    5198:	bb 1b       	sub	r27, r27
    519a:	fd 01       	movw	r30, r26
    519c:	0d c0       	rjmp	.+26     	; 0x51b8 <__udivmodsi4_ep>

0000519e <__udivmodsi4_loop>:
    519e:	aa 1f       	adc	r26, r26
    51a0:	bb 1f       	adc	r27, r27
    51a2:	ee 1f       	adc	r30, r30
    51a4:	ff 1f       	adc	r31, r31
    51a6:	a2 17       	cp	r26, r18
    51a8:	b3 07       	cpc	r27, r19
    51aa:	e4 07       	cpc	r30, r20
    51ac:	f5 07       	cpc	r31, r21
    51ae:	20 f0       	brcs	.+8      	; 0x51b8 <__udivmodsi4_ep>
    51b0:	a2 1b       	sub	r26, r18
    51b2:	b3 0b       	sbc	r27, r19
    51b4:	e4 0b       	sbc	r30, r20
    51b6:	f5 0b       	sbc	r31, r21

000051b8 <__udivmodsi4_ep>:
    51b8:	66 1f       	adc	r22, r22
    51ba:	77 1f       	adc	r23, r23
    51bc:	88 1f       	adc	r24, r24
    51be:	99 1f       	adc	r25, r25
    51c0:	1a 94       	dec	r1
    51c2:	69 f7       	brne	.-38     	; 0x519e <__udivmodsi4_loop>
    51c4:	60 95       	com	r22
    51c6:	70 95       	com	r23
    51c8:	80 95       	com	r24
    51ca:	90 95       	com	r25
    51cc:	9b 01       	movw	r18, r22
    51ce:	ac 01       	movw	r20, r24
    51d0:	bd 01       	movw	r22, r26
    51d2:	cf 01       	movw	r24, r30
    51d4:	08 95       	ret

000051d6 <__prologue_saves__>:
    51d6:	2f 92       	push	r2
    51d8:	3f 92       	push	r3
    51da:	4f 92       	push	r4
    51dc:	5f 92       	push	r5
    51de:	6f 92       	push	r6
    51e0:	7f 92       	push	r7
    51e2:	8f 92       	push	r8
    51e4:	9f 92       	push	r9
    51e6:	af 92       	push	r10
    51e8:	bf 92       	push	r11
    51ea:	cf 92       	push	r12
    51ec:	df 92       	push	r13
    51ee:	ef 92       	push	r14
    51f0:	ff 92       	push	r15
    51f2:	0f 93       	push	r16
    51f4:	1f 93       	push	r17
    51f6:	cf 93       	push	r28
    51f8:	df 93       	push	r29
    51fa:	cd b7       	in	r28, 0x3d	; 61
    51fc:	de b7       	in	r29, 0x3e	; 62
    51fe:	ca 1b       	sub	r28, r26
    5200:	db 0b       	sbc	r29, r27
    5202:	0f b6       	in	r0, 0x3f	; 63
    5204:	f8 94       	cli
    5206:	de bf       	out	0x3e, r29	; 62
    5208:	0f be       	out	0x3f, r0	; 63
    520a:	cd bf       	out	0x3d, r28	; 61
    520c:	09 94       	ijmp

0000520e <__epilogue_restores__>:
    520e:	2a 88       	ldd	r2, Y+18	; 0x12
    5210:	39 88       	ldd	r3, Y+17	; 0x11
    5212:	48 88       	ldd	r4, Y+16	; 0x10
    5214:	5f 84       	ldd	r5, Y+15	; 0x0f
    5216:	6e 84       	ldd	r6, Y+14	; 0x0e
    5218:	7d 84       	ldd	r7, Y+13	; 0x0d
    521a:	8c 84       	ldd	r8, Y+12	; 0x0c
    521c:	9b 84       	ldd	r9, Y+11	; 0x0b
    521e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5220:	b9 84       	ldd	r11, Y+9	; 0x09
    5222:	c8 84       	ldd	r12, Y+8	; 0x08
    5224:	df 80       	ldd	r13, Y+7	; 0x07
    5226:	ee 80       	ldd	r14, Y+6	; 0x06
    5228:	fd 80       	ldd	r15, Y+5	; 0x05
    522a:	0c 81       	ldd	r16, Y+4	; 0x04
    522c:	1b 81       	ldd	r17, Y+3	; 0x03
    522e:	aa 81       	ldd	r26, Y+2	; 0x02
    5230:	b9 81       	ldd	r27, Y+1	; 0x01
    5232:	ce 0f       	add	r28, r30
    5234:	d1 1d       	adc	r29, r1
    5236:	0f b6       	in	r0, 0x3f	; 63
    5238:	f8 94       	cli
    523a:	de bf       	out	0x3e, r29	; 62
    523c:	0f be       	out	0x3f, r0	; 63
    523e:	cd bf       	out	0x3d, r28	; 61
    5240:	ed 01       	movw	r28, r26
    5242:	08 95       	ret

00005244 <strchr_P>:
    5244:	fc 01       	movw	r30, r24
    5246:	05 90       	lpm	r0, Z+
    5248:	06 16       	cp	r0, r22
    524a:	21 f0       	breq	.+8      	; 0x5254 <strchr_P+0x10>
    524c:	00 20       	and	r0, r0
    524e:	d9 f7       	brne	.-10     	; 0x5246 <strchr_P+0x2>
    5250:	c0 01       	movw	r24, r0
    5252:	08 95       	ret
    5254:	31 97       	sbiw	r30, 0x01	; 1
    5256:	cf 01       	movw	r24, r30
    5258:	08 95       	ret

0000525a <memcpy>:
    525a:	fb 01       	movw	r30, r22
    525c:	dc 01       	movw	r26, r24
    525e:	02 c0       	rjmp	.+4      	; 0x5264 <memcpy+0xa>
    5260:	01 90       	ld	r0, Z+
    5262:	0d 92       	st	X+, r0
    5264:	41 50       	subi	r20, 0x01	; 1
    5266:	50 40       	sbci	r21, 0x00	; 0
    5268:	d8 f7       	brcc	.-10     	; 0x5260 <memcpy+0x6>
    526a:	08 95       	ret

0000526c <fdevopen>:
    526c:	0f 93       	push	r16
    526e:	1f 93       	push	r17
    5270:	cf 93       	push	r28
    5272:	df 93       	push	r29
    5274:	8c 01       	movw	r16, r24
    5276:	eb 01       	movw	r28, r22
    5278:	00 97       	sbiw	r24, 0x00	; 0
    527a:	11 f4       	brne	.+4      	; 0x5280 <fdevopen+0x14>
    527c:	20 97       	sbiw	r28, 0x00	; 0
    527e:	c9 f1       	breq	.+114    	; 0x52f2 <fdevopen+0x86>
    5280:	81 e0       	ldi	r24, 0x01	; 1
    5282:	90 e0       	ldi	r25, 0x00	; 0
    5284:	6e e0       	ldi	r22, 0x0E	; 14
    5286:	70 e0       	ldi	r23, 0x00	; 0
    5288:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <calloc>
    528c:	fc 01       	movw	r30, r24
    528e:	9c 01       	movw	r18, r24
    5290:	00 97       	sbiw	r24, 0x00	; 0
    5292:	89 f1       	breq	.+98     	; 0x52f6 <fdevopen+0x8a>
    5294:	80 e8       	ldi	r24, 0x80	; 128
    5296:	83 83       	std	Z+3, r24	; 0x03
    5298:	20 97       	sbiw	r28, 0x00	; 0
    529a:	71 f0       	breq	.+28     	; 0x52b8 <fdevopen+0x4c>
    529c:	d3 87       	std	Z+11, r29	; 0x0b
    529e:	c2 87       	std	Z+10, r28	; 0x0a
    52a0:	81 e8       	ldi	r24, 0x81	; 129
    52a2:	83 83       	std	Z+3, r24	; 0x03
    52a4:	80 91 2c 0a 	lds	r24, 0x0A2C
    52a8:	90 91 2d 0a 	lds	r25, 0x0A2D
    52ac:	00 97       	sbiw	r24, 0x00	; 0
    52ae:	21 f4       	brne	.+8      	; 0x52b8 <fdevopen+0x4c>
    52b0:	f0 93 2d 0a 	sts	0x0A2D, r31
    52b4:	e0 93 2c 0a 	sts	0x0A2C, r30
    52b8:	01 15       	cp	r16, r1
    52ba:	11 05       	cpc	r17, r1
    52bc:	e1 f0       	breq	.+56     	; 0x52f6 <fdevopen+0x8a>
    52be:	11 87       	std	Z+9, r17	; 0x09
    52c0:	00 87       	std	Z+8, r16	; 0x08
    52c2:	83 81       	ldd	r24, Z+3	; 0x03
    52c4:	82 60       	ori	r24, 0x02	; 2
    52c6:	83 83       	std	Z+3, r24	; 0x03
    52c8:	80 91 2e 0a 	lds	r24, 0x0A2E
    52cc:	90 91 2f 0a 	lds	r25, 0x0A2F
    52d0:	00 97       	sbiw	r24, 0x00	; 0
    52d2:	89 f4       	brne	.+34     	; 0x52f6 <fdevopen+0x8a>
    52d4:	f0 93 2f 0a 	sts	0x0A2F, r31
    52d8:	e0 93 2e 0a 	sts	0x0A2E, r30
    52dc:	80 91 30 0a 	lds	r24, 0x0A30
    52e0:	90 91 31 0a 	lds	r25, 0x0A31
    52e4:	00 97       	sbiw	r24, 0x00	; 0
    52e6:	39 f4       	brne	.+14     	; 0x52f6 <fdevopen+0x8a>
    52e8:	f0 93 31 0a 	sts	0x0A31, r31
    52ec:	e0 93 30 0a 	sts	0x0A30, r30
    52f0:	02 c0       	rjmp	.+4      	; 0x52f6 <fdevopen+0x8a>
    52f2:	20 e0       	ldi	r18, 0x00	; 0
    52f4:	30 e0       	ldi	r19, 0x00	; 0
    52f6:	c9 01       	movw	r24, r18
    52f8:	df 91       	pop	r29
    52fa:	cf 91       	pop	r28
    52fc:	1f 91       	pop	r17
    52fe:	0f 91       	pop	r16
    5300:	08 95       	ret

00005302 <fgetc>:
    5302:	cf 93       	push	r28
    5304:	df 93       	push	r29
    5306:	ec 01       	movw	r28, r24
    5308:	3b 81       	ldd	r19, Y+3	; 0x03
    530a:	30 ff       	sbrs	r19, 0
    530c:	36 c0       	rjmp	.+108    	; 0x537a <fgetc+0x78>
    530e:	36 ff       	sbrs	r19, 6
    5310:	09 c0       	rjmp	.+18     	; 0x5324 <fgetc+0x22>
    5312:	3f 7b       	andi	r19, 0xBF	; 191
    5314:	3b 83       	std	Y+3, r19	; 0x03
    5316:	8e 81       	ldd	r24, Y+6	; 0x06
    5318:	9f 81       	ldd	r25, Y+7	; 0x07
    531a:	01 96       	adiw	r24, 0x01	; 1
    531c:	9f 83       	std	Y+7, r25	; 0x07
    531e:	8e 83       	std	Y+6, r24	; 0x06
    5320:	2a 81       	ldd	r18, Y+2	; 0x02
    5322:	29 c0       	rjmp	.+82     	; 0x5376 <fgetc+0x74>
    5324:	32 ff       	sbrs	r19, 2
    5326:	0f c0       	rjmp	.+30     	; 0x5346 <fgetc+0x44>
    5328:	e8 81       	ld	r30, Y
    532a:	f9 81       	ldd	r31, Y+1	; 0x01
    532c:	80 81       	ld	r24, Z
    532e:	99 27       	eor	r25, r25
    5330:	87 fd       	sbrc	r24, 7
    5332:	90 95       	com	r25
    5334:	00 97       	sbiw	r24, 0x00	; 0
    5336:	19 f4       	brne	.+6      	; 0x533e <fgetc+0x3c>
    5338:	30 62       	ori	r19, 0x20	; 32
    533a:	3b 83       	std	Y+3, r19	; 0x03
    533c:	1e c0       	rjmp	.+60     	; 0x537a <fgetc+0x78>
    533e:	31 96       	adiw	r30, 0x01	; 1
    5340:	f9 83       	std	Y+1, r31	; 0x01
    5342:	e8 83       	st	Y, r30
    5344:	11 c0       	rjmp	.+34     	; 0x5368 <fgetc+0x66>
    5346:	ea 85       	ldd	r30, Y+10	; 0x0a
    5348:	fb 85       	ldd	r31, Y+11	; 0x0b
    534a:	ce 01       	movw	r24, r28
    534c:	09 95       	icall
    534e:	97 ff       	sbrs	r25, 7
    5350:	0b c0       	rjmp	.+22     	; 0x5368 <fgetc+0x66>
    5352:	2b 81       	ldd	r18, Y+3	; 0x03
    5354:	3f ef       	ldi	r19, 0xFF	; 255
    5356:	8f 3f       	cpi	r24, 0xFF	; 255
    5358:	93 07       	cpc	r25, r19
    535a:	11 f4       	brne	.+4      	; 0x5360 <fgetc+0x5e>
    535c:	80 e1       	ldi	r24, 0x10	; 16
    535e:	01 c0       	rjmp	.+2      	; 0x5362 <fgetc+0x60>
    5360:	80 e2       	ldi	r24, 0x20	; 32
    5362:	82 2b       	or	r24, r18
    5364:	8b 83       	std	Y+3, r24	; 0x03
    5366:	09 c0       	rjmp	.+18     	; 0x537a <fgetc+0x78>
    5368:	2e 81       	ldd	r18, Y+6	; 0x06
    536a:	3f 81       	ldd	r19, Y+7	; 0x07
    536c:	2f 5f       	subi	r18, 0xFF	; 255
    536e:	3f 4f       	sbci	r19, 0xFF	; 255
    5370:	3f 83       	std	Y+7, r19	; 0x07
    5372:	2e 83       	std	Y+6, r18	; 0x06
    5374:	28 2f       	mov	r18, r24
    5376:	30 e0       	ldi	r19, 0x00	; 0
    5378:	02 c0       	rjmp	.+4      	; 0x537e <fgetc+0x7c>
    537a:	2f ef       	ldi	r18, 0xFF	; 255
    537c:	3f ef       	ldi	r19, 0xFF	; 255
    537e:	c9 01       	movw	r24, r18
    5380:	df 91       	pop	r29
    5382:	cf 91       	pop	r28
    5384:	08 95       	ret

00005386 <fputc>:
    5386:	0f 93       	push	r16
    5388:	1f 93       	push	r17
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	8c 01       	movw	r16, r24
    5390:	eb 01       	movw	r28, r22
    5392:	8b 81       	ldd	r24, Y+3	; 0x03
    5394:	81 ff       	sbrs	r24, 1
    5396:	1b c0       	rjmp	.+54     	; 0x53ce <fputc+0x48>
    5398:	82 ff       	sbrs	r24, 2
    539a:	0d c0       	rjmp	.+26     	; 0x53b6 <fputc+0x30>
    539c:	2e 81       	ldd	r18, Y+6	; 0x06
    539e:	3f 81       	ldd	r19, Y+7	; 0x07
    53a0:	8c 81       	ldd	r24, Y+4	; 0x04
    53a2:	9d 81       	ldd	r25, Y+5	; 0x05
    53a4:	28 17       	cp	r18, r24
    53a6:	39 07       	cpc	r19, r25
    53a8:	64 f4       	brge	.+24     	; 0x53c2 <fputc+0x3c>
    53aa:	e8 81       	ld	r30, Y
    53ac:	f9 81       	ldd	r31, Y+1	; 0x01
    53ae:	01 93       	st	Z+, r16
    53b0:	f9 83       	std	Y+1, r31	; 0x01
    53b2:	e8 83       	st	Y, r30
    53b4:	06 c0       	rjmp	.+12     	; 0x53c2 <fputc+0x3c>
    53b6:	e8 85       	ldd	r30, Y+8	; 0x08
    53b8:	f9 85       	ldd	r31, Y+9	; 0x09
    53ba:	80 2f       	mov	r24, r16
    53bc:	09 95       	icall
    53be:	00 97       	sbiw	r24, 0x00	; 0
    53c0:	31 f4       	brne	.+12     	; 0x53ce <fputc+0x48>
    53c2:	8e 81       	ldd	r24, Y+6	; 0x06
    53c4:	9f 81       	ldd	r25, Y+7	; 0x07
    53c6:	01 96       	adiw	r24, 0x01	; 1
    53c8:	9f 83       	std	Y+7, r25	; 0x07
    53ca:	8e 83       	std	Y+6, r24	; 0x06
    53cc:	02 c0       	rjmp	.+4      	; 0x53d2 <fputc+0x4c>
    53ce:	0f ef       	ldi	r16, 0xFF	; 255
    53d0:	1f ef       	ldi	r17, 0xFF	; 255
    53d2:	c8 01       	movw	r24, r16
    53d4:	df 91       	pop	r29
    53d6:	cf 91       	pop	r28
    53d8:	1f 91       	pop	r17
    53da:	0f 91       	pop	r16
    53dc:	08 95       	ret

000053de <printf>:
    53de:	df 93       	push	r29
    53e0:	cf 93       	push	r28
    53e2:	cd b7       	in	r28, 0x3d	; 61
    53e4:	de b7       	in	r29, 0x3e	; 62
    53e6:	fe 01       	movw	r30, r28
    53e8:	35 96       	adiw	r30, 0x05	; 5
    53ea:	61 91       	ld	r22, Z+
    53ec:	71 91       	ld	r23, Z+
    53ee:	80 91 2e 0a 	lds	r24, 0x0A2E
    53f2:	90 91 2f 0a 	lds	r25, 0x0A2F
    53f6:	af 01       	movw	r20, r30
    53f8:	0e 94 40 27 	call	0x4e80	; 0x4e80 <vfprintf>
    53fc:	cf 91       	pop	r28
    53fe:	df 91       	pop	r29
    5400:	08 95       	ret

00005402 <putchar>:
    5402:	60 91 2e 0a 	lds	r22, 0x0A2E
    5406:	70 91 2f 0a 	lds	r23, 0x0A2F
    540a:	0e 94 c3 29 	call	0x5386	; 0x5386 <fputc>
    540e:	08 95       	ret

00005410 <puts>:
    5410:	ef 92       	push	r14
    5412:	ff 92       	push	r15
    5414:	0f 93       	push	r16
    5416:	1f 93       	push	r17
    5418:	cf 93       	push	r28
    541a:	df 93       	push	r29
    541c:	8c 01       	movw	r16, r24
    541e:	e0 91 2e 0a 	lds	r30, 0x0A2E
    5422:	f0 91 2f 0a 	lds	r31, 0x0A2F
    5426:	83 81       	ldd	r24, Z+3	; 0x03
    5428:	81 ff       	sbrs	r24, 1
    542a:	1f c0       	rjmp	.+62     	; 0x546a <puts+0x5a>
    542c:	c0 e0       	ldi	r28, 0x00	; 0
    542e:	d0 e0       	ldi	r29, 0x00	; 0
    5430:	0a c0       	rjmp	.+20     	; 0x5446 <puts+0x36>
    5432:	db 01       	movw	r26, r22
    5434:	18 96       	adiw	r26, 0x08	; 8
    5436:	ed 91       	ld	r30, X+
    5438:	fc 91       	ld	r31, X
    543a:	19 97       	sbiw	r26, 0x09	; 9
    543c:	09 95       	icall
    543e:	00 97       	sbiw	r24, 0x00	; 0
    5440:	11 f0       	breq	.+4      	; 0x5446 <puts+0x36>
    5442:	cf ef       	ldi	r28, 0xFF	; 255
    5444:	df ef       	ldi	r29, 0xFF	; 255
    5446:	f8 01       	movw	r30, r16
    5448:	81 91       	ld	r24, Z+
    544a:	8f 01       	movw	r16, r30
    544c:	60 91 2e 0a 	lds	r22, 0x0A2E
    5450:	70 91 2f 0a 	lds	r23, 0x0A2F
    5454:	88 23       	and	r24, r24
    5456:	69 f7       	brne	.-38     	; 0x5432 <puts+0x22>
    5458:	db 01       	movw	r26, r22
    545a:	18 96       	adiw	r26, 0x08	; 8
    545c:	ed 91       	ld	r30, X+
    545e:	fc 91       	ld	r31, X
    5460:	19 97       	sbiw	r26, 0x09	; 9
    5462:	8a e0       	ldi	r24, 0x0A	; 10
    5464:	09 95       	icall
    5466:	00 97       	sbiw	r24, 0x00	; 0
    5468:	11 f0       	breq	.+4      	; 0x546e <puts+0x5e>
    546a:	cf ef       	ldi	r28, 0xFF	; 255
    546c:	df ef       	ldi	r29, 0xFF	; 255
    546e:	ce 01       	movw	r24, r28
    5470:	df 91       	pop	r29
    5472:	cf 91       	pop	r28
    5474:	1f 91       	pop	r17
    5476:	0f 91       	pop	r16
    5478:	ff 90       	pop	r15
    547a:	ef 90       	pop	r14
    547c:	08 95       	ret

0000547e <sprintf>:
    547e:	0f 93       	push	r16
    5480:	1f 93       	push	r17
    5482:	df 93       	push	r29
    5484:	cf 93       	push	r28
    5486:	cd b7       	in	r28, 0x3d	; 61
    5488:	de b7       	in	r29, 0x3e	; 62
    548a:	2e 97       	sbiw	r28, 0x0e	; 14
    548c:	0f b6       	in	r0, 0x3f	; 63
    548e:	f8 94       	cli
    5490:	de bf       	out	0x3e, r29	; 62
    5492:	0f be       	out	0x3f, r0	; 63
    5494:	cd bf       	out	0x3d, r28	; 61
    5496:	0d 89       	ldd	r16, Y+21	; 0x15
    5498:	1e 89       	ldd	r17, Y+22	; 0x16
    549a:	86 e0       	ldi	r24, 0x06	; 6
    549c:	8c 83       	std	Y+4, r24	; 0x04
    549e:	1a 83       	std	Y+2, r17	; 0x02
    54a0:	09 83       	std	Y+1, r16	; 0x01
    54a2:	8f ef       	ldi	r24, 0xFF	; 255
    54a4:	9f e7       	ldi	r25, 0x7F	; 127
    54a6:	9e 83       	std	Y+6, r25	; 0x06
    54a8:	8d 83       	std	Y+5, r24	; 0x05
    54aa:	9e 01       	movw	r18, r28
    54ac:	27 5e       	subi	r18, 0xE7	; 231
    54ae:	3f 4f       	sbci	r19, 0xFF	; 255
    54b0:	ce 01       	movw	r24, r28
    54b2:	01 96       	adiw	r24, 0x01	; 1
    54b4:	6f 89       	ldd	r22, Y+23	; 0x17
    54b6:	78 8d       	ldd	r23, Y+24	; 0x18
    54b8:	a9 01       	movw	r20, r18
    54ba:	0e 94 40 27 	call	0x4e80	; 0x4e80 <vfprintf>
    54be:	ef 81       	ldd	r30, Y+7	; 0x07
    54c0:	f8 85       	ldd	r31, Y+8	; 0x08
    54c2:	e0 0f       	add	r30, r16
    54c4:	f1 1f       	adc	r31, r17
    54c6:	10 82       	st	Z, r1
    54c8:	2e 96       	adiw	r28, 0x0e	; 14
    54ca:	0f b6       	in	r0, 0x3f	; 63
    54cc:	f8 94       	cli
    54ce:	de bf       	out	0x3e, r29	; 62
    54d0:	0f be       	out	0x3f, r0	; 63
    54d2:	cd bf       	out	0x3d, r28	; 61
    54d4:	cf 91       	pop	r28
    54d6:	df 91       	pop	r29
    54d8:	1f 91       	pop	r17
    54da:	0f 91       	pop	r16
    54dc:	08 95       	ret

000054de <__ultoa_invert>:
    54de:	fa 01       	movw	r30, r20
    54e0:	aa 27       	eor	r26, r26
    54e2:	28 30       	cpi	r18, 0x08	; 8
    54e4:	51 f1       	breq	.+84     	; 0x553a <__ultoa_invert+0x5c>
    54e6:	20 31       	cpi	r18, 0x10	; 16
    54e8:	81 f1       	breq	.+96     	; 0x554a <__ultoa_invert+0x6c>
    54ea:	e8 94       	clt
    54ec:	6f 93       	push	r22
    54ee:	6e 7f       	andi	r22, 0xFE	; 254
    54f0:	6e 5f       	subi	r22, 0xFE	; 254
    54f2:	7f 4f       	sbci	r23, 0xFF	; 255
    54f4:	8f 4f       	sbci	r24, 0xFF	; 255
    54f6:	9f 4f       	sbci	r25, 0xFF	; 255
    54f8:	af 4f       	sbci	r26, 0xFF	; 255
    54fa:	b1 e0       	ldi	r27, 0x01	; 1
    54fc:	3e d0       	rcall	.+124    	; 0x557a <__ultoa_invert+0x9c>
    54fe:	b4 e0       	ldi	r27, 0x04	; 4
    5500:	3c d0       	rcall	.+120    	; 0x557a <__ultoa_invert+0x9c>
    5502:	67 0f       	add	r22, r23
    5504:	78 1f       	adc	r23, r24
    5506:	89 1f       	adc	r24, r25
    5508:	9a 1f       	adc	r25, r26
    550a:	a1 1d       	adc	r26, r1
    550c:	68 0f       	add	r22, r24
    550e:	79 1f       	adc	r23, r25
    5510:	8a 1f       	adc	r24, r26
    5512:	91 1d       	adc	r25, r1
    5514:	a1 1d       	adc	r26, r1
    5516:	6a 0f       	add	r22, r26
    5518:	71 1d       	adc	r23, r1
    551a:	81 1d       	adc	r24, r1
    551c:	91 1d       	adc	r25, r1
    551e:	a1 1d       	adc	r26, r1
    5520:	20 d0       	rcall	.+64     	; 0x5562 <__ultoa_invert+0x84>
    5522:	09 f4       	brne	.+2      	; 0x5526 <__ultoa_invert+0x48>
    5524:	68 94       	set
    5526:	3f 91       	pop	r19
    5528:	2a e0       	ldi	r18, 0x0A	; 10
    552a:	26 9f       	mul	r18, r22
    552c:	11 24       	eor	r1, r1
    552e:	30 19       	sub	r19, r0
    5530:	30 5d       	subi	r19, 0xD0	; 208
    5532:	31 93       	st	Z+, r19
    5534:	de f6       	brtc	.-74     	; 0x54ec <__ultoa_invert+0xe>
    5536:	cf 01       	movw	r24, r30
    5538:	08 95       	ret
    553a:	46 2f       	mov	r20, r22
    553c:	47 70       	andi	r20, 0x07	; 7
    553e:	40 5d       	subi	r20, 0xD0	; 208
    5540:	41 93       	st	Z+, r20
    5542:	b3 e0       	ldi	r27, 0x03	; 3
    5544:	0f d0       	rcall	.+30     	; 0x5564 <__ultoa_invert+0x86>
    5546:	c9 f7       	brne	.-14     	; 0x553a <__ultoa_invert+0x5c>
    5548:	f6 cf       	rjmp	.-20     	; 0x5536 <__ultoa_invert+0x58>
    554a:	46 2f       	mov	r20, r22
    554c:	4f 70       	andi	r20, 0x0F	; 15
    554e:	40 5d       	subi	r20, 0xD0	; 208
    5550:	4a 33       	cpi	r20, 0x3A	; 58
    5552:	18 f0       	brcs	.+6      	; 0x555a <__ultoa_invert+0x7c>
    5554:	49 5d       	subi	r20, 0xD9	; 217
    5556:	31 fd       	sbrc	r19, 1
    5558:	40 52       	subi	r20, 0x20	; 32
    555a:	41 93       	st	Z+, r20
    555c:	02 d0       	rcall	.+4      	; 0x5562 <__ultoa_invert+0x84>
    555e:	a9 f7       	brne	.-22     	; 0x554a <__ultoa_invert+0x6c>
    5560:	ea cf       	rjmp	.-44     	; 0x5536 <__ultoa_invert+0x58>
    5562:	b4 e0       	ldi	r27, 0x04	; 4
    5564:	a6 95       	lsr	r26
    5566:	97 95       	ror	r25
    5568:	87 95       	ror	r24
    556a:	77 95       	ror	r23
    556c:	67 95       	ror	r22
    556e:	ba 95       	dec	r27
    5570:	c9 f7       	brne	.-14     	; 0x5564 <__ultoa_invert+0x86>
    5572:	00 97       	sbiw	r24, 0x00	; 0
    5574:	61 05       	cpc	r22, r1
    5576:	71 05       	cpc	r23, r1
    5578:	08 95       	ret
    557a:	9b 01       	movw	r18, r22
    557c:	ac 01       	movw	r20, r24
    557e:	0a 2e       	mov	r0, r26
    5580:	06 94       	lsr	r0
    5582:	57 95       	ror	r21
    5584:	47 95       	ror	r20
    5586:	37 95       	ror	r19
    5588:	27 95       	ror	r18
    558a:	ba 95       	dec	r27
    558c:	c9 f7       	brne	.-14     	; 0x5580 <__ultoa_invert+0xa2>
    558e:	62 0f       	add	r22, r18
    5590:	73 1f       	adc	r23, r19
    5592:	84 1f       	adc	r24, r20
    5594:	95 1f       	adc	r25, r21
    5596:	a0 1d       	adc	r26, r0
    5598:	08 95       	ret

0000559a <__eerd_byte_m128rfa1>:
    559a:	f9 99       	sbic	0x1f, 1	; 31
    559c:	fe cf       	rjmp	.-4      	; 0x559a <__eerd_byte_m128rfa1>
    559e:	92 bd       	out	0x22, r25	; 34
    55a0:	81 bd       	out	0x21, r24	; 33
    55a2:	f8 9a       	sbi	0x1f, 0	; 31
    55a4:	99 27       	eor	r25, r25
    55a6:	80 b5       	in	r24, 0x20	; 32
    55a8:	08 95       	ret

000055aa <__eewr_byte_m128rfa1>:
    55aa:	26 2f       	mov	r18, r22

000055ac <__eewr_r18_m128rfa1>:
    55ac:	f9 99       	sbic	0x1f, 1	; 31
    55ae:	fe cf       	rjmp	.-4      	; 0x55ac <__eewr_r18_m128rfa1>
    55b0:	1f ba       	out	0x1f, r1	; 31
    55b2:	92 bd       	out	0x22, r25	; 34
    55b4:	81 bd       	out	0x21, r24	; 33
    55b6:	20 bd       	out	0x20, r18	; 32
    55b8:	0f b6       	in	r0, 0x3f	; 63
    55ba:	f8 94       	cli
    55bc:	fa 9a       	sbi	0x1f, 2	; 31
    55be:	f9 9a       	sbi	0x1f, 1	; 31
    55c0:	0f be       	out	0x3f, r0	; 63
    55c2:	01 96       	adiw	r24, 0x01	; 1
    55c4:	08 95       	ret

000055c6 <calloc>:
    55c6:	ef 92       	push	r14
    55c8:	ff 92       	push	r15
    55ca:	0f 93       	push	r16
    55cc:	1f 93       	push	r17
    55ce:	cf 93       	push	r28
    55d0:	df 93       	push	r29
    55d2:	68 9f       	mul	r22, r24
    55d4:	80 01       	movw	r16, r0
    55d6:	69 9f       	mul	r22, r25
    55d8:	10 0d       	add	r17, r0
    55da:	78 9f       	mul	r23, r24
    55dc:	10 0d       	add	r17, r0
    55de:	11 24       	eor	r1, r1
    55e0:	c8 01       	movw	r24, r16
    55e2:	0e 94 08 2b 	call	0x5610	; 0x5610 <malloc>
    55e6:	e8 2e       	mov	r14, r24
    55e8:	e7 01       	movw	r28, r14
    55ea:	7e 01       	movw	r14, r28
    55ec:	f9 2e       	mov	r15, r25
    55ee:	e7 01       	movw	r28, r14
    55f0:	20 97       	sbiw	r28, 0x00	; 0
    55f2:	31 f0       	breq	.+12     	; 0x5600 <calloc+0x3a>
    55f4:	8e 2d       	mov	r24, r14
    55f6:	60 e0       	ldi	r22, 0x00	; 0
    55f8:	70 e0       	ldi	r23, 0x00	; 0
    55fa:	a8 01       	movw	r20, r16
    55fc:	0e 94 3b 2c 	call	0x5876	; 0x5876 <memset>
    5600:	ce 01       	movw	r24, r28
    5602:	df 91       	pop	r29
    5604:	cf 91       	pop	r28
    5606:	1f 91       	pop	r17
    5608:	0f 91       	pop	r16
    560a:	ff 90       	pop	r15
    560c:	ef 90       	pop	r14
    560e:	08 95       	ret

00005610 <malloc>:
    5610:	cf 93       	push	r28
    5612:	df 93       	push	r29
    5614:	82 30       	cpi	r24, 0x02	; 2
    5616:	91 05       	cpc	r25, r1
    5618:	10 f4       	brcc	.+4      	; 0x561e <malloc+0xe>
    561a:	82 e0       	ldi	r24, 0x02	; 2
    561c:	90 e0       	ldi	r25, 0x00	; 0
    561e:	e0 91 34 0a 	lds	r30, 0x0A34
    5622:	f0 91 35 0a 	lds	r31, 0x0A35
    5626:	40 e0       	ldi	r20, 0x00	; 0
    5628:	50 e0       	ldi	r21, 0x00	; 0
    562a:	20 e0       	ldi	r18, 0x00	; 0
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	26 c0       	rjmp	.+76     	; 0x567c <malloc+0x6c>
    5630:	60 81       	ld	r22, Z
    5632:	71 81       	ldd	r23, Z+1	; 0x01
    5634:	68 17       	cp	r22, r24
    5636:	79 07       	cpc	r23, r25
    5638:	e0 f0       	brcs	.+56     	; 0x5672 <malloc+0x62>
    563a:	68 17       	cp	r22, r24
    563c:	79 07       	cpc	r23, r25
    563e:	81 f4       	brne	.+32     	; 0x5660 <malloc+0x50>
    5640:	82 81       	ldd	r24, Z+2	; 0x02
    5642:	93 81       	ldd	r25, Z+3	; 0x03
    5644:	21 15       	cp	r18, r1
    5646:	31 05       	cpc	r19, r1
    5648:	31 f0       	breq	.+12     	; 0x5656 <malloc+0x46>
    564a:	d9 01       	movw	r26, r18
    564c:	13 96       	adiw	r26, 0x03	; 3
    564e:	9c 93       	st	X, r25
    5650:	8e 93       	st	-X, r24
    5652:	12 97       	sbiw	r26, 0x02	; 2
    5654:	2b c0       	rjmp	.+86     	; 0x56ac <malloc+0x9c>
    5656:	90 93 35 0a 	sts	0x0A35, r25
    565a:	80 93 34 0a 	sts	0x0A34, r24
    565e:	26 c0       	rjmp	.+76     	; 0x56ac <malloc+0x9c>
    5660:	41 15       	cp	r20, r1
    5662:	51 05       	cpc	r21, r1
    5664:	19 f0       	breq	.+6      	; 0x566c <malloc+0x5c>
    5666:	64 17       	cp	r22, r20
    5668:	75 07       	cpc	r23, r21
    566a:	18 f4       	brcc	.+6      	; 0x5672 <malloc+0x62>
    566c:	ab 01       	movw	r20, r22
    566e:	e9 01       	movw	r28, r18
    5670:	df 01       	movw	r26, r30
    5672:	9f 01       	movw	r18, r30
    5674:	72 81       	ldd	r23, Z+2	; 0x02
    5676:	63 81       	ldd	r22, Z+3	; 0x03
    5678:	e7 2f       	mov	r30, r23
    567a:	f6 2f       	mov	r31, r22
    567c:	30 97       	sbiw	r30, 0x00	; 0
    567e:	c1 f6       	brne	.-80     	; 0x5630 <malloc+0x20>
    5680:	41 15       	cp	r20, r1
    5682:	51 05       	cpc	r21, r1
    5684:	01 f1       	breq	.+64     	; 0x56c6 <malloc+0xb6>
    5686:	48 1b       	sub	r20, r24
    5688:	59 0b       	sbc	r21, r25
    568a:	44 30       	cpi	r20, 0x04	; 4
    568c:	51 05       	cpc	r21, r1
    568e:	80 f4       	brcc	.+32     	; 0x56b0 <malloc+0xa0>
    5690:	12 96       	adiw	r26, 0x02	; 2
    5692:	8d 91       	ld	r24, X+
    5694:	9c 91       	ld	r25, X
    5696:	13 97       	sbiw	r26, 0x03	; 3
    5698:	20 97       	sbiw	r28, 0x00	; 0
    569a:	19 f0       	breq	.+6      	; 0x56a2 <malloc+0x92>
    569c:	9b 83       	std	Y+3, r25	; 0x03
    569e:	8a 83       	std	Y+2, r24	; 0x02
    56a0:	04 c0       	rjmp	.+8      	; 0x56aa <malloc+0x9a>
    56a2:	90 93 35 0a 	sts	0x0A35, r25
    56a6:	80 93 34 0a 	sts	0x0A34, r24
    56aa:	fd 01       	movw	r30, r26
    56ac:	32 96       	adiw	r30, 0x02	; 2
    56ae:	46 c0       	rjmp	.+140    	; 0x573c <malloc+0x12c>
    56b0:	fd 01       	movw	r30, r26
    56b2:	e4 0f       	add	r30, r20
    56b4:	f5 1f       	adc	r31, r21
    56b6:	81 93       	st	Z+, r24
    56b8:	91 93       	st	Z+, r25
    56ba:	42 50       	subi	r20, 0x02	; 2
    56bc:	50 40       	sbci	r21, 0x00	; 0
    56be:	11 96       	adiw	r26, 0x01	; 1
    56c0:	5c 93       	st	X, r21
    56c2:	4e 93       	st	-X, r20
    56c4:	3b c0       	rjmp	.+118    	; 0x573c <malloc+0x12c>
    56c6:	20 91 32 0a 	lds	r18, 0x0A32
    56ca:	30 91 33 0a 	lds	r19, 0x0A33
    56ce:	21 15       	cp	r18, r1
    56d0:	31 05       	cpc	r19, r1
    56d2:	41 f4       	brne	.+16     	; 0x56e4 <malloc+0xd4>
    56d4:	20 91 b9 03 	lds	r18, 0x03B9
    56d8:	30 91 ba 03 	lds	r19, 0x03BA
    56dc:	30 93 33 0a 	sts	0x0A33, r19
    56e0:	20 93 32 0a 	sts	0x0A32, r18
    56e4:	20 91 bb 03 	lds	r18, 0x03BB
    56e8:	30 91 bc 03 	lds	r19, 0x03BC
    56ec:	21 15       	cp	r18, r1
    56ee:	31 05       	cpc	r19, r1
    56f0:	41 f4       	brne	.+16     	; 0x5702 <malloc+0xf2>
    56f2:	2d b7       	in	r18, 0x3d	; 61
    56f4:	3e b7       	in	r19, 0x3e	; 62
    56f6:	40 91 b7 03 	lds	r20, 0x03B7
    56fa:	50 91 b8 03 	lds	r21, 0x03B8
    56fe:	24 1b       	sub	r18, r20
    5700:	35 0b       	sbc	r19, r21
    5702:	e0 91 32 0a 	lds	r30, 0x0A32
    5706:	f0 91 33 0a 	lds	r31, 0x0A33
    570a:	e2 17       	cp	r30, r18
    570c:	f3 07       	cpc	r31, r19
    570e:	a0 f4       	brcc	.+40     	; 0x5738 <malloc+0x128>
    5710:	2e 1b       	sub	r18, r30
    5712:	3f 0b       	sbc	r19, r31
    5714:	28 17       	cp	r18, r24
    5716:	39 07       	cpc	r19, r25
    5718:	78 f0       	brcs	.+30     	; 0x5738 <malloc+0x128>
    571a:	ac 01       	movw	r20, r24
    571c:	4e 5f       	subi	r20, 0xFE	; 254
    571e:	5f 4f       	sbci	r21, 0xFF	; 255
    5720:	24 17       	cp	r18, r20
    5722:	35 07       	cpc	r19, r21
    5724:	48 f0       	brcs	.+18     	; 0x5738 <malloc+0x128>
    5726:	4e 0f       	add	r20, r30
    5728:	5f 1f       	adc	r21, r31
    572a:	50 93 33 0a 	sts	0x0A33, r21
    572e:	40 93 32 0a 	sts	0x0A32, r20
    5732:	81 93       	st	Z+, r24
    5734:	91 93       	st	Z+, r25
    5736:	02 c0       	rjmp	.+4      	; 0x573c <malloc+0x12c>
    5738:	e0 e0       	ldi	r30, 0x00	; 0
    573a:	f0 e0       	ldi	r31, 0x00	; 0
    573c:	cf 01       	movw	r24, r30
    573e:	df 91       	pop	r29
    5740:	cf 91       	pop	r28
    5742:	08 95       	ret

00005744 <free>:
    5744:	cf 93       	push	r28
    5746:	df 93       	push	r29
    5748:	00 97       	sbiw	r24, 0x00	; 0
    574a:	09 f4       	brne	.+2      	; 0x574e <free+0xa>
    574c:	91 c0       	rjmp	.+290    	; 0x5870 <free+0x12c>
    574e:	fc 01       	movw	r30, r24
    5750:	32 97       	sbiw	r30, 0x02	; 2
    5752:	13 82       	std	Z+3, r1	; 0x03
    5754:	12 82       	std	Z+2, r1	; 0x02
    5756:	60 91 34 0a 	lds	r22, 0x0A34
    575a:	70 91 35 0a 	lds	r23, 0x0A35
    575e:	61 15       	cp	r22, r1
    5760:	71 05       	cpc	r23, r1
    5762:	81 f4       	brne	.+32     	; 0x5784 <free+0x40>
    5764:	20 81       	ld	r18, Z
    5766:	31 81       	ldd	r19, Z+1	; 0x01
    5768:	28 0f       	add	r18, r24
    576a:	39 1f       	adc	r19, r25
    576c:	80 91 32 0a 	lds	r24, 0x0A32
    5770:	90 91 33 0a 	lds	r25, 0x0A33
    5774:	82 17       	cp	r24, r18
    5776:	93 07       	cpc	r25, r19
    5778:	99 f5       	brne	.+102    	; 0x57e0 <free+0x9c>
    577a:	f0 93 33 0a 	sts	0x0A33, r31
    577e:	e0 93 32 0a 	sts	0x0A32, r30
    5782:	76 c0       	rjmp	.+236    	; 0x5870 <free+0x12c>
    5784:	db 01       	movw	r26, r22
    5786:	80 e0       	ldi	r24, 0x00	; 0
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	02 c0       	rjmp	.+4      	; 0x5790 <free+0x4c>
    578c:	cd 01       	movw	r24, r26
    578e:	d9 01       	movw	r26, r18
    5790:	ae 17       	cp	r26, r30
    5792:	bf 07       	cpc	r27, r31
    5794:	48 f4       	brcc	.+18     	; 0x57a8 <free+0x64>
    5796:	12 96       	adiw	r26, 0x02	; 2
    5798:	2d 91       	ld	r18, X+
    579a:	3c 91       	ld	r19, X
    579c:	13 97       	sbiw	r26, 0x03	; 3
    579e:	21 15       	cp	r18, r1
    57a0:	31 05       	cpc	r19, r1
    57a2:	a1 f7       	brne	.-24     	; 0x578c <free+0x48>
    57a4:	cd 01       	movw	r24, r26
    57a6:	21 c0       	rjmp	.+66     	; 0x57ea <free+0xa6>
    57a8:	b3 83       	std	Z+3, r27	; 0x03
    57aa:	a2 83       	std	Z+2, r26	; 0x02
    57ac:	ef 01       	movw	r28, r30
    57ae:	49 91       	ld	r20, Y+
    57b0:	59 91       	ld	r21, Y+
    57b2:	9e 01       	movw	r18, r28
    57b4:	24 0f       	add	r18, r20
    57b6:	35 1f       	adc	r19, r21
    57b8:	a2 17       	cp	r26, r18
    57ba:	b3 07       	cpc	r27, r19
    57bc:	79 f4       	brne	.+30     	; 0x57dc <free+0x98>
    57be:	2d 91       	ld	r18, X+
    57c0:	3c 91       	ld	r19, X
    57c2:	11 97       	sbiw	r26, 0x01	; 1
    57c4:	24 0f       	add	r18, r20
    57c6:	35 1f       	adc	r19, r21
    57c8:	2e 5f       	subi	r18, 0xFE	; 254
    57ca:	3f 4f       	sbci	r19, 0xFF	; 255
    57cc:	31 83       	std	Z+1, r19	; 0x01
    57ce:	20 83       	st	Z, r18
    57d0:	12 96       	adiw	r26, 0x02	; 2
    57d2:	2d 91       	ld	r18, X+
    57d4:	3c 91       	ld	r19, X
    57d6:	13 97       	sbiw	r26, 0x03	; 3
    57d8:	33 83       	std	Z+3, r19	; 0x03
    57da:	22 83       	std	Z+2, r18	; 0x02
    57dc:	00 97       	sbiw	r24, 0x00	; 0
    57de:	29 f4       	brne	.+10     	; 0x57ea <free+0xa6>
    57e0:	f0 93 35 0a 	sts	0x0A35, r31
    57e4:	e0 93 34 0a 	sts	0x0A34, r30
    57e8:	43 c0       	rjmp	.+134    	; 0x5870 <free+0x12c>
    57ea:	dc 01       	movw	r26, r24
    57ec:	13 96       	adiw	r26, 0x03	; 3
    57ee:	fc 93       	st	X, r31
    57f0:	ee 93       	st	-X, r30
    57f2:	12 97       	sbiw	r26, 0x02	; 2
    57f4:	4d 91       	ld	r20, X+
    57f6:	5d 91       	ld	r21, X+
    57f8:	a4 0f       	add	r26, r20
    57fa:	b5 1f       	adc	r27, r21
    57fc:	ea 17       	cp	r30, r26
    57fe:	fb 07       	cpc	r31, r27
    5800:	69 f4       	brne	.+26     	; 0x581c <free+0xd8>
    5802:	20 81       	ld	r18, Z
    5804:	31 81       	ldd	r19, Z+1	; 0x01
    5806:	24 0f       	add	r18, r20
    5808:	35 1f       	adc	r19, r21
    580a:	2e 5f       	subi	r18, 0xFE	; 254
    580c:	3f 4f       	sbci	r19, 0xFF	; 255
    580e:	ec 01       	movw	r28, r24
    5810:	39 83       	std	Y+1, r19	; 0x01
    5812:	28 83       	st	Y, r18
    5814:	22 81       	ldd	r18, Z+2	; 0x02
    5816:	33 81       	ldd	r19, Z+3	; 0x03
    5818:	3b 83       	std	Y+3, r19	; 0x03
    581a:	2a 83       	std	Y+2, r18	; 0x02
    581c:	e0 e0       	ldi	r30, 0x00	; 0
    581e:	f0 e0       	ldi	r31, 0x00	; 0
    5820:	02 c0       	rjmp	.+4      	; 0x5826 <free+0xe2>
    5822:	fb 01       	movw	r30, r22
    5824:	bc 01       	movw	r22, r24
    5826:	db 01       	movw	r26, r22
    5828:	12 96       	adiw	r26, 0x02	; 2
    582a:	8d 91       	ld	r24, X+
    582c:	9c 91       	ld	r25, X
    582e:	13 97       	sbiw	r26, 0x03	; 3
    5830:	00 97       	sbiw	r24, 0x00	; 0
    5832:	b9 f7       	brne	.-18     	; 0x5822 <free+0xde>
    5834:	9b 01       	movw	r18, r22
    5836:	2e 5f       	subi	r18, 0xFE	; 254
    5838:	3f 4f       	sbci	r19, 0xFF	; 255
    583a:	8d 91       	ld	r24, X+
    583c:	9c 91       	ld	r25, X
    583e:	11 97       	sbiw	r26, 0x01	; 1
    5840:	82 0f       	add	r24, r18
    5842:	93 1f       	adc	r25, r19
    5844:	40 91 32 0a 	lds	r20, 0x0A32
    5848:	50 91 33 0a 	lds	r21, 0x0A33
    584c:	48 17       	cp	r20, r24
    584e:	59 07       	cpc	r21, r25
    5850:	79 f4       	brne	.+30     	; 0x5870 <free+0x12c>
    5852:	30 97       	sbiw	r30, 0x00	; 0
    5854:	29 f4       	brne	.+10     	; 0x5860 <free+0x11c>
    5856:	10 92 35 0a 	sts	0x0A35, r1
    585a:	10 92 34 0a 	sts	0x0A34, r1
    585e:	02 c0       	rjmp	.+4      	; 0x5864 <free+0x120>
    5860:	13 82       	std	Z+3, r1	; 0x03
    5862:	12 82       	std	Z+2, r1	; 0x02
    5864:	22 50       	subi	r18, 0x02	; 2
    5866:	30 40       	sbci	r19, 0x00	; 0
    5868:	30 93 33 0a 	sts	0x0A33, r19
    586c:	20 93 32 0a 	sts	0x0A32, r18
    5870:	df 91       	pop	r29
    5872:	cf 91       	pop	r28
    5874:	08 95       	ret

00005876 <memset>:
    5876:	dc 01       	movw	r26, r24
    5878:	01 c0       	rjmp	.+2      	; 0x587c <memset+0x6>
    587a:	6d 93       	st	X+, r22
    587c:	41 50       	subi	r20, 0x01	; 1
    587e:	50 40       	sbci	r21, 0x00	; 0
    5880:	e0 f7       	brcc	.-8      	; 0x587a <memset+0x4>
    5882:	08 95       	ret

00005884 <_exit>:
    5884:	f8 94       	cli

00005886 <__stop_program>:
    5886:	ff cf       	rjmp	.-2      	; 0x5886 <__stop_program>
