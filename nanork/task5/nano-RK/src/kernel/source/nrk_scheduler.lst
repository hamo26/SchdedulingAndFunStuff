   1               		.file	"nrk_scheduler.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 137               		.data
 138               	.LC0:
 139 0000 4164 6420 		.string	"Add cash to task%d to cash %d, period is %d <===\n"
 139      6361 7368 
 139      2074 6F20 
 139      7461 736B 
 139      2564 2074 
 140               	.LC1:
 141 0032 4341 5348 		.string	"CASH task%d passes deadline <====\n"
 141      2074 6173 
 141      6B25 6420 
 141      7061 7373 
 141      6573 2064 
 142               	.LC2:
 143 0055 6D69 6E5F 		.string	"min_id%d' cash remaining is %d <$$$$$$$$$$$\n"
 143      6964 2564 
 143      2720 6361 
 143      7368 2072 
 143      656D 6169 
 144               	.LC3:
 145 0082 5265 706C 		.string	"Replenish CBS of Task %d\n"
 145      656E 6973 
 145      6820 4342 
 145      5320 6F66 
 145      2054 6173 
 146               	.LC4:
 147 009c 5461 736B 		.string	"Task %d: Replenish CBS <-------- \n"
 147      2025 643A 
 147      2052 6570 
 147      6C65 6E69 
 147      7368 2043 
 148               		.text
 150               	.global	_nrk_scheduler
 152               	_nrk_scheduler:
 153               		.stabd	46,0,0
   1:..//src/kernel/source/nrk_scheduler.c **** /******************************************************************************
   2:..//src/kernel/source/nrk_scheduler.c ****  *  Nano-RK, a real-time operating system for sensor networks.
   3:..//src/kernel/source/nrk_scheduler.c ****  *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:..//src/kernel/source/nrk_scheduler.c ****  *  All rights reserved.
   5:..//src/kernel/source/nrk_scheduler.c ****  *
   6:..//src/kernel/source/nrk_scheduler.c ****  *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:..//src/kernel/source/nrk_scheduler.c ****  *  Licensing Model. If you are unsure which license to use please refer to:
   8:..//src/kernel/source/nrk_scheduler.c ****  *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:..//src/kernel/source/nrk_scheduler.c ****  *
  10:..//src/kernel/source/nrk_scheduler.c ****  *  This program is free software: you can redistribute it and/or modify
  11:..//src/kernel/source/nrk_scheduler.c ****  *  it under the terms of the GNU General Public License as published by
  12:..//src/kernel/source/nrk_scheduler.c ****  *  the Free Software Foundation, version 2.0 of the License.
  13:..//src/kernel/source/nrk_scheduler.c ****  *
  14:..//src/kernel/source/nrk_scheduler.c ****  *  This program is distributed in the hope that it will be useful,
  15:..//src/kernel/source/nrk_scheduler.c ****  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:..//src/kernel/source/nrk_scheduler.c ****  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:..//src/kernel/source/nrk_scheduler.c ****  *  GNU General Public License for more details.
  18:..//src/kernel/source/nrk_scheduler.c ****  *
  19:..//src/kernel/source/nrk_scheduler.c ****  *  You should have received a copy of the GNU General Public License
  20:..//src/kernel/source/nrk_scheduler.c ****  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:..//src/kernel/source/nrk_scheduler.c ****  *
  22:..//src/kernel/source/nrk_scheduler.c ****  *  Contributing Authors (specific to this file): *  Anthony Rowe
  23:..//src/kernel/source/nrk_scheduler.c ****  *  Zane Starr
  24:..//src/kernel/source/nrk_scheduler.c ****  *  Anand Eswaren
  25:..//src/kernel/source/nrk_scheduler.c ****  *******************************************************************************/
  26:..//src/kernel/source/nrk_scheduler.c **** 
  27:..//src/kernel/source/nrk_scheduler.c **** #include <nrk.h>
  28:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_task.h>
  29:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_defs.h>
  30:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_error.h>
  31:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_events.h>
  32:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_scheduler.h>
  33:..//src/kernel/source/nrk_scheduler.c **** #include <include.h>
  34:..//src/kernel/source/nrk_scheduler.c **** #include <ulib.h>
  35:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_timer.h>
  36:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_time.h>
  37:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_cfg.h>
  38:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_cpu.h>
  39:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_watchdog.h>
  40:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_platform_time.h>
  41:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_stats.h>
  42:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_sw_wdt.h>
  43:..//src/kernel/source/nrk_scheduler.c **** 
  44:..//src/kernel/source/nrk_scheduler.c **** 
  45:..//src/kernel/source/nrk_scheduler.c **** // This define was moved into nrk_platform_time.h since it needs to be different based on the clk s
  46:..//src/kernel/source/nrk_scheduler.c **** // 750 measure to 100uS
  47:..//src/kernel/source/nrk_scheduler.c **** // 800 * .125 = 100us
  48:..//src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    750
  49:..//src/kernel/source/nrk_scheduler.c **** // For rfa1:
  50:..//src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    1500 
  51:..//src/kernel/source/nrk_scheduler.c **** 
  52:..//src/kernel/source/nrk_scheduler.c **** uint8_t t;
  53:..//src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
  54:..//src/kernel/source/nrk_scheduler.c **** {
 155               	.LM0:
 156               	.LFBB1:
 157 0000 2F92      		push r2
 158 0002 3F92      		push r3
 159 0004 4F92      		push r4
 160 0006 5F92      		push r5
 161 0008 6F92      		push r6
 162 000a 7F92      		push r7
 163 000c 8F92      		push r8
 164 000e 9F92      		push r9
 165 0010 AF92      		push r10
 166 0012 BF92      		push r11
 167 0014 CF92      		push r12
 168 0016 DF92      		push r13
 169 0018 EF92      		push r14
 170 001a FF92      		push r15
 171 001c 0F93      		push r16
 172 001e 1F93      		push r17
 173 0020 DF93      		push r29
 174 0022 CF93      		push r28
 175 0024 0F92      		push __tmp_reg__
 176 0026 CDB7      		in r28,__SP_L__
 177 0028 DEB7      		in r29,__SP_H__
 178               	/* prologue: function */
 179               	/* frame size = 1 */
 180               	/* stack size = 19 */
 181               	.L__stack_usage = 19
  55:..//src/kernel/source/nrk_scheduler.c ****     int8_t task_ID;
  56:..//src/kernel/source/nrk_scheduler.c ****     uint16_t next_wake;
  57:..//src/kernel/source/nrk_scheduler.c ****     uint16_t start_time_stamp;
  58:..//src/kernel/source/nrk_scheduler.c **** 
  59:..//src/kernel/source/nrk_scheduler.c ****     _nrk_precision_os_timer_reset();
 183               	.LM1:
 184 002a 0E94 0000 		call _nrk_precision_os_timer_reset
  60:..//src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();   // this should be removed...  Not needed
 186               	.LM2:
 187 002e 0E94 0000 		call nrk_int_disable
  61:..//src/kernel/source/nrk_scheduler.c **** 
  62:..//src/kernel/source/nrk_scheduler.c **** 
  63:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
  64:..//src/kernel/source/nrk_scheduler.c ****     _nrk_high_speed_timer_reset();
 189               	.LM3:
 190 0032 0E94 0000 		call _nrk_high_speed_timer_reset
  65:..//src/kernel/source/nrk_scheduler.c ****     start_time_stamp=_nrk_high_speed_timer_get();
 192               	.LM4:
 193 0036 0E94 0000 		call _nrk_high_speed_timer_get
 194 003a 2C01      		movw r4,r24
  66:..//src/kernel/source/nrk_scheduler.c **** #endif
  67:..//src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
 196               	.LM5:
 197 003c 8AEF      		ldi r24,lo8(-6)
 198 003e 0E94 0000 		call _nrk_set_next_wakeup
  68:..//src/kernel/source/nrk_scheduler.c ****     // Set to huge number which will later get set to min
  69:..//src/kernel/source/nrk_scheduler.c **** 
  70:..//src/kernel/source/nrk_scheduler.c ****     next_wake=60000;
  71:..//src/kernel/source/nrk_scheduler.c ****     // Safety zone starts here....
  72:..//src/kernel/source/nrk_scheduler.c **** 
  73:..//src/kernel/source/nrk_scheduler.c **** 
  74:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_WATCHDOG
  75:..//src/kernel/source/nrk_scheduler.c ****     nrk_watchdog_reset();
  76:..//src/kernel/source/nrk_scheduler.c **** #endif
  77:..//src/kernel/source/nrk_scheduler.c **** 
  78:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_SW_WDT
  79:..//src/kernel/source/nrk_scheduler.c ****     _nrk_sw_wdt_check();
  80:..//src/kernel/source/nrk_scheduler.c **** #endif
  81:..//src/kernel/source/nrk_scheduler.c **** 
  82:..//src/kernel/source/nrk_scheduler.c **** 
  83:..//src/kernel/source/nrk_scheduler.c **** 
  84:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
  85:..//src/kernel/source/nrk_scheduler.c ****     //nrk_kprintf( PSTR("*"));
  86:..//src/kernel/source/nrk_scheduler.c ****     //Check if OS tick was delayed...
  87:..//src/kernel/source/nrk_scheduler.c ****     // if(_nrk_cpu_state!=CPU_SLEEP && _nrk_os_timer_get()!=0) {
  88:..//src/kernel/source/nrk_scheduler.c ****     //		nrk_kprintf( PSTR("X" ));
  89:..//src/kernel/source/nrk_scheduler.c ****     //printf( "%u ",_nrk_os_timer_get());
  90:..//src/kernel/source/nrk_scheduler.c ****     //	}
  91:..//src/kernel/source/nrk_scheduler.c ****     //printf( "%u\r\n",_nrk_prev_timer_val);
  92:..//src/kernel/source/nrk_scheduler.c ****     if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
  93:..//src/kernel/source/nrk_scheduler.c **** 	nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
  94:..//src/kernel/source/nrk_scheduler.c **** #endif
  95:..//src/kernel/source/nrk_scheduler.c ****     //while(_nrk_time_trigger>0)
  96:..//src/kernel/source/nrk_scheduler.c ****     //{
  97:..//src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
 200               	.LM6:
 201 0042 6091 0000 		lds r22,_nrk_prev_timer_val
 202 0046 70E0      		ldi r23,lo8(0)
 203 0048 80E0      		ldi r24,lo8(0)
 204 004a 90E0      		ldi r25,hi8(0)
 205 004c 23EB      		ldi r18,lo8(976563)
 206 004e 36EE      		ldi r19,hi8(976563)
 207 0050 4EE0      		ldi r20,hlo8(976563)
 208 0052 50E0      		ldi r21,hhi8(976563)
 209 0054 0E94 0000 		call __mulsi3
 210 0058 7B01      		movw r14,r22
 211 005a 8C01      		movw r16,r24
 212 005c 8091 0000 		lds r24,nrk_system_time+4
 213 0060 9091 0000 		lds r25,nrk_system_time+4+1
 214 0064 A091 0000 		lds r26,nrk_system_time+4+2
 215 0068 B091 0000 		lds r27,nrk_system_time+4+3
 216 006c E80E      		add r14,r24
 217 006e F91E      		adc r15,r25
 218 0070 0A1F      		adc r16,r26
 219 0072 1B1F      		adc r17,r27
  98:..//src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 221               	.LM7:
 222 0074 C801      		movw r24,r16
 223 0076 B701      		movw r22,r14
 224 0078 0E94 0000 		call __udivmodsi4
 225 007c E61A      		sub r14,r22
 226 007e F70A      		sbc r15,r23
 227 0080 080B      		sbc r16,r24
 228 0082 190B      		sbc r17,r25
 229 0084 8091 0000 		lds r24,nrk_system_time
 230 0088 9091 0000 		lds r25,nrk_system_time+1
 231 008c A091 0000 		lds r26,nrk_system_time+2
 232 0090 B091 0000 		lds r27,nrk_system_time+3
  99:..//src/kernel/source/nrk_scheduler.c **** 
 100:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 101:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
 102:..//src/kernel/source/nrk_scheduler.c ****     {
 103:..//src/kernel/source/nrk_scheduler.c **** 	if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
 104:..//src/kernel/source/nrk_scheduler.c **** 	_nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 105:..//src/kernel/source/nrk_scheduler.c **** 	// Add 0 time since the preempted call before set the correct value
 106:..//src/kernel/source/nrk_scheduler.c **** 	_nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
 107:..//src/kernel/source/nrk_scheduler.c ****     }
 108:..//src/kernel/source/nrk_scheduler.c ****     else
 109:..//src/kernel/source/nrk_scheduler.c ****     {
 110:..//src/kernel/source/nrk_scheduler.c **** 	if(nrk_cur_task_TCB->suspend_flag==1)
 111:..//src/kernel/source/nrk_scheduler.c **** 	    _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 112:..//src/kernel/source/nrk_scheduler.c **** 	else
 113:..//src/kernel/source/nrk_scheduler.c **** 	    _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 114:..//src/kernel/source/nrk_scheduler.c ****     }
 115:..//src/kernel/source/nrk_scheduler.c **** #endif
 116:..//src/kernel/source/nrk_scheduler.c **** 
 117:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 118:..//src/kernel/source/nrk_scheduler.c ****     {
 119:..//src/kernel/source/nrk_scheduler.c **** 	nrk_system_time.nano_secs-=NANOS_PER_SEC;
 120:..//src/kernel/source/nrk_scheduler.c **** 	nrk_system_time.secs++;
 121:..//src/kernel/source/nrk_scheduler.c **** 	nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 234               	.LM8:
 235 0094 73EB      		ldi r23,lo8(976563)
 236 0096 A72E      		mov r10,r23
 237 0098 76EE      		ldi r23,hi8(976563)
 238 009a B72E      		mov r11,r23
 239 009c 7EE0      		ldi r23,hlo8(976563)
 240 009e C72E      		mov r12,r23
 241 00a0 D12C      		mov r13,__zero_reg__
 117:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 243               	.LM9:
 244 00a2 00C0      		rjmp .L2
 245               	.L3:
 119:..//src/kernel/source/nrk_scheduler.c **** 	nrk_system_time.nano_secs-=NANOS_PER_SEC;
 247               	.LM10:
 248 00a4 40E0      		ldi r20,lo8(-1000000000)
 249 00a6 56E3      		ldi r21,hi8(-1000000000)
 250 00a8 65E6      		ldi r22,hlo8(-1000000000)
 251 00aa 74EC      		ldi r23,hhi8(-1000000000)
 252 00ac E40E      		add r14,r20
 253 00ae F51E      		adc r15,r21
 254 00b0 061F      		adc r16,r22
 255 00b2 171F      		adc r17,r23
 257               	.LM11:
 258 00b4 C801      		movw r24,r16
 259 00b6 B701      		movw r22,r14
 260 00b8 A601      		movw r20,r12
 261 00ba 9501      		movw r18,r10
 262 00bc 0E94 0000 		call __udivmodsi4
 263 00c0 E61A      		sub r14,r22
 264 00c2 F70A      		sbc r15,r23
 265 00c4 080B      		sbc r16,r24
 266 00c6 190B      		sbc r17,r25
 267 00c8 D401      		movw r26,r8
 268 00ca C301      		movw r24,r6
 269               	.L2:
 271               	.LM12:
 272 00cc 3C01      		movw r6,r24
 273 00ce 4D01      		movw r8,r26
 274 00d0 0894      		sec
 275 00d2 611C      		adc r6,__zero_reg__
 276 00d4 711C      		adc r7,__zero_reg__
 277 00d6 811C      		adc r8,__zero_reg__
 278 00d8 911C      		adc r9,__zero_reg__
 117:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 280               	.LM13:
 281 00da 50E0      		ldi r21,lo8(1000000000)
 282 00dc E516      		cp r14,r21
 283 00de 5AEC      		ldi r21,hi8(1000000000)
 284 00e0 F506      		cpc r15,r21
 285 00e2 5AE9      		ldi r21,hlo8(1000000000)
 286 00e4 0507      		cpc r16,r21
 287 00e6 5BE3      		ldi r21,hhi8(1000000000)
 288 00e8 1507      		cpc r17,r21
 289 00ea 00F4      		brsh .L3
 117:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 291               	.LM14:
 292 00ec 8093 0000 		sts nrk_system_time,r24
 293 00f0 9093 0000 		sts nrk_system_time+1,r25
 294 00f4 A093 0000 		sts nrk_system_time+2,r26
 295 00f8 B093 0000 		sts nrk_system_time+3,r27
 296 00fc E092 0000 		sts nrk_system_time+4,r14
 297 0100 F092 0000 		sts nrk_system_time+4+1,r15
 298 0104 0093 0000 		sts nrk_system_time+4+2,r16
 299 0108 1093 0000 		sts nrk_system_time+4+3,r17
 122:..//src/kernel/source/nrk_scheduler.c ****     }
 123:..//src/kernel/source/nrk_scheduler.c ****     //  _nrk_time_trigger--;
 124:..//src/kernel/source/nrk_scheduler.c ****     //}
 125:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
 301               	.LM15:
 302 010c E091 0000 		lds r30,nrk_cur_task_TCB
 303 0110 F091 0000 		lds r31,nrk_cur_task_TCB+1
 304 0114 8581      		ldd r24,Z+5
 305 0116 8823      		tst r24
 306 0118 01F0      		breq .L4
 308               	.LM16:
 309 011a 8185      		ldd r24,Z+9
 310 011c 8430      		cpi r24,lo8(4)
 311 011e 01F0      		breq .L4
 126:..//src/kernel/source/nrk_scheduler.c ****     {
 127:..//src/kernel/source/nrk_scheduler.c **** 	//	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 128:..//src/kernel/source/nrk_scheduler.c **** 
 129:..//src/kernel/source/nrk_scheduler.c **** 	if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
 313               	.LM17:
 314 0120 8781      		ldd r24,Z+7
 315 0122 8230      		cpi r24,lo8(2)
 316 0124 01F0      		breq .L48
 317               	.L5:
 130:..//src/kernel/source/nrk_scheduler.c **** 	    nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 131:..//src/kernel/source/nrk_scheduler.c **** 	else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
 319               	.LM18:
 320 0126 8823      		tst r24
 321 0128 01F0      		breq .L7
 323               	.LM19:
 324 012a 8681      		ldd r24,Z+6
 325 012c 8823      		tst r24
 326 012e 01F4      		brne .L8
 327               	.L48:
 132:..//src/kernel/source/nrk_scheduler.c **** 	    nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 329               	.LM20:
 330 0130 85E0      		ldi r24,lo8(5)
 331 0132 00C0      		rjmp .L49
 332               	.L8:
 133:..//src/kernel/source/nrk_scheduler.c **** 	else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
 134:..//src/kernel/source/nrk_scheduler.c **** 	    nrk_cur_task_TCB->task_state = SUSPENDED;
 334               	.LM21:
 335 0134 83E0      		ldi r24,lo8(3)
 336               	.L49:
 337 0136 8187      		std Z+9,r24
 338 0138 00C0      		rjmp .L6
 339               	.L7:
 135:..//src/kernel/source/nrk_scheduler.c **** 	else
 136:..//src/kernel/source/nrk_scheduler.c **** 	{
 137:..//src/kernel/source/nrk_scheduler.c **** 	    nrk_cur_task_TCB->task_state = SUSPENDED;
 341               	.LM22:
 342 013a 83E0      		ldi r24,lo8(3)
 343 013c 8187      		std Z+9,r24
 138:..//src/kernel/source/nrk_scheduler.c **** 	    nrk_cur_task_TCB->event_suspend=0;
 345               	.LM23:
 346 013e 1782      		std Z+7,__zero_reg__
 139:..//src/kernel/source/nrk_scheduler.c **** 	    nrk_cur_task_TCB->nw_flag=0;
 348               	.LM24:
 349 0140 1682      		std Z+6,__zero_reg__
 350               	.L6:
 140:..//src/kernel/source/nrk_scheduler.c **** 	}
 141:..//src/kernel/source/nrk_scheduler.c **** 	nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
 352               	.LM25:
 353 0142 8085      		ldd r24,Z+8
 354 0144 0E94 0000 		call nrk_rem_from_readyQ
 355               	.L4:
 142:..//src/kernel/source/nrk_scheduler.c ****     }
 143:..//src/kernel/source/nrk_scheduler.c ****     //nrk_print_readyQ();
 144:..//src/kernel/source/nrk_scheduler.c **** 
 145:..//src/kernel/source/nrk_scheduler.c ****     // Update cpu used value for ended task
 146:..//src/kernel/source/nrk_scheduler.c ****     // If the task has used its reserve, suspend task
 147:..//src/kernel/source/nrk_scheduler.c ****     // Don't disable IdleTask which is 0
 148:..//src/kernel/source/nrk_scheduler.c ****     // Don't decrease cpu_remaining if reserve is 0 and hence disabled
 149:..//src/kernel/source/nrk_scheduler.c **** 
 150:..//src/kernel/source/nrk_scheduler.c **** 
 151:..//src/kernel/source/nrk_scheduler.c **** #ifdef CBS_CASH
 152:..//src/kernel/source/nrk_scheduler.c **** 
 153:..//src/kernel/source/nrk_scheduler.c ****     // 1:Add Cash
 154:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->task_state == SUSPENDED && nrk_cur_task_TCB->task_type == CBS_TASK){
 357               	.LM26:
 358 0148 A091 0000 		lds r26,nrk_cur_task_TCB
 359 014c B091 0000 		lds r27,nrk_cur_task_TCB+1
 360 0150 1996      		adiw r26,9
 361 0152 8C91      		ld r24,X
 362 0154 1997      		sbiw r26,9
 363 0156 8330      		cpi r24,lo8(3)
 364 0158 01F0      		breq .+2
 365 015a 00C0      		rjmp .L9
 367               	.LM27:
 368 015c 9196      		adiw r26,33
 369 015e 8C91      		ld r24,X
 370 0160 9197      		sbiw r26,33
 371 0162 8330      		cpi r24,lo8(3)
 372 0164 01F0      		breq .+2
 373 0166 00C0      		rjmp .L9
 155:..//src/kernel/source/nrk_scheduler.c **** 	nrk_task_TCB[nrk_cur_task_TCB->task_ID].cash = nrk_cur_task_TCB->cpu_remaining;
 375               	.LM28:
 376 0168 1896      		adiw r26,8
 377 016a 2C91      		ld r18,X
 378 016c 1897      		sbiw r26,8
 379 016e 3327      		clr r19
 380 0170 27FD      		sbrc r18,7
 381 0172 3095      		com r19
 382 0174 86E2      		ldi r24,lo8(38)
 383 0176 90E0      		ldi r25,hi8(38)
 384 0178 289F      		mul r18,r24
 385 017a F001      		movw r30,r0
 386 017c 299F      		mul r18,r25
 387 017e F00D      		add r31,r0
 388 0180 389F      		mul r19,r24
 389 0182 F00D      		add r31,r0
 390 0184 1124      		clr r1
 391 0186 E050      		subi r30,lo8(-(nrk_task_TCB))
 392 0188 F040      		sbci r31,hi8(-(nrk_task_TCB))
 393 018a 5996      		adiw r26,25
 394 018c 8D91      		ld r24,X+
 395 018e 9C91      		ld r25,X
 396 0190 5A97      		sbiw r26,25+1
 397 0192 93A3      		std Z+35,r25
 398 0194 82A3      		std Z+34,r24
 156:..//src/kernel/source/nrk_scheduler.c **** 	nrk_task_TCB[nrk_cur_task_TCB->task_ID].cash_period = nrk_cur_task_TCB->next_period - _nrk_prev_ti
 400               	.LM29:
 401 0196 5796      		adiw r26,23
 402 0198 8D91      		ld r24,X+
 403 019a 9C91      		ld r25,X
 404 019c 5897      		sbiw r26,23+1
 405 019e 4091 0000 		lds r20,_nrk_prev_timer_val
 406 01a2 BC01      		movw r22,r24
 407 01a4 641B      		sub r22,r20
 408 01a6 7109      		sbc r23,__zero_reg__
 409 01a8 75A3      		std Z+37,r23
 410 01aa 64A3      		std Z+36,r22
 157:..//src/kernel/source/nrk_scheduler.c **** 	printf("Add cash to task%d to cash %d, period is %d <===\n", nrk_cur_task_TCB->task_ID, nrk_task_T
 412               	.LM30:
 413 01ac ADB7      		in r26,__SP_L__
 414 01ae BEB7      		in r27,__SP_H__
 415 01b0 1897      		sbiw r26,8
 416 01b2 0FB6      		in __tmp_reg__,__SREG__
 417 01b4 F894      		cli
 418 01b6 BEBF      		out __SP_H__,r27
 419 01b8 0FBE      		out __SREG__,__tmp_reg__
 420 01ba ADBF      		out __SP_L__,r26
 421 01bc 6DB7      		in r22,__SP_L__
 422 01be 7EB7      		in r23,__SP_H__
 423 01c0 6F5F      		subi r22,lo8(-(1))
 424 01c2 7F4F      		sbci r23,hi8(-(1))
 425 01c4 40E0      		ldi r20,lo8(.LC0)
 426 01c6 50E0      		ldi r21,hi8(.LC0)
 427 01c8 1296      		adiw r26,1+1
 428 01ca 5C93      		st X,r21
 429 01cc 4E93      		st -X,r20
 430 01ce 1197      		sbiw r26,1
 431 01d0 DB01      		movw r26,r22
 432 01d2 1396      		adiw r26,2+1
 433 01d4 3C93      		st X,r19
 434 01d6 2E93      		st -X,r18
 435 01d8 1297      		sbiw r26,2
 436 01da 22A1      		ldd r18,Z+34
 437 01dc 33A1      		ldd r19,Z+35
 438 01de 1596      		adiw r26,4+1
 439 01e0 3C93      		st X,r19
 440 01e2 2E93      		st -X,r18
 441 01e4 1497      		sbiw r26,4
 442 01e6 1796      		adiw r26,6+1
 443 01e8 9C93      		st X,r25
 444 01ea 8E93      		st -X,r24
 445 01ec 1697      		sbiw r26,6
 446 01ee 0E94 0000 		call printf
 447 01f2 EDB7      		in r30,__SP_L__
 448 01f4 FEB7      		in r31,__SP_H__
 449 01f6 3896      		adiw r30,8
 450 01f8 0FB6      		in __tmp_reg__,__SREG__
 451 01fa F894      		cli
 452 01fc FEBF      		out __SP_H__,r31
 453 01fe 0FBE      		out __SREG__,__tmp_reg__
 454 0200 EDBF      		out __SP_L__,r30
 455               	.L9:
 457               	.LM31:
 458 0202 00E0      		ldi r16,lo8(nrk_task_TCB+33)
 459 0204 10E0      		ldi r17,hi8(nrk_task_TCB+33)
  53:..//src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
 461               	.LM32:
 462 0206 5801      		movw r10,r16
 158:..//src/kernel/source/nrk_scheduler.c ****     }
 159:..//src/kernel/source/nrk_scheduler.c **** 
 160:..//src/kernel/source/nrk_scheduler.c ****     // 2:Maintein CashQ
 161:..//src/kernel/source/nrk_scheduler.c ****     // CASH book keeping - update cash given prev timer val
 162:..//src/kernel/source/nrk_scheduler.c ****     // Loop through all nrk tasks - Delete CBS tasks that passed deadline or reduce cash_period.
 163:..//src/kernel/source/nrk_scheduler.c ****     int i = 0;
 164:..//src/kernel/source/nrk_scheduler.c ****     for(i = 0; i < NRK_MAX_TASKS; i++){
 165:..//src/kernel/source/nrk_scheduler.c **** 	if(nrk_task_TCB[i].task_type != IDLE_TASK) {
 166:..//src/kernel/source/nrk_scheduler.c **** 	    // update all cash period
 167:..//src/kernel/source/nrk_scheduler.c **** 	    if (nrk_task_TCB[i].task_type == CBS_TASK){
 168:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[i].cash_period < _nrk_prev_timer_val && nrk_task_TCB[i].cash != 0){
 169:..//src/kernel/source/nrk_scheduler.c **** 		    // delete cash where deadline pass
 170:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[i].cash = 0;
 171:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[i].cash_period = 0;
 172:..//src/kernel/source/nrk_scheduler.c **** 		    printf("CASH task%d passes deadline <====\n", nrk_cur_task_TCB->task_ID);
 464               	.LM33:
 465 0208 60E0      		ldi r22,lo8(.LC1)
 466 020a E62E      		mov r14,r22
 467 020c 60E0      		ldi r22,hi8(.LC1)
 468 020e F62E      		mov r15,r22
 469               	.L12:
 165:..//src/kernel/source/nrk_scheduler.c **** 	if(nrk_task_TCB[i].task_type != IDLE_TASK) {
 471               	.LM34:
 472 0210 D501      		movw r26,r10
 473 0212 8C91      		ld r24,X
 474 0214 8230      		cpi r24,lo8(2)
 475 0216 01F4      		brne .+2
 476 0218 00C0      		rjmp .L10
 167:..//src/kernel/source/nrk_scheduler.c **** 	    if (nrk_task_TCB[i].task_type == CBS_TASK){
 478               	.LM35:
 479 021a 8330      		cpi r24,lo8(3)
 480 021c 01F0      		breq .+2
 481 021e 00C0      		rjmp .L10
 168:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[i].cash_period < _nrk_prev_timer_val && nrk_task_TCB[i].cash != 0){
 483               	.LM36:
 484 0220 1396      		adiw r26,3
 485 0222 8D91      		ld r24,X+
 486 0224 9C91      		ld r25,X
 487 0226 1497      		sbiw r26,3+1
 488 0228 2091 0000 		lds r18,_nrk_prev_timer_val
 489 022c 30E0      		ldi r19,lo8(0)
 490 022e 8217      		cp r24,r18
 491 0230 9307      		cpc r25,r19
 492 0232 00F4      		brsh .L11
 168:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[i].cash_period < _nrk_prev_timer_val && nrk_task_TCB[i].cash != 0){
 494               	.LM37:
 495 0234 1196      		adiw r26,1
 496 0236 4D91      		ld r20,X+
 497 0238 5C91      		ld r21,X
 498 023a 1297      		sbiw r26,1+1
 499 023c 4115      		cp r20,__zero_reg__
 500 023e 5105      		cpc r21,__zero_reg__
 501 0240 01F0      		breq .L11
 170:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[i].cash = 0;
 503               	.LM38:
 504 0242 1296      		adiw r26,1+1
 505 0244 1C92      		st X,__zero_reg__
 506 0246 1E92      		st -X,__zero_reg__
 507 0248 1197      		sbiw r26,1
 171:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[i].cash_period = 0;
 509               	.LM39:
 510 024a 1496      		adiw r26,3+1
 511 024c 1C92      		st X,__zero_reg__
 512 024e 1E92      		st -X,__zero_reg__
 513 0250 1397      		sbiw r26,3
 515               	.LM40:
 516 0252 00D0      		rcall .
 517 0254 00D0      		rcall .
 518 0256 EDB7      		in r30,__SP_L__
 519 0258 FEB7      		in r31,__SP_H__
 520 025a F282      		std Z+2,r15
 521 025c E182      		std Z+1,r14
 522 025e E091 0000 		lds r30,nrk_cur_task_TCB
 523 0262 F091 0000 		lds r31,nrk_cur_task_TCB+1
 524 0266 8085      		ldd r24,Z+8
 525 0268 9927      		clr r25
 526 026a 87FD      		sbrc r24,7
 527 026c 9095      		com r25
 528 026e ADB7      		in r26,__SP_L__
 529 0270 BEB7      		in r27,__SP_H__
 530 0272 1496      		adiw r26,3+1
 531 0274 9C93      		st X,r25
 532 0276 8E93      		st -X,r24
 533 0278 1397      		sbiw r26,3
 534 027a 0E94 0000 		call printf
 535 027e 0F90      		pop __tmp_reg__
 536 0280 0F90      		pop __tmp_reg__
 537 0282 0F90      		pop __tmp_reg__
 538 0284 0F90      		pop __tmp_reg__
 539 0286 00C0      		rjmp .L10
 540               	.L11:
 173:..//src/kernel/source/nrk_scheduler.c **** 		}
 174:..//src/kernel/source/nrk_scheduler.c **** 		else{
 175:..//src/kernel/source/nrk_scheduler.c **** 		    // if cash_period is greater than prev_timer_val, reduce cash_period
 176:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[i].cash_period -= _nrk_prev_timer_val;
 542               	.LM41:
 543 0288 821B      		sub r24,r18
 544 028a 930B      		sbc r25,r19
 545 028c F501      		movw r30,r10
 546 028e 9483      		std Z+4,r25
 547 0290 8383      		std Z+3,r24
 177:..//src/kernel/source/nrk_scheduler.c **** 
 178:..//src/kernel/source/nrk_scheduler.c **** 		    if(nrk_task_TCB[i].cash > nrk_task_TCB[i].cash_period){
 549               	.LM42:
 550 0292 2181      		ldd r18,Z+1
 551 0294 3281      		ldd r19,Z+2
 552 0296 8217      		cp r24,r18
 553 0298 9307      		cpc r25,r19
 554 029a 00F4      		brsh .L10
 179:..//src/kernel/source/nrk_scheduler.c **** 		          nrk_task_TCB[i].cash = nrk_task_TCB[i].cash_period;
 556               	.LM43:
 557 029c 9283      		std Z+2,r25
 558 029e 8183      		std Z+1,r24
 559               	.L10:
 560 02a0 46E2      		ldi r20,lo8(38)
 561 02a2 50E0      		ldi r21,hi8(38)
 562 02a4 A40E      		add r10,r20
 563 02a6 B51E      		adc r11,r21
 164:..//src/kernel/source/nrk_scheduler.c ****     for(i = 0; i < NRK_MAX_TASKS; i++){
 565               	.LM44:
 566 02a8 50E0      		ldi r21,lo8(nrk_task_TCB+223)
 567 02aa A516      		cp r10,r21
 568 02ac 50E0      		ldi r21,hi8(nrk_task_TCB+223)
 569 02ae B506      		cpc r11,r21
 570 02b0 01F0      		breq .+2
 571 02b2 00C0      		rjmp .L12
 180:..//src/kernel/source/nrk_scheduler.c **** 		    }
 181:..//src/kernel/source/nrk_scheduler.c **** 		}
 182:..//src/kernel/source/nrk_scheduler.c **** 	    }
 183:..//src/kernel/source/nrk_scheduler.c **** 	}
 184:..//src/kernel/source/nrk_scheduler.c ****     }
 185:..//src/kernel/source/nrk_scheduler.c **** 
 186:..//src/kernel/source/nrk_scheduler.c ****     // 3:Use Cash
 187:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->cpu_remaining == nrk_cur_task_TCB->cpu_reserve 
 573               	.LM45:
 574 02b4 E091 0000 		lds r30,nrk_cur_task_TCB
 575 02b8 F091 0000 		lds r31,nrk_cur_task_TCB+1
 576 02bc 418D      		ldd r20,Z+25
 577 02be 528D      		ldd r21,Z+26
 578 02c0 858D      		ldd r24,Z+29
 579 02c2 968D      		ldd r25,Z+30
 580 02c4 4817      		cp r20,r24
 581 02c6 5907      		cpc r21,r25
 582 02c8 01F0      		breq .+2
 583 02ca 00C0      		rjmp .L13
 188:..//src/kernel/source/nrk_scheduler.c **** 	    && nrk_cur_task_TCB->task_type == CBS_TASK
 585               	.LM46:
 586 02cc 81A1      		ldd r24,Z+33
 587 02ce 8330      		cpi r24,lo8(3)
 588 02d0 01F0      		breq .+2
 589 02d2 00C0      		rjmp .L13
 590 02d4 80E0      		ldi r24,lo8(0)
 591 02d6 90E0      		ldi r25,hi8(0)
 592 02d8 6FE9      		ldi r22,lo8(-31073)
 593 02da 76E8      		ldi r23,hi8(-31073)
 594 02dc 20E0      		ldi r18,lo8(0)
 595 02de 30E0      		ldi r19,hi8(0)
 596               	.L15:
 597               	.LBB2:
 189:..//src/kernel/source/nrk_scheduler.c **** 	    ){
 190:..//src/kernel/source/nrk_scheduler.c **** 	int i =0;
 191:..//src/kernel/source/nrk_scheduler.c **** 	int min_deadline=99999;
 192:..//src/kernel/source/nrk_scheduler.c **** 	int min_id = 0;
 193:..//src/kernel/source/nrk_scheduler.c **** 	for(i = 0; i< NRK_MAX_TASKS; i++){
 194:..//src/kernel/source/nrk_scheduler.c **** 	    if(nrk_task_TCB[i].task_type == CBS_TASK){
 599               	.LM47:
 600 02e0 D801      		movw r26,r16
 601 02e2 EC90      		ld r14,X
 602 02e4 BE2D      		mov r27,r14
 603 02e6 B330      		cpi r27,lo8(3)
 604 02e8 01F4      		brne .L14
 195:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[i].cash_period < min_deadline){
 606               	.LM48:
 607 02ea D801      		movw r26,r16
 608 02ec 1396      		adiw r26,3
 609 02ee ED90      		ld r14,X+
 610 02f0 FC90      		ld r15,X
 611 02f2 1497      		sbiw r26,3+1
 612 02f4 E616      		cp r14,r22
 613 02f6 F706      		cpc r15,r23
 614 02f8 00F4      		brsh .L14
 196:..//src/kernel/source/nrk_scheduler.c **** 		    min_deadline = nrk_task_TCB[i].cash_period;
 616               	.LM49:
 617 02fa B701      		movw r22,r14
 618 02fc C901      		movw r24,r18
 619               	.L14:
 193:..//src/kernel/source/nrk_scheduler.c **** 	for(i = 0; i< NRK_MAX_TASKS; i++){
 621               	.LM50:
 622 02fe 2F5F      		subi r18,lo8(-(1))
 623 0300 3F4F      		sbci r19,hi8(-(1))
 624 0302 0A5D      		subi r16,lo8(-(38))
 625 0304 1F4F      		sbci r17,hi8(-(38))
 626 0306 2530      		cpi r18,5
 627 0308 3105      		cpc r19,__zero_reg__
 628 030a 01F4      		brne .L15
 197:..//src/kernel/source/nrk_scheduler.c **** 		    min_id = i;
 198:..//src/kernel/source/nrk_scheduler.c **** 		}
 199:..//src/kernel/source/nrk_scheduler.c **** 	    }
 200:..//src/kernel/source/nrk_scheduler.c **** 	}
 201:..//src/kernel/source/nrk_scheduler.c **** 	if(min_id != 0 && nrk_cur_task_TCB->task_ID != min_id){
 630               	.LM51:
 631 030c 0097      		sbiw r24,0
 632 030e 01F4      		brne .+2
 633 0310 00C0      		rjmp .L13
 635               	.LM52:
 636 0312 2085      		ldd r18,Z+8
 637 0314 3327      		clr r19
 638 0316 27FD      		sbrc r18,7
 639 0318 3095      		com r19
 640 031a 2817      		cp r18,r24
 641 031c 3907      		cpc r19,r25
 642 031e 01F4      		brne .+2
 643 0320 00C0      		rjmp .L13
 202:..//src/kernel/source/nrk_scheduler.c **** 	    if (nrk_task_TCB[min_id].cash > _nrk_prev_timer_val) {
 645               	.LM53:
 646 0322 26E2      		ldi r18,lo8(38)
 647 0324 30E0      		ldi r19,hi8(38)
 648 0326 829F      		mul r24,r18
 649 0328 B001      		movw r22,r0
 650 032a 839F      		mul r24,r19
 651 032c 700D      		add r23,r0
 652 032e 929F      		mul r25,r18
 653 0330 700D      		add r23,r0
 654 0332 1124      		clr r1
 655 0334 8B01      		movw r16,r22
 656 0336 0050      		subi r16,lo8(-(nrk_task_TCB))
 657 0338 1040      		sbci r17,hi8(-(nrk_task_TCB))
 658 033a D801      		movw r26,r16
 659 033c 9296      		adiw r26,34
 660 033e ED90      		ld r14,X+
 661 0340 FC90      		ld r15,X
 662 0342 9397      		sbiw r26,34+1
 663 0344 2091 0000 		lds r18,_nrk_prev_timer_val
 664 0348 30E0      		ldi r19,lo8(0)
 665 034a 2E15      		cp r18,r14
 666 034c 3F05      		cpc r19,r15
 667 034e 00F4      		brsh .L16
 203:..//src/kernel/source/nrk_scheduler.c **** 	    	nrk_cur_task_TCB->cpu_remaining+=_nrk_prev_timer_val;
 669               	.LM54:
 670 0350 420F      		add r20,r18
 671 0352 531F      		adc r21,r19
 672 0354 528F      		std Z+26,r21
 673 0356 418F      		std Z+25,r20
 204:..//src/kernel/source/nrk_scheduler.c **** 	        nrk_task_TCB[min_id].cash-=_nrk_prev_timer_val;
 675               	.LM55:
 676 0358 D701      		movw r26,r14
 677 035a A21B      		sub r26,r18
 678 035c B30B      		sbc r27,r19
 679 035e F801      		movw r30,r16
 680 0360 B3A3      		std Z+35,r27
 681 0362 A2A3      		std Z+34,r26
 682 0364 00C0      		rjmp .L17
 683               	.L16:
 205:..//src/kernel/source/nrk_scheduler.c **** 	    } else {
 206:..//src/kernel/source/nrk_scheduler.c **** 		nrk_cur_task_TCB->cpu_remaining+=nrk_cur_task_TCB[min_id].cash;
 685               	.LM56:
 686 0366 6E0F      		add r22,r30
 687 0368 7F1F      		adc r23,r31
 688 036a DB01      		movw r26,r22
 689 036c 9296      		adiw r26,34
 690 036e 2D91      		ld r18,X+
 691 0370 3C91      		ld r19,X
 692 0372 9397      		sbiw r26,34+1
 693 0374 240F      		add r18,r20
 694 0376 351F      		adc r19,r21
 695 0378 328F      		std Z+26,r19
 696 037a 218F      		std Z+25,r18
 207:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[min_id].cash = 0;
 698               	.LM57:
 699 037c F801      		movw r30,r16
 700 037e 13A2      		std Z+35,__zero_reg__
 701 0380 12A2      		std Z+34,__zero_reg__
 702               	.L17:
 208:..//src/kernel/source/nrk_scheduler.c **** 	    }	    
 209:..//src/kernel/source/nrk_scheduler.c **** 	    printf("min_id%d' cash remaining is %d <$$$$$$$$$$$\n", min_id, nrk_task_TCB[min_id].cash);
 704               	.LM58:
 705 0382 00D0      		rcall .
 706 0384 00D0      		rcall .
 707 0386 00D0      		rcall .
 708 0388 ADB7      		in r26,__SP_L__
 709 038a BEB7      		in r27,__SP_H__
 710 038c 1196      		adiw r26,1
 711 038e 20E0      		ldi r18,lo8(.LC2)
 712 0390 30E0      		ldi r19,hi8(.LC2)
 713 0392 EDB7      		in r30,__SP_L__
 714 0394 FEB7      		in r31,__SP_H__
 715 0396 3283      		std Z+2,r19
 716 0398 2183      		std Z+1,r18
 717 039a 1396      		adiw r26,2+1
 718 039c 9C93      		st X,r25
 719 039e 8E93      		st -X,r24
 720 03a0 1297      		sbiw r26,2
 721 03a2 26E2      		ldi r18,lo8(38)
 722 03a4 30E0      		ldi r19,hi8(38)
 723 03a6 829F      		mul r24,r18
 724 03a8 F001      		movw r30,r0
 725 03aa 839F      		mul r24,r19
 726 03ac F00D      		add r31,r0
 727 03ae 929F      		mul r25,r18
 728 03b0 F00D      		add r31,r0
 729 03b2 1124      		clr r1
 730 03b4 E050      		subi r30,lo8(-(nrk_task_TCB))
 731 03b6 F040      		sbci r31,hi8(-(nrk_task_TCB))
 732 03b8 82A1      		ldd r24,Z+34
 733 03ba 93A1      		ldd r25,Z+35
 734 03bc 1596      		adiw r26,4+1
 735 03be 9C93      		st X,r25
 736 03c0 8E93      		st -X,r24
 737 03c2 1497      		sbiw r26,4
 738 03c4 0E94 0000 		call printf
 739 03c8 4DB7      		in r20,__SP_L__
 740 03ca 5EB7      		in r21,__SP_H__
 741 03cc 4A5F      		subi r20,lo8(-(6))
 742 03ce 5F4F      		sbci r21,hi8(-(6))
 743 03d0 0FB6      		in __tmp_reg__,__SREG__
 744 03d2 F894      		cli
 745 03d4 5EBF      		out __SP_H__,r21
 746 03d6 0FBE      		out __SREG__,__tmp_reg__
 747 03d8 4DBF      		out __SP_L__,r20
 748               	.L13:
 749               	.LBE2:
 210:..//src/kernel/source/nrk_scheduler.c **** 	    //printf("Then the task%d's cpu_remaining becomes %d <$$$$$$$$$\n", nrk_cur)
 211:..//src/kernel/source/nrk_scheduler.c **** 	}
 212:..//src/kernel/source/nrk_scheduler.c ****     }
 213:..//src/kernel/source/nrk_scheduler.c **** 
 214:..//src/kernel/source/nrk_scheduler.c **** #endif
 215:..//src/kernel/source/nrk_scheduler.c **** 
 216:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_t
 751               	.LM59:
 752 03da E091 0000 		lds r30,nrk_cur_task_TCB
 753 03de F091 0000 		lds r31,nrk_cur_task_TCB+1
 754 03e2 458D      		ldd r20,Z+29
 755 03e4 568D      		ldd r21,Z+30
 756 03e6 4115      		cp r20,__zero_reg__
 757 03e8 5105      		cpc r21,__zero_reg__
 758 03ea 01F4      		brne .+2
 759 03ec 00C0      		rjmp .L18
 761               	.LM60:
 762 03ee 6085      		ldd r22,Z+8
 763 03f0 6623      		tst r22
 764 03f2 01F4      		brne .+2
 765 03f4 00C0      		rjmp .L18
 766 03f6 7185      		ldd r23,Z+9
 767 03f8 7430      		cpi r23,lo8(4)
 768 03fa 01F4      		brne .+2
 769 03fc 00C0      		rjmp .L18
 217:..//src/kernel/source/nrk_scheduler.c ****     {
 218:..//src/kernel/source/nrk_scheduler.c **** 
 219:..//src/kernel/source/nrk_scheduler.c **** 	if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
 771               	.LM61:
 772 03fe 218D      		ldd r18,Z+25
 773 0400 328D      		ldd r19,Z+26
 774 0402 8091 0000 		lds r24,_nrk_prev_timer_val
 775 0406 90E0      		ldi r25,lo8(0)
 776 0408 2817      		cp r18,r24
 777 040a 3907      		cpc r19,r25
 778 040c 00F4      		brsh .L19
 220:..//src/kernel/source/nrk_scheduler.c **** 	{
 221:..//src/kernel/source/nrk_scheduler.c **** 	    // It's an error for BASIC_TASK but for aperiodic CBS task it is possible to be the case.
 222:..//src/kernel/source/nrk_scheduler.c **** 	    // We need make sure the CBC will not be forced to set its cpu_remaining to 0 if it hasnt fini
 223:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 224:..//src/kernel/source/nrk_scheduler.c **** 	    _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 225:..//src/kernel/source/nrk_scheduler.c **** #endif
 226:..//src/kernel/source/nrk_scheduler.c **** 	    if(nrk_cur_task_TCB->task_type == CBS_TASK && nrk_cur_task_TCB->task_state != SUSPENDED){
 780               	.LM62:
 781 040e 81A1      		ldd r24,Z+33
 782 0410 8330      		cpi r24,lo8(3)
 783 0412 01F4      		brne .L20
 785               	.LM63:
 786 0414 7330      		cpi r23,lo8(3)
 787 0416 01F0      		breq .L20
 227:..//src/kernel/source/nrk_scheduler.c **** 		nrk_cur_task_TCB->next_period = nrk_cur_task_TCB->period;
 789               	.LM64:
 790 0418 838D      		ldd r24,Z+27
 791 041a 948D      		ldd r25,Z+28
 792 041c 908F      		std Z+24,r25
 793 041e 878B      		std Z+23,r24
 228:..//src/kernel/source/nrk_scheduler.c **** 		nrk_cur_task_TCB->cpu_remaining = nrk_cur_task_TCB->cpu_reserve;
 795               	.LM65:
 796 0420 528F      		std Z+26,r21
 797 0422 418F      		std Z+25,r20
 229:..//src/kernel/source/nrk_scheduler.c **** 		printf("Replenish CBS of Task %d\n",nrk_cur_task_TCB->task_ID);
 799               	.LM66:
 800 0424 00D0      		rcall .
 801 0426 00D0      		rcall .
 802 0428 80E0      		ldi r24,lo8(.LC3)
 803 042a 90E0      		ldi r25,hi8(.LC3)
 804 042c ADB7      		in r26,__SP_L__
 805 042e BEB7      		in r27,__SP_H__
 806 0430 1296      		adiw r26,1+1
 807 0432 9C93      		st X,r25
 808 0434 8E93      		st -X,r24
 809 0436 1197      		sbiw r26,1
 810 0438 7727      		clr r23
 811 043a 67FD      		sbrc r22,7
 812 043c 7095      		com r23
 813 043e 1496      		adiw r26,3+1
 814 0440 7C93      		st X,r23
 815 0442 6E93      		st -X,r22
 816 0444 1397      		sbiw r26,3
 817 0446 0E94 0000 		call printf
 818 044a 0F90      		pop __tmp_reg__
 819 044c 0F90      		pop __tmp_reg__
 820 044e 0F90      		pop __tmp_reg__
 821 0450 0F90      		pop __tmp_reg__
 822 0452 00C0      		rjmp .L21
 823               	.L20:
 230:..//src/kernel/source/nrk_scheduler.c **** 	    }else{
 231:..//src/kernel/source/nrk_scheduler.c **** 		nrk_cur_task_TCB->cpu_remaining=0;
 825               	.LM67:
 826 0454 128E      		std Z+26,__zero_reg__
 827 0456 118E      		std Z+25,__zero_reg__
 232:..//src/kernel/source/nrk_scheduler.c **** 		nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
 829               	.LM68:
 830 0458 82E0      		ldi r24,lo8(2)
 831 045a 0E94 0000 		call nrk_kernel_error_add
 832 045e 00C0      		rjmp .L21
 833               	.L19:
 233:..//src/kernel/source/nrk_scheduler.c **** 	    }
 234:..//src/kernel/source/nrk_scheduler.c **** 	}
 235:..//src/kernel/source/nrk_scheduler.c **** 	else{
 236:..//src/kernel/source/nrk_scheduler.c **** 	    nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
 835               	.LM69:
 836 0460 281B      		sub r18,r24
 837 0462 390B      		sbc r19,r25
 838 0464 328F      		std Z+26,r19
 839 0466 218F      		std Z+25,r18
 840               	.L21:
 237:..//src/kernel/source/nrk_scheduler.c **** 	}
 238:..//src/kernel/source/nrk_scheduler.c **** 
 239:..//src/kernel/source/nrk_scheduler.c **** 	task_ID= nrk_cur_task_TCB->task_ID;
 842               	.LM70:
 843 0468 E091 0000 		lds r30,nrk_cur_task_TCB
 844 046c F091 0000 		lds r31,nrk_cur_task_TCB+1
 845 0470 0085      		ldd r16,Z+8
 240:..//src/kernel/source/nrk_scheduler.c **** 	//                  printf("cpu remaining of %d is %d \n",task_ID,nrk_task_TCB[task_ID].cpu_remain
 241:..//src/kernel/source/nrk_scheduler.c **** 
 242:..//src/kernel/source/nrk_scheduler.c **** 	if (nrk_cur_task_TCB->cpu_remaining ==0 )
 847               	.LM71:
 848 0472 218D      		ldd r18,Z+25
 849 0474 328D      		ldd r19,Z+26
 850 0476 2115      		cp r18,__zero_reg__
 851 0478 3105      		cpc r19,__zero_reg__
 852 047a 01F4      		brne .L18
 243:..//src/kernel/source/nrk_scheduler.c **** 	{
 244:..//src/kernel/source/nrk_scheduler.c **** 	    //printf("Task %d cpu remaining = 0\n", task_ID);
 245:..//src/kernel/source/nrk_scheduler.c **** 	    //printf("Task type is %d\n", nrk_cur_task_TCB->task_type);
 246:..//src/kernel/source/nrk_scheduler.c **** 	    // Here we dont need to suspend CBS
 247:..//src/kernel/source/nrk_scheduler.c **** 	    if(nrk_cur_task_TCB->task_type == BASIC_TASK){
 854               	.LM72:
 855 047c 81A1      		ldd r24,Z+33
 856 047e 8130      		cpi r24,lo8(1)
 857 0480 01F4      		brne .L22
 248:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 249:..//src/kernel/source/nrk_scheduler.c **** 		_nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 250:..//src/kernel/source/nrk_scheduler.c **** #endif
 251:..//src/kernel/source/nrk_scheduler.c **** 		nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
 859               	.LM73:
 860 0482 83E0      		ldi r24,lo8(3)
 861 0484 602F      		mov r22,r16
 862 0486 0E94 0000 		call nrk_kernel_error_add
 252:..//src/kernel/source/nrk_scheduler.c **** 		nrk_cur_task_TCB->task_state = SUSPENDED;
 864               	.LM74:
 865 048a E091 0000 		lds r30,nrk_cur_task_TCB
 866 048e F091 0000 		lds r31,nrk_cur_task_TCB+1
 867 0492 83E0      		ldi r24,lo8(3)
 868 0494 8187      		std Z+9,r24
 253:..//src/kernel/source/nrk_scheduler.c **** 		nrk_rem_from_readyQ(task_ID);
 870               	.LM75:
 871 0496 802F      		mov r24,r16
 872 0498 0E94 0000 		call nrk_rem_from_readyQ
 873 049c 00C0      		rjmp .L18
 874               	.L22:
 254:..//src/kernel/source/nrk_scheduler.c **** 	    }else if(nrk_cur_task_TCB->task_type == CBS_TASK
 876               	.LM76:
 877 049e 8330      		cpi r24,lo8(3)
 878 04a0 01F4      		brne .L18
 255:..//src/kernel/source/nrk_scheduler.c **** 		    && nrk_cur_task_TCB->task_state != SUSPENDED
 880               	.LM77:
 881 04a2 8185      		ldd r24,Z+9
 882 04a4 8330      		cpi r24,lo8(3)
 883 04a6 01F0      		breq .L18
 256:..//src/kernel/source/nrk_scheduler.c **** 		    ){
 257:..//src/kernel/source/nrk_scheduler.c **** 		// We need replenish the budget for CBS
 258:..//src/kernel/source/nrk_scheduler.c **** 		printf("Task %d: Replenish CBS <-------- \n", task_ID);
 885               	.LM78:
 886 04a8 00D0      		rcall .
 887 04aa 00D0      		rcall .
 888 04ac 20E0      		ldi r18,lo8(.LC4)
 889 04ae 30E0      		ldi r19,hi8(.LC4)
 890 04b0 EDB7      		in r30,__SP_L__
 891 04b2 FEB7      		in r31,__SP_H__
 892 04b4 3283      		std Z+2,r19
 893 04b6 2183      		std Z+1,r18
 894 04b8 802F      		mov r24,r16
 895 04ba 9927      		clr r25
 896 04bc 87FD      		sbrc r24,7
 897 04be 9095      		com r25
 898 04c0 9483      		std Z+4,r25
 899 04c2 8383      		std Z+3,r24
 900 04c4 0E94 0000 		call printf
 259:..//src/kernel/source/nrk_scheduler.c **** 		nrk_cur_task_TCB->next_period = nrk_cur_task_TCB->period;
 902               	.LM79:
 903 04c8 E091 0000 		lds r30,nrk_cur_task_TCB
 904 04cc F091 0000 		lds r31,nrk_cur_task_TCB+1
 905 04d0 838D      		ldd r24,Z+27
 906 04d2 948D      		ldd r25,Z+28
 907 04d4 908F      		std Z+24,r25
 908 04d6 878B      		std Z+23,r24
 260:..//src/kernel/source/nrk_scheduler.c **** 
 261:..//src/kernel/source/nrk_scheduler.c **** 		nrk_cur_task_TCB->cpu_remaining = nrk_cur_task_TCB->cpu_reserve;
 910               	.LM80:
 911 04d8 858D      		ldd r24,Z+29
 912 04da 968D      		ldd r25,Z+30
 913 04dc 928F      		std Z+26,r25
 914 04de 818F      		std Z+25,r24
 915 04e0 0F90      		pop __tmp_reg__
 916 04e2 0F90      		pop __tmp_reg__
 917 04e4 0F90      		pop __tmp_reg__
 918 04e6 0F90      		pop __tmp_reg__
 919               	.L18:
 921               	.LM81:
 922 04e8 50E0      		ldi r21,lo8(nrk_task_TCB+5)
 923 04ea 252E      		mov r2,r21
 924 04ec 50E0      		ldi r21,hi8(nrk_task_TCB+5)
 925 04ee 352E      		mov r3,r21
 926               	.LBB3:
 196:..//src/kernel/source/nrk_scheduler.c **** 		    min_deadline = nrk_task_TCB[i].cash_period;
 928               	.LM82:
 929 04f0 00E6      		ldi r16,lo8(-5536)
 930 04f2 1AEE      		ldi r17,hi8(-5536)
 931 04f4 20E0      		ldi r18,lo8(0)
 932               	.LBE3:
 262:..//src/kernel/source/nrk_scheduler.c **** 		//printf("Next period is from %d\n", nrk_cur_task_TCB->next_period);
 263:..//src/kernel/source/nrk_scheduler.c **** 	    }
 264:..//src/kernel/source/nrk_scheduler.c **** 
 265:..//src/kernel/source/nrk_scheduler.c **** 	}
 266:..//src/kernel/source/nrk_scheduler.c ****     }
 267:..//src/kernel/source/nrk_scheduler.c **** 
 268:..//src/kernel/source/nrk_scheduler.c ****     // Check I/O nrk_queues to add tasks with remaining cpu back...
 269:..//src/kernel/source/nrk_scheduler.c **** 
 270:..//src/kernel/source/nrk_scheduler.c ****     // Add eligable tasks back to the ready Queue
 271:..//src/kernel/source/nrk_scheduler.c ****     // At the same time find the next earliest wakeup
 272:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 273:..//src/kernel/source/nrk_scheduler.c ****     {
 274:..//src/kernel/source/nrk_scheduler.c **** 	if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 275:..//src/kernel/source/nrk_scheduler.c **** 	nrk_task_TCB[task_ID].suspend_flag=0;
 276:..//src/kernel/source/nrk_scheduler.c **** 	if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED 
 277:..//src/kernel/source/nrk_scheduler.c **** 	{
 278:..//src/kernel/source/nrk_scheduler.c **** 	    if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 279:..//src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 280:..//src/kernel/source/nrk_scheduler.c **** 	    else
 281:..//src/kernel/source/nrk_scheduler.c **** 	    {
 282:..//src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].next_wakeup=0;
 283:..//src/kernel/source/nrk_scheduler.c **** 	    }
 284:..//src/kernel/source/nrk_scheduler.c **** 	    // Do next period book keeping.
 285:..//src/kernel/source/nrk_scheduler.c **** 	    // next_period needs to be set such that the period is kept consistent even if other
 286:..//src/kernel/source/nrk_scheduler.c **** 	    // wait until functions are called.
 287:..//src/kernel/source/nrk_scheduler.c **** 	    if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 288:..//src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 289:..//src/kernel/source/nrk_scheduler.c **** 	    else
 290:..//src/kernel/source/nrk_scheduler.c **** 	    {
 291:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 292:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
 293:..//src/kernel/source/nrk_scheduler.c **** 		else
 294:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
 295:..//src/kernel/source/nrk_scheduler.c **** 	    }
 296:..//src/kernel/source/nrk_scheduler.c **** 	    if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_I
 297:..//src/kernel/source/nrk_scheduler.c **** 
 298:..//src/kernel/source/nrk_scheduler.c **** 	}
 299:..//src/kernel/source/nrk_scheduler.c **** 
 300:..//src/kernel/source/nrk_scheduler.c **** 
 301:..//src/kernel/source/nrk_scheduler.c **** 	// Look for Next Task that Might Wakeup to interrupt current task
 302:..//src/kernel/source/nrk_scheduler.c **** 	if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 303:..//src/kernel/source/nrk_scheduler.c **** 	{
 304:..//src/kernel/source/nrk_scheduler.c **** 	    // printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
 305:..//src/kernel/source/nrk_scheduler.c **** 	    // If a task needs to become READY, make it ready
 306:..//src/kernel/source/nrk_scheduler.c **** 	    if (nrk_task_TCB[task_ID].next_wakeup == 0)
 307:..//src/kernel/source/nrk_scheduler.c **** 	    {
 308:..//src/kernel/source/nrk_scheduler.c **** 		// printf( "Adding back %d\n",task_ID );
 309:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_I
 310:..//src/kernel/source/nrk_scheduler.c **** 		//if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
 311:..//src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].event_suspend=0;
 312:..//src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].nw_flag=0;
 313:..//src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].suspend_flag=0;
 314:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[task_ID].num_periods==1)
 315:..//src/kernel/source/nrk_scheduler.c **** 		{
 316:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 317:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].task_state = READY;
 318:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 319:..//src/kernel/source/nrk_scheduler.c **** 		    // If there is no period set, don't wakeup periodically
 320:..//src/kernel/source/nrk_scheduler.c **** 		    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME
 321:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_add_to_readyQ(task_ID);
 322:..//src/kernel/source/nrk_scheduler.c **** 		}
 323:..//src/kernel/source/nrk_scheduler.c **** 		else
 324:..//src/kernel/source/nrk_scheduler.c **** 		{
 325:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 326:..//src/kernel/source/nrk_scheduler.c **** 		    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 327:..//src/kernel/source/nrk_scheduler.c **** 		    //nrk_task_TCB[task_ID].num_periods--;
 328:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_
 329:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_
 330:..//src/kernel/source/nrk_scheduler.c **** 		    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME
 331:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].num_periods=1;
 934               	.LM83:
 935 04f6 41E0      		ldi r20,lo8(1)
 936 04f8 642E      		mov r6,r20
 937 04fa 712C      		mov r7,__zero_reg__
 330:..//src/kernel/source/nrk_scheduler.c **** 		    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME
 939               	.LM84:
 940 04fc 3AEF      		ldi r19,lo8(250)
 941 04fe E32E      		mov r14,r19
 942 0500 F12C      		mov r15,__zero_reg__
 317:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].task_state = READY;
 944               	.LM85:
 945 0502 92E0      		ldi r25,lo8(2)
 946 0504 992E      		mov r9,r25
 309:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_I
 948               	.LM86:
 949 0506 81E0      		ldi r24,lo8(1)
 950 0508 A82E      		mov r10,r24
 951 050a B12C      		mov r11,__zero_reg__
 952 050c C12C      		mov r12,__zero_reg__
 953 050e D12C      		mov r13,__zero_reg__
 954               	.L35:
 274:..//src/kernel/source/nrk_scheduler.c **** 	if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 956               	.LM87:
 957 0510 D101      		movw r26,r2
 958 0512 1396      		adiw r26,3
 959 0514 8C91      		ld r24,X
 960 0516 1397      		sbiw r26,3
 961 0518 8F3F      		cpi r24,lo8(-1)
 962 051a 01F4      		brne .+2
 963 051c 00C0      		rjmp .L23
 275:..//src/kernel/source/nrk_scheduler.c **** 	nrk_task_TCB[task_ID].suspend_flag=0;
 965               	.LM88:
 966 051e 1C92      		st X,__zero_reg__
 276:..//src/kernel/source/nrk_scheduler.c **** 	if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED 
 968               	.LM89:
 969 0520 8823      		tst r24
 970 0522 01F4      		brne .+2
 971 0524 00C0      		rjmp .L24
 276:..//src/kernel/source/nrk_scheduler.c **** 	if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED 
 973               	.LM90:
 974 0526 1496      		adiw r26,4
 975 0528 8C91      		ld r24,X
 976 052a 1497      		sbiw r26,4
 977 052c 8430      		cpi r24,lo8(4)
 978 052e 01F0      		breq .L24
 278:..//src/kernel/source/nrk_scheduler.c **** 	    if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 980               	.LM91:
 981 0530 5096      		adiw r26,16
 982 0532 4D91      		ld r20,X+
 983 0534 5C91      		ld r21,X
 984 0536 5197      		sbiw r26,16+1
 985 0538 8091 0000 		lds r24,_nrk_prev_timer_val
 986 053c 90E0      		ldi r25,lo8(0)
 987 053e 4817      		cp r20,r24
 988 0540 5907      		cpc r21,r25
 989 0542 00F0      		brlo .L25
 279:..//src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 991               	.LM92:
 992 0544 481B      		sub r20,r24
 993 0546 590B      		sbc r21,r25
 994 0548 5196      		adiw r26,16+1
 995 054a 5C93      		st X,r21
 996 054c 4E93      		st -X,r20
 997 054e 5097      		sbiw r26,16
 998 0550 00C0      		rjmp .L26
 999               	.L25:
 282:..//src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].next_wakeup=0;
 1001               	.LM93:
 1002 0552 F101      		movw r30,r2
 1003 0554 118A      		std Z+17,__zero_reg__
 1004 0556 108A      		std Z+16,__zero_reg__
 1005               	.L26:
 287:..//src/kernel/source/nrk_scheduler.c **** 	    if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 1007               	.LM94:
 1008 0558 D101      		movw r26,r2
 1009 055a 5296      		adiw r26,18
 1010 055c 4D91      		ld r20,X+
 1011 055e 5C91      		ld r21,X
 1012 0560 5397      		sbiw r26,18+1
 1013 0562 4817      		cp r20,r24
 1014 0564 5907      		cpc r21,r25
 1015 0566 00F0      		brlo .L27
 288:..//src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 1017               	.LM95:
 1018 0568 481B      		sub r20,r24
 1019 056a 590B      		sbc r21,r25
 1020 056c 5396      		adiw r26,18+1
 1021 056e 5C93      		st X,r21
 1022 0570 4E93      		st -X,r20
 1023 0572 5297      		sbiw r26,18
 1024 0574 00C0      		rjmp .L28
 1025               	.L27:
 291:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 1027               	.LM96:
 1028 0576 F101      		movw r30,r2
 1029 0578 6689      		ldd r22,Z+22
 1030 057a 7789      		ldd r23,Z+23
 1031 057c 8617      		cp r24,r22
 1032 057e 9707      		cpc r25,r23
 1033 0580 00F4      		brsh .L29
 292:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
 1035               	.LM97:
 1036 0582 681B      		sub r22,r24
 1037 0584 790B      		sbc r23,r25
 1038 0586 738B      		std Z+19,r23
 1039 0588 628B      		std Z+18,r22
 1040 058a 00C0      		rjmp .L28
 1041               	.L29:
 294:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
 1043               	.LM98:
 1044 058c 0E94 0000 		call __udivmodhi4
 1045 0590 D101      		movw r26,r2
 1046 0592 5396      		adiw r26,18+1
 1047 0594 9C93      		st X,r25
 1048 0596 8E93      		st -X,r24
 1049 0598 5297      		sbiw r26,18
 1050               	.L28:
 296:..//src/kernel/source/nrk_scheduler.c **** 	    if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_I
 1052               	.LM99:
 1053 059a F101      		movw r30,r2
 1054 059c 8289      		ldd r24,Z+18
 1055 059e 9389      		ldd r25,Z+19
 1056 05a0 0097      		sbiw r24,0
 1057 05a2 01F4      		brne .L24
 296:..//src/kernel/source/nrk_scheduler.c **** 	    if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_I
 1059               	.LM100:
 1060 05a4 8689      		ldd r24,Z+22
 1061 05a6 9789      		ldd r25,Z+23
 1062 05a8 938B      		std Z+19,r25
 1063 05aa 828B      		std Z+18,r24
 1064               	.L24:
 302:..//src/kernel/source/nrk_scheduler.c **** 	if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 1066               	.LM101:
 1067 05ac D101      		movw r26,r2
 1068 05ae 1496      		adiw r26,4
 1069 05b0 8C91      		ld r24,X
 1070 05b2 1497      		sbiw r26,4
 1071 05b4 8330      		cpi r24,lo8(3)
 1072 05b6 01F0      		breq .+2
 1073 05b8 00C0      		rjmp .L23
 306:..//src/kernel/source/nrk_scheduler.c **** 	    if (nrk_task_TCB[task_ID].next_wakeup == 0)
 1075               	.LM102:
 1076 05ba 5096      		adiw r26,16
 1077 05bc 8D91      		ld r24,X+
 1078 05be 9C91      		ld r25,X
 1079 05c0 5197      		sbiw r26,16+1
 1080 05c2 0097      		sbiw r24,0
 1081 05c4 01F0      		breq .+2
 1082 05c6 00C0      		rjmp .L30
 309:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_I
 1084               	.LM103:
 1085 05c8 1296      		adiw r26,2
 1086 05ca 8C91      		ld r24,X
 1087 05cc 1297      		sbiw r26,2
 1088 05ce 8823      		tst r24
 1089 05d0 01F0      		breq .L31
 309:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_I
 1091               	.LM104:
 1092 05d2 1196      		adiw r26,1
 1093 05d4 8C91      		ld r24,X
 1094 05d6 1197      		sbiw r26,1
 1095 05d8 8823      		tst r24
 1096 05da 01F0      		breq .L31
 1097 05dc D601      		movw r26,r12
 1098 05de C501      		movw r24,r10
 1099 05e0 0090 0000 		lds r0,nrk_wakeup_signal
 1100 05e4 00C0      		rjmp 2f
 1101 05e6 880F      	1:	lsl r24
 1102 05e8 991F      		rol r25
 1103 05ea AA1F      		rol r26
 1104 05ec BB1F      		rol r27
 1105 05ee 0A94      	2:	dec r0
 1106 05f0 02F4      		brpl 1b
 1107 05f2 F101      		movw r30,r2
 1108 05f4 8487      		std Z+12,r24
 1109 05f6 9587      		std Z+13,r25
 1110 05f8 A687      		std Z+14,r26
 1111 05fa B787      		std Z+15,r27
 1112               	.L31:
 311:..//src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].event_suspend=0;
 1114               	.LM105:
 1115 05fc D101      		movw r26,r2
 1116 05fe 1296      		adiw r26,2
 1117 0600 1C92      		st X,__zero_reg__
 1118 0602 1297      		sbiw r26,2
 312:..//src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].nw_flag=0;
 1120               	.LM106:
 1121 0604 1196      		adiw r26,1
 1122 0606 1C92      		st X,__zero_reg__
 1123 0608 1197      		sbiw r26,1
 313:..//src/kernel/source/nrk_scheduler.c **** 		nrk_task_TCB[task_ID].suspend_flag=0;
 1125               	.LM107:
 1126 060a 1C92      		st X,__zero_reg__
 314:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[task_ID].num_periods==1)
 1128               	.LM108:
 1129 060c 5A96      		adiw r26,26
 1130 060e 4D91      		ld r20,X+
 1131 0610 5C91      		ld r21,X
 1132 0612 5B97      		sbiw r26,26+1
 1133 0614 5696      		adiw r26,22
 1134 0616 8D91      		ld r24,X+
 1135 0618 9C91      		ld r25,X
 1136 061a 5797      		sbiw r26,22+1
 1137 061c 5896      		adiw r26,24
 1138 061e 6D91      		ld r22,X+
 1139 0620 7C91      		ld r23,X
 1140 0622 5997      		sbiw r26,24+1
 1141 0624 4130      		cpi r20,1
 1142 0626 5105      		cpc r21,__zero_reg__
 1143 0628 01F4      		brne .L32
 316:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 1145               	.LM109:
 1146 062a 5596      		adiw r26,20+1
 1147 062c 7C93      		st X,r23
 1148 062e 6E93      		st -X,r22
 1149 0630 5497      		sbiw r26,20
 317:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].task_state = READY;
 1151               	.LM110:
 1152 0632 1496      		adiw r26,4
 1153 0634 9C92      		st X,r9
 1154 0636 1497      		sbiw r26,4
 318:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 1156               	.LM111:
 1157 0638 5296      		adiw r26,18
 1158 063a 4D91      		ld r20,X+
 1159 063c 5C91      		ld r21,X
 1160 063e 5397      		sbiw r26,18+1
 1161 0640 5196      		adiw r26,16+1
 1162 0642 5C93      		st X,r21
 1163 0644 4E93      		st -X,r20
 1164 0646 5097      		sbiw r26,16
 320:..//src/kernel/source/nrk_scheduler.c **** 		    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME
 1166               	.LM112:
 1167 0648 0097      		sbiw r24,0
 1168 064a 01F4      		brne .L33
 320:..//src/kernel/source/nrk_scheduler.c **** 		    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME
 1170               	.LM113:
 1171 064c 5196      		adiw r26,16+1
 1172 064e FC92      		st X,r15
 1173 0650 EE92      		st -X,r14
 1174 0652 5097      		sbiw r26,16
 1175               	.L33:
 321:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_add_to_readyQ(task_ID);
 1177               	.LM114:
 1178 0654 822F      		mov r24,r18
 1179 0656 2983      		std Y+1,r18
 1180 0658 0E94 0000 		call nrk_add_to_readyQ
 1181 065c 2981      		ldd r18,Y+1
 1182 065e 00C0      		rjmp .L30
 1183               	.L32:
 325:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 1185               	.LM115:
 1186 0660 F101      		movw r30,r2
 1187 0662 758B      		std Z+21,r23
 1188 0664 648B      		std Z+20,r22
 328:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_
 1190               	.LM116:
 1191 0666 BA01      		movw r22,r20
 1192 0668 6150      		subi r22,lo8(-(-1))
 1193 066a 7040      		sbci r23,hi8(-(-1))
 1194 066c 689F      		mul r22,r24
 1195 066e A001      		movw r20,r0
 1196 0670 699F      		mul r22,r25
 1197 0672 500D      		add r21,r0
 1198 0674 789F      		mul r23,r24
 1199 0676 500D      		add r21,r0
 1200 0678 1124      		clr r1
 1201 067a 518B      		std Z+17,r21
 1202 067c 408B      		std Z+16,r20
 329:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_
 1204               	.LM117:
 1205 067e 538B      		std Z+19,r21
 1206 0680 428B      		std Z+18,r20
 330:..//src/kernel/source/nrk_scheduler.c **** 		    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME
 1208               	.LM118:
 1209 0682 0097      		sbiw r24,0
 1210 0684 01F4      		brne .L34
 330:..//src/kernel/source/nrk_scheduler.c **** 		    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME
 1212               	.LM119:
 1213 0686 F18A      		std Z+17,r15
 1214 0688 E08A      		std Z+16,r14
 1215               	.L34:
 1217               	.LM120:
 1218 068a D101      		movw r26,r2
 1219 068c 5B96      		adiw r26,26+1
 1220 068e 7C92      		st X,r7
 1221 0690 6E92      		st -X,r6
 1222 0692 5A97      		sbiw r26,26
 1223               	.L30:
 332:..//src/kernel/source/nrk_scheduler.c **** 		    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
 333:..//src/kernel/source/nrk_scheduler.c **** 		    //			nrk_task_TCB[task_ID].num_periods=1;
 334:..//src/kernel/source/nrk_scheduler.c **** 		}
 335:..//src/kernel/source/nrk_scheduler.c **** 	    }
 336:..//src/kernel/source/nrk_scheduler.c **** 
 337:..//src/kernel/source/nrk_scheduler.c **** 	    if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
 1225               	.LM121:
 1226 0694 F101      		movw r30,r2
 1227 0696 8089      		ldd r24,Z+16
 1228 0698 9189      		ldd r25,Z+17
 1229 069a 0097      		sbiw r24,0
 1230 069c 01F0      		breq .L23
 1232               	.LM122:
 1233 069e 8017      		cp r24,r16
 1234 06a0 9107      		cpc r25,r17
 1235 06a2 00F4      		brsh .L23
 1237               	.LM123:
 1238 06a4 8C01      		movw r16,r24
 1239               	.L23:
 272:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 1241               	.LM124:
 1242 06a6 2F5F      		subi r18,lo8(-(1))
 1243 06a8 46E2      		ldi r20,lo8(38)
 1244 06aa 50E0      		ldi r21,hi8(38)
 1245 06ac 240E      		add r2,r20
 1246 06ae 351E      		adc r3,r21
 1247 06b0 2530      		cpi r18,lo8(5)
 1248 06b2 01F0      		breq .+2
 1249 06b4 00C0      		rjmp .L35
 338:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_task_TCB[task_ID].next_wakeup<next_wake )
 339:..//src/kernel/source/nrk_scheduler.c **** 	    {
 340:..//src/kernel/source/nrk_scheduler.c **** 		// Find closest next_wake task
 341:..//src/kernel/source/nrk_scheduler.c **** 		next_wake=nrk_task_TCB[task_ID].next_wakeup;
 342:..//src/kernel/source/nrk_scheduler.c **** 	    }
 343:..//src/kernel/source/nrk_scheduler.c **** 
 344:..//src/kernel/source/nrk_scheduler.c **** 	}
 345:..//src/kernel/source/nrk_scheduler.c ****     }
 346:..//src/kernel/source/nrk_scheduler.c **** 
 347:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 348:..//src/kernel/source/nrk_scheduler.c **** _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
 349:..//src/kernel/source/nrk_scheduler.c **** #endif
 350:..//src/kernel/source/nrk_scheduler.c **** task_ID = nrk_get_high_ready_task_ID();
 1251               	.LM125:
 1252 06b6 0E94 0000 		call nrk_get_high_ready_task_ID
 1253 06ba E82E      		mov r14,r24
 351:..//src/kernel/source/nrk_scheduler.c **** nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 1255               	.LM126:
 1256 06bc 482F      		mov r20,r24
 1257 06be 5527      		clr r21
 1258 06c0 47FD      		sbrc r20,7
 1259 06c2 5095      		com r21
 1260 06c4 26E2      		ldi r18,lo8(38)
 1261 06c6 30E0      		ldi r19,hi8(38)
 1262 06c8 429F      		mul r20,r18
 1263 06ca F001      		movw r30,r0
 1264 06cc 439F      		mul r20,r19
 1265 06ce F00D      		add r31,r0
 1266 06d0 529F      		mul r21,r18
 1267 06d2 F00D      		add r31,r0
 1268 06d4 1124      		clr r1
 1269 06d6 E050      		subi r30,lo8(-(nrk_task_TCB))
 1270 06d8 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1271 06da 8285      		ldd r24,Z+10
 1272 06dc 8093 0000 		sts nrk_high_ready_prio,r24
 352:..//src/kernel/source/nrk_scheduler.c **** nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
 1274               	.LM127:
 1275 06e0 F093 0000 		sts nrk_high_ready_TCB+1,r31
 1276 06e4 E093 0000 		sts nrk_high_ready_TCB,r30
 353:..//src/kernel/source/nrk_scheduler.c **** 
 354:..//src/kernel/source/nrk_scheduler.c **** // next_wake should hold next time when a suspended task might get run
 355:..//src/kernel/source/nrk_scheduler.c **** // task_ID holds the highest priority READY task ID
 356:..//src/kernel/source/nrk_scheduler.c **** // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time
 357:..//src/kernel/source/nrk_scheduler.c **** 
 358:..//src/kernel/source/nrk_scheduler.c **** // Now we pick the next wakeup (either the end of the current task, or the possible resume
 359:..//src/kernel/source/nrk_scheduler.c **** // of a suspended task)
 360:..//src/kernel/source/nrk_scheduler.c **** if(task_ID!=NRK_IDLE_TASK_ID)
 1278               	.LM128:
 1279 06e8 EE20      		tst r14
 1280 06ea 01F0      		breq .L36
 361:..//src/kernel/source/nrk_scheduler.c **** {
 362:..//src/kernel/source/nrk_scheduler.c ****     // You are a non-Idle Task
 363:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP
 1282               	.LM129:
 1283 06ec 258D      		ldd r18,Z+29
 1284 06ee 368D      		ldd r19,Z+30
 1285 06f0 2115      		cp r18,__zero_reg__
 1286 06f2 3105      		cpc r19,__zero_reg__
 1287 06f4 01F0      		breq .L37
 1289               	.LM130:
 1290 06f6 218D      		ldd r18,Z+25
 1291 06f8 328D      		ldd r19,Z+26
 1292 06fa 2A3F      		cpi r18,250
 1293 06fc 3105      		cpc r19,__zero_reg__
 1294 06fe 00F4      		brsh .L37
 364:..//src/kernel/source/nrk_scheduler.c ****     {
 365:..//src/kernel/source/nrk_scheduler.c **** 	if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
 1296               	.LM131:
 1297 0700 2017      		cp r18,r16
 1298 0702 3107      		cpc r19,r17
 1299 0704 00F4      		brsh .+2
 1300 0706 00C0      		rjmp .L38
 1301 0708 00C0      		rjmp .L41
 1302               	.L37:
 1303 070a 9801      		movw r18,r16
 1304 070c 0B3F      		cpi r16,251
 1305 070e 1105      		cpc r17,__zero_reg__
 1306 0710 00F4      		brsh .+2
 1307 0712 00C0      		rjmp .L38
 1308 0714 2AEF      		ldi r18,lo8(250)
 1309 0716 30E0      		ldi r19,hi8(250)
 1310 0718 00C0      		rjmp .L38
 1311               	.L36:
 366:..//src/kernel/source/nrk_scheduler.c **** 	    next_wake=nrk_task_TCB[task_ID].cpu_remaining;
 367:..//src/kernel/source/nrk_scheduler.c ****     }
 368:..//src/kernel/source/nrk_scheduler.c ****     else
 369:..//src/kernel/source/nrk_scheduler.c ****     {
 370:..//src/kernel/source/nrk_scheduler.c **** 	if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 371:..//src/kernel/source/nrk_scheduler.c ****     }
 372:..//src/kernel/source/nrk_scheduler.c **** }
 373:..//src/kernel/source/nrk_scheduler.c **** else
 374:..//src/kernel/source/nrk_scheduler.c **** {
 375:..//src/kernel/source/nrk_scheduler.c ****     // This is the idle task
 376:..//src/kernel/source/nrk_scheduler.c ****     // Make sure you wake up from the idle task a little earlier
 377:..//src/kernel/source/nrk_scheduler.c ****     // if you would go into deep sleep...
 378:..//src/kernel/source/nrk_scheduler.c ****     // After waking from deep sleep, the next context swap must be at least
 379:..//src/kernel/source/nrk_scheduler.c ****     // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
 380:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_POWER_DOWN
 381:..//src/kernel/source/nrk_scheduler.c ****     if(next_wake>NRK_SLEEP_WAKEUP_TIME)
 382:..//src/kernel/source/nrk_scheduler.c ****     {
 383:..//src/kernel/source/nrk_scheduler.c **** 	if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
 384:..//src/kernel/source/nrk_scheduler.c **** 	{
 385:..//src/kernel/source/nrk_scheduler.c **** 	    if(next_wake-NRK_SLEEP_WAKEUP_TIME<NRK_SLEEP_WAKEUP_TIME)
 386:..//src/kernel/source/nrk_scheduler.c **** 	    {
 387:..//src/kernel/source/nrk_scheduler.c **** 		next_wake=NRK_SLEEP_WAKEUP_TIME-1;
 388:..//src/kernel/source/nrk_scheduler.c **** 	    }
 389:..//src/kernel/source/nrk_scheduler.c **** 	    else
 390:..//src/kernel/source/nrk_scheduler.c **** 	    {
 391:..//src/kernel/source/nrk_scheduler.c **** 		next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
 392:..//src/kernel/source/nrk_scheduler.c **** 	    }
 393:..//src/kernel/source/nrk_scheduler.c **** 	}
 394:..//src/kernel/source/nrk_scheduler.c **** 	else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
 395:..//src/kernel/source/nrk_scheduler.c **** 	{
 396:..//src/kernel/source/nrk_scheduler.c **** 	    next_wake=MAX_SCHED_WAKEUP_TIME;
 397:..//src/kernel/source/nrk_scheduler.c **** 	}
 398:..//src/kernel/source/nrk_scheduler.c **** 	else
 399:..//src/kernel/source/nrk_scheduler.c **** 	{
 400:..//src/kernel/source/nrk_scheduler.c **** 	    next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
 401:..//src/kernel/source/nrk_scheduler.c **** 	}
 402:..//src/kernel/source/nrk_scheduler.c ****     }
 403:..//src/kernel/source/nrk_scheduler.c **** #endif
 404:..//src/kernel/source/nrk_scheduler.c **** }
 405:..//src/kernel/source/nrk_scheduler.c **** 
 406:..//src/kernel/source/nrk_scheduler.c **** /*
 407:..//src/kernel/source/nrk_scheduler.c **** // Some code to catch the case when the scheduler wakes up
 408:..//src/kernel/source/nrk_scheduler.c **** // from deep sleep and has to execute again before NRK_SLEEP_WAKEUP_TIME-1
 409:..//src/kernel/source/nrk_scheduler.c **** if(_nrk_cpu_state==2 && next_wake<NRK_SLEEP_WAKEUP_TIME-1)
 410:..//src/kernel/source/nrk_scheduler.c **** {
 411:..//src/kernel/source/nrk_scheduler.c **** nrk_int_disable();
 412:..//src/kernel/source/nrk_scheduler.c **** while(1)
 413:..//src/kernel/source/nrk_scheduler.c **** {
 414:..//src/kernel/source/nrk_scheduler.c **** nrk_spin_wait_us(60000);
 415:..//src/kernel/source/nrk_scheduler.c **** nrk_led_toggle(RED_LED);
 416:..//src/kernel/source/nrk_scheduler.c **** nrk_spin_wait_us(60000);
 417:..//src/kernel/source/nrk_scheduler.c **** nrk_led_toggle(GREEN_LED);
 418:..//src/kernel/source/nrk_scheduler.c **** printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
 419:..//src/kernel/source/nrk_scheduler.c **** }
 420:..//src/kernel/source/nrk_scheduler.c **** }*/
 421:..//src/kernel/source/nrk_scheduler.c **** 
 422:..//src/kernel/source/nrk_scheduler.c **** 
 423:..//src/kernel/source/nrk_scheduler.c **** //  If we disable power down, we still need to wakeup before the overflow
 424:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_NO_POWER_DOWN
 425:..//src/kernel/source/nrk_scheduler.c **** if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 1313               	.LM132:
 1314 071a 0B3F      		cpi r16,251
 1315 071c 1105      		cpc r17,__zero_reg__
 1316 071e 00F0      		brlo .L41
 1317 0720 0AEF      		ldi r16,lo8(250)
 1318 0722 10E0      		ldi r17,hi8(250)
 1319               	.L41:
 426:..//src/kernel/source/nrk_scheduler.c **** #endif
 427:..//src/kernel/source/nrk_scheduler.c **** //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
 428:..//src/kernel/source/nrk_scheduler.c **** nrk_cur_task_prio = nrk_high_ready_prio;
 1321               	.LM133:
 1322 0724 8093 0000 		sts nrk_cur_task_prio,r24
 429:..//src/kernel/source/nrk_scheduler.c **** nrk_cur_task_TCB  = nrk_high_ready_TCB;
 1324               	.LM134:
 1325 0728 F093 0000 		sts nrk_cur_task_TCB+1,r31
 1326 072c E093 0000 		sts nrk_cur_task_TCB,r30
 430:..//src/kernel/source/nrk_scheduler.c **** 
 431:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 432:..//src/kernel/source/nrk_scheduler.c **** if(nrk_high_ready_TCB==NULL)
 433:..//src/kernel/source/nrk_scheduler.c **** {
 434:..//src/kernel/source/nrk_scheduler.c ****     nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
 435:..//src/kernel/source/nrk_scheduler.c **** }
 436:..//src/kernel/source/nrk_scheduler.c **** #endif
 437:..//src/kernel/source/nrk_scheduler.c **** //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());
 438:..//src/kernel/source/nrk_scheduler.c **** 
 439:..//src/kernel/source/nrk_scheduler.c **** _nrk_prev_timer_val=next_wake;
 1328               	.LM135:
 1329 0730 0093 0000 		sts _nrk_prev_timer_val,r16
 440:..//src/kernel/source/nrk_scheduler.c **** 
 441:..//src/kernel/source/nrk_scheduler.c **** 
 442:..//src/kernel/source/nrk_scheduler.c **** if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
 1331               	.LM136:
 1332 0734 0E94 0000 		call _nrk_os_timer_get
 1333 0738 282F      		mov r18,r24
 1334 073a 30E0      		ldi r19,lo8(0)
 1335 073c 2F5F      		subi r18,lo8(-(1))
 1336 073e 3F4F      		sbci r19,hi8(-(1))
 1337 0740 2017      		cp r18,r16
 1338 0742 3107      		cpc r19,r17
 1339 0744 00F0      		brlo .L42
 443:..//src/kernel/source/nrk_scheduler.c **** {
 444:..//src/kernel/source/nrk_scheduler.c ****     // FIXME: Terrible Terrible...
 445:..//src/kernel/source/nrk_scheduler.c ****     // Need to find out why this is happening...
 446:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 447:..//src/kernel/source/nrk_scheduler.c ****     // Ignore if you are the idle task coming from deep sleep
 448:..//src/kernel/source/nrk_scheduler.c ****     if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
 449:..//src/kernel/source/nrk_scheduler.c **** 	nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
 450:..//src/kernel/source/nrk_scheduler.c **** #endif
 451:..//src/kernel/source/nrk_scheduler.c ****     // This is bad news, but keeps things running
 452:..//src/kernel/source/nrk_scheduler.c ****     // +2 just in case we are on the edge of the last tick
 453:..//src/kernel/source/nrk_scheduler.c ****     next_wake=_nrk_os_timer_get()+2;
 1341               	.LM137:
 1342 0746 0E94 0000 		call _nrk_os_timer_get
 1343 074a 082F      		mov r16,r24
 1344 074c 10E0      		ldi r17,lo8(0)
 1345 074e 0E5F      		subi r16,lo8(-(2))
 1346 0750 1F4F      		sbci r17,hi8(-(2))
 454:..//src/kernel/source/nrk_scheduler.c ****     _nrk_prev_timer_val=next_wake;
 1348               	.LM138:
 1349 0752 0093 0000 		sts _nrk_prev_timer_val,r16
 1350               	.L42:
 455:..//src/kernel/source/nrk_scheduler.c **** }
 456:..//src/kernel/source/nrk_scheduler.c **** 
 457:..//src/kernel/source/nrk_scheduler.c **** if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
 1352               	.LM139:
 1353 0756 EE20      		tst r14
 1354 0758 01F0      		breq .L43
 1356               	.LM140:
 1357 075a 1092 0000 		sts _nrk_cpu_state,__zero_reg__
 1358               	.L43:
 458:..//src/kernel/source/nrk_scheduler.c **** 
 459:..//src/kernel/source/nrk_scheduler.c **** _nrk_set_next_wakeup(next_wake);
 1360               	.LM141:
 1361 075e 802F      		mov r24,r16
 1362 0760 0E94 0000 		call _nrk_set_next_wakeup
 460:..//src/kernel/source/nrk_scheduler.c **** 
 461:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
 462:..//src/kernel/source/nrk_scheduler.c **** // Bound Context Swap to 100us
 463:..//src/kernel/source/nrk_scheduler.c **** nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
 1364               	.LM142:
 1365 0764 C201      		movw r24,r4
 1366 0766 6EEE      		ldi r22,lo8(750)
 1367 0768 72E0      		ldi r23,hi8(750)
 1368 076a 0E94 0000 		call nrk_high_speed_timer_wait
 464:..//src/kernel/source/nrk_scheduler.c **** #endif
 465:..//src/kernel/source/nrk_scheduler.c **** nrk_stack_pointer_restore();
 1370               	.LM143:
 1371 076e 0E94 0000 		call nrk_stack_pointer_restore
 466:..//src/kernel/source/nrk_scheduler.c **** //nrk_int_enable();
 467:..//src/kernel/source/nrk_scheduler.c **** nrk_start_high_ready_task();
 1373               	.LM144:
 1374 0772 0E94 0000 		call nrk_start_high_ready_task
 1375               	/* epilogue start */
 468:..//src/kernel/source/nrk_scheduler.c **** 
 469:..//src/kernel/source/nrk_scheduler.c **** }
 1377               	.LM145:
 1378 0776 0F90      		pop __tmp_reg__
 1379 0778 CF91      		pop r28
 1380 077a DF91      		pop r29
 1381 077c 1F91      		pop r17
 1382 077e 0F91      		pop r16
 1383 0780 FF90      		pop r15
 1384 0782 EF90      		pop r14
 1385 0784 DF90      		pop r13
 1386 0786 CF90      		pop r12
 1387 0788 BF90      		pop r11
 1388 078a AF90      		pop r10
 1389 078c 9F90      		pop r9
 1390 078e 8F90      		pop r8
 1391 0790 7F90      		pop r7
 1392 0792 6F90      		pop r6
 1393 0794 5F90      		pop r5
 1394 0796 4F90      		pop r4
 1395 0798 3F90      		pop r3
 1396 079a 2F90      		pop r2
 1397 079c 0895      		ret
 1398               	.L38:
 272:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 1400               	.LM146:
 1401 079e 8901      		movw r16,r18
 1402 07a0 00C0      		rjmp .L41
 1417               	.Lscope1:
 1419               		.stabd	78,0,0
 1420               		.comm _nrk_signal_list,4,1
 1421               		.comm nrk_idle_task_stk,128,1
 1422               		.comm nrk_kernel_stk,128,1
 1423               		.comm nrk_kernel_stk_ptr,2,1
 1424               		.comm nrk_task_TCB,190,1
 1425               		.comm nrk_wakeup_signal,1,1
 1426               		.comm _nrk_readyQ,30,1
 1427               		.comm _free_node,2,1
 1428               		.comm _head_node,2,1
 1429               		.comm nrk_cur_task_prio,1,1
 1430               		.comm nrk_cur_task_TCB,2,1
 1431               		.comm nrk_high_ready_prio,1,1
 1432               		.comm nrk_high_ready_TCB,2,1
 1433               		.comm _nrk_resource_cnt,1,1
 1434               		.comm nrk_system_time,8,1
 1435               		.comm nrk_sem_list,15,1
 1436               		.comm systemceiling,1,1
 1437               		.comm error_task,1,1
 1438               		.comm error_num,1,1
 1439               		.comm _nrk_cpu_state,1,1
 1440               		.comm next_next_wakeup,2,1
 1441               		.comm _nrk_prev_timer_val,1,1
 1442               		.comm _nrk_time_trigger,1,1
 1443               		.comm app_timer0_callback,2,1
 1444               		.comm app_timer0_prescale,1,1
 1445               		.comm t,1,1
 1473               	.Letext0:
 1474               	.global __do_copy_data
 1475               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_scheduler.c
     /tmp/ccO3QFlv.s:2      *ABS*:0000003f __SREG__
     /tmp/ccO3QFlv.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccO3QFlv.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccO3QFlv.s:5      *ABS*:00000034 __CCP__
     /tmp/ccO3QFlv.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccO3QFlv.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccO3QFlv.s:152    .text:00000000 _nrk_scheduler
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000008 nrk_system_time
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:000000be nrk_task_TCB
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000080 nrk_kernel_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:0000001e _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:0000000f nrk_sem_list
                            *COM*:00000001 systemceiling
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 t

UNDEFINED SYMBOLS
_nrk_precision_os_timer_reset
nrk_int_disable
_nrk_high_speed_timer_reset
_nrk_high_speed_timer_get
_nrk_set_next_wakeup
__mulsi3
__udivmodsi4
nrk_rem_from_readyQ
printf
nrk_kernel_error_add
__udivmodhi4
nrk_add_to_readyQ
nrk_get_high_ready_task_ID
_nrk_os_timer_get
nrk_high_speed_timer_wait
nrk_stack_pointer_restore
nrk_start_high_ready_task
__do_copy_data
__do_clear_bss
