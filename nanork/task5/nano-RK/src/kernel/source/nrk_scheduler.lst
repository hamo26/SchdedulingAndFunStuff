   1               		.file	"nrk_scheduler.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 137               		.data
 138               	.LC0:
 139 0000 5265 706C 		.string	"Replenish CBS of Task %d\n"
 139      656E 6973 
 139      6820 4342 
 139      5320 6F66 
 139      2054 6173 
 140               	.LC1:
 141 001a 5461 736B 		.string	"Task %d: Replenish CBS <-------- \n"
 141      2025 643A 
 141      2052 6570 
 141      6C65 6E69 
 141      7368 2043 
 142               		.text
 144               	.global	_nrk_scheduler
 146               	_nrk_scheduler:
 147               		.stabd	46,0,0
   1:..//src/kernel/source/nrk_scheduler.c **** /******************************************************************************
   2:..//src/kernel/source/nrk_scheduler.c ****  *  Nano-RK, a real-time operating system for sensor networks.
   3:..//src/kernel/source/nrk_scheduler.c ****  *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:..//src/kernel/source/nrk_scheduler.c ****  *  All rights reserved.
   5:..//src/kernel/source/nrk_scheduler.c ****  *
   6:..//src/kernel/source/nrk_scheduler.c ****  *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:..//src/kernel/source/nrk_scheduler.c ****  *  Licensing Model. If you are unsure which license to use please refer to:
   8:..//src/kernel/source/nrk_scheduler.c ****  *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:..//src/kernel/source/nrk_scheduler.c ****  *
  10:..//src/kernel/source/nrk_scheduler.c ****  *  This program is free software: you can redistribute it and/or modify
  11:..//src/kernel/source/nrk_scheduler.c ****  *  it under the terms of the GNU General Public License as published by
  12:..//src/kernel/source/nrk_scheduler.c ****  *  the Free Software Foundation, version 2.0 of the License.
  13:..//src/kernel/source/nrk_scheduler.c ****  *
  14:..//src/kernel/source/nrk_scheduler.c ****  *  This program is distributed in the hope that it will be useful,
  15:..//src/kernel/source/nrk_scheduler.c ****  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:..//src/kernel/source/nrk_scheduler.c ****  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:..//src/kernel/source/nrk_scheduler.c ****  *  GNU General Public License for more details.
  18:..//src/kernel/source/nrk_scheduler.c ****  *
  19:..//src/kernel/source/nrk_scheduler.c ****  *  You should have received a copy of the GNU General Public License
  20:..//src/kernel/source/nrk_scheduler.c ****  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:..//src/kernel/source/nrk_scheduler.c ****  *
  22:..//src/kernel/source/nrk_scheduler.c ****  *  Contributing Authors (specific to this file): *  Anthony Rowe
  23:..//src/kernel/source/nrk_scheduler.c ****  *  Zane Starr
  24:..//src/kernel/source/nrk_scheduler.c ****  *  Anand Eswaren
  25:..//src/kernel/source/nrk_scheduler.c ****  *******************************************************************************/
  26:..//src/kernel/source/nrk_scheduler.c **** 
  27:..//src/kernel/source/nrk_scheduler.c **** #include <nrk.h>
  28:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_task.h>
  29:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_defs.h>
  30:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_error.h>
  31:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_events.h>
  32:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_scheduler.h>
  33:..//src/kernel/source/nrk_scheduler.c **** #include <include.h>
  34:..//src/kernel/source/nrk_scheduler.c **** #include <ulib.h>
  35:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_timer.h>
  36:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_time.h>
  37:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_cfg.h>
  38:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_cpu.h>
  39:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_watchdog.h>
  40:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_platform_time.h>
  41:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_stats.h>
  42:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_sw_wdt.h>
  43:..//src/kernel/source/nrk_scheduler.c **** 
  44:..//src/kernel/source/nrk_scheduler.c **** 
  45:..//src/kernel/source/nrk_scheduler.c **** // This define was moved into nrk_platform_time.h since it needs to be different based on the clk s
  46:..//src/kernel/source/nrk_scheduler.c **** // 750 measure to 100uS
  47:..//src/kernel/source/nrk_scheduler.c **** // 800 * .125 = 100us
  48:..//src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    750
  49:..//src/kernel/source/nrk_scheduler.c **** // For rfa1:
  50:..//src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    1500 
  51:..//src/kernel/source/nrk_scheduler.c **** 
  52:..//src/kernel/source/nrk_scheduler.c **** uint8_t t;
  53:..//src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
  54:..//src/kernel/source/nrk_scheduler.c **** {
 149               	.LM0:
 150               	.LFBB1:
 151 0000 2F92      		push r2
 152 0002 3F92      		push r3
 153 0004 4F92      		push r4
 154 0006 5F92      		push r5
 155 0008 6F92      		push r6
 156 000a 7F92      		push r7
 157 000c 8F92      		push r8
 158 000e 9F92      		push r9
 159 0010 AF92      		push r10
 160 0012 BF92      		push r11
 161 0014 CF92      		push r12
 162 0016 DF92      		push r13
 163 0018 EF92      		push r14
 164 001a FF92      		push r15
 165 001c 0F93      		push r16
 166 001e 1F93      		push r17
 167 0020 DF93      		push r29
 168 0022 CF93      		push r28
 169 0024 0F92      		push __tmp_reg__
 170 0026 CDB7      		in r28,__SP_L__
 171 0028 DEB7      		in r29,__SP_H__
 172               	/* prologue: function */
 173               	/* frame size = 1 */
 174               	/* stack size = 19 */
 175               	.L__stack_usage = 19
  55:..//src/kernel/source/nrk_scheduler.c ****     int8_t task_ID;
  56:..//src/kernel/source/nrk_scheduler.c ****     uint16_t next_wake;
  57:..//src/kernel/source/nrk_scheduler.c ****     uint16_t start_time_stamp;
  58:..//src/kernel/source/nrk_scheduler.c **** 
  59:..//src/kernel/source/nrk_scheduler.c ****     _nrk_precision_os_timer_reset();
 177               	.LM1:
 178 002a 0E94 0000 		call _nrk_precision_os_timer_reset
  60:..//src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();   // this should be removed...  Not needed
 180               	.LM2:
 181 002e 0E94 0000 		call nrk_int_disable
  61:..//src/kernel/source/nrk_scheduler.c **** 
  62:..//src/kernel/source/nrk_scheduler.c **** 
  63:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
  64:..//src/kernel/source/nrk_scheduler.c ****     _nrk_high_speed_timer_reset();
 183               	.LM3:
 184 0032 0E94 0000 		call _nrk_high_speed_timer_reset
  65:..//src/kernel/source/nrk_scheduler.c ****     start_time_stamp=_nrk_high_speed_timer_get();
 186               	.LM4:
 187 0036 0E94 0000 		call _nrk_high_speed_timer_get
 188 003a 2C01      		movw r4,r24
  66:..//src/kernel/source/nrk_scheduler.c **** #endif
  67:..//src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
 190               	.LM5:
 191 003c 8AEF      		ldi r24,lo8(-6)
 192 003e 0E94 0000 		call _nrk_set_next_wakeup
  68:..//src/kernel/source/nrk_scheduler.c ****     // Set to huge number which will later get set to min
  69:..//src/kernel/source/nrk_scheduler.c **** 
  70:..//src/kernel/source/nrk_scheduler.c ****     next_wake=60000;
  71:..//src/kernel/source/nrk_scheduler.c ****     // Safety zone starts here....
  72:..//src/kernel/source/nrk_scheduler.c **** 
  73:..//src/kernel/source/nrk_scheduler.c **** 
  74:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_WATCHDOG
  75:..//src/kernel/source/nrk_scheduler.c ****     nrk_watchdog_reset();
  76:..//src/kernel/source/nrk_scheduler.c **** #endif
  77:..//src/kernel/source/nrk_scheduler.c **** 
  78:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_SW_WDT
  79:..//src/kernel/source/nrk_scheduler.c ****     _nrk_sw_wdt_check();
  80:..//src/kernel/source/nrk_scheduler.c **** #endif
  81:..//src/kernel/source/nrk_scheduler.c **** 
  82:..//src/kernel/source/nrk_scheduler.c **** 
  83:..//src/kernel/source/nrk_scheduler.c **** 
  84:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
  85:..//src/kernel/source/nrk_scheduler.c ****     //nrk_kprintf( PSTR("*"));
  86:..//src/kernel/source/nrk_scheduler.c ****     //Check if OS tick was delayed...
  87:..//src/kernel/source/nrk_scheduler.c ****     // if(_nrk_cpu_state!=CPU_SLEEP && _nrk_os_timer_get()!=0) {
  88:..//src/kernel/source/nrk_scheduler.c ****     //		nrk_kprintf( PSTR("X" ));
  89:..//src/kernel/source/nrk_scheduler.c ****     //printf( "%u ",_nrk_os_timer_get());
  90:..//src/kernel/source/nrk_scheduler.c ****     //	}
  91:..//src/kernel/source/nrk_scheduler.c ****     //printf( "%u\r\n",_nrk_prev_timer_val);
  92:..//src/kernel/source/nrk_scheduler.c ****     if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
  93:..//src/kernel/source/nrk_scheduler.c ****         nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
  94:..//src/kernel/source/nrk_scheduler.c **** #endif
  95:..//src/kernel/source/nrk_scheduler.c ****     //while(_nrk_time_trigger>0)
  96:..//src/kernel/source/nrk_scheduler.c ****     //{
  97:..//src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
 194               	.LM6:
 195 0042 6091 0000 		lds r22,_nrk_prev_timer_val
 196 0046 70E0      		ldi r23,lo8(0)
 197 0048 80E0      		ldi r24,lo8(0)
 198 004a 90E0      		ldi r25,hi8(0)
 199 004c 23EB      		ldi r18,lo8(976563)
 200 004e 36EE      		ldi r19,hi8(976563)
 201 0050 4EE0      		ldi r20,hlo8(976563)
 202 0052 50E0      		ldi r21,hhi8(976563)
 203 0054 0E94 0000 		call __mulsi3
 204 0058 7B01      		movw r14,r22
 205 005a 8C01      		movw r16,r24
 206 005c 8091 0000 		lds r24,nrk_system_time+4
 207 0060 9091 0000 		lds r25,nrk_system_time+4+1
 208 0064 A091 0000 		lds r26,nrk_system_time+4+2
 209 0068 B091 0000 		lds r27,nrk_system_time+4+3
 210 006c E80E      		add r14,r24
 211 006e F91E      		adc r15,r25
 212 0070 0A1F      		adc r16,r26
 213 0072 1B1F      		adc r17,r27
  98:..//src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 215               	.LM7:
 216 0074 C801      		movw r24,r16
 217 0076 B701      		movw r22,r14
 218 0078 0E94 0000 		call __udivmodsi4
 219 007c E61A      		sub r14,r22
 220 007e F70A      		sbc r15,r23
 221 0080 080B      		sbc r16,r24
 222 0082 190B      		sbc r17,r25
 223 0084 8091 0000 		lds r24,nrk_system_time
 224 0088 9091 0000 		lds r25,nrk_system_time+1
 225 008c A091 0000 		lds r26,nrk_system_time+2
 226 0090 B091 0000 		lds r27,nrk_system_time+3
  99:..//src/kernel/source/nrk_scheduler.c **** 
 100:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 101:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
 102:..//src/kernel/source/nrk_scheduler.c ****     {
 103:..//src/kernel/source/nrk_scheduler.c ****         if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
 104:..//src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 105:..//src/kernel/source/nrk_scheduler.c ****         // Add 0 time since the preempted call before set the correct value
 106:..//src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
 107:..//src/kernel/source/nrk_scheduler.c ****     }
 108:..//src/kernel/source/nrk_scheduler.c ****     else
 109:..//src/kernel/source/nrk_scheduler.c ****     {
 110:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->suspend_flag==1)
 111:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 112:..//src/kernel/source/nrk_scheduler.c ****         else
 113:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 114:..//src/kernel/source/nrk_scheduler.c ****     }
 115:..//src/kernel/source/nrk_scheduler.c **** #endif
 116:..//src/kernel/source/nrk_scheduler.c **** 
 117:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 118:..//src/kernel/source/nrk_scheduler.c ****     {
 119:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 120:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.secs++;
 121:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 228               	.LM8:
 229 0094 23EB      		ldi r18,lo8(976563)
 230 0096 A22E      		mov r10,r18
 231 0098 26EE      		ldi r18,hi8(976563)
 232 009a B22E      		mov r11,r18
 233 009c 2EE0      		ldi r18,hlo8(976563)
 234 009e C22E      		mov r12,r18
 235 00a0 D12C      		mov r13,__zero_reg__
 117:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 237               	.LM9:
 238 00a2 00C0      		rjmp .L2
 239               	.L3:
 119:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 241               	.LM10:
 242 00a4 80E0      		ldi r24,lo8(-1000000000)
 243 00a6 96E3      		ldi r25,hi8(-1000000000)
 244 00a8 A5E6      		ldi r26,hlo8(-1000000000)
 245 00aa B4EC      		ldi r27,hhi8(-1000000000)
 246 00ac E80E      		add r14,r24
 247 00ae F91E      		adc r15,r25
 248 00b0 0A1F      		adc r16,r26
 249 00b2 1B1F      		adc r17,r27
 251               	.LM11:
 252 00b4 C801      		movw r24,r16
 253 00b6 B701      		movw r22,r14
 254 00b8 A601      		movw r20,r12
 255 00ba 9501      		movw r18,r10
 256 00bc 0E94 0000 		call __udivmodsi4
 257 00c0 E61A      		sub r14,r22
 258 00c2 F70A      		sbc r15,r23
 259 00c4 080B      		sbc r16,r24
 260 00c6 190B      		sbc r17,r25
 261 00c8 D401      		movw r26,r8
 262 00ca C301      		movw r24,r6
 263               	.L2:
 265               	.LM12:
 266 00cc 3C01      		movw r6,r24
 267 00ce 4D01      		movw r8,r26
 268 00d0 0894      		sec
 269 00d2 611C      		adc r6,__zero_reg__
 270 00d4 711C      		adc r7,__zero_reg__
 271 00d6 811C      		adc r8,__zero_reg__
 272 00d8 911C      		adc r9,__zero_reg__
 117:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 274               	.LM13:
 275 00da E0E0      		ldi r30,lo8(1000000000)
 276 00dc EE16      		cp r14,r30
 277 00de EAEC      		ldi r30,hi8(1000000000)
 278 00e0 FE06      		cpc r15,r30
 279 00e2 EAE9      		ldi r30,hlo8(1000000000)
 280 00e4 0E07      		cpc r16,r30
 281 00e6 EBE3      		ldi r30,hhi8(1000000000)
 282 00e8 1E07      		cpc r17,r30
 283 00ea 00F4      		brsh .L3
 117:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 285               	.LM14:
 286 00ec 8093 0000 		sts nrk_system_time,r24
 287 00f0 9093 0000 		sts nrk_system_time+1,r25
 288 00f4 A093 0000 		sts nrk_system_time+2,r26
 289 00f8 B093 0000 		sts nrk_system_time+3,r27
 290 00fc E092 0000 		sts nrk_system_time+4,r14
 291 0100 F092 0000 		sts nrk_system_time+4+1,r15
 292 0104 0093 0000 		sts nrk_system_time+4+2,r16
 293 0108 1093 0000 		sts nrk_system_time+4+3,r17
 122:..//src/kernel/source/nrk_scheduler.c ****     }
 123:..//src/kernel/source/nrk_scheduler.c ****     //  _nrk_time_trigger--;
 124:..//src/kernel/source/nrk_scheduler.c ****     //}
 125:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
 295               	.LM15:
 296 010c E091 0000 		lds r30,nrk_cur_task_TCB
 297 0110 F091 0000 		lds r31,nrk_cur_task_TCB+1
 298 0114 8581      		ldd r24,Z+5
 299 0116 8823      		tst r24
 300 0118 01F0      		breq .L4
 302               	.LM16:
 303 011a 8185      		ldd r24,Z+9
 304 011c 8430      		cpi r24,lo8(4)
 305 011e 01F0      		breq .L4
 126:..//src/kernel/source/nrk_scheduler.c ****     {
 127:..//src/kernel/source/nrk_scheduler.c ****         //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 128:..//src/kernel/source/nrk_scheduler.c **** 
 129:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
 307               	.LM17:
 308 0120 8781      		ldd r24,Z+7
 309 0122 8230      		cpi r24,lo8(2)
 310 0124 01F0      		breq .L53
 311               	.L5:
 130:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 131:..//src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
 313               	.LM18:
 314 0126 8823      		tst r24
 315 0128 01F0      		breq .L7
 317               	.LM19:
 318 012a 8681      		ldd r24,Z+6
 319 012c 8823      		tst r24
 320 012e 01F4      		brne .L8
 321               	.L53:
 132:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 323               	.LM20:
 324 0130 85E0      		ldi r24,lo8(5)
 325 0132 00C0      		rjmp .L54
 326               	.L8:
 133:..//src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
 134:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 328               	.LM21:
 329 0134 83E0      		ldi r24,lo8(3)
 330               	.L54:
 331 0136 8187      		std Z+9,r24
 332 0138 00C0      		rjmp .L6
 333               	.L7:
 135:..//src/kernel/source/nrk_scheduler.c ****         else
 136:..//src/kernel/source/nrk_scheduler.c ****         {
 137:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 335               	.LM22:
 336 013a 83E0      		ldi r24,lo8(3)
 337 013c 8187      		std Z+9,r24
 138:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->event_suspend=0;
 339               	.LM23:
 340 013e 1782      		std Z+7,__zero_reg__
 139:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->nw_flag=0;
 342               	.LM24:
 343 0140 1682      		std Z+6,__zero_reg__
 344               	.L6:
 140:..//src/kernel/source/nrk_scheduler.c ****         }
 141:..//src/kernel/source/nrk_scheduler.c ****         nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
 346               	.LM25:
 347 0142 8085      		ldd r24,Z+8
 348 0144 0E94 0000 		call nrk_rem_from_readyQ
 349               	.L4:
 142:..//src/kernel/source/nrk_scheduler.c ****     }
 143:..//src/kernel/source/nrk_scheduler.c ****     //nrk_print_readyQ();
 144:..//src/kernel/source/nrk_scheduler.c ****      
 145:..//src/kernel/source/nrk_scheduler.c ****     // Update cpu used value for ended task
 146:..//src/kernel/source/nrk_scheduler.c ****     // If the task has used its reserve, suspend task
 147:..//src/kernel/source/nrk_scheduler.c ****     // Don't disable IdleTask which is 0
 148:..//src/kernel/source/nrk_scheduler.c ****     // Don't decrease cpu_remaining if reserve is 0 and hence disabled
 149:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_t
 351               	.LM26:
 352 0148 E091 0000 		lds r30,nrk_cur_task_TCB
 353 014c F091 0000 		lds r31,nrk_cur_task_TCB+1
 354 0150 858D      		ldd r24,Z+29
 355 0152 968D      		ldd r25,Z+30
 356 0154 0097      		sbiw r24,0
 357 0156 01F4      		brne .+2
 358 0158 00C0      		rjmp .L9
 360               	.LM27:
 361 015a 8085      		ldd r24,Z+8
 362 015c 8823      		tst r24
 363 015e 01F4      		brne .+2
 364 0160 00C0      		rjmp .L9
 365 0162 9185      		ldd r25,Z+9
 366 0164 9430      		cpi r25,lo8(4)
 367 0166 01F4      		brne .+2
 368 0168 00C0      		rjmp .L9
 369               	.LBB2:
 150:..//src/kernel/source/nrk_scheduler.c ****     {
 151:..//src/kernel/source/nrk_scheduler.c **** 
 152:..//src/kernel/source/nrk_scheduler.c **** 	#ifdef CBS_CASH
 153:..//src/kernel/source/nrk_scheduler.c **** 		// Update cash value and period for ended task
 154:..//src/kernel/source/nrk_scheduler.c **** 		// if current budget not set or the new value greater than old value
 155:..//src/kernel/source/nrk_scheduler.c **** 		if(nrk_task_TCB[nrk_cur_task_TCB->task_ID].cash == 0 || (nrk_task_TCB[nrk_cur_task_TCB->task_ID].
 371               	.LM28:
 372 016a 9927      		clr r25
 373 016c 87FD      		sbrc r24,7
 374 016e 9095      		com r25
 375 0170 26E2      		ldi r18,lo8(38)
 376 0172 30E0      		ldi r19,hi8(38)
 377 0174 829F      		mul r24,r18
 378 0176 D001      		movw r26,r0
 379 0178 839F      		mul r24,r19
 380 017a B00D      		add r27,r0
 381 017c 929F      		mul r25,r18
 382 017e B00D      		add r27,r0
 383 0180 1124      		clr r1
 384 0182 A050      		subi r26,lo8(-(nrk_task_TCB))
 385 0184 B040      		sbci r27,hi8(-(nrk_task_TCB))
 386 0186 9296      		adiw r26,34
 387 0188 2D91      		ld r18,X+
 388 018a 3C91      		ld r19,X
 389 018c 9397      		sbiw r26,34+1
 390 018e 2115      		cp r18,__zero_reg__
 391 0190 3105      		cpc r19,__zero_reg__
 392 0192 01F0      		breq .L10
 394               	.LM29:
 395 0194 418D      		ldd r20,Z+25
 396 0196 528D      		ldd r21,Z+26
 397 0198 2417      		cp r18,r20
 398 019a 3507      		cpc r19,r21
 399 019c 00F4      		brsh .L11
 400               	.L10:
 156:..//src/kernel/source/nrk_scheduler.c **** 			 nrk_task_TCB[nrk_cur_task_TCB->task_ID].cash = nrk_cur_task_TCB->cpu_remaining;
 402               	.LM30:
 403 019e 26E2      		ldi r18,lo8(38)
 404 01a0 30E0      		ldi r19,hi8(38)
 405 01a2 829F      		mul r24,r18
 406 01a4 D001      		movw r26,r0
 407 01a6 839F      		mul r24,r19
 408 01a8 B00D      		add r27,r0
 409 01aa 929F      		mul r25,r18
 410 01ac B00D      		add r27,r0
 411 01ae 1124      		clr r1
 412 01b0 A050      		subi r26,lo8(-(nrk_task_TCB))
 413 01b2 B040      		sbci r27,hi8(-(nrk_task_TCB))
 414 01b4 818D      		ldd r24,Z+25
 415 01b6 928D      		ldd r25,Z+26
 416 01b8 9396      		adiw r26,34+1
 417 01ba 9C93      		st X,r25
 418 01bc 8E93      		st -X,r24
 419 01be 9297      		sbiw r26,34
 157:..//src/kernel/source/nrk_scheduler.c **** 			 nrk_task_TCB[nrk_cur_task_TCB->task_ID].cash_period = nrk_cur_task_TCB->next_period;		
 421               	.LM31:
 422 01c0 8789      		ldd r24,Z+23
 423 01c2 908D      		ldd r25,Z+24
 424 01c4 9596      		adiw r26,36+1
 425 01c6 9C93      		st X,r25
 426 01c8 8E93      		st -X,r24
 427 01ca 9497      		sbiw r26,36
 428               	.L11:
 158:..//src/kernel/source/nrk_scheduler.c **** 		}
 159:..//src/kernel/source/nrk_scheduler.c **** 
 160:..//src/kernel/source/nrk_scheduler.c **** 		// CASH book keeping - update cash given prev timer val
 161:..//src/kernel/source/nrk_scheduler.c **** 		// Loop through all nrk tasks - Delete CBS tasks that passed deadline or reduce cash_period.
 162:..//src/kernel/source/nrk_scheduler.c **** 		int i = 0;
 163:..//src/kernel/source/nrk_scheduler.c **** 		for(i = 0; i < NRK_MAX_TASKS; i++){
 164:..//src/kernel/source/nrk_scheduler.c **** 			if(nrk_task_TCB[i].task_ID != IDLE_TASK) {
 165:..//src/kernel/source/nrk_scheduler.c **** 				// update all cash period
 166:..//src/kernel/source/nrk_scheduler.c **** 				if (nrk_task_TCB[i].task_type == CBS_TASK && nrk_task_TCB[i].cash > 0){
 167:..//src/kernel/source/nrk_scheduler.c **** 					if(nrk_task_TCB[i].cash_period < _nrk_prev_timer_val){
 430               	.LM32:
 431 01cc 2091 0000 		lds r18,_nrk_prev_timer_val
 432 01d0 30E0      		ldi r19,lo8(0)
 433 01d2 E0E0      		ldi r30,lo8(nrk_task_TCB+8)
 434 01d4 F0E0      		ldi r31,hi8(nrk_task_TCB+8)
 435               	.L14:
 164:..//src/kernel/source/nrk_scheduler.c **** 			if(nrk_task_TCB[i].task_ID != IDLE_TASK) {
 437               	.LM33:
 438 01d6 8081      		ld r24,Z
 439 01d8 8230      		cpi r24,lo8(2)
 440 01da 01F0      		breq .L12
 166:..//src/kernel/source/nrk_scheduler.c **** 				if (nrk_task_TCB[i].task_type == CBS_TASK && nrk_task_TCB[i].cash > 0){
 442               	.LM34:
 443 01dc 818D      		ldd r24,Z+25
 444 01de 8330      		cpi r24,lo8(3)
 445 01e0 01F4      		brne .L12
 166:..//src/kernel/source/nrk_scheduler.c **** 				if (nrk_task_TCB[i].task_type == CBS_TASK && nrk_task_TCB[i].cash > 0){
 447               	.LM35:
 448 01e2 428D      		ldd r20,Z+26
 449 01e4 538D      		ldd r21,Z+27
 450 01e6 4115      		cp r20,__zero_reg__
 451 01e8 5105      		cpc r21,__zero_reg__
 452 01ea 01F0      		breq .L12
 454               	.LM36:
 455 01ec 848D      		ldd r24,Z+28
 456 01ee 958D      		ldd r25,Z+29
 457 01f0 8217      		cp r24,r18
 458 01f2 9307      		cpc r25,r19
 459 01f4 00F4      		brsh .L13
 168:..//src/kernel/source/nrk_scheduler.c **** 						// delete cash where deadline pass
 169:..//src/kernel/source/nrk_scheduler.c **** 						nrk_task_TCB[i].cash = 0;
 461               	.LM37:
 462 01f6 138E      		std Z+27,__zero_reg__
 463 01f8 128E      		std Z+26,__zero_reg__
 170:..//src/kernel/source/nrk_scheduler.c **** 						nrk_task_TCB[i].cash_period = 0;
 465               	.LM38:
 466 01fa 158E      		std Z+29,__zero_reg__
 467 01fc 148E      		std Z+28,__zero_reg__
 468 01fe 00C0      		rjmp .L12
 469               	.L13:
 171:..//src/kernel/source/nrk_scheduler.c **** 					}
 172:..//src/kernel/source/nrk_scheduler.c **** 					else{
 173:..//src/kernel/source/nrk_scheduler.c **** 						// if cash_period is greater than prev_timer_val, reduce cash_period
 174:..//src/kernel/source/nrk_scheduler.c **** 						nrk_task_TCB[i].cash_period -= _nrk_prev_timer_val;
 471               	.LM39:
 472 0200 821B      		sub r24,r18
 473 0202 930B      		sbc r25,r19
 474 0204 958F      		std Z+29,r25
 475 0206 848F      		std Z+28,r24
 175:..//src/kernel/source/nrk_scheduler.c **** 						if(nrk_task_TCB[i].cash > nrk_task_TCB[i].cash_period){
 477               	.LM40:
 478 0208 8417      		cp r24,r20
 479 020a 9507      		cpc r25,r21
 480 020c 00F4      		brsh .L12
 176:..//src/kernel/source/nrk_scheduler.c **** 							// if cash is greater than new cash period set the new cash to cash_period period
 177:..//src/kernel/source/nrk_scheduler.c **** 							nrk_task_TCB[i].cash = nrk_task_TCB[i].cash_period;
 482               	.LM41:
 483 020e 938F      		std Z+27,r25
 484 0210 828F      		std Z+26,r24
 485               	.L12:
 486 0212 B696      		adiw r30,38
 163:..//src/kernel/source/nrk_scheduler.c **** 		for(i = 0; i < NRK_MAX_TASKS; i++){
 488               	.LM42:
 489 0214 80E0      		ldi r24,hi8(nrk_task_TCB+198)
 490 0216 E030      		cpi r30,lo8(nrk_task_TCB+198)
 491 0218 F807      		cpc r31,r24
 492 021a 01F4      		brne .L14
 178:..//src/kernel/source/nrk_scheduler.c **** 						}
 179:..//src/kernel/source/nrk_scheduler.c **** 					}
 180:..//src/kernel/source/nrk_scheduler.c **** 				}
 181:..//src/kernel/source/nrk_scheduler.c **** 			} else {
 182:..//src/kernel/source/nrk_scheduler.c **** 				continue;
 183:..//src/kernel/source/nrk_scheduler.c **** 			} 			
 184:..//src/kernel/source/nrk_scheduler.c **** 		}
 185:..//src/kernel/source/nrk_scheduler.c **** 	#endif
 186:..//src/kernel/source/nrk_scheduler.c **** 
 187:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
 494               	.LM43:
 495 021c E091 0000 		lds r30,nrk_cur_task_TCB
 496 0220 F091 0000 		lds r31,nrk_cur_task_TCB+1
 497 0224 218D      		ldd r18,Z+25
 498 0226 328D      		ldd r19,Z+26
 499 0228 8091 0000 		lds r24,_nrk_prev_timer_val
 500 022c 90E0      		ldi r25,lo8(0)
 501 022e 2817      		cp r18,r24
 502 0230 3907      		cpc r19,r25
 503 0232 00F4      		brsh .L15
 188:..//src/kernel/source/nrk_scheduler.c ****         {
 189:..//src/kernel/source/nrk_scheduler.c **** 	    // It's an error for BASIC_TASK but for aperiodic CBS task it is possible to be the case.
 190:..//src/kernel/source/nrk_scheduler.c **** 	    // We need make sure the CBC will not be forced to set its cpu_remaining to 0 if it hasnt fini
 191:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 192:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 193:..//src/kernel/source/nrk_scheduler.c **** #endif
 194:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_cur_task_TCB->task_type == CBS_TASK && nrk_cur_task_TCB->task_state != SUSPENDED
 505               	.LM44:
 506 0234 81A1      		ldd r24,Z+33
 507 0236 8330      		cpi r24,lo8(3)
 508 0238 01F4      		brne .L16
 510               	.LM45:
 511 023a 8185      		ldd r24,Z+9
 512 023c 8330      		cpi r24,lo8(3)
 513 023e 01F0      		breq .L16
 195:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->next_period = nrk_cur_task_TCB->period;
 515               	.LM46:
 516 0240 838D      		ldd r24,Z+27
 517 0242 948D      		ldd r25,Z+28
 518 0244 908F      		std Z+24,r25
 519 0246 878B      		std Z+23,r24
 196:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->cpu_remaining = nrk_cur_task_TCB->cpu_reserve;
 521               	.LM47:
 522 0248 858D      		ldd r24,Z+29
 523 024a 968D      		ldd r25,Z+30
 524 024c 928F      		std Z+26,r25
 525 024e 818F      		std Z+25,r24
 197:..//src/kernel/source/nrk_scheduler.c ****                 printf("Replenish CBS of Task %d\n",nrk_cur_task_TCB->task_ID);
 527               	.LM48:
 528 0250 00D0      		rcall .
 529 0252 00D0      		rcall .
 530 0254 80E0      		ldi r24,lo8(.LC0)
 531 0256 90E0      		ldi r25,hi8(.LC0)
 532 0258 ADB7      		in r26,__SP_L__
 533 025a BEB7      		in r27,__SP_H__
 534 025c 1296      		adiw r26,1+1
 535 025e 9C93      		st X,r25
 536 0260 8E93      		st -X,r24
 537 0262 1197      		sbiw r26,1
 538 0264 8085      		ldd r24,Z+8
 539 0266 9927      		clr r25
 540 0268 87FD      		sbrc r24,7
 541 026a 9095      		com r25
 542 026c 1496      		adiw r26,3+1
 543 026e 9C93      		st X,r25
 544 0270 8E93      		st -X,r24
 545 0272 1397      		sbiw r26,3
 546 0274 0E94 0000 		call printf
 547 0278 0F90      		pop __tmp_reg__
 548 027a 0F90      		pop __tmp_reg__
 549 027c 0F90      		pop __tmp_reg__
 550 027e 0F90      		pop __tmp_reg__
 551 0280 00C0      		rjmp .L17
 552               	.L16:
 198:..//src/kernel/source/nrk_scheduler.c ****             }else{
 199:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->cpu_remaining=0;
 554               	.LM49:
 555 0282 128E      		std Z+26,__zero_reg__
 556 0284 118E      		std Z+25,__zero_reg__
 200:..//src/kernel/source/nrk_scheduler.c **** 		nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
 558               	.LM50:
 559 0286 82E0      		ldi r24,lo8(2)
 560 0288 6085      		ldd r22,Z+8
 561 028a 0E94 0000 		call nrk_kernel_error_add
 562 028e 00C0      		rjmp .L17
 563               	.L15:
 201:..//src/kernel/source/nrk_scheduler.c ****             }
 202:..//src/kernel/source/nrk_scheduler.c ****         }
 203:..//src/kernel/source/nrk_scheduler.c ****         else
 204:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
 565               	.LM51:
 566 0290 281B      		sub r18,r24
 567 0292 390B      		sbc r19,r25
 568 0294 328F      		std Z+26,r19
 569 0296 218F      		std Z+25,r18
 570               	.L17:
 205:..//src/kernel/source/nrk_scheduler.c **** 
 206:..//src/kernel/source/nrk_scheduler.c ****         task_ID= nrk_cur_task_TCB->task_ID;
 572               	.LM52:
 573 0298 E091 0000 		lds r30,nrk_cur_task_TCB
 574 029c F091 0000 		lds r31,nrk_cur_task_TCB+1
 575 02a0 0085      		ldd r16,Z+8
 207:..//src/kernel/source/nrk_scheduler.c ****       //                  printf("cpu remaining of %d is %d \n",task_ID,nrk_task_TCB[task_ID].cpu_r
 208:..//src/kernel/source/nrk_scheduler.c **** 
 209:..//src/kernel/source/nrk_scheduler.c ****         if (nrk_cur_task_TCB->cpu_remaining ==0 )
 577               	.LM53:
 578 02a2 218D      		ldd r18,Z+25
 579 02a4 328D      		ldd r19,Z+26
 580 02a6 2115      		cp r18,__zero_reg__
 581 02a8 3105      		cpc r19,__zero_reg__
 582 02aa 01F4      		brne .L9
 210:..//src/kernel/source/nrk_scheduler.c ****         {
 211:..//src/kernel/source/nrk_scheduler.c ****             //printf("Task %d cpu remaining = 0\n", task_ID);
 212:..//src/kernel/source/nrk_scheduler.c ****             //printf("Task type is %d\n", nrk_cur_task_TCB->task_type);
 213:..//src/kernel/source/nrk_scheduler.c ****             // Here we dont need to suspend CBS
 214:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_cur_task_TCB->task_type == BASIC_TASK){
 584               	.LM54:
 585 02ac 81A1      		ldd r24,Z+33
 586 02ae 8130      		cpi r24,lo8(1)
 587 02b0 01F4      		brne .L18
 215:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 216:..//src/kernel/source/nrk_scheduler.c ****                 _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 217:..//src/kernel/source/nrk_scheduler.c **** #endif
 218:..//src/kernel/source/nrk_scheduler.c ****                 nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
 589               	.LM55:
 590 02b2 83E0      		ldi r24,lo8(3)
 591 02b4 602F      		mov r22,r16
 592 02b6 0E94 0000 		call nrk_kernel_error_add
 219:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->task_state = SUSPENDED;
 594               	.LM56:
 595 02ba E091 0000 		lds r30,nrk_cur_task_TCB
 596 02be F091 0000 		lds r31,nrk_cur_task_TCB+1
 597 02c2 83E0      		ldi r24,lo8(3)
 598 02c4 8187      		std Z+9,r24
 220:..//src/kernel/source/nrk_scheduler.c ****                 nrk_rem_from_readyQ(task_ID);
 600               	.LM57:
 601 02c6 802F      		mov r24,r16
 602 02c8 0E94 0000 		call nrk_rem_from_readyQ
 603 02cc 00C0      		rjmp .L9
 604               	.L18:
 221:..//src/kernel/source/nrk_scheduler.c ****             }else if(nrk_cur_task_TCB->task_type == CBS_TASK
 606               	.LM58:
 607 02ce 8330      		cpi r24,lo8(3)
 608 02d0 01F4      		brne .L9
 222:..//src/kernel/source/nrk_scheduler.c **** 		    && nrk_cur_task_TCB->task_state != SUSPENDED
 610               	.LM59:
 611 02d2 8185      		ldd r24,Z+9
 612 02d4 8330      		cpi r24,lo8(3)
 613 02d6 01F0      		breq .L9
 223:..//src/kernel/source/nrk_scheduler.c **** 		    ){
 224:..//src/kernel/source/nrk_scheduler.c ****                 // We need replenish the budget for CBS
 225:..//src/kernel/source/nrk_scheduler.c ****                 printf("Task %d: Replenish CBS <-------- \n", task_ID);
 615               	.LM60:
 616 02d8 00D0      		rcall .
 617 02da 00D0      		rcall .
 618 02dc 20E0      		ldi r18,lo8(.LC1)
 619 02de 30E0      		ldi r19,hi8(.LC1)
 620 02e0 EDB7      		in r30,__SP_L__
 621 02e2 FEB7      		in r31,__SP_H__
 622 02e4 3283      		std Z+2,r19
 623 02e6 2183      		std Z+1,r18
 624 02e8 802F      		mov r24,r16
 625 02ea 9927      		clr r25
 626 02ec 87FD      		sbrc r24,7
 627 02ee 9095      		com r25
 628 02f0 9483      		std Z+4,r25
 629 02f2 8383      		std Z+3,r24
 630 02f4 0E94 0000 		call printf
 226:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->next_period = nrk_cur_task_TCB->period;
 632               	.LM61:
 633 02f8 E091 0000 		lds r30,nrk_cur_task_TCB
 634 02fc F091 0000 		lds r31,nrk_cur_task_TCB+1
 635 0300 838D      		ldd r24,Z+27
 636 0302 948D      		ldd r25,Z+28
 637 0304 908F      		std Z+24,r25
 638 0306 878B      		std Z+23,r24
 227:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->cpu_remaining = nrk_cur_task_TCB->cpu_reserve;
 640               	.LM62:
 641 0308 858D      		ldd r24,Z+29
 642 030a 968D      		ldd r25,Z+30
 643 030c 928F      		std Z+26,r25
 644 030e 818F      		std Z+25,r24
 645 0310 0F90      		pop __tmp_reg__
 646 0312 0F90      		pop __tmp_reg__
 647 0314 0F90      		pop __tmp_reg__
 648 0316 0F90      		pop __tmp_reg__
 649               	.L9:
 651               	.LM63:
 652 0318 F0E0      		ldi r31,lo8(nrk_task_TCB+5)
 653 031a 2F2E      		mov r2,r31
 654 031c F0E0      		ldi r31,hi8(nrk_task_TCB+5)
 655 031e 3F2E      		mov r3,r31
 656               	.LBE2:
 121:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 658               	.LM64:
 659 0320 00E6      		ldi r16,lo8(-5536)
 660 0322 1AEE      		ldi r17,hi8(-5536)
 661 0324 20E0      		ldi r18,lo8(0)
 228:..//src/kernel/source/nrk_scheduler.c ****                 //printf("Next period is from %d\n", nrk_cur_task_TCB->next_period);
 229:..//src/kernel/source/nrk_scheduler.c ****             }
 230:..//src/kernel/source/nrk_scheduler.c **** 
 231:..//src/kernel/source/nrk_scheduler.c ****         }
 232:..//src/kernel/source/nrk_scheduler.c ****     }
 233:..//src/kernel/source/nrk_scheduler.c **** 
 234:..//src/kernel/source/nrk_scheduler.c ****     // Check I/O nrk_queues to add tasks with remaining cpu back...
 235:..//src/kernel/source/nrk_scheduler.c **** 
 236:..//src/kernel/source/nrk_scheduler.c ****     // Add eligable tasks back to the ready Queue
 237:..//src/kernel/source/nrk_scheduler.c ****     // At the same time find the next earliest wakeup
 238:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 239:..//src/kernel/source/nrk_scheduler.c ****     {
 240:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 241:..//src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 242:..//src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 243:..//src/kernel/source/nrk_scheduler.c ****         {
 244:..//src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 245:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 246:..//src/kernel/source/nrk_scheduler.c ****             else
 247:..//src/kernel/source/nrk_scheduler.c ****             {
 248:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 249:..//src/kernel/source/nrk_scheduler.c ****             }
 250:..//src/kernel/source/nrk_scheduler.c ****             // Do next period book keeping.
 251:..//src/kernel/source/nrk_scheduler.c ****             // next_period needs to be set such that the period is kept consistent even if other
 252:..//src/kernel/source/nrk_scheduler.c ****             // wait until functions are called.
 253:..//src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 254:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 255:..//src/kernel/source/nrk_scheduler.c ****             else
 256:..//src/kernel/source/nrk_scheduler.c ****             {
 257:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 258:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 259:..//src/kernel/source/nrk_scheduler.c ****                 else
 260:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 261:..//src/kernel/source/nrk_scheduler.c ****             }
 262:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 263:..//src/kernel/source/nrk_scheduler.c **** 
 264:..//src/kernel/source/nrk_scheduler.c ****         }
 265:..//src/kernel/source/nrk_scheduler.c **** 
 266:..//src/kernel/source/nrk_scheduler.c **** 
 267:..//src/kernel/source/nrk_scheduler.c ****         // Look for Next Task that Might Wakeup to interrupt current task
 268:..//src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 269:..//src/kernel/source/nrk_scheduler.c ****         {
 270:..//src/kernel/source/nrk_scheduler.c ****             // printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
 271:..//src/kernel/source/nrk_scheduler.c ****             // If a task needs to become READY, make it ready
 272:..//src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 273:..//src/kernel/source/nrk_scheduler.c ****             {
 274:..//src/kernel/source/nrk_scheduler.c ****                 // printf( "Adding back %d\n",task_ID );
 275:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 276:..//src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 277:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 278:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 279:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 280:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 281:..//src/kernel/source/nrk_scheduler.c ****                 {
 282:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 283:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 284:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 285:..//src/kernel/source/nrk_scheduler.c ****                     // If there is no period set, don't wakeup periodically
 286:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 287:..//src/kernel/source/nrk_scheduler.c ****                     nrk_add_to_readyQ(task_ID);
 288:..//src/kernel/source/nrk_scheduler.c ****                 }
 289:..//src/kernel/source/nrk_scheduler.c ****                 else
 290:..//src/kernel/source/nrk_scheduler.c ****                 {
 291:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 292:..//src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 293:..//src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].num_periods--;
 294:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 295:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 296:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 297:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].num_periods=1;
 663               	.LM65:
 664 0326 E1E0      		ldi r30,lo8(1)
 665 0328 6E2E      		mov r6,r30
 666 032a 712C      		mov r7,__zero_reg__
 296:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 668               	.LM66:
 669 032c 7AEF      		ldi r23,lo8(250)
 670 032e E72E      		mov r14,r23
 671 0330 F12C      		mov r15,__zero_reg__
 283:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 673               	.LM67:
 674 0332 62E0      		ldi r22,lo8(2)
 675 0334 962E      		mov r9,r22
 275:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 677               	.LM68:
 678 0336 51E0      		ldi r21,lo8(1)
 679 0338 A52E      		mov r10,r21
 680 033a B12C      		mov r11,__zero_reg__
 681 033c C12C      		mov r12,__zero_reg__
 682 033e D12C      		mov r13,__zero_reg__
 683               	.L31:
 240:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 685               	.LM69:
 686 0340 D101      		movw r26,r2
 687 0342 1396      		adiw r26,3
 688 0344 8C91      		ld r24,X
 689 0346 1397      		sbiw r26,3
 690 0348 8F3F      		cpi r24,lo8(-1)
 691 034a 01F4      		brne .+2
 692 034c 00C0      		rjmp .L19
 241:..//src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 694               	.LM70:
 695 034e 1C92      		st X,__zero_reg__
 242:..//src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 697               	.LM71:
 698 0350 8823      		tst r24
 699 0352 01F4      		brne .+2
 700 0354 00C0      		rjmp .L20
 242:..//src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 702               	.LM72:
 703 0356 1496      		adiw r26,4
 704 0358 8C91      		ld r24,X
 705 035a 1497      		sbiw r26,4
 706 035c 8430      		cpi r24,lo8(4)
 707 035e 01F0      		breq .L20
 244:..//src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 709               	.LM73:
 710 0360 5096      		adiw r26,16
 711 0362 4D91      		ld r20,X+
 712 0364 5C91      		ld r21,X
 713 0366 5197      		sbiw r26,16+1
 714 0368 8091 0000 		lds r24,_nrk_prev_timer_val
 715 036c 90E0      		ldi r25,lo8(0)
 716 036e 4817      		cp r20,r24
 717 0370 5907      		cpc r21,r25
 718 0372 00F0      		brlo .L21
 245:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 720               	.LM74:
 721 0374 481B      		sub r20,r24
 722 0376 590B      		sbc r21,r25
 723 0378 5196      		adiw r26,16+1
 724 037a 5C93      		st X,r21
 725 037c 4E93      		st -X,r20
 726 037e 5097      		sbiw r26,16
 727 0380 00C0      		rjmp .L22
 728               	.L21:
 248:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 730               	.LM75:
 731 0382 F101      		movw r30,r2
 732 0384 118A      		std Z+17,__zero_reg__
 733 0386 108A      		std Z+16,__zero_reg__
 734               	.L22:
 253:..//src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 736               	.LM76:
 737 0388 D101      		movw r26,r2
 738 038a 5296      		adiw r26,18
 739 038c 4D91      		ld r20,X+
 740 038e 5C91      		ld r21,X
 741 0390 5397      		sbiw r26,18+1
 742 0392 4817      		cp r20,r24
 743 0394 5907      		cpc r21,r25
 744 0396 00F0      		brlo .L23
 254:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 746               	.LM77:
 747 0398 481B      		sub r20,r24
 748 039a 590B      		sbc r21,r25
 749 039c 5396      		adiw r26,18+1
 750 039e 5C93      		st X,r21
 751 03a0 4E93      		st -X,r20
 752 03a2 5297      		sbiw r26,18
 753 03a4 00C0      		rjmp .L24
 754               	.L23:
 257:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 756               	.LM78:
 757 03a6 F101      		movw r30,r2
 758 03a8 6689      		ldd r22,Z+22
 759 03aa 7789      		ldd r23,Z+23
 760 03ac 8617      		cp r24,r22
 761 03ae 9707      		cpc r25,r23
 762 03b0 00F4      		brsh .L25
 258:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 764               	.LM79:
 765 03b2 681B      		sub r22,r24
 766 03b4 790B      		sbc r23,r25
 767 03b6 738B      		std Z+19,r23
 768 03b8 628B      		std Z+18,r22
 769 03ba 00C0      		rjmp .L24
 770               	.L25:
 260:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 772               	.LM80:
 773 03bc 0E94 0000 		call __udivmodhi4
 774 03c0 D101      		movw r26,r2
 775 03c2 5396      		adiw r26,18+1
 776 03c4 9C93      		st X,r25
 777 03c6 8E93      		st -X,r24
 778 03c8 5297      		sbiw r26,18
 779               	.L24:
 262:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 781               	.LM81:
 782 03ca F101      		movw r30,r2
 783 03cc 8289      		ldd r24,Z+18
 784 03ce 9389      		ldd r25,Z+19
 785 03d0 0097      		sbiw r24,0
 786 03d2 01F4      		brne .L20
 262:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 788               	.LM82:
 789 03d4 8689      		ldd r24,Z+22
 790 03d6 9789      		ldd r25,Z+23
 791 03d8 938B      		std Z+19,r25
 792 03da 828B      		std Z+18,r24
 793               	.L20:
 268:..//src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 795               	.LM83:
 796 03dc D101      		movw r26,r2
 797 03de 1496      		adiw r26,4
 798 03e0 8C91      		ld r24,X
 799 03e2 1497      		sbiw r26,4
 800 03e4 8330      		cpi r24,lo8(3)
 801 03e6 01F0      		breq .+2
 802 03e8 00C0      		rjmp .L19
 272:..//src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 804               	.LM84:
 805 03ea 5096      		adiw r26,16
 806 03ec 8D91      		ld r24,X+
 807 03ee 9C91      		ld r25,X
 808 03f0 5197      		sbiw r26,16+1
 809 03f2 0097      		sbiw r24,0
 810 03f4 01F0      		breq .+2
 811 03f6 00C0      		rjmp .L26
 275:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 813               	.LM85:
 814 03f8 1296      		adiw r26,2
 815 03fa 8C91      		ld r24,X
 816 03fc 1297      		sbiw r26,2
 817 03fe 8823      		tst r24
 818 0400 01F0      		breq .L27
 275:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 820               	.LM86:
 821 0402 1196      		adiw r26,1
 822 0404 8C91      		ld r24,X
 823 0406 1197      		sbiw r26,1
 824 0408 8823      		tst r24
 825 040a 01F0      		breq .L27
 826 040c D601      		movw r26,r12
 827 040e C501      		movw r24,r10
 828 0410 0090 0000 		lds r0,nrk_wakeup_signal
 829 0414 00C0      		rjmp 2f
 830 0416 880F      	1:	lsl r24
 831 0418 991F      		rol r25
 832 041a AA1F      		rol r26
 833 041c BB1F      		rol r27
 834 041e 0A94      	2:	dec r0
 835 0420 02F4      		brpl 1b
 836 0422 F101      		movw r30,r2
 837 0424 8487      		std Z+12,r24
 838 0426 9587      		std Z+13,r25
 839 0428 A687      		std Z+14,r26
 840 042a B787      		std Z+15,r27
 841               	.L27:
 277:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 843               	.LM87:
 844 042c D101      		movw r26,r2
 845 042e 1296      		adiw r26,2
 846 0430 1C92      		st X,__zero_reg__
 847 0432 1297      		sbiw r26,2
 278:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 849               	.LM88:
 850 0434 1196      		adiw r26,1
 851 0436 1C92      		st X,__zero_reg__
 852 0438 1197      		sbiw r26,1
 279:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 854               	.LM89:
 855 043a 1C92      		st X,__zero_reg__
 280:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 857               	.LM90:
 858 043c 5A96      		adiw r26,26
 859 043e 4D91      		ld r20,X+
 860 0440 5C91      		ld r21,X
 861 0442 5B97      		sbiw r26,26+1
 862 0444 5696      		adiw r26,22
 863 0446 8D91      		ld r24,X+
 864 0448 9C91      		ld r25,X
 865 044a 5797      		sbiw r26,22+1
 866 044c 5896      		adiw r26,24
 867 044e 6D91      		ld r22,X+
 868 0450 7C91      		ld r23,X
 869 0452 5997      		sbiw r26,24+1
 870 0454 4130      		cpi r20,1
 871 0456 5105      		cpc r21,__zero_reg__
 872 0458 01F4      		brne .L28
 282:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 874               	.LM91:
 875 045a 5596      		adiw r26,20+1
 876 045c 7C93      		st X,r23
 877 045e 6E93      		st -X,r22
 878 0460 5497      		sbiw r26,20
 283:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 880               	.LM92:
 881 0462 1496      		adiw r26,4
 882 0464 9C92      		st X,r9
 883 0466 1497      		sbiw r26,4
 284:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 885               	.LM93:
 886 0468 5296      		adiw r26,18
 887 046a 4D91      		ld r20,X+
 888 046c 5C91      		ld r21,X
 889 046e 5397      		sbiw r26,18+1
 890 0470 5196      		adiw r26,16+1
 891 0472 5C93      		st X,r21
 892 0474 4E93      		st -X,r20
 893 0476 5097      		sbiw r26,16
 286:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 895               	.LM94:
 896 0478 0097      		sbiw r24,0
 897 047a 01F4      		brne .L29
 286:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 899               	.LM95:
 900 047c 5196      		adiw r26,16+1
 901 047e FC92      		st X,r15
 902 0480 EE92      		st -X,r14
 903 0482 5097      		sbiw r26,16
 904               	.L29:
 287:..//src/kernel/source/nrk_scheduler.c ****                     nrk_add_to_readyQ(task_ID);
 906               	.LM96:
 907 0484 822F      		mov r24,r18
 908 0486 2983      		std Y+1,r18
 909 0488 0E94 0000 		call nrk_add_to_readyQ
 910 048c 2981      		ldd r18,Y+1
 911 048e 00C0      		rjmp .L26
 912               	.L28:
 291:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 914               	.LM97:
 915 0490 F101      		movw r30,r2
 916 0492 758B      		std Z+21,r23
 917 0494 648B      		std Z+20,r22
 294:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 919               	.LM98:
 920 0496 BA01      		movw r22,r20
 921 0498 6150      		subi r22,lo8(-(-1))
 922 049a 7040      		sbci r23,hi8(-(-1))
 923 049c 689F      		mul r22,r24
 924 049e A001      		movw r20,r0
 925 04a0 699F      		mul r22,r25
 926 04a2 500D      		add r21,r0
 927 04a4 789F      		mul r23,r24
 928 04a6 500D      		add r21,r0
 929 04a8 1124      		clr r1
 930 04aa 518B      		std Z+17,r21
 931 04ac 408B      		std Z+16,r20
 295:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 933               	.LM99:
 934 04ae 538B      		std Z+19,r21
 935 04b0 428B      		std Z+18,r20
 296:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 937               	.LM100:
 938 04b2 0097      		sbiw r24,0
 939 04b4 01F4      		brne .L30
 296:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 941               	.LM101:
 942 04b6 F18A      		std Z+17,r15
 943 04b8 E08A      		std Z+16,r14
 944               	.L30:
 946               	.LM102:
 947 04ba D101      		movw r26,r2
 948 04bc 5B96      		adiw r26,26+1
 949 04be 7C92      		st X,r7
 950 04c0 6E92      		st -X,r6
 951 04c2 5A97      		sbiw r26,26
 952               	.L26:
 298:..//src/kernel/source/nrk_scheduler.c ****                     //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
 299:..//src/kernel/source/nrk_scheduler.c ****                     //			nrk_task_TCB[task_ID].num_periods=1;
 300:..//src/kernel/source/nrk_scheduler.c ****                 }
 301:..//src/kernel/source/nrk_scheduler.c ****             }
 302:..//src/kernel/source/nrk_scheduler.c **** 
 303:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
 954               	.LM103:
 955 04c4 F101      		movw r30,r2
 956 04c6 8089      		ldd r24,Z+16
 957 04c8 9189      		ldd r25,Z+17
 958 04ca 0097      		sbiw r24,0
 959 04cc 01F0      		breq .L19
 961               	.LM104:
 962 04ce 8017      		cp r24,r16
 963 04d0 9107      		cpc r25,r17
 964 04d2 00F4      		brsh .L19
 966               	.LM105:
 967 04d4 8C01      		movw r16,r24
 968               	.L19:
 238:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 970               	.LM106:
 971 04d6 2F5F      		subi r18,lo8(-(1))
 972 04d8 86E2      		ldi r24,lo8(38)
 973 04da 90E0      		ldi r25,hi8(38)
 974 04dc 280E      		add r2,r24
 975 04de 391E      		adc r3,r25
 976 04e0 2530      		cpi r18,lo8(5)
 977 04e2 01F0      		breq .+2
 978 04e4 00C0      		rjmp .L31
 304:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup<next_wake )
 305:..//src/kernel/source/nrk_scheduler.c ****             {
 306:..//src/kernel/source/nrk_scheduler.c ****                 // Find closest next_wake task
 307:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].next_wakeup;
 308:..//src/kernel/source/nrk_scheduler.c ****             }
 309:..//src/kernel/source/nrk_scheduler.c **** 
 310:..//src/kernel/source/nrk_scheduler.c ****         }
 311:..//src/kernel/source/nrk_scheduler.c ****     }
 312:..//src/kernel/source/nrk_scheduler.c **** 
 313:..//src/kernel/source/nrk_scheduler.c **** 	#ifdef CBS_CASH
 314:..//src/kernel/source/nrk_scheduler.c **** 	// if current task is CBS_TASK then find earliest deadline CASH to use before using it's own resou
 315:..//src/kernel/source/nrk_scheduler.c **** 	if(nrk_cur_task_TCB->task_type == CBS_TASK) {
 980               	.LM107:
 981 04e6 E091 0000 		lds r30,nrk_cur_task_TCB
 982 04ea F091 0000 		lds r31,nrk_cur_task_TCB+1
 983 04ee 81A1      		ldd r24,Z+33
 984 04f0 8330      		cpi r24,lo8(3)
 985 04f2 01F0      		breq .+2
 986 04f4 00C0      		rjmp .L32
 987 04f6 40E0      		ldi r20,lo8(nrk_task_TCB+33)
 988 04f8 A42E      		mov r10,r20
 989 04fa 40E0      		ldi r20,hi8(nrk_task_TCB+33)
 990 04fc B42E      		mov r11,r20
 991               	.LBB3:
 992               	.LBB4:
 316:..//src/kernel/source/nrk_scheduler.c **** 
 317:..//src/kernel/source/nrk_scheduler.c **** 		// allocate cash to the next highest ready cbs task and update cash and cash_period.
 318:..//src/kernel/source/nrk_scheduler.c **** 		// Loop through all tasks with cash and find the earliest cash deadline and increment the current
 319:..//src/kernel/source/nrk_scheduler.c **** 		// Such that the current task can use up the residual resource before it uses its own.
 320:..//src/kernel/source/nrk_scheduler.c **** 
 321:..//src/kernel/source/nrk_scheduler.c **** 		int i = 0;			
 322:..//src/kernel/source/nrk_scheduler.c **** 		for(i = 0; i < NRK_MAX_TASKS; i++){
 323:..//src/kernel/source/nrk_scheduler.c **** 			
 324:..//src/kernel/source/nrk_scheduler.c **** 			// for each CBS task available, find the next earliest cash deadline
 325:..//src/kernel/source/nrk_scheduler.c **** 			if(nrk_task_TCB[i].task_type == CBS_TASK){
 326:..//src/kernel/source/nrk_scheduler.c **** 				int j = 0;
 327:..//src/kernel/source/nrk_scheduler.c **** 				int cash_task_id = 0;
 328:..//src/kernel/source/nrk_scheduler.c **** 				
 329:..//src/kernel/source/nrk_scheduler.c **** 				for(j = 0; j < NRK_MAX_TASKS; j++){
 330:..//src/kernel/source/nrk_scheduler.c **** 					if(nrk_task_TCB[j].task_type == CBS_TASK && nrk_task_TCB[j].cash_period > 0) {
 331:..//src/kernel/source/nrk_scheduler.c **** 						if(cash_task_id == 0){
 332:..//src/kernel/source/nrk_scheduler.c **** 							cash_task_id = nrk_task_TCB[j].task_ID;
 333:..//src/kernel/source/nrk_scheduler.c **** 						}
 334:..//src/kernel/source/nrk_scheduler.c **** 						else{
 335:..//src/kernel/source/nrk_scheduler.c **** 							if(nrk_task_TCB[j].cash_period < nrk_task_TCB[i].cash_period){
 336:..//src/kernel/source/nrk_scheduler.c **** 								cash_task_id = nrk_task_TCB[j].task_ID;
 337:..//src/kernel/source/nrk_scheduler.c **** 							}
 338:..//src/kernel/source/nrk_scheduler.c **** 						}
 339:..//src/kernel/source/nrk_scheduler.c **** 					}
 340:..//src/kernel/source/nrk_scheduler.c **** 				}
 341:..//src/kernel/source/nrk_scheduler.c **** 				
 342:..//src/kernel/source/nrk_scheduler.c **** 
 343:..//src/kernel/source/nrk_scheduler.c **** 				// check if the cash task_id is updated and the next highest CBS task is not cash task
 344:..//src/kernel/source/nrk_scheduler.c **** 				if (cash_task_id > 0 && nrk_get_high_ready_task_ID() != cash_task_id){
 345:..//src/kernel/source/nrk_scheduler.c **** 					// check if the earliest deadline cash__task_id cash_period is less than highest ready task pe
 346:..//src/kernel/source/nrk_scheduler.c **** 					if( nrk_task_TCB[cash_task_id].cash_period < nrk_task_TCB[nrk_get_high_ready_task_ID()].next_p
 994               	.LM108:
 995 04fe 36E2      		ldi r19,lo8(38)
 996 0500 E32E      		mov r14,r19
 997 0502 F12C      		mov r15,__zero_reg__
 998               	.L39:
 999               	.LBE4:
 325:..//src/kernel/source/nrk_scheduler.c **** 			if(nrk_task_TCB[i].task_type == CBS_TASK){
 1001               	.LM109:
 1002 0504 D501      		movw r26,r10
 1003 0506 8C91      		ld r24,X
 1004 0508 8330      		cpi r24,lo8(3)
 1005 050a 01F0      		breq .+2
 1006 050c 00C0      		rjmp .L33
 1007 050e E0E0      		ldi r30,lo8(nrk_task_TCB+8)
 1008 0510 F0E0      		ldi r31,hi8(nrk_task_TCB+8)
 1009               	.LBE3:
  53:..//src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
 1011               	.LM110:
 1012 0512 CC24      		clr r12
 1013 0514 DD24      		clr r13
 1014               	.L36:
 1015               	.LBB7:
 1016               	.LBB6:
 330:..//src/kernel/source/nrk_scheduler.c **** 					if(nrk_task_TCB[j].task_type == CBS_TASK && nrk_task_TCB[j].cash_period > 0) {
 1018               	.LM111:
 1019 0516 818D      		ldd r24,Z+25
 1020 0518 8330      		cpi r24,lo8(3)
 1021 051a 01F4      		brne .L34
 330:..//src/kernel/source/nrk_scheduler.c **** 					if(nrk_task_TCB[j].task_type == CBS_TASK && nrk_task_TCB[j].cash_period > 0) {
 1023               	.LM112:
 1024 051c 848D      		ldd r24,Z+28
 1025 051e 958D      		ldd r25,Z+29
 1026 0520 0097      		sbiw r24,0
 1027 0522 01F0      		breq .L34
 331:..//src/kernel/source/nrk_scheduler.c **** 						if(cash_task_id == 0){
 1029               	.LM113:
 1030 0524 C114      		cp r12,__zero_reg__
 1031 0526 D104      		cpc r13,__zero_reg__
 1032 0528 01F0      		breq .L55
 1033               	.L35:
 335:..//src/kernel/source/nrk_scheduler.c **** 							if(nrk_task_TCB[j].cash_period < nrk_task_TCB[i].cash_period){
 1035               	.LM114:
 1036 052a D501      		movw r26,r10
 1037 052c 1396      		adiw r26,3
 1038 052e 2D91      		ld r18,X+
 1039 0530 3C91      		ld r19,X
 1040 0532 1497      		sbiw r26,3+1
 1041 0534 8217      		cp r24,r18
 1042 0536 9307      		cpc r25,r19
 1043 0538 00F4      		brsh .L34
 1044               	.L55:
 336:..//src/kernel/source/nrk_scheduler.c **** 								cash_task_id = nrk_task_TCB[j].task_ID;
 1046               	.LM115:
 1047 053a C080      		ld r12,Z
 1048 053c DD24      		clr r13
 1049 053e C7FC      		sbrc r12,7
 1050 0540 D094      		com r13
 1051               	.L34:
 1052 0542 B696      		adiw r30,38
 329:..//src/kernel/source/nrk_scheduler.c **** 				for(j = 0; j < NRK_MAX_TASKS; j++){
 1054               	.LM116:
 1055 0544 B0E0      		ldi r27,hi8(nrk_task_TCB+198)
 1056 0546 E030      		cpi r30,lo8(nrk_task_TCB+198)
 1057 0548 FB07      		cpc r31,r27
 1058 054a 01F4      		brne .L36
 344:..//src/kernel/source/nrk_scheduler.c **** 				if (cash_task_id > 0 && nrk_get_high_ready_task_ID() != cash_task_id){
 1060               	.LM117:
 1061 054c 1C14      		cp __zero_reg__,r12
 1062 054e 1D04      		cpc __zero_reg__,r13
 1063 0550 04F0      		brlt .+2
 1064 0552 00C0      		rjmp .L33
 344:..//src/kernel/source/nrk_scheduler.c **** 				if (cash_task_id > 0 && nrk_get_high_ready_task_ID() != cash_task_id){
 1066               	.LM118:
 1067 0554 0E94 0000 		call nrk_get_high_ready_task_ID
 1068 0558 90E0      		ldi r25,lo8(0)
 1069 055a 8C15      		cp r24,r12
 1070 055c 9D05      		cpc r25,r13
 1071 055e 01F4      		brne .+2
 1072 0560 00C0      		rjmp .L33
 1074               	.LM119:
 1075 0562 CE9C      		mul r12,r14
 1076 0564 3001      		movw r6,r0
 1077 0566 CF9C      		mul r12,r15
 1078 0568 700C      		add r7,r0
 1079 056a DE9C      		mul r13,r14
 1080 056c 700C      		add r7,r0
 1081 056e 1124      		clr r1
 1082 0570 E0E0      		ldi r30,lo8(nrk_task_TCB)
 1083 0572 F0E0      		ldi r31,hi8(nrk_task_TCB)
 1084 0574 6E0E      		add r6,r30
 1085 0576 7F1E      		adc r7,r31
 1086 0578 D301      		movw r26,r6
 1087 057a 9496      		adiw r26,36
 1088 057c CD90      		ld r12,X+
 1089 057e DC90      		ld r13,X
 1090 0580 9597      		sbiw r26,36+1
 1091 0582 0E94 0000 		call nrk_get_high_ready_task_ID
 1092 0586 90E0      		ldi r25,lo8(0)
 1093 0588 8E9D      		mul r24,r14
 1094 058a F001      		movw r30,r0
 1095 058c 8F9D      		mul r24,r15
 1096 058e F00D      		add r31,r0
 1097 0590 9E9D      		mul r25,r14
 1098 0592 F00D      		add r31,r0
 1099 0594 1124      		clr r1
 1100 0596 E050      		subi r30,lo8(-(nrk_task_TCB))
 1101 0598 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1102 059a 8789      		ldd r24,Z+23
 1103 059c 908D      		ldd r25,Z+24
 1104 059e C816      		cp r12,r24
 1105 05a0 D906      		cpc r13,r25
 1106 05a2 00F0      		brlo .+2
 1107 05a4 00C0      		rjmp .L33
 347:..//src/kernel/source/nrk_scheduler.c **** 						// increment cash_period and cash up to max of task execution
 348:..//src/kernel/source/nrk_scheduler.c **** 						if((nrk_task_TCB[cash_task_id].cash + nrk_task_TCB[nrk_get_high_ready_task_ID()].cpu_remainin
 1109               	.LM120:
 1110 05a6 F301      		movw r30,r6
 1111 05a8 C2A0      		ldd r12,Z+34
 1112 05aa D3A0      		ldd r13,Z+35
 1113 05ac 0E94 0000 		call nrk_get_high_ready_task_ID
 1114 05b0 90E0      		ldi r25,lo8(0)
 1115 05b2 8E9D      		mul r24,r14
 1116 05b4 F001      		movw r30,r0
 1117 05b6 8F9D      		mul r24,r15
 1118 05b8 F00D      		add r31,r0
 1119 05ba 9E9D      		mul r25,r14
 1120 05bc F00D      		add r31,r0
 1121 05be 1124      		clr r1
 1122 05c0 E050      		subi r30,lo8(-(nrk_task_TCB))
 1123 05c2 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1124 05c4 818D      		ldd r24,Z+25
 1125 05c6 928D      		ldd r25,Z+26
 1126 05c8 C80E      		add r12,r24
 1127 05ca D91E      		adc r13,r25
 1128 05cc 0E94 0000 		call nrk_get_high_ready_task_ID
 1129 05d0 90E0      		ldi r25,lo8(0)
 1130 05d2 8E9D      		mul r24,r14
 1131 05d4 F001      		movw r30,r0
 1132 05d6 8F9D      		mul r24,r15
 1133 05d8 F00D      		add r31,r0
 1134 05da 9E9D      		mul r25,r14
 1135 05dc F00D      		add r31,r0
 1136 05de 1124      		clr r1
 1137 05e0 E050      		subi r30,lo8(-(nrk_task_TCB))
 1138 05e2 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1139 05e4 858D      		ldd r24,Z+29
 1140 05e6 968D      		ldd r25,Z+30
 1141 05e8 880F      		lsl r24
 1142 05ea 991F      		rol r25
 1143 05ec C816      		cp r12,r24
 1144 05ee D906      		cpc r13,r25
 1145 05f0 00F0      		brlo .L56
 1146               	.L37:
 349:..//src/kernel/source/nrk_scheduler.c **** 							nrk_task_TCB[nrk_get_high_ready_task_ID()].cpu_remaining += nrk_task_TCB[cash_task_id].cash;
 350:..//src/kernel/source/nrk_scheduler.c **** 							nrk_task_TCB[cash_task_id].cash = 0;
 351:..//src/kernel/source/nrk_scheduler.c **** 							nrk_task_TCB[cash_task_id].cash_period = 0;
 352:..//src/kernel/source/nrk_scheduler.c **** 						}
 353:..//src/kernel/source/nrk_scheduler.c **** 						else {
 354:..//src/kernel/source/nrk_scheduler.c **** 							if((2*nrk_task_TCB[nrk_get_high_ready_task_ID()].cpu_reserve - nrk_task_TCB[nrk_get_high_rea
 1148               	.LM121:
 1149 05f2 0E94 0000 		call nrk_get_high_ready_task_ID
 1150 05f6 90E0      		ldi r25,lo8(0)
 1151 05f8 8E9D      		mul r24,r14
 1152 05fa F001      		movw r30,r0
 1153 05fc 8F9D      		mul r24,r15
 1154 05fe F00D      		add r31,r0
 1155 0600 9E9D      		mul r25,r14
 1156 0602 F00D      		add r31,r0
 1157 0604 1124      		clr r1
 1158 0606 E050      		subi r30,lo8(-(nrk_task_TCB))
 1159 0608 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1160 060a C58C      		ldd r12,Z+29
 1161 060c D68C      		ldd r13,Z+30
 1162 060e CC0C      		lsl r12
 1163 0610 DD1C      		rol r13
 1164 0612 0E94 0000 		call nrk_get_high_ready_task_ID
 1165 0616 90E0      		ldi r25,lo8(0)
 1166 0618 8E9D      		mul r24,r14
 1167 061a F001      		movw r30,r0
 1168 061c 8F9D      		mul r24,r15
 1169 061e F00D      		add r31,r0
 1170 0620 9E9D      		mul r25,r14
 1171 0622 F00D      		add r31,r0
 1172 0624 1124      		clr r1
 1173 0626 E050      		subi r30,lo8(-(nrk_task_TCB))
 1174 0628 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1175 062a 818D      		ldd r24,Z+25
 1176 062c 928D      		ldd r25,Z+26
 1177 062e C81A      		sub r12,r24
 1178 0630 D90A      		sbc r13,r25
 1179 0632 F301      		movw r30,r6
 1180 0634 82A1      		ldd r24,Z+34
 1181 0636 93A1      		ldd r25,Z+35
 1182 0638 8C15      		cp r24,r12
 1183 063a 9D05      		cpc r25,r13
 1184 063c 00F4      		brsh .L38
 1185               	.L56:
 355:..//src/kernel/source/nrk_scheduler.c **** 								nrk_task_TCB[nrk_get_high_ready_task_ID()].cpu_remaining += nrk_task_TCB[cash_task_id].cash
 1187               	.LM122:
 1188 063e 0E94 0000 		call nrk_get_high_ready_task_ID
 1189 0642 90E0      		ldi r25,lo8(0)
 1190 0644 8E9D      		mul r24,r14
 1191 0646 F001      		movw r30,r0
 1192 0648 8F9D      		mul r24,r15
 1193 064a F00D      		add r31,r0
 1194 064c 9E9D      		mul r25,r14
 1195 064e F00D      		add r31,r0
 1196 0650 1124      		clr r1
 1197 0652 E050      		subi r30,lo8(-(nrk_task_TCB))
 1198 0654 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1199 0656 D301      		movw r26,r6
 1200 0658 9296      		adiw r26,34
 1201 065a 8D91      		ld r24,X+
 1202 065c 9C91      		ld r25,X
 1203 065e 9397      		sbiw r26,34+1
 1204 0660 218D      		ldd r18,Z+25
 1205 0662 328D      		ldd r19,Z+26
 1206 0664 820F      		add r24,r18
 1207 0666 931F      		adc r25,r19
 1208 0668 928F      		std Z+26,r25
 1209 066a 818F      		std Z+25,r24
 356:..//src/kernel/source/nrk_scheduler.c **** 								nrk_task_TCB[cash_task_id].cash = 0;
 1211               	.LM123:
 1212 066c 9396      		adiw r26,34+1
 1213 066e 1C92      		st X,__zero_reg__
 1214 0670 1E92      		st -X,__zero_reg__
 1215 0672 9297      		sbiw r26,34
 357:..//src/kernel/source/nrk_scheduler.c **** 								nrk_task_TCB[cash_task_id].cash_period = 0;
 1217               	.LM124:
 1218 0674 9596      		adiw r26,36+1
 1219 0676 1C92      		st X,__zero_reg__
 1220 0678 1E92      		st -X,__zero_reg__
 1221 067a 9497      		sbiw r26,36
 1222 067c 00C0      		rjmp .L33
 1223               	.L38:
 1224               	.LBB5:
 358:..//src/kernel/source/nrk_scheduler.c **** 							}
 359:..//src/kernel/source/nrk_scheduler.c **** 							else {
 360:..//src/kernel/source/nrk_scheduler.c **** 								// use up none or partial cash
 361:..//src/kernel/source/nrk_scheduler.c **** 								int use_cash = (2*nrk_task_TCB[nrk_get_high_ready_task_ID()].cpu_reserve - nrk_task_TCB[nrk
 1226               	.LM125:
 1227 067e 0E94 0000 		call nrk_get_high_ready_task_ID
 1228 0682 90E0      		ldi r25,lo8(0)
 1229 0684 8E9D      		mul r24,r14
 1230 0686 F001      		movw r30,r0
 1231 0688 8F9D      		mul r24,r15
 1232 068a F00D      		add r31,r0
 1233 068c 9E9D      		mul r25,r14
 1234 068e F00D      		add r31,r0
 1235 0690 1124      		clr r1
 1236 0692 E050      		subi r30,lo8(-(nrk_task_TCB))
 1237 0694 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1238 0696 C58C      		ldd r12,Z+29
 1239 0698 D68C      		ldd r13,Z+30
 1240 069a CC0C      		lsl r12
 1241 069c DD1C      		rol r13
 1242 069e 0E94 0000 		call nrk_get_high_ready_task_ID
 1243 06a2 90E0      		ldi r25,lo8(0)
 1244 06a4 8E9D      		mul r24,r14
 1245 06a6 F001      		movw r30,r0
 1246 06a8 8F9D      		mul r24,r15
 1247 06aa F00D      		add r31,r0
 1248 06ac 9E9D      		mul r25,r14
 1249 06ae F00D      		add r31,r0
 1250 06b0 1124      		clr r1
 1251 06b2 E050      		subi r30,lo8(-(nrk_task_TCB))
 1252 06b4 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1253 06b6 818D      		ldd r24,Z+25
 1254 06b8 928D      		ldd r25,Z+26
 1255 06ba C81A      		sub r12,r24
 1256 06bc D90A      		sbc r13,r25
 362:..//src/kernel/source/nrk_scheduler.c **** 								nrk_task_TCB[nrk_get_high_ready_task_ID()].cpu_remaining += use_cash;
 1258               	.LM126:
 1259 06be 0E94 0000 		call nrk_get_high_ready_task_ID
 1260 06c2 90E0      		ldi r25,lo8(0)
 1261 06c4 8E9D      		mul r24,r14
 1262 06c6 F001      		movw r30,r0
 1263 06c8 8F9D      		mul r24,r15
 1264 06ca F00D      		add r31,r0
 1265 06cc 9E9D      		mul r25,r14
 1266 06ce F00D      		add r31,r0
 1267 06d0 1124      		clr r1
 1268 06d2 E050      		subi r30,lo8(-(nrk_task_TCB))
 1269 06d4 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1270 06d6 818D      		ldd r24,Z+25
 1271 06d8 928D      		ldd r25,Z+26
 1272 06da 8C0D      		add r24,r12
 1273 06dc 9D1D      		adc r25,r13
 1274 06de 928F      		std Z+26,r25
 1275 06e0 818F      		std Z+25,r24
 363:..//src/kernel/source/nrk_scheduler.c **** 								nrk_task_TCB[cash_task_id].cash -= use_cash; 
 1277               	.LM127:
 1278 06e2 F301      		movw r30,r6
 1279 06e4 82A1      		ldd r24,Z+34
 1280 06e6 93A1      		ldd r25,Z+35
 1281 06e8 8C19      		sub r24,r12
 1282 06ea 9D09      		sbc r25,r13
 1283 06ec 93A3      		std Z+35,r25
 1284 06ee 82A3      		std Z+34,r24
 1285               	.L33:
 1286 06f0 86E2      		ldi r24,lo8(38)
 1287 06f2 90E0      		ldi r25,hi8(38)
 1288 06f4 A80E      		add r10,r24
 1289 06f6 B91E      		adc r11,r25
 1290               	.LBE5:
 1291               	.LBE6:
 322:..//src/kernel/source/nrk_scheduler.c **** 		for(i = 0; i < NRK_MAX_TASKS; i++){
 1293               	.LM128:
 1294 06f8 90E0      		ldi r25,lo8(nrk_task_TCB+223)
 1295 06fa A916      		cp r10,r25
 1296 06fc 90E0      		ldi r25,hi8(nrk_task_TCB+223)
 1297 06fe B906      		cpc r11,r25
 1298 0700 01F0      		breq .+2
 1299 0702 00C0      		rjmp .L39
 1300               	.L32:
 1301               	.LBE7:
 364:..//src/kernel/source/nrk_scheduler.c **** 							}
 365:..//src/kernel/source/nrk_scheduler.c **** 						}				
 366:..//src/kernel/source/nrk_scheduler.c **** 					}
 367:..//src/kernel/source/nrk_scheduler.c **** 				}
 368:..//src/kernel/source/nrk_scheduler.c **** 			} // end if for CBS task
 369:..//src/kernel/source/nrk_scheduler.c **** 			
 370:..//src/kernel/source/nrk_scheduler.c **** 		} //end for loop
 371:..//src/kernel/source/nrk_scheduler.c **** 	}
 372:..//src/kernel/source/nrk_scheduler.c **** 	#endif
 373:..//src/kernel/source/nrk_scheduler.c **** 
 374:..//src/kernel/source/nrk_scheduler.c **** 
 375:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 376:..//src/kernel/source/nrk_scheduler.c ****     _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
 377:..//src/kernel/source/nrk_scheduler.c **** #endif
 378:..//src/kernel/source/nrk_scheduler.c ****     task_ID = nrk_get_high_ready_task_ID();
 1303               	.LM129:
 1304 0704 0E94 0000 		call nrk_get_high_ready_task_ID
 1305 0708 E82E      		mov r14,r24
 379:..//src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 1307               	.LM130:
 1308 070a 482F      		mov r20,r24
 1309 070c 5527      		clr r21
 1310 070e 47FD      		sbrc r20,7
 1311 0710 5095      		com r21
 1312 0712 26E2      		ldi r18,lo8(38)
 1313 0714 30E0      		ldi r19,hi8(38)
 1314 0716 429F      		mul r20,r18
 1315 0718 F001      		movw r30,r0
 1316 071a 439F      		mul r20,r19
 1317 071c F00D      		add r31,r0
 1318 071e 529F      		mul r21,r18
 1319 0720 F00D      		add r31,r0
 1320 0722 1124      		clr r1
 1321 0724 E050      		subi r30,lo8(-(nrk_task_TCB))
 1322 0726 F040      		sbci r31,hi8(-(nrk_task_TCB))
 1323 0728 8285      		ldd r24,Z+10
 1324 072a 8093 0000 		sts nrk_high_ready_prio,r24
 380:..//src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
 1326               	.LM131:
 1327 072e F093 0000 		sts nrk_high_ready_TCB+1,r31
 1328 0732 E093 0000 		sts nrk_high_ready_TCB,r30
 381:..//src/kernel/source/nrk_scheduler.c **** 
 382:..//src/kernel/source/nrk_scheduler.c ****     // next_wake should hold next time when a suspended task might get run
 383:..//src/kernel/source/nrk_scheduler.c ****     // task_ID holds the highest priority READY task ID
 384:..//src/kernel/source/nrk_scheduler.c ****     // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time
 385:..//src/kernel/source/nrk_scheduler.c **** 
 386:..//src/kernel/source/nrk_scheduler.c ****     // Now we pick the next wakeup (either the end of the current task, or the possible resume
 387:..//src/kernel/source/nrk_scheduler.c ****     // of a suspended task)
 388:..//src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID)
 1330               	.LM132:
 1331 0736 EE20      		tst r14
 1332 0738 01F0      		breq .L40
 389:..//src/kernel/source/nrk_scheduler.c ****     {
 390:..//src/kernel/source/nrk_scheduler.c ****         // You are a non-Idle Task
 391:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WA
 1334               	.LM133:
 1335 073a 258D      		ldd r18,Z+29
 1336 073c 368D      		ldd r19,Z+30
 1337 073e 2115      		cp r18,__zero_reg__
 1338 0740 3105      		cpc r19,__zero_reg__
 1339 0742 01F0      		breq .L41
 1341               	.LM134:
 1342 0744 218D      		ldd r18,Z+25
 1343 0746 328D      		ldd r19,Z+26
 1344 0748 2A3F      		cpi r18,250
 1345 074a 3105      		cpc r19,__zero_reg__
 1346 074c 00F4      		brsh .L41
 392:..//src/kernel/source/nrk_scheduler.c ****         {
 393:..//src/kernel/source/nrk_scheduler.c ****             if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
 1348               	.LM135:
 1349 074e 2017      		cp r18,r16
 1350 0750 3107      		cpc r19,r17
 1351 0752 00F4      		brsh .+2
 1352 0754 00C0      		rjmp .L42
 1353 0756 00C0      		rjmp .L45
 1354               	.L41:
 1355 0758 9801      		movw r18,r16
 1356 075a 0B3F      		cpi r16,251
 1357 075c 1105      		cpc r17,__zero_reg__
 1358 075e 00F4      		brsh .+2
 1359 0760 00C0      		rjmp .L42
 1360 0762 2AEF      		ldi r18,lo8(250)
 1361 0764 30E0      		ldi r19,hi8(250)
 1362 0766 00C0      		rjmp .L42
 1363               	.L40:
 394:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].cpu_remaining;
 395:..//src/kernel/source/nrk_scheduler.c ****         }
 396:..//src/kernel/source/nrk_scheduler.c ****         else
 397:..//src/kernel/source/nrk_scheduler.c ****         {
 398:..//src/kernel/source/nrk_scheduler.c ****             if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 399:..//src/kernel/source/nrk_scheduler.c ****         }
 400:..//src/kernel/source/nrk_scheduler.c ****     }
 401:..//src/kernel/source/nrk_scheduler.c ****     else
 402:..//src/kernel/source/nrk_scheduler.c ****     {
 403:..//src/kernel/source/nrk_scheduler.c ****         // This is the idle task
 404:..//src/kernel/source/nrk_scheduler.c ****         // Make sure you wake up from the idle task a little earlier
 405:..//src/kernel/source/nrk_scheduler.c ****         // if you would go into deep sleep...
 406:..//src/kernel/source/nrk_scheduler.c ****         // After waking from deep sleep, the next context swap must be at least
 407:..//src/kernel/source/nrk_scheduler.c ****         // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
 408:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_POWER_DOWN
 409:..//src/kernel/source/nrk_scheduler.c ****         if(next_wake>NRK_SLEEP_WAKEUP_TIME)
 410:..//src/kernel/source/nrk_scheduler.c ****         {
 411:..//src/kernel/source/nrk_scheduler.c ****             if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
 412:..//src/kernel/source/nrk_scheduler.c ****             {
 413:..//src/kernel/source/nrk_scheduler.c ****                 if(next_wake-NRK_SLEEP_WAKEUP_TIME<NRK_SLEEP_WAKEUP_TIME)
 414:..//src/kernel/source/nrk_scheduler.c ****                 {
 415:..//src/kernel/source/nrk_scheduler.c ****                     next_wake=NRK_SLEEP_WAKEUP_TIME-1;
 416:..//src/kernel/source/nrk_scheduler.c ****                 }
 417:..//src/kernel/source/nrk_scheduler.c ****                 else
 418:..//src/kernel/source/nrk_scheduler.c ****                 {
 419:..//src/kernel/source/nrk_scheduler.c ****                     next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
 420:..//src/kernel/source/nrk_scheduler.c ****                 }
 421:..//src/kernel/source/nrk_scheduler.c ****             }
 422:..//src/kernel/source/nrk_scheduler.c ****             else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
 423:..//src/kernel/source/nrk_scheduler.c ****             {
 424:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME;
 425:..//src/kernel/source/nrk_scheduler.c ****             }
 426:..//src/kernel/source/nrk_scheduler.c ****             else
 427:..//src/kernel/source/nrk_scheduler.c ****             {
 428:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
 429:..//src/kernel/source/nrk_scheduler.c ****             }
 430:..//src/kernel/source/nrk_scheduler.c ****         }
 431:..//src/kernel/source/nrk_scheduler.c **** #endif
 432:..//src/kernel/source/nrk_scheduler.c ****     }
 433:..//src/kernel/source/nrk_scheduler.c **** 
 434:..//src/kernel/source/nrk_scheduler.c ****     /*
 435:..//src/kernel/source/nrk_scheduler.c ****     // Some code to catch the case when the scheduler wakes up
 436:..//src/kernel/source/nrk_scheduler.c ****     // from deep sleep and has to execute again before NRK_SLEEP_WAKEUP_TIME-1
 437:..//src/kernel/source/nrk_scheduler.c ****     if(_nrk_cpu_state==2 && next_wake<NRK_SLEEP_WAKEUP_TIME-1)
 438:..//src/kernel/source/nrk_scheduler.c ****     {
 439:..//src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();
 440:..//src/kernel/source/nrk_scheduler.c ****     while(1)
 441:..//src/kernel/source/nrk_scheduler.c ****     {
 442:..//src/kernel/source/nrk_scheduler.c ****     nrk_spin_wait_us(60000);
 443:..//src/kernel/source/nrk_scheduler.c ****     nrk_led_toggle(RED_LED);
 444:..//src/kernel/source/nrk_scheduler.c ****     nrk_spin_wait_us(60000);
 445:..//src/kernel/source/nrk_scheduler.c ****     nrk_led_toggle(GREEN_LED);
 446:..//src/kernel/source/nrk_scheduler.c ****     printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
 447:..//src/kernel/source/nrk_scheduler.c ****     }
 448:..//src/kernel/source/nrk_scheduler.c ****     }*/
 449:..//src/kernel/source/nrk_scheduler.c **** 
 450:..//src/kernel/source/nrk_scheduler.c **** 
 451:..//src/kernel/source/nrk_scheduler.c ****     //  If we disable power down, we still need to wakeup before the overflow
 452:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_NO_POWER_DOWN
 453:..//src/kernel/source/nrk_scheduler.c ****     if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 1365               	.LM136:
 1366 0768 0B3F      		cpi r16,251
 1367 076a 1105      		cpc r17,__zero_reg__
 1368 076c 00F0      		brlo .L45
 1369 076e 0AEF      		ldi r16,lo8(250)
 1370 0770 10E0      		ldi r17,hi8(250)
 1371               	.L45:
 454:..//src/kernel/source/nrk_scheduler.c **** #endif
 455:..//src/kernel/source/nrk_scheduler.c ****     //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
 456:..//src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 1373               	.LM137:
 1374 0772 8093 0000 		sts nrk_cur_task_prio,r24
 457:..//src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_TCB  = nrk_high_ready_TCB;
 1376               	.LM138:
 1377 0776 F093 0000 		sts nrk_cur_task_TCB+1,r31
 1378 077a E093 0000 		sts nrk_cur_task_TCB,r30
 458:..//src/kernel/source/nrk_scheduler.c **** 
 459:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 460:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_high_ready_TCB==NULL)
 461:..//src/kernel/source/nrk_scheduler.c ****     {
 462:..//src/kernel/source/nrk_scheduler.c ****         nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
 463:..//src/kernel/source/nrk_scheduler.c ****     }
 464:..//src/kernel/source/nrk_scheduler.c **** #endif
 465:..//src/kernel/source/nrk_scheduler.c ****     //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());
 466:..//src/kernel/source/nrk_scheduler.c **** 
 467:..//src/kernel/source/nrk_scheduler.c ****     _nrk_prev_timer_val=next_wake;
 1380               	.LM139:
 1381 077e 0093 0000 		sts _nrk_prev_timer_val,r16
 468:..//src/kernel/source/nrk_scheduler.c **** 
 469:..//src/kernel/source/nrk_scheduler.c **** 
 470:..//src/kernel/source/nrk_scheduler.c ****     if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
 1383               	.LM140:
 1384 0782 0E94 0000 		call _nrk_os_timer_get
 1385 0786 282F      		mov r18,r24
 1386 0788 30E0      		ldi r19,lo8(0)
 1387 078a 2F5F      		subi r18,lo8(-(1))
 1388 078c 3F4F      		sbci r19,hi8(-(1))
 1389 078e 2017      		cp r18,r16
 1390 0790 3107      		cpc r19,r17
 1391 0792 00F0      		brlo .L46
 471:..//src/kernel/source/nrk_scheduler.c ****     {
 472:..//src/kernel/source/nrk_scheduler.c ****         // FIXME: Terrible Terrible...
 473:..//src/kernel/source/nrk_scheduler.c ****         // Need to find out why this is happening...
 474:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 475:..//src/kernel/source/nrk_scheduler.c ****         // Ignore if you are the idle task coming from deep sleep
 476:..//src/kernel/source/nrk_scheduler.c ****         if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
 477:..//src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
 478:..//src/kernel/source/nrk_scheduler.c **** #endif
 479:..//src/kernel/source/nrk_scheduler.c ****         // This is bad news, but keeps things running
 480:..//src/kernel/source/nrk_scheduler.c ****         // +2 just in case we are on the edge of the last tick
 481:..//src/kernel/source/nrk_scheduler.c ****         next_wake=_nrk_os_timer_get()+2;
 1393               	.LM141:
 1394 0794 0E94 0000 		call _nrk_os_timer_get
 1395 0798 082F      		mov r16,r24
 1396 079a 10E0      		ldi r17,lo8(0)
 1397 079c 0E5F      		subi r16,lo8(-(2))
 1398 079e 1F4F      		sbci r17,hi8(-(2))
 482:..//src/kernel/source/nrk_scheduler.c ****         _nrk_prev_timer_val=next_wake;
 1400               	.LM142:
 1401 07a0 0093 0000 		sts _nrk_prev_timer_val,r16
 1402               	.L46:
 483:..//src/kernel/source/nrk_scheduler.c ****     }
 484:..//src/kernel/source/nrk_scheduler.c **** 
 485:..//src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
 1404               	.LM143:
 1405 07a4 EE20      		tst r14
 1406 07a6 01F0      		breq .L47
 1408               	.LM144:
 1409 07a8 1092 0000 		sts _nrk_cpu_state,__zero_reg__
 1410               	.L47:
 486:..//src/kernel/source/nrk_scheduler.c **** 
 487:..//src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(next_wake);
 1412               	.LM145:
 1413 07ac 802F      		mov r24,r16
 1414 07ae 0E94 0000 		call _nrk_set_next_wakeup
 488:..//src/kernel/source/nrk_scheduler.c **** 
 489:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
 490:..//src/kernel/source/nrk_scheduler.c ****     // Bound Context Swap to 100us
 491:..//src/kernel/source/nrk_scheduler.c ****     nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
 1416               	.LM146:
 1417 07b2 C201      		movw r24,r4
 1418 07b4 6EEE      		ldi r22,lo8(750)
 1419 07b6 72E0      		ldi r23,hi8(750)
 1420 07b8 0E94 0000 		call nrk_high_speed_timer_wait
 492:..//src/kernel/source/nrk_scheduler.c **** #endif
 493:..//src/kernel/source/nrk_scheduler.c ****     nrk_stack_pointer_restore();
 1422               	.LM147:
 1423 07bc 0E94 0000 		call nrk_stack_pointer_restore
 494:..//src/kernel/source/nrk_scheduler.c ****     //nrk_int_enable();
 495:..//src/kernel/source/nrk_scheduler.c ****     nrk_start_high_ready_task();
 1425               	.LM148:
 1426 07c0 0E94 0000 		call nrk_start_high_ready_task
 1427               	/* epilogue start */
 496:..//src/kernel/source/nrk_scheduler.c **** 
 497:..//src/kernel/source/nrk_scheduler.c **** }
 1429               	.LM149:
 1430 07c4 0F90      		pop __tmp_reg__
 1431 07c6 CF91      		pop r28
 1432 07c8 DF91      		pop r29
 1433 07ca 1F91      		pop r17
 1434 07cc 0F91      		pop r16
 1435 07ce FF90      		pop r15
 1436 07d0 EF90      		pop r14
 1437 07d2 DF90      		pop r13
 1438 07d4 CF90      		pop r12
 1439 07d6 BF90      		pop r11
 1440 07d8 AF90      		pop r10
 1441 07da 9F90      		pop r9
 1442 07dc 8F90      		pop r8
 1443 07de 7F90      		pop r7
 1444 07e0 6F90      		pop r6
 1445 07e2 5F90      		pop r5
 1446 07e4 4F90      		pop r4
 1447 07e6 3F90      		pop r3
 1448 07e8 2F90      		pop r2
 1449 07ea 0895      		ret
 1450               	.L42:
  53:..//src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
 1452               	.LM150:
 1453 07ec 8901      		movw r16,r18
 1454 07ee 00C0      		rjmp .L45
 1465               	.Lscope1:
 1467               		.stabd	78,0,0
 1468               		.comm _nrk_signal_list,4,1
 1469               		.comm nrk_idle_task_stk,128,1
 1470               		.comm nrk_kernel_stk,128,1
 1471               		.comm nrk_kernel_stk_ptr,2,1
 1472               		.comm nrk_task_TCB,190,1
 1473               		.comm nrk_wakeup_signal,1,1
 1474               		.comm _nrk_readyQ,30,1
 1475               		.comm _free_node,2,1
 1476               		.comm _head_node,2,1
 1477               		.comm nrk_cur_task_prio,1,1
 1478               		.comm nrk_cur_task_TCB,2,1
 1479               		.comm nrk_high_ready_prio,1,1
 1480               		.comm nrk_high_ready_TCB,2,1
 1481               		.comm _nrk_resource_cnt,1,1
 1482               		.comm nrk_system_time,8,1
 1483               		.comm nrk_sem_list,15,1
 1484               		.comm systemceiling,1,1
 1485               		.comm error_task,1,1
 1486               		.comm error_num,1,1
 1487               		.comm _nrk_cpu_state,1,1
 1488               		.comm next_next_wakeup,2,1
 1489               		.comm _nrk_prev_timer_val,1,1
 1490               		.comm _nrk_time_trigger,1,1
 1491               		.comm app_timer0_callback,2,1
 1492               		.comm app_timer0_prescale,1,1
 1493               		.comm t,1,1
 1521               	.Letext0:
 1522               	.global __do_copy_data
 1523               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_scheduler.c
     /tmp/ccK0s6Uh.s:2      *ABS*:0000003f __SREG__
     /tmp/ccK0s6Uh.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccK0s6Uh.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccK0s6Uh.s:5      *ABS*:00000034 __CCP__
     /tmp/ccK0s6Uh.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccK0s6Uh.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccK0s6Uh.s:146    .text:00000000 _nrk_scheduler
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000008 nrk_system_time
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:000000be nrk_task_TCB
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000080 nrk_kernel_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:0000001e _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:0000000f nrk_sem_list
                            *COM*:00000001 systemceiling
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 t

UNDEFINED SYMBOLS
_nrk_precision_os_timer_reset
nrk_int_disable
_nrk_high_speed_timer_reset
_nrk_high_speed_timer_get
_nrk_set_next_wakeup
__mulsi3
__udivmodsi4
nrk_rem_from_readyQ
printf
nrk_kernel_error_add
__udivmodhi4
nrk_add_to_readyQ
nrk_get_high_ready_task_ID
_nrk_os_timer_get
nrk_high_speed_timer_wait
nrk_stack_pointer_restore
nrk_start_high_ready_task
__do_copy_data
__do_clear_bss
