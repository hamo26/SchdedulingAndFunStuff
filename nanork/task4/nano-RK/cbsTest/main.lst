   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 137               		.data
 138               	.LC0:
 139 0000 0A2D 2D2D 		.string	"\n------\nStart running task..%d\n"
 139      2D2D 2D0A 
 139      5374 6172 
 139      7420 7275 
 139      6E6E 696E 
 140               	.LC1:
 141 0020 4342 5320 		.string	"CBS budget is %d\n"
 141      6275 6467 
 141      6574 2069 
 141      7320 2564 
 141      0A00 
 142               	.LC2:
 143 0032 4275 7379 		.string	"Busying with task 2(CBS) %d out of 30000\n"
 143      696E 6720 
 143      7769 7468 
 143      2074 6173 
 143      6B20 3228 
 144               	.LC3:
 145 005c 4669 6E69 		.string	"Finishing the task %d\n------\n\n"
 145      7368 696E 
 145      6720 7468 
 145      6520 7461 
 145      736B 2025 
 146               		.text
 148               	.global	task_2_func
 150               	task_2_func:
 151               		.stabd	46,0,0
   1:main.c        **** #include <nrk.h>
   2:main.c        **** #include <include.h>
   3:main.c        **** #include <ulib.h>
   4:main.c        **** #include <stdio.h>
   5:main.c        **** #include <hal.h>
   6:main.c        **** #include <nrk_error.h>
   7:main.c        **** #include <nrk_timer.h>
   8:main.c        **** #include <nrk_stack_check.h>
   9:main.c        **** 
  10:main.c        **** /*
  11:main.c        ****    To stay inline (no pun intended) with the nano-rk direction of using guards for 
  12:main.c        ****    optimization and potential performance, we use macros rather than methods.
  13:main.c        ****    We could have created a method, but the call may be expensive and impede the performance of the 
  14:main.c        ****  */
  15:main.c        **** #define TASK(n, taskPeriod, taskExecution)                              \
  16:main.c        ****     void task_##n##_func()                                              \
  17:main.c        **** {                                                                       \
  18:main.c        ****     int task_ID =  nrk_cur_task_TCB->task_ID;				\
  19:main.c        ****     int k=0;								\
  20:main.c        ****     while (1)                                                           \
  21:main.c        ****     {									\
  22:main.c        **** 	printf("\n------\nStart running task..%d\n", n);            \
  23:main.c        **** 	if(n==2){							\
  24:main.c        **** 	    for(long i=0;i<=30000;i++){				\
  25:main.c        **** 		if(i%10000==0){					\
  26:main.c        **** 		printf("CBS budget is %d\n", nrk_task_TCB[task_ID].cpu_remaining);\
  27:main.c        **** 		    for(int j=0;j<9999;j++){k++;}			\
  28:main.c        **** 		    printf("Busying with task 2(CBS) %d out of 30000\n",i);\
  29:main.c        **** 		}							\
  30:main.c        **** 	    }							\
  31:main.c        **** 	}else{for(int i=0;i<10;i++){k++;}printf("Some busy tasks\n");}	\
  32:main.c        **** 	printf("Finishing the task %d\n------\n\n",n);		\
  33:main.c        **** 	nrk_wait_until_next_period();				\
  34:main.c        ****     }                                                      \
  35:main.c        **** }                                                                   \
  36:main.c        **** NRK_STK stack_##n[NRK_APP_STACKSIZE];                                   \
  37:main.c        **** nrk_task_type task_##n;                                                 \
  38:main.c        **** uint32_t task_##n##_period = taskPeriod;                               	\
  39:main.c        **** uint32_t task_##n##_execution = taskExecution;                         	\
  40:main.c        **** 
  41:main.c        **** /*"Instantiate" the task*/
  42:main.c        **** #define INITIALIZE_TASK(n,task_type)                                    \
  43:main.c        **** task_##n.FirstActivation = TRUE;                                        \
  44:main.c        **** task_##n.prio = n;							\
  45:main.c        **** task_##n.Type = task_type;                                             \
  46:main.c        **** task_##n.SchType = PREEMPTIVE;                                          \
  47:main.c        **** task_##n.period.secs = task_##n##_period;                               \
  48:main.c        **** task_##n.period.nano_secs = 0;                                          \
  49:main.c        **** task_##n.cpu_reserve.secs = task_##n##_execution;                      \
  50:main.c        **** task_##n.cpu_reserve.nano_secs = 0;                                     \
  51:main.c        **** task_##n.offset.secs = 0;                                               \
  52:main.c        **** task_##n.offset.nano_secs = 0;                                          \
  53:main.c        **** nrk_task_set_entry_function(&task_##n, task_##n##_func);            \
  54:main.c        **** nrk_task_set_stk(&task_##n, stack_##n, NRK_APP_STACKSIZE);              \
  55:main.c        **** nrk_activate_task(&task_##n)						
  56:main.c        **** 
  57:main.c        **** //"Instantiate" tasks.
  58:main.c        **** TASK(1, 6, 5);
  59:main.c        **** TASK(2, 7, 1);
 153               	.LM0:
 154               	.LFBB1:
 155 0000 2F92      		push r2
 156 0002 3F92      		push r3
 157 0004 4F92      		push r4
 158 0006 5F92      		push r5
 159 0008 6F92      		push r6
 160 000a 7F92      		push r7
 161 000c 8F92      		push r8
 162 000e 9F92      		push r9
 163 0010 AF92      		push r10
 164 0012 BF92      		push r11
 165 0014 CF92      		push r12
 166 0016 DF92      		push r13
 167 0018 EF92      		push r14
 168 001a FF92      		push r15
 169 001c 0F93      		push r16
 170 001e 1F93      		push r17
 171 0020 CF93      		push r28
 172 0022 DF93      		push r29
 173               	/* prologue: function */
 174               	/* frame size = 0 */
 175               	/* stack size = 18 */
 176               	.L__stack_usage = 18
 178               	.LM1:
 179 0024 E091 0000 		lds r30,nrk_cur_task_TCB
 180 0028 F091 0000 		lds r31,nrk_cur_task_TCB+1
 181 002c 8085      		ldd r24,Z+8
 182 002e 9927      		clr r25
 183 0030 87FD      		sbrc r24,7
 184 0032 9095      		com r25
 185 0034 70E0      		ldi r23,lo8(.LC0)
 186 0036 672E      		mov r6,r23
 187 0038 70E0      		ldi r23,hi8(.LC0)
 188 003a 772E      		mov r7,r23
 189 003c 62E0      		ldi r22,lo8(2)
 190 003e C62E      		mov r12,r22
 191 0040 D12C      		mov r13,__zero_reg__
 192               	.LBB2:
 193 0042 50E1      		ldi r21,lo8(10000)
 194 0044 852E      		mov r8,r21
 195 0046 57E2      		ldi r21,hi8(10000)
 196 0048 952E      		mov r9,r21
 197 004a A12C      		mov r10,__zero_reg__
 198 004c B12C      		mov r11,__zero_reg__
 199 004e 40E0      		ldi r20,lo8(.LC1)
 200 0050 442E      		mov r4,r20
 201 0052 40E0      		ldi r20,hi8(.LC1)
 202 0054 542E      		mov r5,r20
 203 0056 EC01      		movw r28,r24
 204 0058 CC0F      		lsl r28
 205 005a DD1F      		rol r29
 206 005c 25E0      		ldi r18,5
 207 005e 880F      	1:	lsl r24
 208 0060 991F      		rol r25
 209 0062 2A95      		dec r18
 210 0064 01F4      		brne 1b
 211 0066 C80F      		add r28,r24
 212 0068 D91F      		adc r29,r25
 213 006a C050      		subi r28,lo8(-(nrk_task_TCB+25))
 214 006c D040      		sbci r29,hi8(-(nrk_task_TCB+25))
 215 006e 80E0      		ldi r24,lo8(.LC2)
 216 0070 282E      		mov r2,r24
 217 0072 80E0      		ldi r24,hi8(.LC2)
 218 0074 382E      		mov r3,r24
 219               	.L4:
 220               	.LBE2:
 222               	.LM2:
 223 0076 00D0      		rcall .
 224 0078 00D0      		rcall .
 225 007a EDB7      		in r30,__SP_L__
 226 007c FEB7      		in r31,__SP_H__
 227 007e 7282      		std Z+2,r7
 228 0080 6182      		std Z+1,r6
 229 0082 D482      		std Z+4,r13
 230 0084 C382      		std Z+3,r12
 231 0086 0E94 0000 		call printf
 232 008a 0F90      		pop __tmp_reg__
 233 008c 0F90      		pop __tmp_reg__
 234 008e 0F90      		pop __tmp_reg__
 235 0090 0F90      		pop __tmp_reg__
 236 0092 EE24      		clr r14
 237 0094 FF24      		clr r15
 238 0096 8701      		movw r16,r14
 239               	.L3:
 240               	.LBB3:
 242               	.LM3:
 243 0098 C801      		movw r24,r16
 244 009a B701      		movw r22,r14
 245 009c A501      		movw r20,r10
 246 009e 9401      		movw r18,r8
 247 00a0 0E94 0000 		call __divmodsi4
 248 00a4 6115      		cp r22,__zero_reg__
 249 00a6 7105      		cpc r23,__zero_reg__
 250 00a8 8105      		cpc r24,__zero_reg__
 251 00aa 9105      		cpc r25,__zero_reg__
 252 00ac 01F4      		brne .L2
 254               	.LM4:
 255 00ae 00D0      		rcall .
 256 00b0 00D0      		rcall .
 257 00b2 EDB7      		in r30,__SP_L__
 258 00b4 FEB7      		in r31,__SP_H__
 259 00b6 5282      		std Z+2,r5
 260 00b8 4182      		std Z+1,r4
 261 00ba 8881      		ld r24,Y
 262 00bc 9981      		ldd r25,Y+1
 263 00be 9483      		std Z+4,r25
 264 00c0 8383      		std Z+3,r24
 265 00c2 0E94 0000 		call printf
 266 00c6 00D0      		rcall .
 267 00c8 EDB7      		in r30,__SP_L__
 268 00ca FEB7      		in r31,__SP_H__
 269 00cc 3282      		std Z+2,r3
 270 00ce 2182      		std Z+1,r2
 271 00d0 E382      		std Z+3,r14
 272 00d2 F482      		std Z+4,r15
 273 00d4 0583      		std Z+5,r16
 274 00d6 1683      		std Z+6,r17
 275 00d8 0E94 0000 		call printf
 276 00dc 8DB7      		in r24,__SP_L__
 277 00de 9EB7      		in r25,__SP_H__
 278 00e0 0696      		adiw r24,6
 279 00e2 0FB6      		in __tmp_reg__,__SREG__
 280 00e4 F894      		cli
 281 00e6 9EBF      		out __SP_H__,r25
 282 00e8 0FBE      		out __SREG__,__tmp_reg__
 283 00ea 8DBF      		out __SP_L__,r24
 284               	.L2:
 286               	.LM5:
 287 00ec 0894      		sec
 288 00ee E11C      		adc r14,__zero_reg__
 289 00f0 F11C      		adc r15,__zero_reg__
 290 00f2 011D      		adc r16,__zero_reg__
 291 00f4 111D      		adc r17,__zero_reg__
 292 00f6 91E3      		ldi r25,lo8(30001)
 293 00f8 E916      		cp r14,r25
 294 00fa 95E7      		ldi r25,hi8(30001)
 295 00fc F906      		cpc r15,r25
 296 00fe 90E0      		ldi r25,hlo8(30001)
 297 0100 0907      		cpc r16,r25
 298 0102 90E0      		ldi r25,hhi8(30001)
 299 0104 1907      		cpc r17,r25
 300 0106 01F4      		brne .L3
 301               	.LBE3:
 303               	.LM6:
 304 0108 00D0      		rcall .
 305 010a 00D0      		rcall .
 306 010c 80E0      		ldi r24,lo8(.LC3)
 307 010e 90E0      		ldi r25,hi8(.LC3)
 308 0110 EDB7      		in r30,__SP_L__
 309 0112 FEB7      		in r31,__SP_H__
 310 0114 9283      		std Z+2,r25
 311 0116 8183      		std Z+1,r24
 312 0118 D482      		std Z+4,r13
 313 011a C382      		std Z+3,r12
 314 011c 0E94 0000 		call printf
 315 0120 0F90      		pop __tmp_reg__
 316 0122 0F90      		pop __tmp_reg__
 317 0124 0F90      		pop __tmp_reg__
 318 0126 0F90      		pop __tmp_reg__
 319 0128 0E94 0000 		call nrk_wait_until_next_period
 320 012c 00C0      		rjmp .L4
 331               	.Lscope1:
 333               		.stabd	78,0,0
 334               		.data
 335               	.LC4:
 336 007b 536F 6D65 		.string	"Some busy tasks"
 336      2062 7573 
 336      7920 7461 
 336      736B 7300 
 337               		.text
 339               	.global	task_1_func
 341               	task_1_func:
 342               		.stabd	46,0,0
  58:main.c        **** TASK(1, 6, 5);
 344               	.LM7:
 345               	.LFBB2:
 346 012e EF92      		push r14
 347 0130 FF92      		push r15
 348 0132 0F93      		push r16
 349 0134 1F93      		push r17
 350 0136 CF93      		push r28
 351 0138 DF93      		push r29
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	/* stack size = 6 */
 355               	.L__stack_usage = 6
  58:main.c        **** TASK(1, 6, 5);
 357               	.LM8:
 358 013a E0E0      		ldi r30,lo8(.LC0)
 359 013c EE2E      		mov r14,r30
 360 013e E0E0      		ldi r30,hi8(.LC0)
 361 0140 FE2E      		mov r15,r30
 362 0142 C1E0      		ldi r28,lo8(1)
 363 0144 D0E0      		ldi r29,hi8(1)
 364 0146 00E0      		ldi r16,lo8(.LC3)
 365 0148 10E0      		ldi r17,hi8(.LC3)
 366               	.L7:
  58:main.c        **** TASK(1, 6, 5);
 368               	.LM9:
 369 014a 00D0      		rcall .
 370 014c 00D0      		rcall .
 371 014e EDB7      		in r30,__SP_L__
 372 0150 FEB7      		in r31,__SP_H__
 373 0152 F282      		std Z+2,r15
 374 0154 E182      		std Z+1,r14
 375 0156 D483      		std Z+4,r29
 376 0158 C383      		std Z+3,r28
 377 015a 0E94 0000 		call printf
 378 015e 0F90      		pop __tmp_reg__
 379 0160 0F90      		pop __tmp_reg__
 380 0162 0F90      		pop __tmp_reg__
 381 0164 0F90      		pop __tmp_reg__
 382 0166 80E0      		ldi r24,lo8(.LC4)
 383 0168 90E0      		ldi r25,hi8(.LC4)
 384 016a 0E94 0000 		call puts
 385 016e 00D0      		rcall .
 386 0170 00D0      		rcall .
 387 0172 EDB7      		in r30,__SP_L__
 388 0174 FEB7      		in r31,__SP_H__
 389 0176 1283      		std Z+2,r17
 390 0178 0183      		std Z+1,r16
 391 017a D483      		std Z+4,r29
 392 017c C383      		std Z+3,r28
 393 017e 0E94 0000 		call printf
 394 0182 0F90      		pop __tmp_reg__
 395 0184 0F90      		pop __tmp_reg__
 396 0186 0F90      		pop __tmp_reg__
 397 0188 0F90      		pop __tmp_reg__
 398 018a 0E94 0000 		call nrk_wait_until_next_period
 399 018e 00C0      		rjmp .L7
 401               	.Lscope2:
 403               		.stabd	78,0,0
 405               	.global	main
 407               	main:
 408               		.stabd	46,0,0
  60:main.c        **** //TASK(3, 7, 1);
  61:main.c        **** 
  62:main.c        **** int main ()
  63:main.c        **** {
 410               	.LM10:
 411               	.LFBB3:
 412 0190 1F93      		push r17
 413 0192 CF93      		push r28
 414 0194 DF93      		push r29
 415               	/* prologue: function */
 416               	/* frame size = 0 */
 417               	/* stack size = 3 */
 418               	.L__stack_usage = 3
  64:main.c        ****     nrk_setup_ports();
 420               	.LM11:
 421 0196 0E94 0000 		call nrk_setup_ports
  65:main.c        ****     nrk_setup_uart(UART_BAUDRATE_115K2);
 423               	.LM12:
 424 019a 87E0      		ldi r24,lo8(7)
 425 019c 90E0      		ldi r25,hi8(7)
 426 019e 0E94 0000 		call nrk_setup_uart
  66:main.c        **** 
  67:main.c        ****     nrk_init();
 428               	.LM13:
 429 01a2 0E94 0000 		call nrk_init
  68:main.c        **** 
  69:main.c        ****     nrk_time_set(0,0);
 431               	.LM14:
 432 01a6 60E0      		ldi r22,lo8(0)
 433 01a8 70E0      		ldi r23,hi8(0)
 434 01aa CB01      		movw r24,r22
 435 01ac 20E0      		ldi r18,lo8(0)
 436 01ae 30E0      		ldi r19,hi8(0)
 437 01b0 A901      		movw r20,r18
 438 01b2 0E94 0000 		call nrk_time_set
  70:main.c        **** 
  71:main.c        ****     //Initialize tasks 
  72:main.c        ****     //Higher value higher priority`
  73:main.c        ****     INITIALIZE_TASK(1, BASIC_TASK);
 440               	.LM15:
 441 01b6 11E0      		ldi r17,lo8(1)
 442 01b8 1093 0000 		sts task_1+7,r17
 443 01bc 1093 0000 		sts task_1+8,r17
 444 01c0 1093 0000 		sts task_1+9,r17
 445 01c4 1093 0000 		sts task_1+10,r17
 446 01c8 8091 0000 		lds r24,task_1_period
 447 01cc 9091 0000 		lds r25,task_1_period+1
 448 01d0 A091 0000 		lds r26,task_1_period+2
 449 01d4 B091 0000 		lds r27,task_1_period+3
 450 01d8 8093 0000 		sts task_1+11,r24
 451 01dc 9093 0000 		sts task_1+11+1,r25
 452 01e0 A093 0000 		sts task_1+11+2,r26
 453 01e4 B093 0000 		sts task_1+11+3,r27
 454 01e8 1092 0000 		sts task_1+15,__zero_reg__
 455 01ec 1092 0000 		sts task_1+15+1,__zero_reg__
 456 01f0 1092 0000 		sts task_1+15+2,__zero_reg__
 457 01f4 1092 0000 		sts task_1+15+3,__zero_reg__
 458 01f8 8091 0000 		lds r24,task_1_execution
 459 01fc 9091 0000 		lds r25,task_1_execution+1
 460 0200 A091 0000 		lds r26,task_1_execution+2
 461 0204 B091 0000 		lds r27,task_1_execution+3
 462 0208 8093 0000 		sts task_1+19,r24
 463 020c 9093 0000 		sts task_1+19+1,r25
 464 0210 A093 0000 		sts task_1+19+2,r26
 465 0214 B093 0000 		sts task_1+19+3,r27
 466 0218 1092 0000 		sts task_1+23,__zero_reg__
 467 021c 1092 0000 		sts task_1+23+1,__zero_reg__
 468 0220 1092 0000 		sts task_1+23+2,__zero_reg__
 469 0224 1092 0000 		sts task_1+23+3,__zero_reg__
 470 0228 1092 0000 		sts task_1+27,__zero_reg__
 471 022c 1092 0000 		sts task_1+27+1,__zero_reg__
 472 0230 1092 0000 		sts task_1+27+2,__zero_reg__
 473 0234 1092 0000 		sts task_1+27+3,__zero_reg__
 474 0238 1092 0000 		sts task_1+31,__zero_reg__
 475 023c 1092 0000 		sts task_1+31+1,__zero_reg__
 476 0240 1092 0000 		sts task_1+31+2,__zero_reg__
 477 0244 1092 0000 		sts task_1+31+3,__zero_reg__
 478 0248 C0E0      		ldi r28,lo8(task_1)
 479 024a D0E0      		ldi r29,hi8(task_1)
 480 024c CE01      		movw r24,r28
 481 024e 60E0      		ldi r22,lo8(gs(task_1_func))
 482 0250 70E0      		ldi r23,hi8(gs(task_1_func))
 483 0252 0E94 0000 		call nrk_task_set_entry_function
 484 0256 CE01      		movw r24,r28
 485 0258 60E0      		ldi r22,lo8(stack_1)
 486 025a 70E0      		ldi r23,hi8(stack_1)
 487 025c 40E8      		ldi r20,lo8(128)
 488 025e 50E0      		ldi r21,hi8(128)
 489 0260 0E94 0000 		call nrk_task_set_stk
 490 0264 CE01      		movw r24,r28
 491 0266 0E94 0000 		call nrk_activate_task
  74:main.c        ****     INITIALIZE_TASK(2, CBS_TASK);
 493               	.LM16:
 494 026a 1093 0000 		sts task_2+7,r17
 495 026e 82E0      		ldi r24,lo8(2)
 496 0270 8093 0000 		sts task_2+8,r24
 497 0274 83E0      		ldi r24,lo8(3)
 498 0276 8093 0000 		sts task_2+9,r24
 499 027a 1093 0000 		sts task_2+10,r17
 500 027e 8091 0000 		lds r24,task_2_period
 501 0282 9091 0000 		lds r25,task_2_period+1
 502 0286 A091 0000 		lds r26,task_2_period+2
 503 028a B091 0000 		lds r27,task_2_period+3
 504 028e 8093 0000 		sts task_2+11,r24
 505 0292 9093 0000 		sts task_2+11+1,r25
 506 0296 A093 0000 		sts task_2+11+2,r26
 507 029a B093 0000 		sts task_2+11+3,r27
 508 029e 1092 0000 		sts task_2+15,__zero_reg__
 509 02a2 1092 0000 		sts task_2+15+1,__zero_reg__
 510 02a6 1092 0000 		sts task_2+15+2,__zero_reg__
 511 02aa 1092 0000 		sts task_2+15+3,__zero_reg__
 512 02ae 8091 0000 		lds r24,task_2_execution
 513 02b2 9091 0000 		lds r25,task_2_execution+1
 514 02b6 A091 0000 		lds r26,task_2_execution+2
 515 02ba B091 0000 		lds r27,task_2_execution+3
 516 02be 8093 0000 		sts task_2+19,r24
 517 02c2 9093 0000 		sts task_2+19+1,r25
 518 02c6 A093 0000 		sts task_2+19+2,r26
 519 02ca B093 0000 		sts task_2+19+3,r27
 520 02ce 1092 0000 		sts task_2+23,__zero_reg__
 521 02d2 1092 0000 		sts task_2+23+1,__zero_reg__
 522 02d6 1092 0000 		sts task_2+23+2,__zero_reg__
 523 02da 1092 0000 		sts task_2+23+3,__zero_reg__
 524 02de 1092 0000 		sts task_2+27,__zero_reg__
 525 02e2 1092 0000 		sts task_2+27+1,__zero_reg__
 526 02e6 1092 0000 		sts task_2+27+2,__zero_reg__
 527 02ea 1092 0000 		sts task_2+27+3,__zero_reg__
 528 02ee 1092 0000 		sts task_2+31,__zero_reg__
 529 02f2 1092 0000 		sts task_2+31+1,__zero_reg__
 530 02f6 1092 0000 		sts task_2+31+2,__zero_reg__
 531 02fa 1092 0000 		sts task_2+31+3,__zero_reg__
 532 02fe C0E0      		ldi r28,lo8(task_2)
 533 0300 D0E0      		ldi r29,hi8(task_2)
 534 0302 CE01      		movw r24,r28
 535 0304 60E0      		ldi r22,lo8(gs(task_2_func))
 536 0306 70E0      		ldi r23,hi8(gs(task_2_func))
 537 0308 0E94 0000 		call nrk_task_set_entry_function
 538 030c CE01      		movw r24,r28
 539 030e 60E0      		ldi r22,lo8(stack_2)
 540 0310 70E0      		ldi r23,hi8(stack_2)
 541 0312 40E8      		ldi r20,lo8(128)
 542 0314 50E0      		ldi r21,hi8(128)
 543 0316 0E94 0000 		call nrk_task_set_stk
 544 031a CE01      		movw r24,r28
 545 031c 0E94 0000 		call nrk_activate_task
  75:main.c        ****    // INITIALIZE_TASK(3, BASIC_TASK);
  76:main.c        **** 
  77:main.c        ****     nrk_start();
 547               	.LM17:
 548 0320 0E94 0000 		call nrk_start
  78:main.c        **** 
  79:main.c        ****     return 0;
  80:main.c        **** }
 550               	.LM18:
 551 0324 80E0      		ldi r24,lo8(0)
 552 0326 90E0      		ldi r25,hi8(0)
 553               	/* epilogue start */
 554 0328 DF91      		pop r29
 555 032a CF91      		pop r28
 556 032c 1F91      		pop r17
 557 032e 0895      		ret
 559               	.Lscope3:
 561               		.stabd	78,0,0
 562               	.global	task_1_period
 563               		.data
 566               	task_1_period:
 567 008b 06        		.byte	6
 568 008c 00        		.byte	0
 569 008d 00        		.byte	0
 570 008e 00        		.byte	0
 571               	.global	task_1_execution
 574               	task_1_execution:
 575 008f 05        		.byte	5
 576 0090 00        		.byte	0
 577 0091 00        		.byte	0
 578 0092 00        		.byte	0
 579               	.global	task_2_period
 582               	task_2_period:
 583 0093 07        		.byte	7
 584 0094 00        		.byte	0
 585 0095 00        		.byte	0
 586 0096 00        		.byte	0
 587               	.global	task_2_execution
 590               	task_2_execution:
 591 0097 01        		.byte	1
 592 0098 00        		.byte	0
 593 0099 00        		.byte	0
 594 009a 00        		.byte	0
 595               		.comm _nrk_signal_list,4,1
 596               		.comm nrk_idle_task_stk,128,1
 597               		.comm nrk_kernel_stk,128,1
 598               		.comm nrk_kernel_stk_ptr,2,1
 599               		.comm error_task,1,1
 600               		.comm error_num,1,1
 601               		.comm _nrk_prev_timer_val,1,1
 602               		.comm _nrk_time_trigger,1,1
 603               		.comm app_timer0_callback,2,1
 604               		.comm app_timer0_prescale,1,1
 605               		.comm stack_1,128,1
 606               		.comm task_1,35,1
 607               		.comm stack_2,128,1
 608               		.comm task_2,35,1
 627               		.text
 629               	.Letext0:
 630               	.global __do_copy_data
 631               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cczyUPi4.s:2      *ABS*:0000003f __SREG__
     /tmp/cczyUPi4.s:3      *ABS*:0000003e __SP_H__
     /tmp/cczyUPi4.s:4      *ABS*:0000003d __SP_L__
     /tmp/cczyUPi4.s:5      *ABS*:00000034 __CCP__
     /tmp/cczyUPi4.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cczyUPi4.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cczyUPi4.s:150    .text:00000000 task_2_func
     /tmp/cczyUPi4.s:341    .text:0000012e task_1_func
     /tmp/cczyUPi4.s:407    .text:00000190 main
                            *COM*:00000023 task_1
     /tmp/cczyUPi4.s:566    .data:0000008b task_1_period
     /tmp/cczyUPi4.s:574    .data:0000008f task_1_execution
                            *COM*:00000080 stack_1
                            *COM*:00000023 task_2
     /tmp/cczyUPi4.s:582    .data:00000093 task_2_period
     /tmp/cczyUPi4.s:590    .data:00000097 task_2_execution
                            *COM*:00000080 stack_2
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000080 nrk_kernel_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale

UNDEFINED SYMBOLS
nrk_cur_task_TCB
nrk_task_TCB
printf
__divmodsi4
nrk_wait_until_next_period
puts
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
nrk_start
__do_copy_data
__do_clear_bss
