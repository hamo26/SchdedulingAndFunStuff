   1               		.file	"nrk_scheduler.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 137               		.data
 138               	.LC0:
 139 0000 4342 5320 		.string	"CBS goes exhausted "
 139      676F 6573 
 139      2065 7868 
 139      6175 7374 
 139      6564 2000 
 140               	.LC1:
 141 0014 5265 706C 		.string	"Replenish CBS of Task %d\n"
 141      656E 6973 
 141      6820 4342 
 141      5320 6F66 
 141      2054 6173 
 142               	.LC2:
 143 002e 5461 736B 		.string	"Task %d: Replenish CBS <-------- \n"
 143      2025 643A 
 143      2052 6570 
 143      6C65 6E69 
 143      7368 2043 
 144               		.text
 146               	.global	_nrk_scheduler
 148               	_nrk_scheduler:
 149               		.stabd	46,0,0
   1:..//src/kernel/source/nrk_scheduler.c **** /******************************************************************************
   2:..//src/kernel/source/nrk_scheduler.c ****  *  Nano-RK, a real-time operating system for sensor networks.
   3:..//src/kernel/source/nrk_scheduler.c ****  *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:..//src/kernel/source/nrk_scheduler.c ****  *  All rights reserved.
   5:..//src/kernel/source/nrk_scheduler.c ****  *
   6:..//src/kernel/source/nrk_scheduler.c ****  *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:..//src/kernel/source/nrk_scheduler.c ****  *  Licensing Model. If you are unsure which license to use please refer to:
   8:..//src/kernel/source/nrk_scheduler.c ****  *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:..//src/kernel/source/nrk_scheduler.c ****  *
  10:..//src/kernel/source/nrk_scheduler.c ****  *  This program is free software: you can redistribute it and/or modify
  11:..//src/kernel/source/nrk_scheduler.c ****  *  it under the terms of the GNU General Public License as published by
  12:..//src/kernel/source/nrk_scheduler.c ****  *  the Free Software Foundation, version 2.0 of the License.
  13:..//src/kernel/source/nrk_scheduler.c ****  *
  14:..//src/kernel/source/nrk_scheduler.c ****  *  This program is distributed in the hope that it will be useful,
  15:..//src/kernel/source/nrk_scheduler.c ****  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:..//src/kernel/source/nrk_scheduler.c ****  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:..//src/kernel/source/nrk_scheduler.c ****  *  GNU General Public License for more details.
  18:..//src/kernel/source/nrk_scheduler.c ****  *
  19:..//src/kernel/source/nrk_scheduler.c ****  *  You should have received a copy of the GNU General Public License
  20:..//src/kernel/source/nrk_scheduler.c ****  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:..//src/kernel/source/nrk_scheduler.c ****  *
  22:..//src/kernel/source/nrk_scheduler.c ****  *  Contributing Authors (specific to this file):
  23:..//src/kernel/source/nrk_scheduler.c ****  *  Anthony Rowe
  24:..//src/kernel/source/nrk_scheduler.c ****  *  Zane Starr
  25:..//src/kernel/source/nrk_scheduler.c ****  *  Anand Eswaren
  26:..//src/kernel/source/nrk_scheduler.c ****  *******************************************************************************/
  27:..//src/kernel/source/nrk_scheduler.c **** 
  28:..//src/kernel/source/nrk_scheduler.c **** #include <nrk.h>
  29:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_task.h>
  30:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_defs.h>
  31:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_error.h>
  32:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_events.h>
  33:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_scheduler.h>
  34:..//src/kernel/source/nrk_scheduler.c **** #include <include.h>
  35:..//src/kernel/source/nrk_scheduler.c **** #include <ulib.h>
  36:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_timer.h>
  37:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_time.h>
  38:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_cfg.h>
  39:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_cpu.h>
  40:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_watchdog.h>
  41:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_platform_time.h>
  42:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_stats.h>
  43:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_sw_wdt.h>
  44:..//src/kernel/source/nrk_scheduler.c **** 
  45:..//src/kernel/source/nrk_scheduler.c **** 
  46:..//src/kernel/source/nrk_scheduler.c **** // This define was moved into nrk_platform_time.h since it needs to be different based on the clk s
  47:..//src/kernel/source/nrk_scheduler.c **** // 750 measure to 100uS
  48:..//src/kernel/source/nrk_scheduler.c **** // 800 * .125 = 100us
  49:..//src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    750
  50:..//src/kernel/source/nrk_scheduler.c **** // For rfa1:
  51:..//src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    1500 
  52:..//src/kernel/source/nrk_scheduler.c **** 
  53:..//src/kernel/source/nrk_scheduler.c **** uint8_t t;
  54:..//src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
  55:..//src/kernel/source/nrk_scheduler.c **** {
 151               	.LM0:
 152               	.LFBB1:
 153 0000 2F92      		push r2
 154 0002 3F92      		push r3
 155 0004 4F92      		push r4
 156 0006 5F92      		push r5
 157 0008 6F92      		push r6
 158 000a 7F92      		push r7
 159 000c 8F92      		push r8
 160 000e 9F92      		push r9
 161 0010 AF92      		push r10
 162 0012 BF92      		push r11
 163 0014 CF92      		push r12
 164 0016 DF92      		push r13
 165 0018 EF92      		push r14
 166 001a FF92      		push r15
 167 001c 0F93      		push r16
 168 001e 1F93      		push r17
 169 0020 DF93      		push r29
 170 0022 CF93      		push r28
 171 0024 0F92      		push __tmp_reg__
 172 0026 CDB7      		in r28,__SP_L__
 173 0028 DEB7      		in r29,__SP_H__
 174               	/* prologue: function */
 175               	/* frame size = 1 */
 176               	/* stack size = 19 */
 177               	.L__stack_usage = 19
  56:..//src/kernel/source/nrk_scheduler.c ****     int8_t task_ID;
  57:..//src/kernel/source/nrk_scheduler.c ****     uint16_t next_wake;
  58:..//src/kernel/source/nrk_scheduler.c ****     uint16_t start_time_stamp;
  59:..//src/kernel/source/nrk_scheduler.c **** 
  60:..//src/kernel/source/nrk_scheduler.c ****     _nrk_precision_os_timer_reset();
 179               	.LM1:
 180 002a 0E94 0000 		call _nrk_precision_os_timer_reset
  61:..//src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();   // this should be removed...  Not needed
 182               	.LM2:
 183 002e 0E94 0000 		call nrk_int_disable
  62:..//src/kernel/source/nrk_scheduler.c **** 
  63:..//src/kernel/source/nrk_scheduler.c **** 
  64:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
  65:..//src/kernel/source/nrk_scheduler.c ****     _nrk_high_speed_timer_reset();
 185               	.LM3:
 186 0032 0E94 0000 		call _nrk_high_speed_timer_reset
  66:..//src/kernel/source/nrk_scheduler.c ****     start_time_stamp=_nrk_high_speed_timer_get();
 188               	.LM4:
 189 0036 0E94 0000 		call _nrk_high_speed_timer_get
 190 003a 2C01      		movw r4,r24
  67:..//src/kernel/source/nrk_scheduler.c **** #endif
  68:..//src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
 192               	.LM5:
 193 003c 8AEF      		ldi r24,lo8(-6)
 194 003e 0E94 0000 		call _nrk_set_next_wakeup
  69:..//src/kernel/source/nrk_scheduler.c ****     // Set to huge number which will later get set to min
  70:..//src/kernel/source/nrk_scheduler.c **** 
  71:..//src/kernel/source/nrk_scheduler.c ****     next_wake=60000;
  72:..//src/kernel/source/nrk_scheduler.c ****     // Safety zone starts here....
  73:..//src/kernel/source/nrk_scheduler.c **** 
  74:..//src/kernel/source/nrk_scheduler.c **** 
  75:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_WATCHDOG
  76:..//src/kernel/source/nrk_scheduler.c ****     nrk_watchdog_reset();
  77:..//src/kernel/source/nrk_scheduler.c **** #endif
  78:..//src/kernel/source/nrk_scheduler.c **** 
  79:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_SW_WDT
  80:..//src/kernel/source/nrk_scheduler.c ****     _nrk_sw_wdt_check();
  81:..//src/kernel/source/nrk_scheduler.c **** #endif
  82:..//src/kernel/source/nrk_scheduler.c **** 
  83:..//src/kernel/source/nrk_scheduler.c **** 
  84:..//src/kernel/source/nrk_scheduler.c **** 
  85:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
  86:..//src/kernel/source/nrk_scheduler.c ****     //nrk_kprintf( PSTR("*"));
  87:..//src/kernel/source/nrk_scheduler.c ****     //Check if OS tick was delayed...
  88:..//src/kernel/source/nrk_scheduler.c ****     // if(_nrk_cpu_state!=CPU_SLEEP && _nrk_os_timer_get()!=0) {
  89:..//src/kernel/source/nrk_scheduler.c ****     //		nrk_kprintf( PSTR("X" ));
  90:..//src/kernel/source/nrk_scheduler.c ****     //printf( "%u ",_nrk_os_timer_get());
  91:..//src/kernel/source/nrk_scheduler.c ****     //	}
  92:..//src/kernel/source/nrk_scheduler.c ****     //printf( "%u\r\n",_nrk_prev_timer_val);
  93:..//src/kernel/source/nrk_scheduler.c ****     if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
  94:..//src/kernel/source/nrk_scheduler.c ****         nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
  95:..//src/kernel/source/nrk_scheduler.c **** #endif
  96:..//src/kernel/source/nrk_scheduler.c ****     //while(_nrk_time_trigger>0)
  97:..//src/kernel/source/nrk_scheduler.c ****     //{
  98:..//src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
 196               	.LM6:
 197 0042 6091 0000 		lds r22,_nrk_prev_timer_val
 198 0046 70E0      		ldi r23,lo8(0)
 199 0048 80E0      		ldi r24,lo8(0)
 200 004a 90E0      		ldi r25,hi8(0)
 201 004c 23EB      		ldi r18,lo8(976563)
 202 004e 36EE      		ldi r19,hi8(976563)
 203 0050 4EE0      		ldi r20,hlo8(976563)
 204 0052 50E0      		ldi r21,hhi8(976563)
 205 0054 0E94 0000 		call __mulsi3
 206 0058 7B01      		movw r14,r22
 207 005a 8C01      		movw r16,r24
 208 005c 8091 0000 		lds r24,nrk_system_time+4
 209 0060 9091 0000 		lds r25,nrk_system_time+4+1
 210 0064 A091 0000 		lds r26,nrk_system_time+4+2
 211 0068 B091 0000 		lds r27,nrk_system_time+4+3
 212 006c E80E      		add r14,r24
 213 006e F91E      		adc r15,r25
 214 0070 0A1F      		adc r16,r26
 215 0072 1B1F      		adc r17,r27
  99:..//src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 217               	.LM7:
 218 0074 C801      		movw r24,r16
 219 0076 B701      		movw r22,r14
 220 0078 0E94 0000 		call __udivmodsi4
 221 007c E61A      		sub r14,r22
 222 007e F70A      		sbc r15,r23
 223 0080 080B      		sbc r16,r24
 224 0082 190B      		sbc r17,r25
 225 0084 8091 0000 		lds r24,nrk_system_time
 226 0088 9091 0000 		lds r25,nrk_system_time+1
 227 008c A091 0000 		lds r26,nrk_system_time+2
 228 0090 B091 0000 		lds r27,nrk_system_time+3
 100:..//src/kernel/source/nrk_scheduler.c **** 
 101:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 102:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
 103:..//src/kernel/source/nrk_scheduler.c ****     {
 104:..//src/kernel/source/nrk_scheduler.c ****         if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
 105:..//src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 106:..//src/kernel/source/nrk_scheduler.c ****         // Add 0 time since the preempted call before set the correct value
 107:..//src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
 108:..//src/kernel/source/nrk_scheduler.c ****     }
 109:..//src/kernel/source/nrk_scheduler.c ****     else
 110:..//src/kernel/source/nrk_scheduler.c ****     {
 111:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->suspend_flag==1)
 112:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 113:..//src/kernel/source/nrk_scheduler.c ****         else
 114:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 115:..//src/kernel/source/nrk_scheduler.c ****     }
 116:..//src/kernel/source/nrk_scheduler.c **** #endif
 117:..//src/kernel/source/nrk_scheduler.c **** 
 118:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 119:..//src/kernel/source/nrk_scheduler.c ****     {
 120:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 121:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.secs++;
 122:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 230               	.LM8:
 231 0094 E3EB      		ldi r30,lo8(976563)
 232 0096 AE2E      		mov r10,r30
 233 0098 E6EE      		ldi r30,hi8(976563)
 234 009a BE2E      		mov r11,r30
 235 009c EEE0      		ldi r30,hlo8(976563)
 236 009e CE2E      		mov r12,r30
 237 00a0 D12C      		mov r13,__zero_reg__
 118:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 239               	.LM9:
 240 00a2 00C0      		rjmp .L2
 241               	.L3:
 120:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 243               	.LM10:
 244 00a4 80E0      		ldi r24,lo8(-1000000000)
 245 00a6 96E3      		ldi r25,hi8(-1000000000)
 246 00a8 A5E6      		ldi r26,hlo8(-1000000000)
 247 00aa B4EC      		ldi r27,hhi8(-1000000000)
 248 00ac E80E      		add r14,r24
 249 00ae F91E      		adc r15,r25
 250 00b0 0A1F      		adc r16,r26
 251 00b2 1B1F      		adc r17,r27
 253               	.LM11:
 254 00b4 C801      		movw r24,r16
 255 00b6 B701      		movw r22,r14
 256 00b8 A601      		movw r20,r12
 257 00ba 9501      		movw r18,r10
 258 00bc 0E94 0000 		call __udivmodsi4
 259 00c0 E61A      		sub r14,r22
 260 00c2 F70A      		sbc r15,r23
 261 00c4 080B      		sbc r16,r24
 262 00c6 190B      		sbc r17,r25
 263 00c8 D401      		movw r26,r8
 264 00ca C301      		movw r24,r6
 265               	.L2:
 267               	.LM12:
 268 00cc 3C01      		movw r6,r24
 269 00ce 4D01      		movw r8,r26
 270 00d0 0894      		sec
 271 00d2 611C      		adc r6,__zero_reg__
 272 00d4 711C      		adc r7,__zero_reg__
 273 00d6 811C      		adc r8,__zero_reg__
 274 00d8 911C      		adc r9,__zero_reg__
 118:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 276               	.LM13:
 277 00da E0E0      		ldi r30,lo8(1000000000)
 278 00dc EE16      		cp r14,r30
 279 00de EAEC      		ldi r30,hi8(1000000000)
 280 00e0 FE06      		cpc r15,r30
 281 00e2 EAE9      		ldi r30,hlo8(1000000000)
 282 00e4 0E07      		cpc r16,r30
 283 00e6 EBE3      		ldi r30,hhi8(1000000000)
 284 00e8 1E07      		cpc r17,r30
 285 00ea 00F4      		brsh .L3
 118:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 287               	.LM14:
 288 00ec 8093 0000 		sts nrk_system_time,r24
 289 00f0 9093 0000 		sts nrk_system_time+1,r25
 290 00f4 A093 0000 		sts nrk_system_time+2,r26
 291 00f8 B093 0000 		sts nrk_system_time+3,r27
 292 00fc E092 0000 		sts nrk_system_time+4,r14
 293 0100 F092 0000 		sts nrk_system_time+4+1,r15
 294 0104 0093 0000 		sts nrk_system_time+4+2,r16
 295 0108 1093 0000 		sts nrk_system_time+4+3,r17
 123:..//src/kernel/source/nrk_scheduler.c ****     }
 124:..//src/kernel/source/nrk_scheduler.c ****     //  _nrk_time_trigger--;
 125:..//src/kernel/source/nrk_scheduler.c ****     //}
 126:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
 297               	.LM15:
 298 010c E091 0000 		lds r30,nrk_cur_task_TCB
 299 0110 F091 0000 		lds r31,nrk_cur_task_TCB+1
 300 0114 8581      		ldd r24,Z+5
 301 0116 8823      		tst r24
 302 0118 01F0      		breq .L4
 304               	.LM16:
 305 011a 8185      		ldd r24,Z+9
 306 011c 8430      		cpi r24,lo8(4)
 307 011e 01F0      		breq .L4
 127:..//src/kernel/source/nrk_scheduler.c ****     {
 128:..//src/kernel/source/nrk_scheduler.c ****         //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 129:..//src/kernel/source/nrk_scheduler.c **** 
 130:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
 309               	.LM17:
 310 0120 8781      		ldd r24,Z+7
 311 0122 8230      		cpi r24,lo8(2)
 312 0124 01F0      		breq .L37
 313               	.L5:
 131:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 132:..//src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
 315               	.LM18:
 316 0126 8823      		tst r24
 317 0128 01F0      		breq .L7
 319               	.LM19:
 320 012a 8681      		ldd r24,Z+6
 321 012c 8823      		tst r24
 322 012e 01F4      		brne .L8
 323               	.L37:
 133:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 325               	.LM20:
 326 0130 85E0      		ldi r24,lo8(5)
 327 0132 00C0      		rjmp .L38
 328               	.L8:
 134:..//src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
 135:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 330               	.LM21:
 331 0134 83E0      		ldi r24,lo8(3)
 332               	.L38:
 333 0136 8187      		std Z+9,r24
 334 0138 00C0      		rjmp .L6
 335               	.L7:
 136:..//src/kernel/source/nrk_scheduler.c ****         else
 137:..//src/kernel/source/nrk_scheduler.c ****         {
 138:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 337               	.LM22:
 338 013a 83E0      		ldi r24,lo8(3)
 339 013c 8187      		std Z+9,r24
 139:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->event_suspend=0;
 341               	.LM23:
 342 013e 1782      		std Z+7,__zero_reg__
 140:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->nw_flag=0;
 344               	.LM24:
 345 0140 1682      		std Z+6,__zero_reg__
 346               	.L6:
 141:..//src/kernel/source/nrk_scheduler.c ****         }
 142:..//src/kernel/source/nrk_scheduler.c ****         nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
 348               	.LM25:
 349 0142 8085      		ldd r24,Z+8
 350 0144 0E94 0000 		call nrk_rem_from_readyQ
 351               	.L4:
 143:..//src/kernel/source/nrk_scheduler.c ****     }
 144:..//src/kernel/source/nrk_scheduler.c ****     //nrk_print_readyQ();
 145:..//src/kernel/source/nrk_scheduler.c ****      
 146:..//src/kernel/source/nrk_scheduler.c ****     // Update cpu used value for ended task
 147:..//src/kernel/source/nrk_scheduler.c ****     // If the task has used its reserve, suspend task
 148:..//src/kernel/source/nrk_scheduler.c ****     // Don't disable IdleTask which is 0
 149:..//src/kernel/source/nrk_scheduler.c ****     // Don't decrease cpu_remaining if reserve is 0 and hence disabled
 150:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_t
 353               	.LM26:
 354 0148 E091 0000 		lds r30,nrk_cur_task_TCB
 355 014c F091 0000 		lds r31,nrk_cur_task_TCB+1
 356 0150 858D      		ldd r24,Z+29
 357 0152 968D      		ldd r25,Z+30
 358 0154 0097      		sbiw r24,0
 359 0156 01F4      		brne .+2
 360 0158 00C0      		rjmp .L9
 362               	.LM27:
 363 015a 6085      		ldd r22,Z+8
 364 015c 6623      		tst r22
 365 015e 01F4      		brne .+2
 366 0160 00C0      		rjmp .L9
 367 0162 8185      		ldd r24,Z+9
 368 0164 8430      		cpi r24,lo8(4)
 369 0166 01F4      		brne .+2
 370 0168 00C0      		rjmp .L9
 151:..//src/kernel/source/nrk_scheduler.c ****     {
 152:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
 372               	.LM28:
 373 016a 218D      		ldd r18,Z+25
 374 016c 328D      		ldd r19,Z+26
 375 016e 8091 0000 		lds r24,_nrk_prev_timer_val
 376 0172 90E0      		ldi r25,lo8(0)
 377 0174 2817      		cp r18,r24
 378 0176 3907      		cpc r19,r25
 379 0178 00F4      		brsh .L10
 153:..//src/kernel/source/nrk_scheduler.c ****         {
 154:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 155:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 156:..//src/kernel/source/nrk_scheduler.c **** #endif
 157:..//src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
 381               	.LM29:
 382 017a 82E0      		ldi r24,lo8(2)
 383 017c 0E94 0000 		call nrk_kernel_error_add
 158:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_cur_task_TCB->task_type == CBS_TASK && 
 385               	.LM30:
 386 0180 E091 0000 		lds r30,nrk_cur_task_TCB
 387 0184 F091 0000 		lds r31,nrk_cur_task_TCB+1
 388 0188 81A1      		ldd r24,Z+33
 389 018a 8330      		cpi r24,lo8(3)
 390 018c 01F4      		brne .L11
 392               	.LM31:
 393 018e 8185      		ldd r24,Z+9
 394 0190 8330      		cpi r24,lo8(3)
 395 0192 01F0      		breq .L11
 159:..//src/kernel/source/nrk_scheduler.c **** 		    nrk_cur_task_TCB->task_state != SUSPENDED
 160:..//src/kernel/source/nrk_scheduler.c **** 		    ){
 161:..//src/kernel/source/nrk_scheduler.c ****                 printf("CBS goes exhausted \n");
 397               	.LM32:
 398 0194 80E0      		ldi r24,lo8(.LC0)
 399 0196 90E0      		ldi r25,hi8(.LC0)
 400 0198 0E94 0000 		call puts
 162:..//src/kernel/source/nrk_scheduler.c ****                 // budget goes out
 163:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->cpu_remaining = nrk_cur_task_TCB->cpu_reserve;
 402               	.LM33:
 403 019c E091 0000 		lds r30,nrk_cur_task_TCB
 404 01a0 F091 0000 		lds r31,nrk_cur_task_TCB+1
 405 01a4 858D      		ldd r24,Z+29
 406 01a6 968D      		ldd r25,Z+30
 407 01a8 928F      		std Z+26,r25
 408 01aa 818F      		std Z+25,r24
 164:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->next_period = nrk_cur_task_TCB->period;
 410               	.LM34:
 411 01ac 838D      		ldd r24,Z+27
 412 01ae 948D      		ldd r25,Z+28
 413 01b0 908F      		std Z+24,r25
 414 01b2 878B      		std Z+23,r24
 165:..//src/kernel/source/nrk_scheduler.c ****                 printf("Replenish CBS of Task %d\n",nrk_cur_task_TCB->task_ID);
 416               	.LM35:
 417 01b4 00D0      		rcall .
 418 01b6 00D0      		rcall .
 419 01b8 80E0      		ldi r24,lo8(.LC1)
 420 01ba 90E0      		ldi r25,hi8(.LC1)
 421 01bc ADB7      		in r26,__SP_L__
 422 01be BEB7      		in r27,__SP_H__
 423 01c0 1296      		adiw r26,1+1
 424 01c2 9C93      		st X,r25
 425 01c4 8E93      		st -X,r24
 426 01c6 1197      		sbiw r26,1
 427 01c8 8085      		ldd r24,Z+8
 428 01ca 9927      		clr r25
 429 01cc 87FD      		sbrc r24,7
 430 01ce 9095      		com r25
 431 01d0 1496      		adiw r26,3+1
 432 01d2 9C93      		st X,r25
 433 01d4 8E93      		st -X,r24
 434 01d6 1397      		sbiw r26,3
 435 01d8 0E94 0000 		call printf
 436 01dc 0F90      		pop __tmp_reg__
 437 01de 0F90      		pop __tmp_reg__
 438 01e0 0F90      		pop __tmp_reg__
 439 01e2 0F90      		pop __tmp_reg__
 440 01e4 00C0      		rjmp .L12
 441               	.L11:
 166:..//src/kernel/source/nrk_scheduler.c ****             }else{
 167:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->cpu_remaining=0;
 443               	.LM36:
 444 01e6 128E      		std Z+26,__zero_reg__
 445 01e8 118E      		std Z+25,__zero_reg__
 446 01ea 00C0      		rjmp .L12
 447               	.L10:
 168:..//src/kernel/source/nrk_scheduler.c ****             }
 169:..//src/kernel/source/nrk_scheduler.c ****         }
 170:..//src/kernel/source/nrk_scheduler.c ****         else
 171:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
 449               	.LM37:
 450 01ec 281B      		sub r18,r24
 451 01ee 390B      		sbc r19,r25
 452 01f0 328F      		std Z+26,r19
 453 01f2 218F      		std Z+25,r18
 454               	.L12:
 172:..//src/kernel/source/nrk_scheduler.c **** 
 173:..//src/kernel/source/nrk_scheduler.c ****         task_ID= nrk_cur_task_TCB->task_ID;
 456               	.LM38:
 457 01f4 E091 0000 		lds r30,nrk_cur_task_TCB
 458 01f8 F091 0000 		lds r31,nrk_cur_task_TCB+1
 459 01fc 0085      		ldd r16,Z+8
 174:..//src/kernel/source/nrk_scheduler.c ****       //                  printf("cpu remaining of %d is %d \n",task_ID,nrk_task_TCB[task_ID].cpu_r
 175:..//src/kernel/source/nrk_scheduler.c **** 
 176:..//src/kernel/source/nrk_scheduler.c ****         if (nrk_cur_task_TCB->cpu_remaining ==0 )
 461               	.LM39:
 462 01fe 218D      		ldd r18,Z+25
 463 0200 328D      		ldd r19,Z+26
 464 0202 2115      		cp r18,__zero_reg__
 465 0204 3105      		cpc r19,__zero_reg__
 466 0206 01F4      		brne .L9
 177:..//src/kernel/source/nrk_scheduler.c ****         {
 178:..//src/kernel/source/nrk_scheduler.c ****             //printf("Task %d cpu remaining = 0\n", task_ID);
 179:..//src/kernel/source/nrk_scheduler.c ****             //printf("Task type is %d\n", nrk_cur_task_TCB->task_type);
 180:..//src/kernel/source/nrk_scheduler.c ****             // Here we dont need to suspend CBS
 181:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_cur_task_TCB->task_type == BASIC_TASK){
 468               	.LM40:
 469 0208 81A1      		ldd r24,Z+33
 470 020a 8130      		cpi r24,lo8(1)
 471 020c 01F4      		brne .L13
 182:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 183:..//src/kernel/source/nrk_scheduler.c ****                 _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 184:..//src/kernel/source/nrk_scheduler.c **** #endif
 185:..//src/kernel/source/nrk_scheduler.c ****                 nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
 473               	.LM41:
 474 020e 83E0      		ldi r24,lo8(3)
 475 0210 602F      		mov r22,r16
 476 0212 0E94 0000 		call nrk_kernel_error_add
 186:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->task_state = SUSPENDED;
 478               	.LM42:
 479 0216 E091 0000 		lds r30,nrk_cur_task_TCB
 480 021a F091 0000 		lds r31,nrk_cur_task_TCB+1
 481 021e 83E0      		ldi r24,lo8(3)
 482 0220 8187      		std Z+9,r24
 187:..//src/kernel/source/nrk_scheduler.c ****                 nrk_rem_from_readyQ(task_ID);
 484               	.LM43:
 485 0222 802F      		mov r24,r16
 486 0224 0E94 0000 		call nrk_rem_from_readyQ
 487 0228 00C0      		rjmp .L9
 488               	.L13:
 188:..//src/kernel/source/nrk_scheduler.c ****             }else if(nrk_cur_task_TCB->task_type == CBS_TASK
 490               	.LM44:
 491 022a 8330      		cpi r24,lo8(3)
 492 022c 01F4      		brne .L9
 189:..//src/kernel/source/nrk_scheduler.c **** 		    && nrk_cur_task_TCB->task_state != SUSPENDED
 494               	.LM45:
 495 022e 8185      		ldd r24,Z+9
 496 0230 8330      		cpi r24,lo8(3)
 497 0232 01F0      		breq .L9
 190:..//src/kernel/source/nrk_scheduler.c **** 		    ){
 191:..//src/kernel/source/nrk_scheduler.c ****                 // We need replenish the budget for CBS
 192:..//src/kernel/source/nrk_scheduler.c ****                 printf("Task %d: Replenish CBS <-------- \n", task_ID);
 499               	.LM46:
 500 0234 00D0      		rcall .
 501 0236 00D0      		rcall .
 502 0238 20E0      		ldi r18,lo8(.LC2)
 503 023a 30E0      		ldi r19,hi8(.LC2)
 504 023c EDB7      		in r30,__SP_L__
 505 023e FEB7      		in r31,__SP_H__
 506 0240 3283      		std Z+2,r19
 507 0242 2183      		std Z+1,r18
 508 0244 802F      		mov r24,r16
 509 0246 9927      		clr r25
 510 0248 87FD      		sbrc r24,7
 511 024a 9095      		com r25
 512 024c 9483      		std Z+4,r25
 513 024e 8383      		std Z+3,r24
 514 0250 0E94 0000 		call printf
 193:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->cpu_remaining = nrk_cur_task_TCB->cpu_reserve;
 516               	.LM47:
 517 0254 E091 0000 		lds r30,nrk_cur_task_TCB
 518 0258 F091 0000 		lds r31,nrk_cur_task_TCB+1
 519 025c 858D      		ldd r24,Z+29
 520 025e 968D      		ldd r25,Z+30
 521 0260 928F      		std Z+26,r25
 522 0262 818F      		std Z+25,r24
 194:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->next_period = nrk_cur_task_TCB->period;
 524               	.LM48:
 525 0264 838D      		ldd r24,Z+27
 526 0266 948D      		ldd r25,Z+28
 527 0268 908F      		std Z+24,r25
 528 026a 878B      		std Z+23,r24
 529 026c 0F90      		pop __tmp_reg__
 530 026e 0F90      		pop __tmp_reg__
 531 0270 0F90      		pop __tmp_reg__
 532 0272 0F90      		pop __tmp_reg__
 533               	.L9:
 535               	.LM49:
 536 0274 70E0      		ldi r23,lo8(nrk_task_TCB+5)
 537 0276 272E      		mov r2,r23
 538 0278 70E0      		ldi r23,hi8(nrk_task_TCB+5)
 539 027a 372E      		mov r3,r23
 122:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 541               	.LM50:
 542 027c 00E6      		ldi r16,lo8(-5536)
 543 027e 1AEE      		ldi r17,hi8(-5536)
 544 0280 20E0      		ldi r18,lo8(0)
 195:..//src/kernel/source/nrk_scheduler.c ****                 //printf("Next period is from %d\n", nrk_cur_task_TCB->next_period);
 196:..//src/kernel/source/nrk_scheduler.c ****             }
 197:..//src/kernel/source/nrk_scheduler.c **** 
 198:..//src/kernel/source/nrk_scheduler.c ****         }
 199:..//src/kernel/source/nrk_scheduler.c ****     }
 200:..//src/kernel/source/nrk_scheduler.c **** 
 201:..//src/kernel/source/nrk_scheduler.c ****     // Check I/O nrk_queues to add tasks with remaining cpu back...
 202:..//src/kernel/source/nrk_scheduler.c **** 
 203:..//src/kernel/source/nrk_scheduler.c ****     // Add eligable tasks back to the ready Queue
 204:..//src/kernel/source/nrk_scheduler.c ****     // At the same time find the next earliest wakeup
 205:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 206:..//src/kernel/source/nrk_scheduler.c ****     {
 207:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 208:..//src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 209:..//src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 210:..//src/kernel/source/nrk_scheduler.c ****         {
 211:..//src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 212:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 213:..//src/kernel/source/nrk_scheduler.c ****             else
 214:..//src/kernel/source/nrk_scheduler.c ****             {
 215:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 216:..//src/kernel/source/nrk_scheduler.c ****             }
 217:..//src/kernel/source/nrk_scheduler.c ****             // Do next period book keeping.
 218:..//src/kernel/source/nrk_scheduler.c ****             // next_period needs to be set such that the period is kept consistent even if other
 219:..//src/kernel/source/nrk_scheduler.c ****             // wait until functions are called.
 220:..//src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 221:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 222:..//src/kernel/source/nrk_scheduler.c ****             else
 223:..//src/kernel/source/nrk_scheduler.c ****             {
 224:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 225:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 226:..//src/kernel/source/nrk_scheduler.c ****                 else
 227:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 228:..//src/kernel/source/nrk_scheduler.c ****             }
 229:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 230:..//src/kernel/source/nrk_scheduler.c **** 
 231:..//src/kernel/source/nrk_scheduler.c ****         }
 232:..//src/kernel/source/nrk_scheduler.c **** 
 233:..//src/kernel/source/nrk_scheduler.c **** 
 234:..//src/kernel/source/nrk_scheduler.c ****         // Look for Next Task that Might Wakeup to interrupt current task
 235:..//src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 236:..//src/kernel/source/nrk_scheduler.c ****         {
 237:..//src/kernel/source/nrk_scheduler.c ****             // printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
 238:..//src/kernel/source/nrk_scheduler.c ****             // If a task needs to become READY, make it ready
 239:..//src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 240:..//src/kernel/source/nrk_scheduler.c ****             {
 241:..//src/kernel/source/nrk_scheduler.c ****                 // printf( "Adding back %d\n",task_ID );
 242:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 243:..//src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 244:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 245:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 246:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 247:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 248:..//src/kernel/source/nrk_scheduler.c ****                 {
 249:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 250:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 251:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 252:..//src/kernel/source/nrk_scheduler.c ****                     // If there is no period set, don't wakeup periodically
 253:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 254:..//src/kernel/source/nrk_scheduler.c ****                     nrk_add_to_readyQ(task_ID);
 255:..//src/kernel/source/nrk_scheduler.c ****                 }
 256:..//src/kernel/source/nrk_scheduler.c ****                 else
 257:..//src/kernel/source/nrk_scheduler.c ****                 {
 258:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 259:..//src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 260:..//src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].num_periods--;
 261:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 262:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 263:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 264:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].num_periods=1;
 546               	.LM51:
 547 0282 61E0      		ldi r22,lo8(1)
 548 0284 662E      		mov r6,r22
 549 0286 712C      		mov r7,__zero_reg__
 263:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 551               	.LM52:
 552 0288 5AEF      		ldi r21,lo8(250)
 553 028a E52E      		mov r14,r21
 554 028c F12C      		mov r15,__zero_reg__
 250:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 556               	.LM53:
 557 028e 42E0      		ldi r20,lo8(2)
 558 0290 942E      		mov r9,r20
 242:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 560               	.LM54:
 561 0292 31E0      		ldi r19,lo8(1)
 562 0294 A32E      		mov r10,r19
 563 0296 B12C      		mov r11,__zero_reg__
 564 0298 C12C      		mov r12,__zero_reg__
 565 029a D12C      		mov r13,__zero_reg__
 566               	.L26:
 207:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 568               	.LM55:
 569 029c D101      		movw r26,r2
 570 029e 1396      		adiw r26,3
 571 02a0 8C91      		ld r24,X
 572 02a2 1397      		sbiw r26,3
 573 02a4 8F3F      		cpi r24,lo8(-1)
 574 02a6 01F4      		brne .+2
 575 02a8 00C0      		rjmp .L14
 208:..//src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 577               	.LM56:
 578 02aa 1C92      		st X,__zero_reg__
 209:..//src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 580               	.LM57:
 581 02ac 8823      		tst r24
 582 02ae 01F4      		brne .+2
 583 02b0 00C0      		rjmp .L15
 209:..//src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 585               	.LM58:
 586 02b2 1496      		adiw r26,4
 587 02b4 8C91      		ld r24,X
 588 02b6 1497      		sbiw r26,4
 589 02b8 8430      		cpi r24,lo8(4)
 590 02ba 01F0      		breq .L15
 211:..//src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 592               	.LM59:
 593 02bc 5096      		adiw r26,16
 594 02be 4D91      		ld r20,X+
 595 02c0 5C91      		ld r21,X
 596 02c2 5197      		sbiw r26,16+1
 597 02c4 8091 0000 		lds r24,_nrk_prev_timer_val
 598 02c8 90E0      		ldi r25,lo8(0)
 599 02ca 4817      		cp r20,r24
 600 02cc 5907      		cpc r21,r25
 601 02ce 00F0      		brlo .L16
 212:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 603               	.LM60:
 604 02d0 481B      		sub r20,r24
 605 02d2 590B      		sbc r21,r25
 606 02d4 5196      		adiw r26,16+1
 607 02d6 5C93      		st X,r21
 608 02d8 4E93      		st -X,r20
 609 02da 5097      		sbiw r26,16
 610 02dc 00C0      		rjmp .L17
 611               	.L16:
 215:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 613               	.LM61:
 614 02de F101      		movw r30,r2
 615 02e0 118A      		std Z+17,__zero_reg__
 616 02e2 108A      		std Z+16,__zero_reg__
 617               	.L17:
 220:..//src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 619               	.LM62:
 620 02e4 D101      		movw r26,r2
 621 02e6 5296      		adiw r26,18
 622 02e8 4D91      		ld r20,X+
 623 02ea 5C91      		ld r21,X
 624 02ec 5397      		sbiw r26,18+1
 625 02ee 4817      		cp r20,r24
 626 02f0 5907      		cpc r21,r25
 627 02f2 00F0      		brlo .L18
 221:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 629               	.LM63:
 630 02f4 481B      		sub r20,r24
 631 02f6 590B      		sbc r21,r25
 632 02f8 5396      		adiw r26,18+1
 633 02fa 5C93      		st X,r21
 634 02fc 4E93      		st -X,r20
 635 02fe 5297      		sbiw r26,18
 636 0300 00C0      		rjmp .L19
 637               	.L18:
 224:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 639               	.LM64:
 640 0302 F101      		movw r30,r2
 641 0304 6689      		ldd r22,Z+22
 642 0306 7789      		ldd r23,Z+23
 643 0308 8617      		cp r24,r22
 644 030a 9707      		cpc r25,r23
 645 030c 00F4      		brsh .L20
 225:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 647               	.LM65:
 648 030e 681B      		sub r22,r24
 649 0310 790B      		sbc r23,r25
 650 0312 738B      		std Z+19,r23
 651 0314 628B      		std Z+18,r22
 652 0316 00C0      		rjmp .L19
 653               	.L20:
 227:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 655               	.LM66:
 656 0318 0E94 0000 		call __udivmodhi4
 657 031c D101      		movw r26,r2
 658 031e 5396      		adiw r26,18+1
 659 0320 9C93      		st X,r25
 660 0322 8E93      		st -X,r24
 661 0324 5297      		sbiw r26,18
 662               	.L19:
 229:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 664               	.LM67:
 665 0326 F101      		movw r30,r2
 666 0328 8289      		ldd r24,Z+18
 667 032a 9389      		ldd r25,Z+19
 668 032c 0097      		sbiw r24,0
 669 032e 01F4      		brne .L15
 229:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 671               	.LM68:
 672 0330 8689      		ldd r24,Z+22
 673 0332 9789      		ldd r25,Z+23
 674 0334 938B      		std Z+19,r25
 675 0336 828B      		std Z+18,r24
 676               	.L15:
 235:..//src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 678               	.LM69:
 679 0338 D101      		movw r26,r2
 680 033a 1496      		adiw r26,4
 681 033c 8C91      		ld r24,X
 682 033e 1497      		sbiw r26,4
 683 0340 8330      		cpi r24,lo8(3)
 684 0342 01F0      		breq .+2
 685 0344 00C0      		rjmp .L14
 239:..//src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 687               	.LM70:
 688 0346 5096      		adiw r26,16
 689 0348 8D91      		ld r24,X+
 690 034a 9C91      		ld r25,X
 691 034c 5197      		sbiw r26,16+1
 692 034e 0097      		sbiw r24,0
 693 0350 01F0      		breq .+2
 694 0352 00C0      		rjmp .L21
 242:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 696               	.LM71:
 697 0354 1296      		adiw r26,2
 698 0356 8C91      		ld r24,X
 699 0358 1297      		sbiw r26,2
 700 035a 8823      		tst r24
 701 035c 01F0      		breq .L22
 242:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 703               	.LM72:
 704 035e 1196      		adiw r26,1
 705 0360 8C91      		ld r24,X
 706 0362 1197      		sbiw r26,1
 707 0364 8823      		tst r24
 708 0366 01F0      		breq .L22
 709 0368 D601      		movw r26,r12
 710 036a C501      		movw r24,r10
 711 036c 0090 0000 		lds r0,nrk_wakeup_signal
 712 0370 00C0      		rjmp 2f
 713 0372 880F      	1:	lsl r24
 714 0374 991F      		rol r25
 715 0376 AA1F      		rol r26
 716 0378 BB1F      		rol r27
 717 037a 0A94      	2:	dec r0
 718 037c 02F4      		brpl 1b
 719 037e F101      		movw r30,r2
 720 0380 8487      		std Z+12,r24
 721 0382 9587      		std Z+13,r25
 722 0384 A687      		std Z+14,r26
 723 0386 B787      		std Z+15,r27
 724               	.L22:
 244:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 726               	.LM73:
 727 0388 D101      		movw r26,r2
 728 038a 1296      		adiw r26,2
 729 038c 1C92      		st X,__zero_reg__
 730 038e 1297      		sbiw r26,2
 245:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 732               	.LM74:
 733 0390 1196      		adiw r26,1
 734 0392 1C92      		st X,__zero_reg__
 735 0394 1197      		sbiw r26,1
 246:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 737               	.LM75:
 738 0396 1C92      		st X,__zero_reg__
 247:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 740               	.LM76:
 741 0398 5A96      		adiw r26,26
 742 039a 4D91      		ld r20,X+
 743 039c 5C91      		ld r21,X
 744 039e 5B97      		sbiw r26,26+1
 745 03a0 5696      		adiw r26,22
 746 03a2 8D91      		ld r24,X+
 747 03a4 9C91      		ld r25,X
 748 03a6 5797      		sbiw r26,22+1
 749 03a8 5896      		adiw r26,24
 750 03aa 6D91      		ld r22,X+
 751 03ac 7C91      		ld r23,X
 752 03ae 5997      		sbiw r26,24+1
 753 03b0 4130      		cpi r20,1
 754 03b2 5105      		cpc r21,__zero_reg__
 755 03b4 01F4      		brne .L23
 249:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 757               	.LM77:
 758 03b6 5596      		adiw r26,20+1
 759 03b8 7C93      		st X,r23
 760 03ba 6E93      		st -X,r22
 761 03bc 5497      		sbiw r26,20
 250:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 763               	.LM78:
 764 03be 1496      		adiw r26,4
 765 03c0 9C92      		st X,r9
 766 03c2 1497      		sbiw r26,4
 251:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 768               	.LM79:
 769 03c4 5296      		adiw r26,18
 770 03c6 4D91      		ld r20,X+
 771 03c8 5C91      		ld r21,X
 772 03ca 5397      		sbiw r26,18+1
 773 03cc 5196      		adiw r26,16+1
 774 03ce 5C93      		st X,r21
 775 03d0 4E93      		st -X,r20
 776 03d2 5097      		sbiw r26,16
 253:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 778               	.LM80:
 779 03d4 0097      		sbiw r24,0
 780 03d6 01F4      		brne .L24
 253:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 782               	.LM81:
 783 03d8 5196      		adiw r26,16+1
 784 03da FC92      		st X,r15
 785 03dc EE92      		st -X,r14
 786 03de 5097      		sbiw r26,16
 787               	.L24:
 254:..//src/kernel/source/nrk_scheduler.c ****                     nrk_add_to_readyQ(task_ID);
 789               	.LM82:
 790 03e0 822F      		mov r24,r18
 791 03e2 2983      		std Y+1,r18
 792 03e4 0E94 0000 		call nrk_add_to_readyQ
 793 03e8 2981      		ldd r18,Y+1
 794 03ea 00C0      		rjmp .L21
 795               	.L23:
 258:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 797               	.LM83:
 798 03ec F101      		movw r30,r2
 799 03ee 758B      		std Z+21,r23
 800 03f0 648B      		std Z+20,r22
 261:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 802               	.LM84:
 803 03f2 BA01      		movw r22,r20
 804 03f4 6150      		subi r22,lo8(-(-1))
 805 03f6 7040      		sbci r23,hi8(-(-1))
 806 03f8 689F      		mul r22,r24
 807 03fa A001      		movw r20,r0
 808 03fc 699F      		mul r22,r25
 809 03fe 500D      		add r21,r0
 810 0400 789F      		mul r23,r24
 811 0402 500D      		add r21,r0
 812 0404 1124      		clr r1
 813 0406 518B      		std Z+17,r21
 814 0408 408B      		std Z+16,r20
 262:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 816               	.LM85:
 817 040a 538B      		std Z+19,r21
 818 040c 428B      		std Z+18,r20
 263:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 820               	.LM86:
 821 040e 0097      		sbiw r24,0
 822 0410 01F4      		brne .L25
 263:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 824               	.LM87:
 825 0412 F18A      		std Z+17,r15
 826 0414 E08A      		std Z+16,r14
 827               	.L25:
 829               	.LM88:
 830 0416 D101      		movw r26,r2
 831 0418 5B96      		adiw r26,26+1
 832 041a 7C92      		st X,r7
 833 041c 6E92      		st -X,r6
 834 041e 5A97      		sbiw r26,26
 835               	.L21:
 265:..//src/kernel/source/nrk_scheduler.c ****                     //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
 266:..//src/kernel/source/nrk_scheduler.c ****                     //			nrk_task_TCB[task_ID].num_periods=1;
 267:..//src/kernel/source/nrk_scheduler.c ****                 }
 268:..//src/kernel/source/nrk_scheduler.c ****             }
 269:..//src/kernel/source/nrk_scheduler.c **** 
 270:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
 837               	.LM89:
 838 0420 F101      		movw r30,r2
 839 0422 8089      		ldd r24,Z+16
 840 0424 9189      		ldd r25,Z+17
 841 0426 0097      		sbiw r24,0
 842 0428 01F0      		breq .L14
 844               	.LM90:
 845 042a 8017      		cp r24,r16
 846 042c 9107      		cpc r25,r17
 847 042e 00F4      		brsh .L14
 849               	.LM91:
 850 0430 8C01      		movw r16,r24
 851               	.L14:
 205:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 853               	.LM92:
 854 0432 2F5F      		subi r18,lo8(-(1))
 855 0434 82E2      		ldi r24,lo8(34)
 856 0436 90E0      		ldi r25,hi8(34)
 857 0438 280E      		add r2,r24
 858 043a 391E      		adc r3,r25
 859 043c 2530      		cpi r18,lo8(5)
 860 043e 01F0      		breq .+2
 861 0440 00C0      		rjmp .L26
 271:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup<next_wake )
 272:..//src/kernel/source/nrk_scheduler.c ****             {
 273:..//src/kernel/source/nrk_scheduler.c ****                 // Find closest next_wake task
 274:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].next_wakeup;
 275:..//src/kernel/source/nrk_scheduler.c ****             }
 276:..//src/kernel/source/nrk_scheduler.c **** 
 277:..//src/kernel/source/nrk_scheduler.c ****         }
 278:..//src/kernel/source/nrk_scheduler.c ****     }
 279:..//src/kernel/source/nrk_scheduler.c **** 
 280:..//src/kernel/source/nrk_scheduler.c **** 
 281:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 282:..//src/kernel/source/nrk_scheduler.c ****     _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
 283:..//src/kernel/source/nrk_scheduler.c **** #endif
 284:..//src/kernel/source/nrk_scheduler.c ****     task_ID = nrk_get_high_ready_task_ID();
 863               	.LM93:
 864 0442 0E94 0000 		call nrk_get_high_ready_task_ID
 865 0446 E82E      		mov r14,r24
 285:..//src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 867               	.LM94:
 868 0448 282F      		mov r18,r24
 869 044a 3327      		clr r19
 870 044c 27FD      		sbrc r18,7
 871 044e 3095      		com r19
 872 0450 F901      		movw r30,r18
 873 0452 EE0F      		lsl r30
 874 0454 FF1F      		rol r31
 875 0456 85E0      		ldi r24,5
 876 0458 220F      	1:	lsl r18
 877 045a 331F      		rol r19
 878 045c 8A95      		dec r24
 879 045e 01F4      		brne 1b
 880 0460 E20F      		add r30,r18
 881 0462 F31F      		adc r31,r19
 882 0464 E050      		subi r30,lo8(-(nrk_task_TCB))
 883 0466 F040      		sbci r31,hi8(-(nrk_task_TCB))
 884 0468 8285      		ldd r24,Z+10
 885 046a 8093 0000 		sts nrk_high_ready_prio,r24
 286:..//src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
 887               	.LM95:
 888 046e F093 0000 		sts nrk_high_ready_TCB+1,r31
 889 0472 E093 0000 		sts nrk_high_ready_TCB,r30
 287:..//src/kernel/source/nrk_scheduler.c **** 
 288:..//src/kernel/source/nrk_scheduler.c ****     // next_wake should hold next time when a suspended task might get run
 289:..//src/kernel/source/nrk_scheduler.c ****     // task_ID holds the highest priority READY task ID
 290:..//src/kernel/source/nrk_scheduler.c ****     // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time
 291:..//src/kernel/source/nrk_scheduler.c **** 
 292:..//src/kernel/source/nrk_scheduler.c ****     // Now we pick the next wakeup (either the end of the current task, or the possible resume
 293:..//src/kernel/source/nrk_scheduler.c ****     // of a suspended task)
 294:..//src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID)
 891               	.LM96:
 892 0476 EE20      		tst r14
 893 0478 01F0      		breq .L27
 295:..//src/kernel/source/nrk_scheduler.c ****     {
 296:..//src/kernel/source/nrk_scheduler.c ****         // You are a non-Idle Task
 297:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WA
 895               	.LM97:
 896 047a 258D      		ldd r18,Z+29
 897 047c 368D      		ldd r19,Z+30
 898 047e 2115      		cp r18,__zero_reg__
 899 0480 3105      		cpc r19,__zero_reg__
 900 0482 01F0      		breq .L28
 902               	.LM98:
 903 0484 218D      		ldd r18,Z+25
 904 0486 328D      		ldd r19,Z+26
 905 0488 2A3F      		cpi r18,250
 906 048a 3105      		cpc r19,__zero_reg__
 907 048c 00F4      		brsh .L28
 298:..//src/kernel/source/nrk_scheduler.c ****         {
 299:..//src/kernel/source/nrk_scheduler.c ****             if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
 909               	.LM99:
 910 048e 2017      		cp r18,r16
 911 0490 3107      		cpc r19,r17
 912 0492 00F4      		brsh .+2
 913 0494 00C0      		rjmp .L29
 914 0496 00C0      		rjmp .L32
 915               	.L28:
 916 0498 9801      		movw r18,r16
 917 049a 0B3F      		cpi r16,251
 918 049c 1105      		cpc r17,__zero_reg__
 919 049e 00F4      		brsh .+2
 920 04a0 00C0      		rjmp .L29
 921 04a2 2AEF      		ldi r18,lo8(250)
 922 04a4 30E0      		ldi r19,hi8(250)
 923 04a6 00C0      		rjmp .L29
 924               	.L27:
 300:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].cpu_remaining;
 301:..//src/kernel/source/nrk_scheduler.c ****         }
 302:..//src/kernel/source/nrk_scheduler.c ****         else
 303:..//src/kernel/source/nrk_scheduler.c ****         {
 304:..//src/kernel/source/nrk_scheduler.c ****             if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 305:..//src/kernel/source/nrk_scheduler.c ****         }
 306:..//src/kernel/source/nrk_scheduler.c ****     }
 307:..//src/kernel/source/nrk_scheduler.c ****     else
 308:..//src/kernel/source/nrk_scheduler.c ****     {
 309:..//src/kernel/source/nrk_scheduler.c ****         // This is the idle task
 310:..//src/kernel/source/nrk_scheduler.c ****         // Make sure you wake up from the idle task a little earlier
 311:..//src/kernel/source/nrk_scheduler.c ****         // if you would go into deep sleep...
 312:..//src/kernel/source/nrk_scheduler.c ****         // After waking from deep sleep, the next context swap must be at least
 313:..//src/kernel/source/nrk_scheduler.c ****         // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
 314:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_POWER_DOWN
 315:..//src/kernel/source/nrk_scheduler.c ****         if(next_wake>NRK_SLEEP_WAKEUP_TIME)
 316:..//src/kernel/source/nrk_scheduler.c ****         {
 317:..//src/kernel/source/nrk_scheduler.c ****             if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
 318:..//src/kernel/source/nrk_scheduler.c ****             {
 319:..//src/kernel/source/nrk_scheduler.c ****                 if(next_wake-NRK_SLEEP_WAKEUP_TIME<NRK_SLEEP_WAKEUP_TIME)
 320:..//src/kernel/source/nrk_scheduler.c ****                 {
 321:..//src/kernel/source/nrk_scheduler.c ****                     next_wake=NRK_SLEEP_WAKEUP_TIME-1;
 322:..//src/kernel/source/nrk_scheduler.c ****                 }
 323:..//src/kernel/source/nrk_scheduler.c ****                 else
 324:..//src/kernel/source/nrk_scheduler.c ****                 {
 325:..//src/kernel/source/nrk_scheduler.c ****                     next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
 326:..//src/kernel/source/nrk_scheduler.c ****                 }
 327:..//src/kernel/source/nrk_scheduler.c ****             }
 328:..//src/kernel/source/nrk_scheduler.c ****             else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
 329:..//src/kernel/source/nrk_scheduler.c ****             {
 330:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME;
 331:..//src/kernel/source/nrk_scheduler.c ****             }
 332:..//src/kernel/source/nrk_scheduler.c ****             else
 333:..//src/kernel/source/nrk_scheduler.c ****             {
 334:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
 335:..//src/kernel/source/nrk_scheduler.c ****             }
 336:..//src/kernel/source/nrk_scheduler.c ****         }
 337:..//src/kernel/source/nrk_scheduler.c **** #endif
 338:..//src/kernel/source/nrk_scheduler.c ****     }
 339:..//src/kernel/source/nrk_scheduler.c **** 
 340:..//src/kernel/source/nrk_scheduler.c ****     /*
 341:..//src/kernel/source/nrk_scheduler.c ****     // Some code to catch the case when the scheduler wakes up
 342:..//src/kernel/source/nrk_scheduler.c ****     // from deep sleep and has to execute again before NRK_SLEEP_WAKEUP_TIME-1
 343:..//src/kernel/source/nrk_scheduler.c ****     if(_nrk_cpu_state==2 && next_wake<NRK_SLEEP_WAKEUP_TIME-1)
 344:..//src/kernel/source/nrk_scheduler.c ****     {
 345:..//src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();
 346:..//src/kernel/source/nrk_scheduler.c ****     while(1)
 347:..//src/kernel/source/nrk_scheduler.c ****     {
 348:..//src/kernel/source/nrk_scheduler.c ****     nrk_spin_wait_us(60000);
 349:..//src/kernel/source/nrk_scheduler.c ****     nrk_led_toggle(RED_LED);
 350:..//src/kernel/source/nrk_scheduler.c ****     nrk_spin_wait_us(60000);
 351:..//src/kernel/source/nrk_scheduler.c ****     nrk_led_toggle(GREEN_LED);
 352:..//src/kernel/source/nrk_scheduler.c ****     printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
 353:..//src/kernel/source/nrk_scheduler.c ****     }
 354:..//src/kernel/source/nrk_scheduler.c ****     }*/
 355:..//src/kernel/source/nrk_scheduler.c **** 
 356:..//src/kernel/source/nrk_scheduler.c **** 
 357:..//src/kernel/source/nrk_scheduler.c ****     //  If we disable power down, we still need to wakeup before the overflow
 358:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_NO_POWER_DOWN
 359:..//src/kernel/source/nrk_scheduler.c ****     if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 926               	.LM100:
 927 04a8 0B3F      		cpi r16,251
 928 04aa 1105      		cpc r17,__zero_reg__
 929 04ac 00F0      		brlo .L32
 930 04ae 0AEF      		ldi r16,lo8(250)
 931 04b0 10E0      		ldi r17,hi8(250)
 932               	.L32:
 360:..//src/kernel/source/nrk_scheduler.c **** #endif
 361:..//src/kernel/source/nrk_scheduler.c ****     //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
 362:..//src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 934               	.LM101:
 935 04b2 8093 0000 		sts nrk_cur_task_prio,r24
 363:..//src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_TCB  = nrk_high_ready_TCB;
 937               	.LM102:
 938 04b6 F093 0000 		sts nrk_cur_task_TCB+1,r31
 939 04ba E093 0000 		sts nrk_cur_task_TCB,r30
 364:..//src/kernel/source/nrk_scheduler.c **** 
 365:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 366:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_high_ready_TCB==NULL)
 367:..//src/kernel/source/nrk_scheduler.c ****     {
 368:..//src/kernel/source/nrk_scheduler.c ****         nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
 369:..//src/kernel/source/nrk_scheduler.c ****     }
 370:..//src/kernel/source/nrk_scheduler.c **** #endif
 371:..//src/kernel/source/nrk_scheduler.c ****     //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());
 372:..//src/kernel/source/nrk_scheduler.c **** 
 373:..//src/kernel/source/nrk_scheduler.c ****     _nrk_prev_timer_val=next_wake;
 941               	.LM103:
 942 04be 0093 0000 		sts _nrk_prev_timer_val,r16
 374:..//src/kernel/source/nrk_scheduler.c **** 
 375:..//src/kernel/source/nrk_scheduler.c **** 
 376:..//src/kernel/source/nrk_scheduler.c ****     if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
 944               	.LM104:
 945 04c2 0E94 0000 		call _nrk_os_timer_get
 946 04c6 282F      		mov r18,r24
 947 04c8 30E0      		ldi r19,lo8(0)
 948 04ca 2F5F      		subi r18,lo8(-(1))
 949 04cc 3F4F      		sbci r19,hi8(-(1))
 950 04ce 2017      		cp r18,r16
 951 04d0 3107      		cpc r19,r17
 952 04d2 00F0      		brlo .L33
 377:..//src/kernel/source/nrk_scheduler.c ****     {
 378:..//src/kernel/source/nrk_scheduler.c ****         // FIXME: Terrible Terrible...
 379:..//src/kernel/source/nrk_scheduler.c ****         // Need to find out why this is happening...
 380:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 381:..//src/kernel/source/nrk_scheduler.c ****         // Ignore if you are the idle task coming from deep sleep
 382:..//src/kernel/source/nrk_scheduler.c ****         if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
 383:..//src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
 384:..//src/kernel/source/nrk_scheduler.c **** #endif
 385:..//src/kernel/source/nrk_scheduler.c ****         // This is bad news, but keeps things running
 386:..//src/kernel/source/nrk_scheduler.c ****         // +2 just in case we are on the edge of the last tick
 387:..//src/kernel/source/nrk_scheduler.c ****         next_wake=_nrk_os_timer_get()+2;
 954               	.LM105:
 955 04d4 0E94 0000 		call _nrk_os_timer_get
 956 04d8 082F      		mov r16,r24
 957 04da 10E0      		ldi r17,lo8(0)
 958 04dc 0E5F      		subi r16,lo8(-(2))
 959 04de 1F4F      		sbci r17,hi8(-(2))
 388:..//src/kernel/source/nrk_scheduler.c ****         _nrk_prev_timer_val=next_wake;
 961               	.LM106:
 962 04e0 0093 0000 		sts _nrk_prev_timer_val,r16
 963               	.L33:
 389:..//src/kernel/source/nrk_scheduler.c ****     }
 390:..//src/kernel/source/nrk_scheduler.c **** 
 391:..//src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
 965               	.LM107:
 966 04e4 EE20      		tst r14
 967 04e6 01F0      		breq .L34
 969               	.LM108:
 970 04e8 1092 0000 		sts _nrk_cpu_state,__zero_reg__
 971               	.L34:
 392:..//src/kernel/source/nrk_scheduler.c **** 
 393:..//src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(next_wake);
 973               	.LM109:
 974 04ec 802F      		mov r24,r16
 975 04ee 0E94 0000 		call _nrk_set_next_wakeup
 394:..//src/kernel/source/nrk_scheduler.c **** 
 395:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
 396:..//src/kernel/source/nrk_scheduler.c ****     // Bound Context Swap to 100us
 397:..//src/kernel/source/nrk_scheduler.c ****     nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
 977               	.LM110:
 978 04f2 C201      		movw r24,r4
 979 04f4 6EEE      		ldi r22,lo8(750)
 980 04f6 72E0      		ldi r23,hi8(750)
 981 04f8 0E94 0000 		call nrk_high_speed_timer_wait
 398:..//src/kernel/source/nrk_scheduler.c **** #endif
 399:..//src/kernel/source/nrk_scheduler.c ****     nrk_stack_pointer_restore();
 983               	.LM111:
 984 04fc 0E94 0000 		call nrk_stack_pointer_restore
 400:..//src/kernel/source/nrk_scheduler.c ****     //nrk_int_enable();
 401:..//src/kernel/source/nrk_scheduler.c ****     nrk_start_high_ready_task();
 986               	.LM112:
 987 0500 0E94 0000 		call nrk_start_high_ready_task
 988               	/* epilogue start */
 402:..//src/kernel/source/nrk_scheduler.c **** 
 403:..//src/kernel/source/nrk_scheduler.c **** }
 990               	.LM113:
 991 0504 0F90      		pop __tmp_reg__
 992 0506 CF91      		pop r28
 993 0508 DF91      		pop r29
 994 050a 1F91      		pop r17
 995 050c 0F91      		pop r16
 996 050e FF90      		pop r15
 997 0510 EF90      		pop r14
 998 0512 DF90      		pop r13
 999 0514 CF90      		pop r12
 1000 0516 BF90      		pop r11
 1001 0518 AF90      		pop r10
 1002 051a 9F90      		pop r9
 1003 051c 8F90      		pop r8
 1004 051e 7F90      		pop r7
 1005 0520 6F90      		pop r6
 1006 0522 5F90      		pop r5
 1007 0524 4F90      		pop r4
 1008 0526 3F90      		pop r3
 1009 0528 2F90      		pop r2
 1010 052a 0895      		ret
 1011               	.L29:
 205:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 1013               	.LM114:
 1014 052c 8901      		movw r16,r18
 1015 052e 00C0      		rjmp .L32
 1020               	.Lscope1:
 1022               		.stabd	78,0,0
 1023               		.comm _nrk_signal_list,4,1
 1024               		.comm nrk_idle_task_stk,128,1
 1025               		.comm nrk_kernel_stk,128,1
 1026               		.comm nrk_kernel_stk_ptr,2,1
 1027               		.comm nrk_task_TCB,170,1
 1028               		.comm nrk_wakeup_signal,1,1
 1029               		.comm _nrk_readyQ,30,1
 1030               		.comm _free_node,2,1
 1031               		.comm _head_node,2,1
 1032               		.comm nrk_cur_task_prio,1,1
 1033               		.comm nrk_cur_task_TCB,2,1
 1034               		.comm nrk_high_ready_prio,1,1
 1035               		.comm nrk_high_ready_TCB,2,1
 1036               		.comm _nrk_resource_cnt,1,1
 1037               		.comm nrk_system_time,8,1
 1038               		.comm nrk_sem_list,15,1
 1039               		.comm systemceiling,1,1
 1040               		.comm error_task,1,1
 1041               		.comm error_num,1,1
 1042               		.comm _nrk_cpu_state,1,1
 1043               		.comm next_next_wakeup,2,1
 1044               		.comm _nrk_prev_timer_val,1,1
 1045               		.comm _nrk_time_trigger,1,1
 1046               		.comm app_timer0_callback,2,1
 1047               		.comm app_timer0_prescale,1,1
 1048               		.comm t,1,1
 1076               	.Letext0:
 1077               	.global __do_copy_data
 1078               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_scheduler.c
     /tmp/cc577lmq.s:2      *ABS*:0000003f __SREG__
     /tmp/cc577lmq.s:3      *ABS*:0000003e __SP_H__
     /tmp/cc577lmq.s:4      *ABS*:0000003d __SP_L__
     /tmp/cc577lmq.s:5      *ABS*:00000034 __CCP__
     /tmp/cc577lmq.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cc577lmq.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cc577lmq.s:148    .text:00000000 _nrk_scheduler
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000008 nrk_system_time
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:000000aa nrk_task_TCB
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000080 nrk_kernel_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:0000001e _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:0000000f nrk_sem_list
                            *COM*:00000001 systemceiling
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 t

UNDEFINED SYMBOLS
_nrk_precision_os_timer_reset
nrk_int_disable
_nrk_high_speed_timer_reset
_nrk_high_speed_timer_get
_nrk_set_next_wakeup
__mulsi3
__udivmodsi4
nrk_rem_from_readyQ
nrk_kernel_error_add
puts
printf
__udivmodhi4
nrk_add_to_readyQ
nrk_get_high_ready_task_ID
_nrk_os_timer_get
nrk_high_speed_timer_wait
nrk_stack_pointer_restore
nrk_start_high_ready_task
__do_copy_data
__do_clear_bss
