   1               		.file	"nrk_scheduler.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 137               		.data
 138               	.LC0:
 139 0000 4342 5320 		.string	"CBS goes exhausted "
 139      676F 6573 
 139      2065 7868 
 139      6175 7374 
 139      6564 2000 
 140               	.LC1:
 141 0014 5265 706C 		.string	"Replenish CBS of Task %d\n"
 141      656E 6973 
 141      6820 4342 
 141      5320 6F66 
 141      2054 6173 
 142               	.LC2:
 143 002e 5461 736B 		.string	"Task %d: Replenish CBS <-------- \n"
 143      2025 643A 
 143      2052 6570 
 143      6C65 6E69 
 143      7368 2043 
 144               		.text
 146               	.global	_nrk_scheduler
 148               	_nrk_scheduler:
 149               		.stabd	46,0,0
   1:..//src/kernel/source/nrk_scheduler.c **** /******************************************************************************
   2:..//src/kernel/source/nrk_scheduler.c ****  *  Nano-RK, a real-time operating system for sensor networks.
   3:..//src/kernel/source/nrk_scheduler.c ****  *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:..//src/kernel/source/nrk_scheduler.c ****  *  All rights reserved.
   5:..//src/kernel/source/nrk_scheduler.c ****  *
   6:..//src/kernel/source/nrk_scheduler.c ****  *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:..//src/kernel/source/nrk_scheduler.c ****  *  Licensing Model. If you are unsure which license to use please refer to:
   8:..//src/kernel/source/nrk_scheduler.c ****  *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:..//src/kernel/source/nrk_scheduler.c ****  *
  10:..//src/kernel/source/nrk_scheduler.c ****  *  This program is free software: you can redistribute it and/or modify
  11:..//src/kernel/source/nrk_scheduler.c ****  *  it under the terms of the GNU General Public License as published by
  12:..//src/kernel/source/nrk_scheduler.c ****  *  the Free Software Foundation, version 2.0 of the License.
  13:..//src/kernel/source/nrk_scheduler.c ****  *
  14:..//src/kernel/source/nrk_scheduler.c ****  *  This program is distributed in the hope that it will be useful,
  15:..//src/kernel/source/nrk_scheduler.c ****  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:..//src/kernel/source/nrk_scheduler.c ****  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:..//src/kernel/source/nrk_scheduler.c ****  *  GNU General Public License for more details.
  18:..//src/kernel/source/nrk_scheduler.c ****  *
  19:..//src/kernel/source/nrk_scheduler.c ****  *  You should have received a copy of the GNU General Public License
  20:..//src/kernel/source/nrk_scheduler.c ****  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:..//src/kernel/source/nrk_scheduler.c ****  *
  22:..//src/kernel/source/nrk_scheduler.c ****  *  Contributing Authors (specific to this file):
  23:..//src/kernel/source/nrk_scheduler.c ****  *  Anthony Rowe
  24:..//src/kernel/source/nrk_scheduler.c ****  *  Zane Starr
  25:..//src/kernel/source/nrk_scheduler.c ****  *  Anand Eswaren
  26:..//src/kernel/source/nrk_scheduler.c ****  *******************************************************************************/
  27:..//src/kernel/source/nrk_scheduler.c **** 
  28:..//src/kernel/source/nrk_scheduler.c **** #include <nrk.h>
  29:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_task.h>
  30:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_defs.h>
  31:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_error.h>
  32:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_events.h>
  33:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_scheduler.h>
  34:..//src/kernel/source/nrk_scheduler.c **** #include <include.h>
  35:..//src/kernel/source/nrk_scheduler.c **** #include <ulib.h>
  36:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_timer.h>
  37:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_time.h>
  38:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_cfg.h>
  39:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_cpu.h>
  40:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_watchdog.h>
  41:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_platform_time.h>
  42:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_stats.h>
  43:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_sw_wdt.h>
  44:..//src/kernel/source/nrk_scheduler.c **** 
  45:..//src/kernel/source/nrk_scheduler.c **** 
  46:..//src/kernel/source/nrk_scheduler.c **** // This define was moved into nrk_platform_time.h since it needs to be different based on the clk s
  47:..//src/kernel/source/nrk_scheduler.c **** // 750 measure to 100uS
  48:..//src/kernel/source/nrk_scheduler.c **** // 800 * .125 = 100us
  49:..//src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    750
  50:..//src/kernel/source/nrk_scheduler.c **** // For rfa1:
  51:..//src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    1500 
  52:..//src/kernel/source/nrk_scheduler.c **** 
  53:..//src/kernel/source/nrk_scheduler.c **** uint8_t t;
  54:..//src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
  55:..//src/kernel/source/nrk_scheduler.c **** {
 151               	.LM0:
 152               	.LFBB1:
 153 0000 2F92      		push r2
 154 0002 3F92      		push r3
 155 0004 4F92      		push r4
 156 0006 5F92      		push r5
 157 0008 6F92      		push r6
 158 000a 7F92      		push r7
 159 000c 8F92      		push r8
 160 000e 9F92      		push r9
 161 0010 AF92      		push r10
 162 0012 BF92      		push r11
 163 0014 CF92      		push r12
 164 0016 DF92      		push r13
 165 0018 EF92      		push r14
 166 001a FF92      		push r15
 167 001c 0F93      		push r16
 168 001e 1F93      		push r17
 169 0020 DF93      		push r29
 170 0022 CF93      		push r28
 171 0024 0F92      		push __tmp_reg__
 172 0026 CDB7      		in r28,__SP_L__
 173 0028 DEB7      		in r29,__SP_H__
 174               	/* prologue: function */
 175               	/* frame size = 1 */
 176               	/* stack size = 19 */
 177               	.L__stack_usage = 19
  56:..//src/kernel/source/nrk_scheduler.c ****     int8_t task_ID;
  57:..//src/kernel/source/nrk_scheduler.c ****     uint16_t next_wake;
  58:..//src/kernel/source/nrk_scheduler.c ****     uint16_t start_time_stamp;
  59:..//src/kernel/source/nrk_scheduler.c **** 
  60:..//src/kernel/source/nrk_scheduler.c ****     _nrk_precision_os_timer_reset();
 179               	.LM1:
 180 002a 0E94 0000 		call _nrk_precision_os_timer_reset
  61:..//src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();   // this should be removed...  Not needed
 182               	.LM2:
 183 002e 0E94 0000 		call nrk_int_disable
  62:..//src/kernel/source/nrk_scheduler.c **** 
  63:..//src/kernel/source/nrk_scheduler.c **** 
  64:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
  65:..//src/kernel/source/nrk_scheduler.c ****     _nrk_high_speed_timer_reset();
 185               	.LM3:
 186 0032 0E94 0000 		call _nrk_high_speed_timer_reset
  66:..//src/kernel/source/nrk_scheduler.c ****     start_time_stamp=_nrk_high_speed_timer_get();
 188               	.LM4:
 189 0036 0E94 0000 		call _nrk_high_speed_timer_get
 190 003a 2C01      		movw r4,r24
  67:..//src/kernel/source/nrk_scheduler.c **** #endif
  68:..//src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
 192               	.LM5:
 193 003c 8AEF      		ldi r24,lo8(-6)
 194 003e 0E94 0000 		call _nrk_set_next_wakeup
  69:..//src/kernel/source/nrk_scheduler.c ****     // Set to huge number which will later get set to min
  70:..//src/kernel/source/nrk_scheduler.c **** 
  71:..//src/kernel/source/nrk_scheduler.c ****     next_wake=60000;
  72:..//src/kernel/source/nrk_scheduler.c ****     // Safety zone starts here....
  73:..//src/kernel/source/nrk_scheduler.c **** 
  74:..//src/kernel/source/nrk_scheduler.c **** 
  75:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_WATCHDOG
  76:..//src/kernel/source/nrk_scheduler.c ****     nrk_watchdog_reset();
  77:..//src/kernel/source/nrk_scheduler.c **** #endif
  78:..//src/kernel/source/nrk_scheduler.c **** 
  79:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_SW_WDT
  80:..//src/kernel/source/nrk_scheduler.c ****     _nrk_sw_wdt_check();
  81:..//src/kernel/source/nrk_scheduler.c **** #endif
  82:..//src/kernel/source/nrk_scheduler.c **** 
  83:..//src/kernel/source/nrk_scheduler.c **** 
  84:..//src/kernel/source/nrk_scheduler.c **** 
  85:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
  86:..//src/kernel/source/nrk_scheduler.c ****     //nrk_kprintf( PSTR("*"));
  87:..//src/kernel/source/nrk_scheduler.c ****     //Check if OS tick was delayed...
  88:..//src/kernel/source/nrk_scheduler.c ****     // if(_nrk_cpu_state!=CPU_SLEEP && _nrk_os_timer_get()!=0) {
  89:..//src/kernel/source/nrk_scheduler.c ****     //		nrk_kprintf( PSTR("X" ));
  90:..//src/kernel/source/nrk_scheduler.c ****     //printf( "%u ",_nrk_os_timer_get());
  91:..//src/kernel/source/nrk_scheduler.c ****     //	}
  92:..//src/kernel/source/nrk_scheduler.c ****     //printf( "%u\r\n",_nrk_prev_timer_val);
  93:..//src/kernel/source/nrk_scheduler.c ****     if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
  94:..//src/kernel/source/nrk_scheduler.c ****         nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
  95:..//src/kernel/source/nrk_scheduler.c **** #endif
  96:..//src/kernel/source/nrk_scheduler.c ****     //while(_nrk_time_trigger>0)
  97:..//src/kernel/source/nrk_scheduler.c ****     //{
  98:..//src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
 196               	.LM6:
 197 0042 6091 0000 		lds r22,_nrk_prev_timer_val
 198 0046 70E0      		ldi r23,lo8(0)
 199 0048 80E0      		ldi r24,lo8(0)
 200 004a 90E0      		ldi r25,hi8(0)
 201 004c 23EB      		ldi r18,lo8(976563)
 202 004e 36EE      		ldi r19,hi8(976563)
 203 0050 4EE0      		ldi r20,hlo8(976563)
 204 0052 50E0      		ldi r21,hhi8(976563)
 205 0054 0E94 0000 		call __mulsi3
 206 0058 7B01      		movw r14,r22
 207 005a 8C01      		movw r16,r24
 208 005c 8091 0000 		lds r24,nrk_system_time+4
 209 0060 9091 0000 		lds r25,nrk_system_time+4+1
 210 0064 A091 0000 		lds r26,nrk_system_time+4+2
 211 0068 B091 0000 		lds r27,nrk_system_time+4+3
 212 006c E80E      		add r14,r24
 213 006e F91E      		adc r15,r25
 214 0070 0A1F      		adc r16,r26
 215 0072 1B1F      		adc r17,r27
  99:..//src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 217               	.LM7:
 218 0074 C801      		movw r24,r16
 219 0076 B701      		movw r22,r14
 220 0078 0E94 0000 		call __udivmodsi4
 221 007c E61A      		sub r14,r22
 222 007e F70A      		sbc r15,r23
 223 0080 080B      		sbc r16,r24
 224 0082 190B      		sbc r17,r25
 225 0084 8091 0000 		lds r24,nrk_system_time
 226 0088 9091 0000 		lds r25,nrk_system_time+1
 227 008c A091 0000 		lds r26,nrk_system_time+2
 228 0090 B091 0000 		lds r27,nrk_system_time+3
 100:..//src/kernel/source/nrk_scheduler.c **** 
 101:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 102:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
 103:..//src/kernel/source/nrk_scheduler.c ****     {
 104:..//src/kernel/source/nrk_scheduler.c ****         if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
 105:..//src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 106:..//src/kernel/source/nrk_scheduler.c ****         // Add 0 time since the preempted call before set the correct value
 107:..//src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
 108:..//src/kernel/source/nrk_scheduler.c ****     }
 109:..//src/kernel/source/nrk_scheduler.c ****     else
 110:..//src/kernel/source/nrk_scheduler.c ****     {
 111:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->suspend_flag==1)
 112:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 113:..//src/kernel/source/nrk_scheduler.c ****         else
 114:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 115:..//src/kernel/source/nrk_scheduler.c ****     }
 116:..//src/kernel/source/nrk_scheduler.c **** #endif
 117:..//src/kernel/source/nrk_scheduler.c **** 
 118:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 119:..//src/kernel/source/nrk_scheduler.c ****     {
 120:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 121:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.secs++;
 122:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 230               	.LM8:
 231 0094 E3EB      		ldi r30,lo8(976563)
 232 0096 AE2E      		mov r10,r30
 233 0098 E6EE      		ldi r30,hi8(976563)
 234 009a BE2E      		mov r11,r30
 235 009c EEE0      		ldi r30,hlo8(976563)
 236 009e CE2E      		mov r12,r30
 237 00a0 D12C      		mov r13,__zero_reg__
 118:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 239               	.LM9:
 240 00a2 00C0      		rjmp .L2
 241               	.L3:
 120:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 243               	.LM10:
 244 00a4 80E0      		ldi r24,lo8(-1000000000)
 245 00a6 96E3      		ldi r25,hi8(-1000000000)
 246 00a8 A5E6      		ldi r26,hlo8(-1000000000)
 247 00aa B4EC      		ldi r27,hhi8(-1000000000)
 248 00ac E80E      		add r14,r24
 249 00ae F91E      		adc r15,r25
 250 00b0 0A1F      		adc r16,r26
 251 00b2 1B1F      		adc r17,r27
 253               	.LM11:
 254 00b4 C801      		movw r24,r16
 255 00b6 B701      		movw r22,r14
 256 00b8 A601      		movw r20,r12
 257 00ba 9501      		movw r18,r10
 258 00bc 0E94 0000 		call __udivmodsi4
 259 00c0 E61A      		sub r14,r22
 260 00c2 F70A      		sbc r15,r23
 261 00c4 080B      		sbc r16,r24
 262 00c6 190B      		sbc r17,r25
 263 00c8 D401      		movw r26,r8
 264 00ca C301      		movw r24,r6
 265               	.L2:
 267               	.LM12:
 268 00cc 3C01      		movw r6,r24
 269 00ce 4D01      		movw r8,r26
 270 00d0 0894      		sec
 271 00d2 611C      		adc r6,__zero_reg__
 272 00d4 711C      		adc r7,__zero_reg__
 273 00d6 811C      		adc r8,__zero_reg__
 274 00d8 911C      		adc r9,__zero_reg__
 118:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 276               	.LM13:
 277 00da E0E0      		ldi r30,lo8(1000000000)
 278 00dc EE16      		cp r14,r30
 279 00de EAEC      		ldi r30,hi8(1000000000)
 280 00e0 FE06      		cpc r15,r30
 281 00e2 EAE9      		ldi r30,hlo8(1000000000)
 282 00e4 0E07      		cpc r16,r30
 283 00e6 EBE3      		ldi r30,hhi8(1000000000)
 284 00e8 1E07      		cpc r17,r30
 285 00ea 00F4      		brsh .L3
 118:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 287               	.LM14:
 288 00ec 8093 0000 		sts nrk_system_time,r24
 289 00f0 9093 0000 		sts nrk_system_time+1,r25
 290 00f4 A093 0000 		sts nrk_system_time+2,r26
 291 00f8 B093 0000 		sts nrk_system_time+3,r27
 292 00fc E092 0000 		sts nrk_system_time+4,r14
 293 0100 F092 0000 		sts nrk_system_time+4+1,r15
 294 0104 0093 0000 		sts nrk_system_time+4+2,r16
 295 0108 1093 0000 		sts nrk_system_time+4+3,r17
 123:..//src/kernel/source/nrk_scheduler.c ****     }
 124:..//src/kernel/source/nrk_scheduler.c ****     //  _nrk_time_trigger--;
 125:..//src/kernel/source/nrk_scheduler.c ****     //}
 126:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
 297               	.LM15:
 298 010c E091 0000 		lds r30,nrk_cur_task_TCB
 299 0110 F091 0000 		lds r31,nrk_cur_task_TCB+1
 300 0114 8581      		ldd r24,Z+5
 301 0116 8823      		tst r24
 302 0118 01F0      		breq .L4
 304               	.LM16:
 305 011a 8185      		ldd r24,Z+9
 306 011c 8430      		cpi r24,lo8(4)
 307 011e 01F0      		breq .L4
 127:..//src/kernel/source/nrk_scheduler.c ****     {
 128:..//src/kernel/source/nrk_scheduler.c ****         //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 129:..//src/kernel/source/nrk_scheduler.c **** 
 130:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
 309               	.LM17:
 310 0120 8781      		ldd r24,Z+7
 311 0122 8230      		cpi r24,lo8(2)
 312 0124 01F0      		breq .L37
 313               	.L5:
 131:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 132:..//src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
 315               	.LM18:
 316 0126 8823      		tst r24
 317 0128 01F0      		breq .L7
 319               	.LM19:
 320 012a 8681      		ldd r24,Z+6
 321 012c 8823      		tst r24
 322 012e 01F4      		brne .L8
 323               	.L37:
 133:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 325               	.LM20:
 326 0130 85E0      		ldi r24,lo8(5)
 327 0132 00C0      		rjmp .L38
 328               	.L8:
 134:..//src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
 135:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 330               	.LM21:
 331 0134 83E0      		ldi r24,lo8(3)
 332               	.L38:
 333 0136 8187      		std Z+9,r24
 334 0138 00C0      		rjmp .L6
 335               	.L7:
 136:..//src/kernel/source/nrk_scheduler.c ****         else
 137:..//src/kernel/source/nrk_scheduler.c ****         {
 138:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 337               	.LM22:
 338 013a 83E0      		ldi r24,lo8(3)
 339 013c 8187      		std Z+9,r24
 139:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->event_suspend=0;
 341               	.LM23:
 342 013e 1782      		std Z+7,__zero_reg__
 140:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->nw_flag=0;
 344               	.LM24:
 345 0140 1682      		std Z+6,__zero_reg__
 346               	.L6:
 141:..//src/kernel/source/nrk_scheduler.c ****         }
 142:..//src/kernel/source/nrk_scheduler.c ****         nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
 348               	.LM25:
 349 0142 8085      		ldd r24,Z+8
 350 0144 0E94 0000 		call nrk_rem_from_readyQ
 351               	.L4:
 143:..//src/kernel/source/nrk_scheduler.c ****     }
 144:..//src/kernel/source/nrk_scheduler.c ****     //nrk_print_readyQ();
 145:..//src/kernel/source/nrk_scheduler.c ****      
 146:..//src/kernel/source/nrk_scheduler.c ****     // Update cpu used value for ended task
 147:..//src/kernel/source/nrk_scheduler.c ****     // If the task has used its reserve, suspend task
 148:..//src/kernel/source/nrk_scheduler.c ****     // Don't disable IdleTask which is 0
 149:..//src/kernel/source/nrk_scheduler.c ****     // Don't decrease cpu_remaining if reserve is 0 and hence disabled
 150:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_t
 353               	.LM26:
 354 0148 E091 0000 		lds r30,nrk_cur_task_TCB
 355 014c F091 0000 		lds r31,nrk_cur_task_TCB+1
 356 0150 858D      		ldd r24,Z+29
 357 0152 968D      		ldd r25,Z+30
 358 0154 0097      		sbiw r24,0
 359 0156 01F4      		brne .+2
 360 0158 00C0      		rjmp .L9
 362               	.LM27:
 363 015a 6085      		ldd r22,Z+8
 364 015c 6623      		tst r22
 365 015e 01F4      		brne .+2
 366 0160 00C0      		rjmp .L9
 367 0162 4185      		ldd r20,Z+9
 368 0164 4430      		cpi r20,lo8(4)
 369 0166 01F4      		brne .+2
 370 0168 00C0      		rjmp .L9
 151:..//src/kernel/source/nrk_scheduler.c ****     {
 152:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
 372               	.LM28:
 373 016a 218D      		ldd r18,Z+25
 374 016c 328D      		ldd r19,Z+26
 375 016e 8091 0000 		lds r24,_nrk_prev_timer_val
 376 0172 90E0      		ldi r25,lo8(0)
 377 0174 2817      		cp r18,r24
 378 0176 3907      		cpc r19,r25
 379 0178 00F4      		brsh .L10
 153:..//src/kernel/source/nrk_scheduler.c ****         {
 154:..//src/kernel/source/nrk_scheduler.c **** 	    // 
 155:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 156:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 157:..//src/kernel/source/nrk_scheduler.c **** #endif
 158:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_cur_task_TCB->task_type == CBS_TASK && nrk_cur_task_TCB->task_state != SUSPENDED
 381               	.LM29:
 382 017a 81A1      		ldd r24,Z+33
 383 017c 8330      		cpi r24,lo8(3)
 384 017e 01F4      		brne .L11
 386               	.LM30:
 387 0180 4330      		cpi r20,lo8(3)
 388 0182 01F0      		breq .L11
 159:..//src/kernel/source/nrk_scheduler.c ****                 printf("CBS goes exhausted \n");
 390               	.LM31:
 391 0184 80E0      		ldi r24,lo8(.LC0)
 392 0186 90E0      		ldi r25,hi8(.LC0)
 393 0188 0E94 0000 		call puts
 160:..//src/kernel/source/nrk_scheduler.c ****                 // budget goes out
 161:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->next_period = nrk_cur_task_TCB->period;
 395               	.LM32:
 396 018c E091 0000 		lds r30,nrk_cur_task_TCB
 397 0190 F091 0000 		lds r31,nrk_cur_task_TCB+1
 398 0194 838D      		ldd r24,Z+27
 399 0196 948D      		ldd r25,Z+28
 400 0198 908F      		std Z+24,r25
 401 019a 878B      		std Z+23,r24
 162:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->cpu_remaining = nrk_cur_task_TCB->cpu_reserve;
 403               	.LM33:
 404 019c 858D      		ldd r24,Z+29
 405 019e 968D      		ldd r25,Z+30
 406 01a0 928F      		std Z+26,r25
 407 01a2 818F      		std Z+25,r24
 163:..//src/kernel/source/nrk_scheduler.c ****                 printf("Replenish CBS of Task %d\n",nrk_cur_task_TCB->task_ID);
 409               	.LM34:
 410 01a4 00D0      		rcall .
 411 01a6 00D0      		rcall .
 412 01a8 80E0      		ldi r24,lo8(.LC1)
 413 01aa 90E0      		ldi r25,hi8(.LC1)
 414 01ac ADB7      		in r26,__SP_L__
 415 01ae BEB7      		in r27,__SP_H__
 416 01b0 1296      		adiw r26,1+1
 417 01b2 9C93      		st X,r25
 418 01b4 8E93      		st -X,r24
 419 01b6 1197      		sbiw r26,1
 420 01b8 8085      		ldd r24,Z+8
 421 01ba 9927      		clr r25
 422 01bc 87FD      		sbrc r24,7
 423 01be 9095      		com r25
 424 01c0 1496      		adiw r26,3+1
 425 01c2 9C93      		st X,r25
 426 01c4 8E93      		st -X,r24
 427 01c6 1397      		sbiw r26,3
 428 01c8 0E94 0000 		call printf
 429 01cc 0F90      		pop __tmp_reg__
 430 01ce 0F90      		pop __tmp_reg__
 431 01d0 0F90      		pop __tmp_reg__
 432 01d2 0F90      		pop __tmp_reg__
 433 01d4 00C0      		rjmp .L12
 434               	.L11:
 164:..//src/kernel/source/nrk_scheduler.c ****             }else{
 165:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->cpu_remaining=0;
 436               	.LM35:
 437 01d6 128E      		std Z+26,__zero_reg__
 438 01d8 118E      		std Z+25,__zero_reg__
 166:..//src/kernel/source/nrk_scheduler.c **** 		nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
 440               	.LM36:
 441 01da 82E0      		ldi r24,lo8(2)
 442 01dc 0E94 0000 		call nrk_kernel_error_add
 443 01e0 00C0      		rjmp .L12
 444               	.L10:
 167:..//src/kernel/source/nrk_scheduler.c ****             }
 168:..//src/kernel/source/nrk_scheduler.c ****         }
 169:..//src/kernel/source/nrk_scheduler.c ****         else
 170:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
 446               	.LM37:
 447 01e2 281B      		sub r18,r24
 448 01e4 390B      		sbc r19,r25
 449 01e6 328F      		std Z+26,r19
 450 01e8 218F      		std Z+25,r18
 451               	.L12:
 171:..//src/kernel/source/nrk_scheduler.c **** 
 172:..//src/kernel/source/nrk_scheduler.c ****         task_ID= nrk_cur_task_TCB->task_ID;
 453               	.LM38:
 454 01ea E091 0000 		lds r30,nrk_cur_task_TCB
 455 01ee F091 0000 		lds r31,nrk_cur_task_TCB+1
 456 01f2 0085      		ldd r16,Z+8
 173:..//src/kernel/source/nrk_scheduler.c ****       //                  printf("cpu remaining of %d is %d \n",task_ID,nrk_task_TCB[task_ID].cpu_r
 174:..//src/kernel/source/nrk_scheduler.c **** 
 175:..//src/kernel/source/nrk_scheduler.c ****         if (nrk_cur_task_TCB->cpu_remaining ==0 )
 458               	.LM39:
 459 01f4 218D      		ldd r18,Z+25
 460 01f6 328D      		ldd r19,Z+26
 461 01f8 2115      		cp r18,__zero_reg__
 462 01fa 3105      		cpc r19,__zero_reg__
 463 01fc 01F4      		brne .L9
 176:..//src/kernel/source/nrk_scheduler.c ****         {
 177:..//src/kernel/source/nrk_scheduler.c ****             //printf("Task %d cpu remaining = 0\n", task_ID);
 178:..//src/kernel/source/nrk_scheduler.c ****             //printf("Task type is %d\n", nrk_cur_task_TCB->task_type);
 179:..//src/kernel/source/nrk_scheduler.c ****             // Here we dont need to suspend CBS
 180:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_cur_task_TCB->task_type == BASIC_TASK){
 465               	.LM40:
 466 01fe 81A1      		ldd r24,Z+33
 467 0200 8130      		cpi r24,lo8(1)
 468 0202 01F4      		brne .L13
 181:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 182:..//src/kernel/source/nrk_scheduler.c ****                 _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 183:..//src/kernel/source/nrk_scheduler.c **** #endif
 184:..//src/kernel/source/nrk_scheduler.c ****                 nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
 470               	.LM41:
 471 0204 83E0      		ldi r24,lo8(3)
 472 0206 602F      		mov r22,r16
 473 0208 0E94 0000 		call nrk_kernel_error_add
 185:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->task_state = SUSPENDED;
 475               	.LM42:
 476 020c E091 0000 		lds r30,nrk_cur_task_TCB
 477 0210 F091 0000 		lds r31,nrk_cur_task_TCB+1
 478 0214 83E0      		ldi r24,lo8(3)
 479 0216 8187      		std Z+9,r24
 186:..//src/kernel/source/nrk_scheduler.c ****                 nrk_rem_from_readyQ(task_ID);
 481               	.LM43:
 482 0218 802F      		mov r24,r16
 483 021a 0E94 0000 		call nrk_rem_from_readyQ
 484 021e 00C0      		rjmp .L9
 485               	.L13:
 187:..//src/kernel/source/nrk_scheduler.c ****             }else if(nrk_cur_task_TCB->task_type == CBS_TASK
 487               	.LM44:
 488 0220 8330      		cpi r24,lo8(3)
 489 0222 01F4      		brne .L9
 188:..//src/kernel/source/nrk_scheduler.c **** 		    && nrk_cur_task_TCB->task_state != SUSPENDED
 491               	.LM45:
 492 0224 8185      		ldd r24,Z+9
 493 0226 8330      		cpi r24,lo8(3)
 494 0228 01F0      		breq .L9
 189:..//src/kernel/source/nrk_scheduler.c **** 		    ){
 190:..//src/kernel/source/nrk_scheduler.c ****                 // We need replenish the budget for CBS
 191:..//src/kernel/source/nrk_scheduler.c ****                 printf("Task %d: Replenish CBS <-------- \n", task_ID);
 496               	.LM46:
 497 022a 00D0      		rcall .
 498 022c 00D0      		rcall .
 499 022e 20E0      		ldi r18,lo8(.LC2)
 500 0230 30E0      		ldi r19,hi8(.LC2)
 501 0232 EDB7      		in r30,__SP_L__
 502 0234 FEB7      		in r31,__SP_H__
 503 0236 3283      		std Z+2,r19
 504 0238 2183      		std Z+1,r18
 505 023a 802F      		mov r24,r16
 506 023c 9927      		clr r25
 507 023e 87FD      		sbrc r24,7
 508 0240 9095      		com r25
 509 0242 9483      		std Z+4,r25
 510 0244 8383      		std Z+3,r24
 511 0246 0E94 0000 		call printf
 192:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->next_period = nrk_cur_task_TCB->period;
 513               	.LM47:
 514 024a E091 0000 		lds r30,nrk_cur_task_TCB
 515 024e F091 0000 		lds r31,nrk_cur_task_TCB+1
 516 0252 838D      		ldd r24,Z+27
 517 0254 948D      		ldd r25,Z+28
 518 0256 908F      		std Z+24,r25
 519 0258 878B      		std Z+23,r24
 193:..//src/kernel/source/nrk_scheduler.c ****                 nrk_cur_task_TCB->cpu_remaining = nrk_cur_task_TCB->cpu_reserve;
 521               	.LM48:
 522 025a 858D      		ldd r24,Z+29
 523 025c 968D      		ldd r25,Z+30
 524 025e 928F      		std Z+26,r25
 525 0260 818F      		std Z+25,r24
 526 0262 0F90      		pop __tmp_reg__
 527 0264 0F90      		pop __tmp_reg__
 528 0266 0F90      		pop __tmp_reg__
 529 0268 0F90      		pop __tmp_reg__
 530               	.L9:
 532               	.LM49:
 533 026a 70E0      		ldi r23,lo8(nrk_task_TCB+5)
 534 026c 272E      		mov r2,r23
 535 026e 70E0      		ldi r23,hi8(nrk_task_TCB+5)
 536 0270 372E      		mov r3,r23
 122:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 538               	.LM50:
 539 0272 00E6      		ldi r16,lo8(-5536)
 540 0274 1AEE      		ldi r17,hi8(-5536)
 541 0276 20E0      		ldi r18,lo8(0)
 194:..//src/kernel/source/nrk_scheduler.c ****                 //printf("Next period is from %d\n", nrk_cur_task_TCB->next_period);
 195:..//src/kernel/source/nrk_scheduler.c ****             }
 196:..//src/kernel/source/nrk_scheduler.c **** 
 197:..//src/kernel/source/nrk_scheduler.c ****         }
 198:..//src/kernel/source/nrk_scheduler.c ****     }
 199:..//src/kernel/source/nrk_scheduler.c **** 
 200:..//src/kernel/source/nrk_scheduler.c ****     // Check I/O nrk_queues to add tasks with remaining cpu back...
 201:..//src/kernel/source/nrk_scheduler.c **** 
 202:..//src/kernel/source/nrk_scheduler.c ****     // Add eligable tasks back to the ready Queue
 203:..//src/kernel/source/nrk_scheduler.c ****     // At the same time find the next earliest wakeup
 204:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 205:..//src/kernel/source/nrk_scheduler.c ****     {
 206:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 207:..//src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 208:..//src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 209:..//src/kernel/source/nrk_scheduler.c ****         {
 210:..//src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 211:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 212:..//src/kernel/source/nrk_scheduler.c ****             else
 213:..//src/kernel/source/nrk_scheduler.c ****             {
 214:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 215:..//src/kernel/source/nrk_scheduler.c ****             }
 216:..//src/kernel/source/nrk_scheduler.c ****             // Do next period book keeping.
 217:..//src/kernel/source/nrk_scheduler.c ****             // next_period needs to be set such that the period is kept consistent even if other
 218:..//src/kernel/source/nrk_scheduler.c ****             // wait until functions are called.
 219:..//src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 220:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 221:..//src/kernel/source/nrk_scheduler.c ****             else
 222:..//src/kernel/source/nrk_scheduler.c ****             {
 223:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 224:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 225:..//src/kernel/source/nrk_scheduler.c ****                 else
 226:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 227:..//src/kernel/source/nrk_scheduler.c ****             }
 228:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 229:..//src/kernel/source/nrk_scheduler.c **** 
 230:..//src/kernel/source/nrk_scheduler.c ****         }
 231:..//src/kernel/source/nrk_scheduler.c **** 
 232:..//src/kernel/source/nrk_scheduler.c **** 
 233:..//src/kernel/source/nrk_scheduler.c ****         // Look for Next Task that Might Wakeup to interrupt current task
 234:..//src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 235:..//src/kernel/source/nrk_scheduler.c ****         {
 236:..//src/kernel/source/nrk_scheduler.c ****             // printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
 237:..//src/kernel/source/nrk_scheduler.c ****             // If a task needs to become READY, make it ready
 238:..//src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 239:..//src/kernel/source/nrk_scheduler.c ****             {
 240:..//src/kernel/source/nrk_scheduler.c ****                 // printf( "Adding back %d\n",task_ID );
 241:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 242:..//src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 243:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 244:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 245:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 246:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 247:..//src/kernel/source/nrk_scheduler.c ****                 {
 248:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 249:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 250:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 251:..//src/kernel/source/nrk_scheduler.c ****                     // If there is no period set, don't wakeup periodically
 252:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 253:..//src/kernel/source/nrk_scheduler.c ****                     nrk_add_to_readyQ(task_ID);
 254:..//src/kernel/source/nrk_scheduler.c ****                 }
 255:..//src/kernel/source/nrk_scheduler.c ****                 else
 256:..//src/kernel/source/nrk_scheduler.c ****                 {
 257:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 258:..//src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 259:..//src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].num_periods--;
 260:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 261:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 262:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 263:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].num_periods=1;
 543               	.LM51:
 544 0278 61E0      		ldi r22,lo8(1)
 545 027a 662E      		mov r6,r22
 546 027c 712C      		mov r7,__zero_reg__
 262:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 548               	.LM52:
 549 027e 5AEF      		ldi r21,lo8(250)
 550 0280 E52E      		mov r14,r21
 551 0282 F12C      		mov r15,__zero_reg__
 249:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 553               	.LM53:
 554 0284 42E0      		ldi r20,lo8(2)
 555 0286 942E      		mov r9,r20
 241:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 557               	.LM54:
 558 0288 31E0      		ldi r19,lo8(1)
 559 028a A32E      		mov r10,r19
 560 028c B12C      		mov r11,__zero_reg__
 561 028e C12C      		mov r12,__zero_reg__
 562 0290 D12C      		mov r13,__zero_reg__
 563               	.L26:
 206:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 565               	.LM55:
 566 0292 D101      		movw r26,r2
 567 0294 1396      		adiw r26,3
 568 0296 8C91      		ld r24,X
 569 0298 1397      		sbiw r26,3
 570 029a 8F3F      		cpi r24,lo8(-1)
 571 029c 01F4      		brne .+2
 572 029e 00C0      		rjmp .L14
 207:..//src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 574               	.LM56:
 575 02a0 1C92      		st X,__zero_reg__
 208:..//src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 577               	.LM57:
 578 02a2 8823      		tst r24
 579 02a4 01F4      		brne .+2
 580 02a6 00C0      		rjmp .L15
 208:..//src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 582               	.LM58:
 583 02a8 1496      		adiw r26,4
 584 02aa 8C91      		ld r24,X
 585 02ac 1497      		sbiw r26,4
 586 02ae 8430      		cpi r24,lo8(4)
 587 02b0 01F0      		breq .L15
 210:..//src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 589               	.LM59:
 590 02b2 5096      		adiw r26,16
 591 02b4 4D91      		ld r20,X+
 592 02b6 5C91      		ld r21,X
 593 02b8 5197      		sbiw r26,16+1
 594 02ba 8091 0000 		lds r24,_nrk_prev_timer_val
 595 02be 90E0      		ldi r25,lo8(0)
 596 02c0 4817      		cp r20,r24
 597 02c2 5907      		cpc r21,r25
 598 02c4 00F0      		brlo .L16
 211:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 600               	.LM60:
 601 02c6 481B      		sub r20,r24
 602 02c8 590B      		sbc r21,r25
 603 02ca 5196      		adiw r26,16+1
 604 02cc 5C93      		st X,r21
 605 02ce 4E93      		st -X,r20
 606 02d0 5097      		sbiw r26,16
 607 02d2 00C0      		rjmp .L17
 608               	.L16:
 214:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 610               	.LM61:
 611 02d4 F101      		movw r30,r2
 612 02d6 118A      		std Z+17,__zero_reg__
 613 02d8 108A      		std Z+16,__zero_reg__
 614               	.L17:
 219:..//src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 616               	.LM62:
 617 02da D101      		movw r26,r2
 618 02dc 5296      		adiw r26,18
 619 02de 4D91      		ld r20,X+
 620 02e0 5C91      		ld r21,X
 621 02e2 5397      		sbiw r26,18+1
 622 02e4 4817      		cp r20,r24
 623 02e6 5907      		cpc r21,r25
 624 02e8 00F0      		brlo .L18
 220:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 626               	.LM63:
 627 02ea 481B      		sub r20,r24
 628 02ec 590B      		sbc r21,r25
 629 02ee 5396      		adiw r26,18+1
 630 02f0 5C93      		st X,r21
 631 02f2 4E93      		st -X,r20
 632 02f4 5297      		sbiw r26,18
 633 02f6 00C0      		rjmp .L19
 634               	.L18:
 223:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 636               	.LM64:
 637 02f8 F101      		movw r30,r2
 638 02fa 6689      		ldd r22,Z+22
 639 02fc 7789      		ldd r23,Z+23
 640 02fe 8617      		cp r24,r22
 641 0300 9707      		cpc r25,r23
 642 0302 00F4      		brsh .L20
 224:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 644               	.LM65:
 645 0304 681B      		sub r22,r24
 646 0306 790B      		sbc r23,r25
 647 0308 738B      		std Z+19,r23
 648 030a 628B      		std Z+18,r22
 649 030c 00C0      		rjmp .L19
 650               	.L20:
 226:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 652               	.LM66:
 653 030e 0E94 0000 		call __udivmodhi4
 654 0312 D101      		movw r26,r2
 655 0314 5396      		adiw r26,18+1
 656 0316 9C93      		st X,r25
 657 0318 8E93      		st -X,r24
 658 031a 5297      		sbiw r26,18
 659               	.L19:
 228:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 661               	.LM67:
 662 031c F101      		movw r30,r2
 663 031e 8289      		ldd r24,Z+18
 664 0320 9389      		ldd r25,Z+19
 665 0322 0097      		sbiw r24,0
 666 0324 01F4      		brne .L15
 228:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 668               	.LM68:
 669 0326 8689      		ldd r24,Z+22
 670 0328 9789      		ldd r25,Z+23
 671 032a 938B      		std Z+19,r25
 672 032c 828B      		std Z+18,r24
 673               	.L15:
 234:..//src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 675               	.LM69:
 676 032e D101      		movw r26,r2
 677 0330 1496      		adiw r26,4
 678 0332 8C91      		ld r24,X
 679 0334 1497      		sbiw r26,4
 680 0336 8330      		cpi r24,lo8(3)
 681 0338 01F0      		breq .+2
 682 033a 00C0      		rjmp .L14
 238:..//src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 684               	.LM70:
 685 033c 5096      		adiw r26,16
 686 033e 8D91      		ld r24,X+
 687 0340 9C91      		ld r25,X
 688 0342 5197      		sbiw r26,16+1
 689 0344 0097      		sbiw r24,0
 690 0346 01F0      		breq .+2
 691 0348 00C0      		rjmp .L21
 241:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 693               	.LM71:
 694 034a 1296      		adiw r26,2
 695 034c 8C91      		ld r24,X
 696 034e 1297      		sbiw r26,2
 697 0350 8823      		tst r24
 698 0352 01F0      		breq .L22
 241:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 700               	.LM72:
 701 0354 1196      		adiw r26,1
 702 0356 8C91      		ld r24,X
 703 0358 1197      		sbiw r26,1
 704 035a 8823      		tst r24
 705 035c 01F0      		breq .L22
 706 035e D601      		movw r26,r12
 707 0360 C501      		movw r24,r10
 708 0362 0090 0000 		lds r0,nrk_wakeup_signal
 709 0366 00C0      		rjmp 2f
 710 0368 880F      	1:	lsl r24
 711 036a 991F      		rol r25
 712 036c AA1F      		rol r26
 713 036e BB1F      		rol r27
 714 0370 0A94      	2:	dec r0
 715 0372 02F4      		brpl 1b
 716 0374 F101      		movw r30,r2
 717 0376 8487      		std Z+12,r24
 718 0378 9587      		std Z+13,r25
 719 037a A687      		std Z+14,r26
 720 037c B787      		std Z+15,r27
 721               	.L22:
 243:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 723               	.LM73:
 724 037e D101      		movw r26,r2
 725 0380 1296      		adiw r26,2
 726 0382 1C92      		st X,__zero_reg__
 727 0384 1297      		sbiw r26,2
 244:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 729               	.LM74:
 730 0386 1196      		adiw r26,1
 731 0388 1C92      		st X,__zero_reg__
 732 038a 1197      		sbiw r26,1
 245:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 734               	.LM75:
 735 038c 1C92      		st X,__zero_reg__
 246:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 737               	.LM76:
 738 038e 5A96      		adiw r26,26
 739 0390 4D91      		ld r20,X+
 740 0392 5C91      		ld r21,X
 741 0394 5B97      		sbiw r26,26+1
 742 0396 5696      		adiw r26,22
 743 0398 8D91      		ld r24,X+
 744 039a 9C91      		ld r25,X
 745 039c 5797      		sbiw r26,22+1
 746 039e 5896      		adiw r26,24
 747 03a0 6D91      		ld r22,X+
 748 03a2 7C91      		ld r23,X
 749 03a4 5997      		sbiw r26,24+1
 750 03a6 4130      		cpi r20,1
 751 03a8 5105      		cpc r21,__zero_reg__
 752 03aa 01F4      		brne .L23
 248:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 754               	.LM77:
 755 03ac 5596      		adiw r26,20+1
 756 03ae 7C93      		st X,r23
 757 03b0 6E93      		st -X,r22
 758 03b2 5497      		sbiw r26,20
 249:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 760               	.LM78:
 761 03b4 1496      		adiw r26,4
 762 03b6 9C92      		st X,r9
 763 03b8 1497      		sbiw r26,4
 250:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 765               	.LM79:
 766 03ba 5296      		adiw r26,18
 767 03bc 4D91      		ld r20,X+
 768 03be 5C91      		ld r21,X
 769 03c0 5397      		sbiw r26,18+1
 770 03c2 5196      		adiw r26,16+1
 771 03c4 5C93      		st X,r21
 772 03c6 4E93      		st -X,r20
 773 03c8 5097      		sbiw r26,16
 252:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 775               	.LM80:
 776 03ca 0097      		sbiw r24,0
 777 03cc 01F4      		brne .L24
 252:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 779               	.LM81:
 780 03ce 5196      		adiw r26,16+1
 781 03d0 FC92      		st X,r15
 782 03d2 EE92      		st -X,r14
 783 03d4 5097      		sbiw r26,16
 784               	.L24:
 253:..//src/kernel/source/nrk_scheduler.c ****                     nrk_add_to_readyQ(task_ID);
 786               	.LM82:
 787 03d6 822F      		mov r24,r18
 788 03d8 2983      		std Y+1,r18
 789 03da 0E94 0000 		call nrk_add_to_readyQ
 790 03de 2981      		ldd r18,Y+1
 791 03e0 00C0      		rjmp .L21
 792               	.L23:
 257:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 794               	.LM83:
 795 03e2 F101      		movw r30,r2
 796 03e4 758B      		std Z+21,r23
 797 03e6 648B      		std Z+20,r22
 260:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 799               	.LM84:
 800 03e8 BA01      		movw r22,r20
 801 03ea 6150      		subi r22,lo8(-(-1))
 802 03ec 7040      		sbci r23,hi8(-(-1))
 803 03ee 689F      		mul r22,r24
 804 03f0 A001      		movw r20,r0
 805 03f2 699F      		mul r22,r25
 806 03f4 500D      		add r21,r0
 807 03f6 789F      		mul r23,r24
 808 03f8 500D      		add r21,r0
 809 03fa 1124      		clr r1
 810 03fc 518B      		std Z+17,r21
 811 03fe 408B      		std Z+16,r20
 261:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 813               	.LM85:
 814 0400 538B      		std Z+19,r21
 815 0402 428B      		std Z+18,r20
 262:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 817               	.LM86:
 818 0404 0097      		sbiw r24,0
 819 0406 01F4      		brne .L25
 262:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 821               	.LM87:
 822 0408 F18A      		std Z+17,r15
 823 040a E08A      		std Z+16,r14
 824               	.L25:
 826               	.LM88:
 827 040c D101      		movw r26,r2
 828 040e 5B96      		adiw r26,26+1
 829 0410 7C92      		st X,r7
 830 0412 6E92      		st -X,r6
 831 0414 5A97      		sbiw r26,26
 832               	.L21:
 264:..//src/kernel/source/nrk_scheduler.c ****                     //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
 265:..//src/kernel/source/nrk_scheduler.c ****                     //			nrk_task_TCB[task_ID].num_periods=1;
 266:..//src/kernel/source/nrk_scheduler.c ****                 }
 267:..//src/kernel/source/nrk_scheduler.c ****             }
 268:..//src/kernel/source/nrk_scheduler.c **** 
 269:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
 834               	.LM89:
 835 0416 F101      		movw r30,r2
 836 0418 8089      		ldd r24,Z+16
 837 041a 9189      		ldd r25,Z+17
 838 041c 0097      		sbiw r24,0
 839 041e 01F0      		breq .L14
 841               	.LM90:
 842 0420 8017      		cp r24,r16
 843 0422 9107      		cpc r25,r17
 844 0424 00F4      		brsh .L14
 846               	.LM91:
 847 0426 8C01      		movw r16,r24
 848               	.L14:
 204:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 850               	.LM92:
 851 0428 2F5F      		subi r18,lo8(-(1))
 852 042a 82E2      		ldi r24,lo8(34)
 853 042c 90E0      		ldi r25,hi8(34)
 854 042e 280E      		add r2,r24
 855 0430 391E      		adc r3,r25
 856 0432 2530      		cpi r18,lo8(5)
 857 0434 01F0      		breq .+2
 858 0436 00C0      		rjmp .L26
 270:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup<next_wake )
 271:..//src/kernel/source/nrk_scheduler.c ****             {
 272:..//src/kernel/source/nrk_scheduler.c ****                 // Find closest next_wake task
 273:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].next_wakeup;
 274:..//src/kernel/source/nrk_scheduler.c ****             }
 275:..//src/kernel/source/nrk_scheduler.c **** 
 276:..//src/kernel/source/nrk_scheduler.c ****         }
 277:..//src/kernel/source/nrk_scheduler.c ****     }
 278:..//src/kernel/source/nrk_scheduler.c **** 
 279:..//src/kernel/source/nrk_scheduler.c **** 
 280:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 281:..//src/kernel/source/nrk_scheduler.c ****     _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
 282:..//src/kernel/source/nrk_scheduler.c **** #endif
 283:..//src/kernel/source/nrk_scheduler.c ****     task_ID = nrk_get_high_ready_task_ID();
 860               	.LM93:
 861 0438 0E94 0000 		call nrk_get_high_ready_task_ID
 862 043c E82E      		mov r14,r24
 284:..//src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 864               	.LM94:
 865 043e 282F      		mov r18,r24
 866 0440 3327      		clr r19
 867 0442 27FD      		sbrc r18,7
 868 0444 3095      		com r19
 869 0446 F901      		movw r30,r18
 870 0448 EE0F      		lsl r30
 871 044a FF1F      		rol r31
 872 044c 85E0      		ldi r24,5
 873 044e 220F      	1:	lsl r18
 874 0450 331F      		rol r19
 875 0452 8A95      		dec r24
 876 0454 01F4      		brne 1b
 877 0456 E20F      		add r30,r18
 878 0458 F31F      		adc r31,r19
 879 045a E050      		subi r30,lo8(-(nrk_task_TCB))
 880 045c F040      		sbci r31,hi8(-(nrk_task_TCB))
 881 045e 8285      		ldd r24,Z+10
 882 0460 8093 0000 		sts nrk_high_ready_prio,r24
 285:..//src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
 884               	.LM95:
 885 0464 F093 0000 		sts nrk_high_ready_TCB+1,r31
 886 0468 E093 0000 		sts nrk_high_ready_TCB,r30
 286:..//src/kernel/source/nrk_scheduler.c **** 
 287:..//src/kernel/source/nrk_scheduler.c ****     // next_wake should hold next time when a suspended task might get run
 288:..//src/kernel/source/nrk_scheduler.c ****     // task_ID holds the highest priority READY task ID
 289:..//src/kernel/source/nrk_scheduler.c ****     // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time
 290:..//src/kernel/source/nrk_scheduler.c **** 
 291:..//src/kernel/source/nrk_scheduler.c ****     // Now we pick the next wakeup (either the end of the current task, or the possible resume
 292:..//src/kernel/source/nrk_scheduler.c ****     // of a suspended task)
 293:..//src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID)
 888               	.LM96:
 889 046c EE20      		tst r14
 890 046e 01F0      		breq .L27
 294:..//src/kernel/source/nrk_scheduler.c ****     {
 295:..//src/kernel/source/nrk_scheduler.c ****         // You are a non-Idle Task
 296:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WA
 892               	.LM97:
 893 0470 258D      		ldd r18,Z+29
 894 0472 368D      		ldd r19,Z+30
 895 0474 2115      		cp r18,__zero_reg__
 896 0476 3105      		cpc r19,__zero_reg__
 897 0478 01F0      		breq .L28
 899               	.LM98:
 900 047a 218D      		ldd r18,Z+25
 901 047c 328D      		ldd r19,Z+26
 902 047e 2A3F      		cpi r18,250
 903 0480 3105      		cpc r19,__zero_reg__
 904 0482 00F4      		brsh .L28
 297:..//src/kernel/source/nrk_scheduler.c ****         {
 298:..//src/kernel/source/nrk_scheduler.c ****             if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
 906               	.LM99:
 907 0484 2017      		cp r18,r16
 908 0486 3107      		cpc r19,r17
 909 0488 00F4      		brsh .+2
 910 048a 00C0      		rjmp .L29
 911 048c 00C0      		rjmp .L32
 912               	.L28:
 913 048e 9801      		movw r18,r16
 914 0490 0B3F      		cpi r16,251
 915 0492 1105      		cpc r17,__zero_reg__
 916 0494 00F4      		brsh .+2
 917 0496 00C0      		rjmp .L29
 918 0498 2AEF      		ldi r18,lo8(250)
 919 049a 30E0      		ldi r19,hi8(250)
 920 049c 00C0      		rjmp .L29
 921               	.L27:
 299:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].cpu_remaining;
 300:..//src/kernel/source/nrk_scheduler.c ****         }
 301:..//src/kernel/source/nrk_scheduler.c ****         else
 302:..//src/kernel/source/nrk_scheduler.c ****         {
 303:..//src/kernel/source/nrk_scheduler.c ****             if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 304:..//src/kernel/source/nrk_scheduler.c ****         }
 305:..//src/kernel/source/nrk_scheduler.c ****     }
 306:..//src/kernel/source/nrk_scheduler.c ****     else
 307:..//src/kernel/source/nrk_scheduler.c ****     {
 308:..//src/kernel/source/nrk_scheduler.c ****         // This is the idle task
 309:..//src/kernel/source/nrk_scheduler.c ****         // Make sure you wake up from the idle task a little earlier
 310:..//src/kernel/source/nrk_scheduler.c ****         // if you would go into deep sleep...
 311:..//src/kernel/source/nrk_scheduler.c ****         // After waking from deep sleep, the next context swap must be at least
 312:..//src/kernel/source/nrk_scheduler.c ****         // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
 313:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_POWER_DOWN
 314:..//src/kernel/source/nrk_scheduler.c ****         if(next_wake>NRK_SLEEP_WAKEUP_TIME)
 315:..//src/kernel/source/nrk_scheduler.c ****         {
 316:..//src/kernel/source/nrk_scheduler.c ****             if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
 317:..//src/kernel/source/nrk_scheduler.c ****             {
 318:..//src/kernel/source/nrk_scheduler.c ****                 if(next_wake-NRK_SLEEP_WAKEUP_TIME<NRK_SLEEP_WAKEUP_TIME)
 319:..//src/kernel/source/nrk_scheduler.c ****                 {
 320:..//src/kernel/source/nrk_scheduler.c ****                     next_wake=NRK_SLEEP_WAKEUP_TIME-1;
 321:..//src/kernel/source/nrk_scheduler.c ****                 }
 322:..//src/kernel/source/nrk_scheduler.c ****                 else
 323:..//src/kernel/source/nrk_scheduler.c ****                 {
 324:..//src/kernel/source/nrk_scheduler.c ****                     next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
 325:..//src/kernel/source/nrk_scheduler.c ****                 }
 326:..//src/kernel/source/nrk_scheduler.c ****             }
 327:..//src/kernel/source/nrk_scheduler.c ****             else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
 328:..//src/kernel/source/nrk_scheduler.c ****             {
 329:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME;
 330:..//src/kernel/source/nrk_scheduler.c ****             }
 331:..//src/kernel/source/nrk_scheduler.c ****             else
 332:..//src/kernel/source/nrk_scheduler.c ****             {
 333:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
 334:..//src/kernel/source/nrk_scheduler.c ****             }
 335:..//src/kernel/source/nrk_scheduler.c ****         }
 336:..//src/kernel/source/nrk_scheduler.c **** #endif
 337:..//src/kernel/source/nrk_scheduler.c ****     }
 338:..//src/kernel/source/nrk_scheduler.c **** 
 339:..//src/kernel/source/nrk_scheduler.c ****     /*
 340:..//src/kernel/source/nrk_scheduler.c ****     // Some code to catch the case when the scheduler wakes up
 341:..//src/kernel/source/nrk_scheduler.c ****     // from deep sleep and has to execute again before NRK_SLEEP_WAKEUP_TIME-1
 342:..//src/kernel/source/nrk_scheduler.c ****     if(_nrk_cpu_state==2 && next_wake<NRK_SLEEP_WAKEUP_TIME-1)
 343:..//src/kernel/source/nrk_scheduler.c ****     {
 344:..//src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();
 345:..//src/kernel/source/nrk_scheduler.c ****     while(1)
 346:..//src/kernel/source/nrk_scheduler.c ****     {
 347:..//src/kernel/source/nrk_scheduler.c ****     nrk_spin_wait_us(60000);
 348:..//src/kernel/source/nrk_scheduler.c ****     nrk_led_toggle(RED_LED);
 349:..//src/kernel/source/nrk_scheduler.c ****     nrk_spin_wait_us(60000);
 350:..//src/kernel/source/nrk_scheduler.c ****     nrk_led_toggle(GREEN_LED);
 351:..//src/kernel/source/nrk_scheduler.c ****     printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
 352:..//src/kernel/source/nrk_scheduler.c ****     }
 353:..//src/kernel/source/nrk_scheduler.c ****     }*/
 354:..//src/kernel/source/nrk_scheduler.c **** 
 355:..//src/kernel/source/nrk_scheduler.c **** 
 356:..//src/kernel/source/nrk_scheduler.c ****     //  If we disable power down, we still need to wakeup before the overflow
 357:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_NO_POWER_DOWN
 358:..//src/kernel/source/nrk_scheduler.c ****     if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 923               	.LM100:
 924 049e 0B3F      		cpi r16,251
 925 04a0 1105      		cpc r17,__zero_reg__
 926 04a2 00F0      		brlo .L32
 927 04a4 0AEF      		ldi r16,lo8(250)
 928 04a6 10E0      		ldi r17,hi8(250)
 929               	.L32:
 359:..//src/kernel/source/nrk_scheduler.c **** #endif
 360:..//src/kernel/source/nrk_scheduler.c ****     //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
 361:..//src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 931               	.LM101:
 932 04a8 8093 0000 		sts nrk_cur_task_prio,r24
 362:..//src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_TCB  = nrk_high_ready_TCB;
 934               	.LM102:
 935 04ac F093 0000 		sts nrk_cur_task_TCB+1,r31
 936 04b0 E093 0000 		sts nrk_cur_task_TCB,r30
 363:..//src/kernel/source/nrk_scheduler.c **** 
 364:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 365:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_high_ready_TCB==NULL)
 366:..//src/kernel/source/nrk_scheduler.c ****     {
 367:..//src/kernel/source/nrk_scheduler.c ****         nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
 368:..//src/kernel/source/nrk_scheduler.c ****     }
 369:..//src/kernel/source/nrk_scheduler.c **** #endif
 370:..//src/kernel/source/nrk_scheduler.c ****     //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());
 371:..//src/kernel/source/nrk_scheduler.c **** 
 372:..//src/kernel/source/nrk_scheduler.c ****     _nrk_prev_timer_val=next_wake;
 938               	.LM103:
 939 04b4 0093 0000 		sts _nrk_prev_timer_val,r16
 373:..//src/kernel/source/nrk_scheduler.c **** 
 374:..//src/kernel/source/nrk_scheduler.c **** 
 375:..//src/kernel/source/nrk_scheduler.c ****     if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
 941               	.LM104:
 942 04b8 0E94 0000 		call _nrk_os_timer_get
 943 04bc 282F      		mov r18,r24
 944 04be 30E0      		ldi r19,lo8(0)
 945 04c0 2F5F      		subi r18,lo8(-(1))
 946 04c2 3F4F      		sbci r19,hi8(-(1))
 947 04c4 2017      		cp r18,r16
 948 04c6 3107      		cpc r19,r17
 949 04c8 00F0      		brlo .L33
 376:..//src/kernel/source/nrk_scheduler.c ****     {
 377:..//src/kernel/source/nrk_scheduler.c ****         // FIXME: Terrible Terrible...
 378:..//src/kernel/source/nrk_scheduler.c ****         // Need to find out why this is happening...
 379:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 380:..//src/kernel/source/nrk_scheduler.c ****         // Ignore if you are the idle task coming from deep sleep
 381:..//src/kernel/source/nrk_scheduler.c ****         if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
 382:..//src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
 383:..//src/kernel/source/nrk_scheduler.c **** #endif
 384:..//src/kernel/source/nrk_scheduler.c ****         // This is bad news, but keeps things running
 385:..//src/kernel/source/nrk_scheduler.c ****         // +2 just in case we are on the edge of the last tick
 386:..//src/kernel/source/nrk_scheduler.c ****         next_wake=_nrk_os_timer_get()+2;
 951               	.LM105:
 952 04ca 0E94 0000 		call _nrk_os_timer_get
 953 04ce 082F      		mov r16,r24
 954 04d0 10E0      		ldi r17,lo8(0)
 955 04d2 0E5F      		subi r16,lo8(-(2))
 956 04d4 1F4F      		sbci r17,hi8(-(2))
 387:..//src/kernel/source/nrk_scheduler.c ****         _nrk_prev_timer_val=next_wake;
 958               	.LM106:
 959 04d6 0093 0000 		sts _nrk_prev_timer_val,r16
 960               	.L33:
 388:..//src/kernel/source/nrk_scheduler.c ****     }
 389:..//src/kernel/source/nrk_scheduler.c **** 
 390:..//src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
 962               	.LM107:
 963 04da EE20      		tst r14
 964 04dc 01F0      		breq .L34
 966               	.LM108:
 967 04de 1092 0000 		sts _nrk_cpu_state,__zero_reg__
 968               	.L34:
 391:..//src/kernel/source/nrk_scheduler.c **** 
 392:..//src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(next_wake);
 970               	.LM109:
 971 04e2 802F      		mov r24,r16
 972 04e4 0E94 0000 		call _nrk_set_next_wakeup
 393:..//src/kernel/source/nrk_scheduler.c **** 
 394:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
 395:..//src/kernel/source/nrk_scheduler.c ****     // Bound Context Swap to 100us
 396:..//src/kernel/source/nrk_scheduler.c ****     nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
 974               	.LM110:
 975 04e8 C201      		movw r24,r4
 976 04ea 6EEE      		ldi r22,lo8(750)
 977 04ec 72E0      		ldi r23,hi8(750)
 978 04ee 0E94 0000 		call nrk_high_speed_timer_wait
 397:..//src/kernel/source/nrk_scheduler.c **** #endif
 398:..//src/kernel/source/nrk_scheduler.c ****     nrk_stack_pointer_restore();
 980               	.LM111:
 981 04f2 0E94 0000 		call nrk_stack_pointer_restore
 399:..//src/kernel/source/nrk_scheduler.c ****     //nrk_int_enable();
 400:..//src/kernel/source/nrk_scheduler.c ****     nrk_start_high_ready_task();
 983               	.LM112:
 984 04f6 0E94 0000 		call nrk_start_high_ready_task
 985               	/* epilogue start */
 401:..//src/kernel/source/nrk_scheduler.c **** 
 402:..//src/kernel/source/nrk_scheduler.c **** }
 987               	.LM113:
 988 04fa 0F90      		pop __tmp_reg__
 989 04fc CF91      		pop r28
 990 04fe DF91      		pop r29
 991 0500 1F91      		pop r17
 992 0502 0F91      		pop r16
 993 0504 FF90      		pop r15
 994 0506 EF90      		pop r14
 995 0508 DF90      		pop r13
 996 050a CF90      		pop r12
 997 050c BF90      		pop r11
 998 050e AF90      		pop r10
 999 0510 9F90      		pop r9
 1000 0512 8F90      		pop r8
 1001 0514 7F90      		pop r7
 1002 0516 6F90      		pop r6
 1003 0518 5F90      		pop r5
 1004 051a 4F90      		pop r4
 1005 051c 3F90      		pop r3
 1006 051e 2F90      		pop r2
 1007 0520 0895      		ret
 1008               	.L29:
 204:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 1010               	.LM114:
 1011 0522 8901      		movw r16,r18
 1012 0524 00C0      		rjmp .L32
 1017               	.Lscope1:
 1019               		.stabd	78,0,0
 1020               		.comm _nrk_signal_list,4,1
 1021               		.comm nrk_idle_task_stk,128,1
 1022               		.comm nrk_kernel_stk,128,1
 1023               		.comm nrk_kernel_stk_ptr,2,1
 1024               		.comm nrk_task_TCB,170,1
 1025               		.comm nrk_wakeup_signal,1,1
 1026               		.comm _nrk_readyQ,30,1
 1027               		.comm _free_node,2,1
 1028               		.comm _head_node,2,1
 1029               		.comm nrk_cur_task_prio,1,1
 1030               		.comm nrk_cur_task_TCB,2,1
 1031               		.comm nrk_high_ready_prio,1,1
 1032               		.comm nrk_high_ready_TCB,2,1
 1033               		.comm _nrk_resource_cnt,1,1
 1034               		.comm nrk_system_time,8,1
 1035               		.comm nrk_sem_list,15,1
 1036               		.comm systemceiling,1,1
 1037               		.comm error_task,1,1
 1038               		.comm error_num,1,1
 1039               		.comm _nrk_cpu_state,1,1
 1040               		.comm next_next_wakeup,2,1
 1041               		.comm _nrk_prev_timer_val,1,1
 1042               		.comm _nrk_time_trigger,1,1
 1043               		.comm app_timer0_callback,2,1
 1044               		.comm app_timer0_prescale,1,1
 1045               		.comm t,1,1
 1073               	.Letext0:
 1074               	.global __do_copy_data
 1075               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_scheduler.c
     /tmp/ccOCOyYq.s:2      *ABS*:0000003f __SREG__
     /tmp/ccOCOyYq.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccOCOyYq.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccOCOyYq.s:5      *ABS*:00000034 __CCP__
     /tmp/ccOCOyYq.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccOCOyYq.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccOCOyYq.s:148    .text:00000000 _nrk_scheduler
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000008 nrk_system_time
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:000000aa nrk_task_TCB
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000080 nrk_kernel_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:0000001e _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:0000000f nrk_sem_list
                            *COM*:00000001 systemceiling
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 t

UNDEFINED SYMBOLS
_nrk_precision_os_timer_reset
nrk_int_disable
_nrk_high_speed_timer_reset
_nrk_high_speed_timer_get
_nrk_set_next_wakeup
__mulsi3
__udivmodsi4
nrk_rem_from_readyQ
puts
printf
nrk_kernel_error_add
__udivmodhi4
nrk_add_to_readyQ
nrk_get_high_ready_task_ID
_nrk_os_timer_get
nrk_high_speed_timer_wait
nrk_stack_pointer_restore
nrk_start_high_ready_task
__do_copy_data
__do_clear_bss
