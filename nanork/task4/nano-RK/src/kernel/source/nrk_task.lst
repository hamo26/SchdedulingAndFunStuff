   1               		.file	"nrk_task.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 138               	.global	nrk_get_high_ready_task_ID
 140               	nrk_get_high_ready_task_ID:
 141               		.stabd	46,0,0
   1:..//src/kernel/source/nrk_task.c **** /******************************************************************************
   2:..//src/kernel/source/nrk_task.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:..//src/kernel/source/nrk_task.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:..//src/kernel/source/nrk_task.c **** *  All rights reserved.
   5:..//src/kernel/source/nrk_task.c **** *
   6:..//src/kernel/source/nrk_task.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:..//src/kernel/source/nrk_task.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:..//src/kernel/source/nrk_task.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:..//src/kernel/source/nrk_task.c **** *
  10:..//src/kernel/source/nrk_task.c **** *  This program is free software: you can redistribute it and/or modify
  11:..//src/kernel/source/nrk_task.c **** *  it under the terms of the GNU General Public License as published by
  12:..//src/kernel/source/nrk_task.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:..//src/kernel/source/nrk_task.c **** *
  14:..//src/kernel/source/nrk_task.c **** *  This program is distributed in the hope that it will be useful,
  15:..//src/kernel/source/nrk_task.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:..//src/kernel/source/nrk_task.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:..//src/kernel/source/nrk_task.c **** *  GNU General Public License for more details.
  18:..//src/kernel/source/nrk_task.c **** *
  19:..//src/kernel/source/nrk_task.c **** *  You should have received a copy of the GNU General Public License
  20:..//src/kernel/source/nrk_task.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:..//src/kernel/source/nrk_task.c **** *
  22:..//src/kernel/source/nrk_task.c **** *  Contributing Authors (specific to this file):
  23:..//src/kernel/source/nrk_task.c **** *  Anthony Rowe
  24:..//src/kernel/source/nrk_task.c **** *  Zane Starr
  25:..//src/kernel/source/nrk_task.c **** *  Anand Eswaren
  26:..//src/kernel/source/nrk_task.c **** *******************************************************************************/
  27:..//src/kernel/source/nrk_task.c **** 
  28:..//src/kernel/source/nrk_task.c **** #include <nrk.h>
  29:..//src/kernel/source/nrk_task.c **** #include <nrk_task.h>
  30:..//src/kernel/source/nrk_task.c **** #include <include.h>
  31:..//src/kernel/source/nrk_task.c **** #include <ulib.h>
  32:..//src/kernel/source/nrk_task.c **** #include <nrk_timer.h>
  33:..//src/kernel/source/nrk_task.c **** #include <nrk_scheduler.h>
  34:..//src/kernel/source/nrk_task.c **** #include <nrk_error.h>
  35:..//src/kernel/source/nrk_task.c **** #include <nrk_defs.h>
  36:..//src/kernel/source/nrk_task.c **** #include <nrk_stack_check.h>
  37:..//src/kernel/source/nrk_task.c **** 
  38:..//src/kernel/source/nrk_task.c **** //#define TIME_PAD  2
  39:..//src/kernel/source/nrk_task.c **** 
  40:..//src/kernel/source/nrk_task.c **** inline void _nrk_wait_for_scheduler ();
  41:..//src/kernel/source/nrk_task.c **** 
  42:..//src/kernel/source/nrk_task.c **** uint8_t nrk_get_high_ready_task_ID ()
  43:..//src/kernel/source/nrk_task.c **** {
 143               	.LM0:
 144               	.LFBB1:
 145               	/* prologue: function */
 146               	/* frame size = 0 */
 147               	/* stack size = 0 */
 148               	.L__stack_usage = 0
  44:..//src/kernel/source/nrk_task.c **** 	return (_head_node->task_ID);
 150               	.LM1:
 151 0000 E091 0000 		lds r30,_head_node
 152 0004 F091 0000 		lds r31,_head_node+1
  45:..//src/kernel/source/nrk_task.c **** }
 154               	.LM2:
 155 0008 8081      		ld r24,Z
 156               	/* epilogue start */
 157 000a 0895      		ret
 159               	.Lscope1:
 161               		.stabd	78,0,0
 162               		.data
 163               	.LC0:
 164 0000 2564 2000 		.string	"%d "
 165               		.text
 167               	.global	nrk_print_readyQ
 169               	nrk_print_readyQ:
 170               		.stabd	46,0,0
  46:..//src/kernel/source/nrk_task.c **** 
  47:..//src/kernel/source/nrk_task.c **** void nrk_print_readyQ ()
  48:..//src/kernel/source/nrk_task.c **** {
 172               	.LM3:
 173               	.LFBB2:
 174 000c 0F93      		push r16
 175 000e 1F93      		push r17
 176 0010 CF93      		push r28
 177 0012 DF93      		push r29
 178               	/* prologue: function */
 179               	/* frame size = 0 */
 180               	/* stack size = 4 */
 181               	.L__stack_usage = 4
  49:..//src/kernel/source/nrk_task.c **** 	nrk_queue *ptr;
  50:..//src/kernel/source/nrk_task.c **** 	ptr = _head_node;
 183               	.LM4:
 184 0014 C091 0000 		lds r28,_head_node
 185 0018 D091 0000 		lds r29,_head_node+1
  51:..//src/kernel/source/nrk_task.c **** 	nrk_kprintf (PSTR ("nrk_queue: "));
 187               	.LM5:
 188 001c 80E0      		ldi r24,lo8(__c.2131)
 189 001e 90E0      		ldi r25,hi8(__c.2131)
 190 0020 0E94 0000 		call nrk_kprintf
  52:..//src/kernel/source/nrk_task.c **** 	while (ptr != NULL)
  53:..//src/kernel/source/nrk_task.c **** 	{
  54:..//src/kernel/source/nrk_task.c **** 		printf("%d ", &nrk_task_TCB[ptr->task_ID].next_period);
 192               	.LM6:
 193 0024 00E0      		ldi r16,lo8(.LC0)
 194 0026 10E0      		ldi r17,hi8(.LC0)
  52:..//src/kernel/source/nrk_task.c **** 	while (ptr != NULL)
 196               	.LM7:
 197 0028 00C0      		rjmp .L3
 198               	.L4:
 200               	.LM8:
 201 002a 00D0      		rcall .
 202 002c 00D0      		rcall .
 203 002e EDB7      		in r30,__SP_L__
 204 0030 FEB7      		in r31,__SP_H__
 205 0032 1283      		std Z+2,r17
 206 0034 0183      		std Z+1,r16
 207 0036 2881      		ld r18,Y
 208 0038 30E0      		ldi r19,lo8(0)
 209 003a C901      		movw r24,r18
 210 003c 880F      		lsl r24
 211 003e 991F      		rol r25
 212 0040 45E0      		ldi r20,5
 213 0042 220F      	1:	lsl r18
 214 0044 331F      		rol r19
 215 0046 4A95      		dec r20
 216 0048 01F4      		brne 1b
 217 004a 820F      		add r24,r18
 218 004c 931F      		adc r25,r19
 219 004e 8050      		subi r24,lo8(-(nrk_task_TCB+23))
 220 0050 9040      		sbci r25,hi8(-(nrk_task_TCB+23))
 221 0052 9483      		std Z+4,r25
 222 0054 8383      		std Z+3,r24
 223 0056 0E94 0000 		call printf
  55:..//src/kernel/source/nrk_task.c **** 		ptr = ptr->Next;
 225               	.LM9:
 226 005a 0B80      		ldd __tmp_reg__,Y+3
 227 005c DC81      		ldd r29,Y+4
 228 005e C02D      		mov r28,__tmp_reg__
 229 0060 0F90      		pop __tmp_reg__
 230 0062 0F90      		pop __tmp_reg__
 231 0064 0F90      		pop __tmp_reg__
 232 0066 0F90      		pop __tmp_reg__
 233               	.L3:
  52:..//src/kernel/source/nrk_task.c **** 	while (ptr != NULL)
 235               	.LM10:
 236 0068 2097      		sbiw r28,0
 237 006a 01F4      		brne .L4
  56:..//src/kernel/source/nrk_task.c **** 	}
  57:..//src/kernel/source/nrk_task.c **** 	nrk_kprintf (PSTR ("\n\r"));
 239               	.LM11:
 240 006c 80E0      		ldi r24,lo8(__c.2136)
 241 006e 90E0      		ldi r25,hi8(__c.2136)
 242 0070 0E94 0000 		call nrk_kprintf
 243               	/* epilogue start */
  58:..//src/kernel/source/nrk_task.c **** }
 245               	.LM12:
 246 0074 DF91      		pop r29
 247 0076 CF91      		pop r28
 248 0078 1F91      		pop r17
 249 007a 0F91      		pop r16
 250 007c 0895      		ret
 255               	.Lscope2:
 257               		.stabd	78,0,0
 258               		.data
 259               	.LC1:
 260 0004 0A2A 2A2A 		.string	"\n*****\nUsing EDF to recruit the readyQ\n*****"
 260      2A2A 0A55 
 260      7369 6E67 
 260      2045 4446 
 260      2074 6F20 
 261               		.text
 264               	.global	nrk_add_to_readyQ
 266               	nrk_add_to_readyQ:
 267               		.stabd	46,0,0
  59:..//src/kernel/source/nrk_task.c **** 
  60:..//src/kernel/source/nrk_task.c **** 
  61:..//src/kernel/source/nrk_task.c **** void nrk_add_to_readyQ (int8_t task_ID)
  62:..//src/kernel/source/nrk_task.c **** {
 269               	.LM13:
 270               	.LFBB3:
 271 007e BF92      		push r11
 272 0080 CF92      		push r12
 273 0082 DF92      		push r13
 274 0084 EF92      		push r14
 275 0086 FF92      		push r15
 276 0088 0F93      		push r16
 277 008a 1F93      		push r17
 278 008c CF93      		push r28
 279 008e DF93      		push r29
 280               	/* prologue: function */
 281               	/* frame size = 0 */
 282               	/* stack size = 9 */
 283               	.L__stack_usage = 9
 284 0090 B82E      		mov r11,r24
  63:..//src/kernel/source/nrk_task.c **** 	//printf("passed in task period: %d\n", &nrk_task_TCB[task_ID].next_period);
  64:..//src/kernel/source/nrk_task.c **** 
  65:..//src/kernel/source/nrk_task.c **** 	nrk_queue *NextNode;
  66:..//src/kernel/source/nrk_task.c **** 	nrk_queue *CurNode;
  67:..//src/kernel/source/nrk_task.c **** 
  68:..//src/kernel/source/nrk_task.c **** 	//printf( "nrk_add_to_readyQ %d\n",task_ID );
  69:..//src/kernel/source/nrk_task.c **** 	//nrk_print_readyQ();
  70:..//src/kernel/source/nrk_task.c **** 	// nrk_queue full
  71:..//src/kernel/source/nrk_task.c **** 	if (_free_node == NULL)
 286               	.LM14:
 287 0092 C091 0000 		lds r28,_free_node
 288 0096 D091 0000 		lds r29,_free_node+1
 289 009a 2097      		sbiw r28,0
 290 009c 01F4      		brne .+2
 291 009e 00C0      		rjmp .L5
  72:..//src/kernel/source/nrk_task.c **** 	{
  73:..//src/kernel/source/nrk_task.c **** 		return;
  74:..//src/kernel/source/nrk_task.c **** 	}
  75:..//src/kernel/source/nrk_task.c **** 
  76:..//src/kernel/source/nrk_task.c **** 
  77:..//src/kernel/source/nrk_task.c **** 	NextNode = _head_node;
 293               	.LM15:
 294 00a0 0091 0000 		lds r16,_head_node
 295 00a4 1091 0000 		lds r17,_head_node+1
  78:..//src/kernel/source/nrk_task.c **** 	CurNode = _free_node;
  79:..//src/kernel/source/nrk_task.c **** 
  80:..//src/kernel/source/nrk_task.c **** 	if (_head_node != NULL)
 297               	.LM16:
 298 00a8 0115      		cp r16,__zero_reg__
 299 00aa 1105      		cpc r17,__zero_reg__
 300 00ac 01F4      		brne .+2
 301 00ae 00C0      		rjmp .L7
  81:..//src/kernel/source/nrk_task.c **** 	{
  82:..//src/kernel/source/nrk_task.c **** 
  83:..//src/kernel/source/nrk_task.c **** 		while (NextNode != NULL)
  84:..//src/kernel/source/nrk_task.c **** 		{
  85:..//src/kernel/source/nrk_task.c **** //#ifdef NRK_EDF
  86:..//src/kernel/source/nrk_task.c **** 			//
  87:..//src/kernel/source/nrk_task.c **** 			//printf("%d\n",&NextNode->task_ID);
  88:..//src/kernel/source/nrk_task.c **** 			//printf("task id: %d", &task_ID);
  89:..//src/kernel/source/nrk_task.c **** 
  90:..//src/kernel/source/nrk_task.c **** //			if (NextNode->task_ID == NRK_IDLE_TASK_ID ||
  91:..//src/kernel/source/nrk_task.c **** //				nrk_task_TCB[NextNode->task_ID].next_period > nrk_task_TCB[task_ID].next_period {break;}	//Sm
  92:..//src/kernel/source/nrk_task.c **** 
  93:..//src/kernel/source/nrk_task.c **** #ifdef SRP
  94:..//src/kernel/source/nrk_task.c ****                     printf("\n*****\nUsing EDF to recruit the readyQ\n*****\n");
  95:..//src/kernel/source/nrk_task.c **** 			if (NextNode->task_ID == NRK_IDLE_TASK_ID ||
  96:..//src/kernel/source/nrk_task.c **** 				nrk_task_TCB[NextNode->task_ID].next_period > nrk_task_TCB[task_ID].next_period 
 303               	.LM17:
 304 00b0 9927      		clr r25
 305 00b2 87FD      		sbrc r24,7
 306 00b4 9095      		com r25
 307 00b6 9C01      		movw r18,r24
 308 00b8 220F      		lsl r18
 309 00ba 331F      		rol r19
 310 00bc 45E0      		ldi r20,5
 311 00be 880F      	1:	lsl r24
 312 00c0 991F      		rol r25
 313 00c2 4A95      		dec r20
 314 00c4 01F4      		brne 1b
 315 00c6 280F      		add r18,r24
 316 00c8 391F      		adc r19,r25
 317 00ca 2050      		subi r18,lo8(-(nrk_task_TCB))
 318 00cc 3040      		sbci r19,hi8(-(nrk_task_TCB))
 319 00ce 97E1      		ldi r25,lo8(23)
 320 00d0 E92E      		mov r14,r25
 321 00d2 F12C      		mov r15,__zero_reg__
 322 00d4 E20E      		add r14,r18
 323 00d6 F31E      		adc r15,r19
  97:..//src/kernel/source/nrk_task.c **** 				//&& nrk_task_TCB[task_ID].next_period < systemceiling)) {break;}	//Small absolute deadline = l
  98:..//src/kernel/source/nrk_task.c ****                             ) break; // Get rid of srp for t4 at the moment
  99:..//src/kernel/source/nrk_task.c ****                         else{
 100:..//src/kernel/source/nrk_task.c ****                             // Dealing with same deadline issue in edf
 101:..//src/kernel/source/nrk_task.c ****                             if( (nrk_task_TCB[NextNode->task_ID].next_period == nrk_task_TCB[task_I
 102:..//src/kernel/source/nrk_task.c ****                                     (nrk_task_TCB[NextNode->task_ID].task_prio < nrk_task_TCB[task_
 325               	.LM18:
 326 00d8 8AE0      		ldi r24,lo8(10)
 327 00da C82E      		mov r12,r24
 328 00dc D12C      		mov r13,__zero_reg__
 329 00de C20E      		add r12,r18
 330 00e0 D31E      		adc r13,r19
 331               	.L14:
  94:..//src/kernel/source/nrk_task.c ****                     printf("\n*****\nUsing EDF to recruit the readyQ\n*****\n");
 333               	.LM19:
 334 00e2 80E0      		ldi r24,lo8(.LC1)
 335 00e4 90E0      		ldi r25,hi8(.LC1)
 336 00e6 0E94 0000 		call puts
  95:..//src/kernel/source/nrk_task.c **** 			if (NextNode->task_ID == NRK_IDLE_TASK_ID ||
 338               	.LM20:
 339 00ea D801      		movw r26,r16
 340 00ec 4C91      		ld r20,X
 341 00ee 4423      		tst r20
 342 00f0 01F0      		breq .L7
  96:..//src/kernel/source/nrk_task.c **** 				nrk_task_TCB[NextNode->task_ID].next_period > nrk_task_TCB[task_ID].next_period 
 344               	.LM21:
 345 00f2 842F      		mov r24,r20
 346 00f4 90E0      		ldi r25,lo8(0)
 347 00f6 FC01      		movw r30,r24
 348 00f8 EE0F      		lsl r30
 349 00fa FF1F      		rol r31
 350 00fc A5E0      		ldi r26,5
 351 00fe 880F      	1:	lsl r24
 352 0100 991F      		rol r25
 353 0102 AA95      		dec r26
 354 0104 01F4      		brne 1b
 355 0106 E80F      		add r30,r24
 356 0108 F91F      		adc r31,r25
 357 010a E050      		subi r30,lo8(-(nrk_task_TCB))
 358 010c F040      		sbci r31,hi8(-(nrk_task_TCB))
 359 010e 2789      		ldd r18,Z+23
 360 0110 308D      		ldd r19,Z+24
 361 0112 F701      		movw r30,r14
 362 0114 8081      		ld r24,Z
 363 0116 9181      		ldd r25,Z+1
  95:..//src/kernel/source/nrk_task.c **** 			if (NextNode->task_ID == NRK_IDLE_TASK_ID ||
 365               	.LM22:
 366 0118 8217      		cp r24,r18
 367 011a 9307      		cpc r25,r19
 368 011c 00F0      		brlo .L7
 101:..//src/kernel/source/nrk_task.c ****                             if( (nrk_task_TCB[NextNode->task_ID].next_period == nrk_task_TCB[task_I
 370               	.LM23:
 371 011e 2817      		cp r18,r24
 372 0120 3907      		cpc r19,r25
 373 0122 01F4      		brne .L8
 375               	.LM24:
 376 0124 842F      		mov r24,r20
 377 0126 90E0      		ldi r25,lo8(0)
 378 0128 FC01      		movw r30,r24
 379 012a EE0F      		lsl r30
 380 012c FF1F      		rol r31
 381 012e 65E0      		ldi r22,5
 382 0130 880F      	1:	lsl r24
 383 0132 991F      		rol r25
 384 0134 6A95      		dec r22
 385 0136 01F4      		brne 1b
 386 0138 E80F      		add r30,r24
 387 013a F91F      		adc r31,r25
 388 013c E050      		subi r30,lo8(-(nrk_task_TCB))
 389 013e F040      		sbci r31,hi8(-(nrk_task_TCB))
 101:..//src/kernel/source/nrk_task.c ****                             if( (nrk_task_TCB[NextNode->task_ID].next_period == nrk_task_TCB[task_I
 391               	.LM25:
 392 0140 9285      		ldd r25,Z+10
 393 0142 D601      		movw r26,r12
 394 0144 8C91      		ld r24,X
 395 0146 9817      		cp r25,r24
 396 0148 00F0      		brlo .L7
 397               	.L8:
 103:..//src/kernel/source/nrk_task.c ****                                 break;
 104:..//src/kernel/source/nrk_task.c ****                         }
 105:..//src/kernel/source/nrk_task.c **** 
 106:..//src/kernel/source/nrk_task.c **** #else
 107:..//src/kernel/source/nrk_task.c **** 			if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
 108:..//src/kernel/source/nrk_task.c **** 				if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
 109:..//src/kernel/source/nrk_task.c **** 					nrk_task_TCB[task_ID].task_prio)
 110:..//src/kernel/source/nrk_task.c **** 					break;
 111:..//src/kernel/source/nrk_task.c **** 			if (nrk_task_TCB[task_ID].elevated_prio_flag)
 112:..//src/kernel/source/nrk_task.c **** 				if (nrk_task_TCB[NextNode->task_ID].task_prio <
 113:..//src/kernel/source/nrk_task.c **** 					nrk_task_TCB[task_ID].task_prio_ceil)
 114:..//src/kernel/source/nrk_task.c **** 					break;
 115:..//src/kernel/source/nrk_task.c **** 			if (nrk_task_TCB[NextNode->task_ID].task_prio <
 116:..//src/kernel/source/nrk_task.c **** 				nrk_task_TCB[task_ID].task_prio)
 117:..//src/kernel/source/nrk_task.c **** 				break; 
 118:..//src/kernel/source/nrk_task.c **** #endif    
 119:..//src/kernel/source/nrk_task.c **** 			NextNode = NextNode->Next;
 399               	.LM26:
 400 014a F801      		movw r30,r16
 401 014c 0381      		ldd r16,Z+3
 402 014e 1481      		ldd r17,Z+4
  83:..//src/kernel/source/nrk_task.c **** 		while (NextNode != NULL)
 404               	.LM27:
 405 0150 0115      		cp r16,__zero_reg__
 406 0152 1105      		cpc r17,__zero_reg__
 407 0154 01F4      		brne .L14
 408               	.L7:
 120:..//src/kernel/source/nrk_task.c **** 		}
 121:..//src/kernel/source/nrk_task.c **** 
 122:..//src/kernel/source/nrk_task.c **** 
 123:..//src/kernel/source/nrk_task.c **** 		//      while ((NextNode != NULL) && ((nrk_task_TCB[NextNode->task_ID].task_prio >= nrk_task_TCB[
 124:..//src/kernel/source/nrk_task.c **** 		//              NextNode = NextNode->Next;}
 125:..//src/kernel/source/nrk_task.c **** 		// Stop if nextNode is freenode or next node less prio or (equal and elevated
 126:..//src/kernel/source/nrk_task.c **** 		// Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
 127:..//src/kernel/source/nrk_task.c **** 		// 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2
 128:..//src/kernel/source/nrk_task.c **** 		//printf("Im out of the while loop.\n");
 129:..//src/kernel/source/nrk_task.c **** 	}
 130:..//src/kernel/source/nrk_task.c **** 
 131:..//src/kernel/source/nrk_task.c **** 	CurNode->task_ID = task_ID;
 410               	.LM28:
 411 0156 B882      		st Y,r11
 132:..//src/kernel/source/nrk_task.c **** 	_free_node = _free_node->Next;
 413               	.LM29:
 414 0158 E091 0000 		lds r30,_free_node
 415 015c F091 0000 		lds r31,_free_node+1
 416 0160 0380      		ldd __tmp_reg__,Z+3
 417 0162 F481      		ldd r31,Z+4
 418 0164 E02D      		mov r30,__tmp_reg__
 419 0166 F093 0000 		sts _free_node+1,r31
 420 016a E093 0000 		sts _free_node,r30
 133:..//src/kernel/source/nrk_task.c **** 
 134:..//src/kernel/source/nrk_task.c **** 
 135:..//src/kernel/source/nrk_task.c **** 	if (NextNode == _head_node)
 422               	.LM30:
 423 016e 8091 0000 		lds r24,_head_node
 424 0172 9091 0000 		lds r25,_head_node+1
 425 0176 0817      		cp r16,r24
 426 0178 1907      		cpc r17,r25
 427 017a 01F4      		brne .L10
 136:..//src/kernel/source/nrk_task.c **** 	{
 137:..//src/kernel/source/nrk_task.c **** 		//at start
 138:..//src/kernel/source/nrk_task.c **** 		if (_head_node != NULL)
 429               	.LM31:
 430 017c 0115      		cp r16,__zero_reg__
 431 017e 1105      		cpc r17,__zero_reg__
 432 0180 01F0      		breq .L11
 139:..//src/kernel/source/nrk_task.c **** 		{
 140:..//src/kernel/source/nrk_task.c **** 			CurNode->Next = _head_node;
 434               	.LM32:
 435 0182 1C83      		std Y+4,r17
 436 0184 0B83      		std Y+3,r16
 141:..//src/kernel/source/nrk_task.c **** 			CurNode->Prev = NULL;
 438               	.LM33:
 439 0186 1A82      		std Y+2,__zero_reg__
 440 0188 1982      		std Y+1,__zero_reg__
 142:..//src/kernel/source/nrk_task.c **** 			_head_node->Prev = CurNode;
 442               	.LM34:
 443 018a D801      		movw r26,r16
 444 018c 1296      		adiw r26,1+1
 445 018e DC93      		st X,r29
 446 0190 CE93      		st -X,r28
 447 0192 1197      		sbiw r26,1
 448 0194 00C0      		rjmp .L12
 449               	.L11:
 143:..//src/kernel/source/nrk_task.c **** 		}
 144:..//src/kernel/source/nrk_task.c **** 		else
 145:..//src/kernel/source/nrk_task.c **** 		{
 146:..//src/kernel/source/nrk_task.c **** 			CurNode->Next = NULL;
 451               	.LM35:
 452 0196 1C82      		std Y+4,__zero_reg__
 453 0198 1B82      		std Y+3,__zero_reg__
 147:..//src/kernel/source/nrk_task.c **** 			CurNode->Prev = NULL;
 455               	.LM36:
 456 019a 1A82      		std Y+2,__zero_reg__
 457 019c 1982      		std Y+1,__zero_reg__
 148:..//src/kernel/source/nrk_task.c **** 			_free_node->Prev = CurNode;
 459               	.LM37:
 460 019e D283      		std Z+2,r29
 461 01a0 C183      		std Z+1,r28
 462               	.L12:
 149:..//src/kernel/source/nrk_task.c **** 		}
 150:..//src/kernel/source/nrk_task.c **** 		_head_node = CurNode;
 464               	.LM38:
 465 01a2 D093 0000 		sts _head_node+1,r29
 466 01a6 C093 0000 		sts _head_node,r28
 467 01aa 00C0      		rjmp .L5
 468               	.L10:
 469 01ac D801      		movw r26,r16
 470 01ae 1196      		adiw r26,1
 471 01b0 8D91      		ld r24,X+
 472 01b2 9C91      		ld r25,X
 473 01b4 1297      		sbiw r26,1+1
 151:..//src/kernel/source/nrk_task.c **** 		//	printf("Fucking head node period: %d\n", &nrk_task_TCB[_head_node->task_ID].next_period);
 152:..//src/kernel/source/nrk_task.c **** 	}
 153:..//src/kernel/source/nrk_task.c **** 	else
 154:..//src/kernel/source/nrk_task.c **** 	{
 155:..//src/kernel/source/nrk_task.c **** 		if (NextNode != _free_node)
 475               	.LM39:
 476 01b6 0E17      		cp r16,r30
 477 01b8 1F07      		cpc r17,r31
 478 01ba 01F0      		breq .L13
 156:..//src/kernel/source/nrk_task.c **** 		{
 157:..//src/kernel/source/nrk_task.c **** 			// Insert  in middle
 158:..//src/kernel/source/nrk_task.c **** 
 159:..//src/kernel/source/nrk_task.c **** 			CurNode->Prev = NextNode->Prev;
 480               	.LM40:
 481 01bc 9A83      		std Y+2,r25
 482 01be 8983      		std Y+1,r24
 160:..//src/kernel/source/nrk_task.c **** 			CurNode->Next = NextNode;
 484               	.LM41:
 485 01c0 1C83      		std Y+4,r17
 486 01c2 0B83      		std Y+3,r16
 161:..//src/kernel/source/nrk_task.c **** 			(NextNode->Prev)->Next = CurNode;
 488               	.LM42:
 489 01c4 1196      		adiw r26,1
 490 01c6 ED91      		ld r30,X+
 491 01c8 FC91      		ld r31,X
 492 01ca 1297      		sbiw r26,1+1
 493 01cc D483      		std Z+4,r29
 494 01ce C383      		std Z+3,r28
 162:..//src/kernel/source/nrk_task.c **** 			NextNode->Prev = CurNode;
 496               	.LM43:
 497 01d0 1296      		adiw r26,1+1
 498 01d2 DC93      		st X,r29
 499 01d4 CE93      		st -X,r28
 500 01d6 1197      		sbiw r26,1
 501 01d8 00C0      		rjmp .L5
 502               	.L13:
 163:..//src/kernel/source/nrk_task.c **** 		}
 164:..//src/kernel/source/nrk_task.c **** 		else
 165:..//src/kernel/source/nrk_task.c **** 		{
 166:..//src/kernel/source/nrk_task.c **** 			//insert at end
 167:..//src/kernel/source/nrk_task.c **** 			CurNode->Next = NULL;
 504               	.LM44:
 505 01da 1C82      		std Y+4,__zero_reg__
 506 01dc 1B82      		std Y+3,__zero_reg__
 168:..//src/kernel/source/nrk_task.c **** 			CurNode->Prev = _free_node->Prev;
 508               	.LM45:
 509 01de 9A83      		std Y+2,r25
 510 01e0 8983      		std Y+1,r24
 169:..//src/kernel/source/nrk_task.c **** 			_free_node->Prev = CurNode;
 512               	.LM46:
 513 01e2 F801      		movw r30,r16
 514 01e4 D283      		std Z+2,r29
 515 01e6 C183      		std Z+1,r28
 516               	.L5:
 517               	/* epilogue start */
 170:..//src/kernel/source/nrk_task.c **** 		}
 171:..//src/kernel/source/nrk_task.c **** 
 172:..//src/kernel/source/nrk_task.c **** 	}
 173:..//src/kernel/source/nrk_task.c **** 	//nrk_print_readyQ();
 174:..//src/kernel/source/nrk_task.c **** 	//printf("Im out of the method\n");
 175:..//src/kernel/source/nrk_task.c **** 
 176:..//src/kernel/source/nrk_task.c **** }
 519               	.LM47:
 520 01e8 DF91      		pop r29
 521 01ea CF91      		pop r28
 522 01ec 1F91      		pop r17
 523 01ee 0F91      		pop r16
 524 01f0 FF90      		pop r15
 525 01f2 EF90      		pop r14
 526 01f4 DF90      		pop r13
 527 01f6 CF90      		pop r12
 528 01f8 BF90      		pop r11
 529 01fa 0895      		ret
 534               	.Lscope3:
 536               		.stabd	78,0,0
 539               	.global	nrk_rem_from_readyQ
 541               	nrk_rem_from_readyQ:
 542               		.stabd	46,0,0
 177:..//src/kernel/source/nrk_task.c **** 
 178:..//src/kernel/source/nrk_task.c **** 
 179:..//src/kernel/source/nrk_task.c **** void nrk_rem_from_readyQ (int8_t task_ID)
 180:..//src/kernel/source/nrk_task.c **** {
 544               	.LM48:
 545               	.LFBB4:
 546 01fc CF93      		push r28
 547 01fe DF93      		push r29
 548               	/* prologue: function */
 549               	/* frame size = 0 */
 550               	/* stack size = 2 */
 551               	.L__stack_usage = 2
 181:..//src/kernel/source/nrk_task.c **** 
 182:..//src/kernel/source/nrk_task.c **** 	nrk_queue *CurNode;
 183:..//src/kernel/source/nrk_task.c **** 	//      nrk_queue       *tempNode;
 184:..//src/kernel/source/nrk_task.c **** 
 185:..//src/kernel/source/nrk_task.c **** 	//return;
 186:..//src/kernel/source/nrk_task.c **** 
 187:..//src/kernel/source/nrk_task.c **** 	/*CurNode = _head_node;
 188:..//src/kernel/source/nrk_task.c **** 
 189:..//src/kernel/source/nrk_task.c **** 	_head_node = _head_node->Next;
 190:..//src/kernel/source/nrk_task.c **** 	_head_node->Prev = NULL;
 191:..//src/kernel/source/nrk_task.c **** 
 192:..//src/kernel/source/nrk_task.c **** 	if (_free_node == NULL)
 193:..//src/kernel/source/nrk_task.c **** 	{
 194:..//src/kernel/source/nrk_task.c **** 	tempNode = _head_node;
 195:..//src/kernel/source/nrk_task.c **** 	while (tempNode->Next!=NULL) tempNode=tempNode->Next;
 196:..//src/kernel/source/nrk_task.c **** 	CurNode->Next = NULL;
 197:..//src/kernel/source/nrk_task.c **** 	CurNode->Prev = tempNode;
 198:..//src/kernel/source/nrk_task.c **** 	tempNode->Next = CurNode;
 199:..//src/kernel/source/nrk_task.c **** 	_free_node = CurNode;
 200:..//src/kernel/source/nrk_task.c **** 	}
 201:..//src/kernel/source/nrk_task.c **** 	else
 202:..//src/kernel/source/nrk_task.c **** 	{
 203:..//src/kernel/source/nrk_task.c **** 	CurNode->Next = _free_node;
 204:..//src/kernel/source/nrk_task.c **** 	_free_node->Prev = CurNode;
 205:..//src/kernel/source/nrk_task.c **** 	_free_node = CurNode;
 206:..//src/kernel/source/nrk_task.c **** 	}
 207:..//src/kernel/source/nrk_task.c **** 	*/
 208:..//src/kernel/source/nrk_task.c **** 
 209:..//src/kernel/source/nrk_task.c **** 	//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);
 210:..//src/kernel/source/nrk_task.c **** 
 211:..//src/kernel/source/nrk_task.c **** 	if (_head_node == NULL)
 553               	.LM49:
 554 0200 E091 0000 		lds r30,_head_node
 555 0204 F091 0000 		lds r31,_head_node+1
 556 0208 3097      		sbiw r30,0
 557 020a 01F4      		brne .+2
 558 020c 00C0      		rjmp .L16
 212:..//src/kernel/source/nrk_task.c **** 		return;
 213:..//src/kernel/source/nrk_task.c **** 
 214:..//src/kernel/source/nrk_task.c **** 	CurNode = _head_node;
 215:..//src/kernel/source/nrk_task.c **** 
 216:..//src/kernel/source/nrk_task.c **** 	if (_head_node->task_ID == task_ID)
 560               	.LM50:
 561 020e 9927      		clr r25
 562 0210 87FD      		sbrc r24,7
 563 0212 9095      		com r25
 564 0214 2081      		ld r18,Z
 565 0216 30E0      		ldi r19,lo8(0)
 566 0218 2817      		cp r18,r24
 567 021a 3907      		cpc r19,r25
 568 021c 01F4      		brne .L26
 217:..//src/kernel/source/nrk_task.c **** 	{
 218:..//src/kernel/source/nrk_task.c **** 		//REmove from start
 219:..//src/kernel/source/nrk_task.c **** 		_head_node = _head_node->Next;
 570               	.LM51:
 571 021e A381      		ldd r26,Z+3
 572 0220 B481      		ldd r27,Z+4
 573 0222 B093 0000 		sts _head_node+1,r27
 574 0226 A093 0000 		sts _head_node,r26
 220:..//src/kernel/source/nrk_task.c **** 		_head_node->Prev = NULL;
 576               	.LM52:
 577 022a 1296      		adiw r26,1+1
 578 022c 1C92      		st X,__zero_reg__
 579 022e 1E92      		st -X,__zero_reg__
 580 0230 1197      		sbiw r26,1
 581 0232 00C0      		rjmp .L19
 582               	.L21:
 221:..//src/kernel/source/nrk_task.c **** 	}
 222:..//src/kernel/source/nrk_task.c **** 	else
 223:..//src/kernel/source/nrk_task.c **** 	{
 224:..//src/kernel/source/nrk_task.c **** 		while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
 225:..//src/kernel/source/nrk_task.c **** 			CurNode = CurNode->Next;
 584               	.LM53:
 585 0234 0380      		ldd __tmp_reg__,Z+3
 586 0236 F481      		ldd r31,Z+4
 587 0238 E02D      		mov r30,__tmp_reg__
 224:..//src/kernel/source/nrk_task.c **** 		while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
 589               	.LM54:
 590 023a 3097      		sbiw r30,0
 591 023c 01F0      		breq .L16
 592               	.L26:
 224:..//src/kernel/source/nrk_task.c **** 		while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
 594               	.LM55:
 595 023e 2081      		ld r18,Z
 596 0240 30E0      		ldi r19,lo8(0)
 597 0242 2817      		cp r18,r24
 598 0244 3907      		cpc r19,r25
 599 0246 01F4      		brne .L21
 226:..//src/kernel/source/nrk_task.c **** 		if (CurNode == NULL)
 227:..//src/kernel/source/nrk_task.c **** 			return;
 228:..//src/kernel/source/nrk_task.c **** 
 229:..//src/kernel/source/nrk_task.c **** 
 230:..//src/kernel/source/nrk_task.c **** 		(CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
 601               	.LM56:
 602 0248 C181      		ldd r28,Z+1
 603 024a D281      		ldd r29,Z+2
 604 024c 8381      		ldd r24,Z+3
 605 024e 9481      		ldd r25,Z+4
 606 0250 9C83      		std Y+4,r25
 607 0252 8B83      		std Y+3,r24
 231:..//src/kernel/source/nrk_task.c **** 		if (CurNode->Next != NULL)
 609               	.LM57:
 610 0254 A381      		ldd r26,Z+3
 611 0256 B481      		ldd r27,Z+4
 612 0258 1097      		sbiw r26,0
 613 025a 01F0      		breq .L19
 232:..//src/kernel/source/nrk_task.c **** 			(CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
 615               	.LM58:
 616 025c 1296      		adiw r26,1+1
 617 025e DC93      		st X,r29
 618 0260 CE93      		st -X,r28
 619 0262 1197      		sbiw r26,1
 620               	.L19:
 233:..//src/kernel/source/nrk_task.c **** 
 234:..//src/kernel/source/nrk_task.c **** 	}
 235:..//src/kernel/source/nrk_task.c **** 
 236:..//src/kernel/source/nrk_task.c **** 
 237:..//src/kernel/source/nrk_task.c **** 
 238:..//src/kernel/source/nrk_task.c **** 	// Add to free list
 239:..//src/kernel/source/nrk_task.c **** 	if (_free_node == NULL)
 622               	.LM59:
 623 0264 A091 0000 		lds r26,_free_node
 624 0268 B091 0000 		lds r27,_free_node+1
 625 026c 1097      		sbiw r26,0
 626 026e 01F4      		brne .L23
 240:..//src/kernel/source/nrk_task.c **** 	{
 241:..//src/kernel/source/nrk_task.c **** 		_free_node = CurNode;
 628               	.LM60:
 629 0270 F093 0000 		sts _free_node+1,r31
 630 0274 E093 0000 		sts _free_node,r30
 242:..//src/kernel/source/nrk_task.c **** 		_free_node->Next = NULL;
 632               	.LM61:
 633 0278 1482      		std Z+4,__zero_reg__
 634 027a 1382      		std Z+3,__zero_reg__
 635 027c 00C0      		rjmp .L24
 636               	.L23:
 243:..//src/kernel/source/nrk_task.c **** 	}
 244:..//src/kernel/source/nrk_task.c **** 	else
 245:..//src/kernel/source/nrk_task.c **** 	{
 246:..//src/kernel/source/nrk_task.c **** 		CurNode->Next = _free_node;
 638               	.LM62:
 639 027e B483      		std Z+4,r27
 640 0280 A383      		std Z+3,r26
 247:..//src/kernel/source/nrk_task.c **** 		_free_node->Prev = CurNode;
 642               	.LM63:
 643 0282 1296      		adiw r26,1+1
 644 0284 FC93      		st X,r31
 645 0286 EE93      		st -X,r30
 646 0288 1197      		sbiw r26,1
 248:..//src/kernel/source/nrk_task.c **** 		_free_node = CurNode;
 648               	.LM64:
 649 028a F093 0000 		sts _free_node+1,r31
 650 028e E093 0000 		sts _free_node,r30
 651               	.L24:
 249:..//src/kernel/source/nrk_task.c **** 	}
 250:..//src/kernel/source/nrk_task.c **** 	_free_node->Prev = NULL;
 653               	.LM65:
 654 0292 1282      		std Z+2,__zero_reg__
 655 0294 1182      		std Z+1,__zero_reg__
 656               	.L16:
 657               	/* epilogue start */
 251:..//src/kernel/source/nrk_task.c **** }
 659               	.LM66:
 660 0296 DF91      		pop r29
 661 0298 CF91      		pop r28
 662 029a 0895      		ret
 664               	.Lscope4:
 666               		.stabd	78,0,0
 669               	.global	nrk_activate_task
 671               	nrk_activate_task:
 672               		.stabd	46,0,0
 252:..//src/kernel/source/nrk_task.c **** 
 253:..//src/kernel/source/nrk_task.c **** 
 254:..//src/kernel/source/nrk_task.c **** 
 255:..//src/kernel/source/nrk_task.c **** 
 256:..//src/kernel/source/nrk_task.c **** 
 257:..//src/kernel/source/nrk_task.c **** nrk_status_t nrk_activate_task (nrk_task_type * Task)
 258:..//src/kernel/source/nrk_task.c **** {
 674               	.LM67:
 675               	.LFBB5:
 676 029c EF92      		push r14
 677 029e FF92      		push r15
 678 02a0 0F93      		push r16
 679 02a2 1F93      		push r17
 680 02a4 CF93      		push r28
 681 02a6 DF93      		push r29
 682               	/* prologue: function */
 683               	/* frame size = 0 */
 684               	/* stack size = 6 */
 685               	.L__stack_usage = 6
 686 02a8 EC01      		movw r28,r24
 259:..//src/kernel/source/nrk_task.c **** 	uint8_t rtype;
 260:..//src/kernel/source/nrk_task.c **** 	void *topOfStackPtr;
 261:..//src/kernel/source/nrk_task.c **** 
 262:..//src/kernel/source/nrk_task.c **** 	topOfStackPtr =
 688               	.LM68:
 689 02aa 6981      		ldd r22,Y+1
 690 02ac 7A81      		ldd r23,Y+2
 691 02ae 4B81      		ldd r20,Y+3
 692 02b0 5C81      		ldd r21,Y+4
 693 02b2 8D81      		ldd r24,Y+5
 694 02b4 9E81      		ldd r25,Y+6
 695 02b6 0E94 0000 		call nrk_task_stk_init
 696 02ba BC01      		movw r22,r24
 263:..//src/kernel/source/nrk_task.c **** 		(void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);
 264:..//src/kernel/source/nrk_task.c **** 
 265:..//src/kernel/source/nrk_task.c **** 	//printf("activate %d\n",(int)Task.task_ID);
 266:..//src/kernel/source/nrk_task.c **** 	if (Task->FirstActivation == TRUE)
 698               	.LM69:
 699 02bc 8F81      		ldd r24,Y+7
 700 02be 8823      		tst r24
 701 02c0 01F0      		breq .L29
 267:..//src/kernel/source/nrk_task.c **** 	{
 268:..//src/kernel/source/nrk_task.c **** 		rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
 703               	.LM70:
 704 02c2 4B81      		ldd r20,Y+3
 705 02c4 5C81      		ldd r21,Y+4
 706 02c6 CE01      		movw r24,r28
 707 02c8 20E0      		ldi r18,lo8(0)
 708 02ca 30E0      		ldi r19,hi8(0)
 709 02cc 00E0      		ldi r16,lo8(0)
 710 02ce 10E0      		ldi r17,hi8(0)
 711 02d0 EE24      		clr r14
 712 02d2 FF24      		clr r15
 713 02d4 0E94 0000 		call nrk_TCB_init
 269:..//src/kernel/source/nrk_task.c **** 		Task->FirstActivation = FALSE;
 715               	.LM71:
 716 02d8 1F82      		std Y+7,__zero_reg__
 717 02da 00C0      		rjmp .L30
 718               	.L29:
 270:..//src/kernel/source/nrk_task.c **** 
 271:..//src/kernel/source/nrk_task.c **** 	}
 272:..//src/kernel/source/nrk_task.c **** 	else
 273:..//src/kernel/source/nrk_task.c **** 	{
 274:..//src/kernel/source/nrk_task.c **** 		if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
 720               	.LM72:
 721 02dc 8881      		ld r24,Y
 722 02de 9927      		clr r25
 723 02e0 87FD      		sbrc r24,7
 724 02e2 9095      		com r25
 725 02e4 FC01      		movw r30,r24
 726 02e6 EE0F      		lsl r30
 727 02e8 FF1F      		rol r31
 728 02ea A5E0      		ldi r26,5
 729 02ec 880F      	1:	lsl r24
 730 02ee 991F      		rol r25
 731 02f0 AA95      		dec r26
 732 02f2 01F4      		brne 1b
 733 02f4 E80F      		add r30,r24
 734 02f6 F91F      		adc r31,r25
 735 02f8 E050      		subi r30,lo8(-(nrk_task_TCB))
 736 02fa F040      		sbci r31,hi8(-(nrk_task_TCB))
 737 02fc 8185      		ldd r24,Z+9
 738 02fe 8330      		cpi r24,lo8(3)
 739 0300 01F4      		brne .L32
 275:..//src/kernel/source/nrk_task.c **** 			return NRK_ERROR;
 276:..//src/kernel/source/nrk_task.c **** 		//Re-init some parts of TCB
 277:..//src/kernel/source/nrk_task.c **** 
 278:..//src/kernel/source/nrk_task.c **** 		nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
 741               	.LM73:
 742 0302 7183      		std Z+1,r23
 743 0304 6083      		st Z,r22
 744               	.L30:
 279:..//src/kernel/source/nrk_task.c **** 
 280:..//src/kernel/source/nrk_task.c **** 
 281:..//src/kernel/source/nrk_task.c **** 
 282:..//src/kernel/source/nrk_task.c **** 	}
 283:..//src/kernel/source/nrk_task.c **** 
 284:..//src/kernel/source/nrk_task.c **** 	//nrk_task_TCB[Task->task_ID].task_state = READY;
 285:..//src/kernel/source/nrk_task.c **** 
 286:..//src/kernel/source/nrk_task.c **** 	// Remove from suspended or waiting if extended
 287:..//src/kernel/source/nrk_task.c **** 
 288:..//src/kernel/source/nrk_task.c **** 	// OSSchedLock();
 289:..//src/kernel/source/nrk_task.c **** 
 290:..//src/kernel/source/nrk_task.c **** 
 291:..//src/kernel/source/nrk_task.c **** 	// If Idle Task then Add to ready Q
 292:..//src/kernel/source/nrk_task.c **** 	//if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
 293:..//src/kernel/source/nrk_task.c **** 	//nrk_add_to_readyQ(Task->task_ID);
 294:..//src/kernel/source/nrk_task.c **** 	//printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
 295:..//src/kernel/source/nrk_task.c **** 	//printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
 296:..//src/kernel/source/nrk_task.c **** 	if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
 746               	.LM74:
 747 0306 8881      		ld r24,Y
 748 0308 9927      		clr r25
 749 030a 87FD      		sbrc r24,7
 750 030c 9095      		com r25
 751 030e FC01      		movw r30,r24
 752 0310 EE0F      		lsl r30
 753 0312 FF1F      		rol r31
 754 0314 65E0      		ldi r22,5
 755 0316 880F      	1:	lsl r24
 756 0318 991F      		rol r25
 757 031a 6A95      		dec r22
 758 031c 01F4      		brne 1b
 759 031e E80F      		add r30,r24
 760 0320 F91F      		adc r31,r25
 761 0322 E050      		subi r30,lo8(-(nrk_task_TCB))
 762 0324 F040      		sbci r31,hi8(-(nrk_task_TCB))
 763 0326 8589      		ldd r24,Z+21
 764 0328 9689      		ldd r25,Z+22
 765 032a 0097      		sbiw r24,0
 766 032c 01F4      		brne .L33
 297:..//src/kernel/source/nrk_task.c **** 	{
 298:..//src/kernel/source/nrk_task.c **** 		nrk_task_TCB[Task->task_ID].task_state = READY;
 768               	.LM75:
 769 032e 82E0      		ldi r24,lo8(2)
 770 0330 8187      		std Z+9,r24
 299:..//src/kernel/source/nrk_task.c **** 		nrk_add_to_readyQ (Task->task_ID);
 772               	.LM76:
 773 0332 8881      		ld r24,Y
 774 0334 0E94 0000 		call nrk_add_to_readyQ
 775 0338 00C0      		rjmp .L33
 776               	.L32:
 275:..//src/kernel/source/nrk_task.c **** 			return NRK_ERROR;
 778               	.LM77:
 779 033a 8FEF      		ldi r24,lo8(-1)
 780 033c 00C0      		rjmp .L31
 781               	.L33:
 300:..//src/kernel/source/nrk_task.c **** 	}
 301:..//src/kernel/source/nrk_task.c **** 
 302:..//src/kernel/source/nrk_task.c **** 	return NRK_OK;
 783               	.LM78:
 784 033e 81E0      		ldi r24,lo8(1)
 785               	.L31:
 786               	/* epilogue start */
 303:..//src/kernel/source/nrk_task.c **** }
 788               	.LM79:
 789 0340 DF91      		pop r29
 790 0342 CF91      		pop r28
 791 0344 1F91      		pop r17
 792 0346 0F91      		pop r16
 793 0348 FF90      		pop r15
 794 034a EF90      		pop r14
 795 034c 0895      		ret
 800               	.Lscope5:
 802               		.stabd	78,0,0
 805               	.global	nrk_set_next_wakeup
 807               	nrk_set_next_wakeup:
 808               		.stabd	46,0,0
 304:..//src/kernel/source/nrk_task.c **** 
 305:..//src/kernel/source/nrk_task.c **** 
 306:..//src/kernel/source/nrk_task.c **** 
 307:..//src/kernel/source/nrk_task.c **** nrk_status_t nrk_terminate_task ()
 308:..//src/kernel/source/nrk_task.c **** {
 309:..//src/kernel/source/nrk_task.c **** 	nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
 310:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->task_state = FINISHED;
 311:..//src/kernel/source/nrk_task.c **** 
 312:..//src/kernel/source/nrk_task.c **** 	// HAHA, there is NO next period...
 313:..//src/kernel/source/nrk_task.c **** 	nrk_wait_until_next_period ();
 314:..//src/kernel/source/nrk_task.c **** 	return NRK_OK;
 315:..//src/kernel/source/nrk_task.c **** }
 316:..//src/kernel/source/nrk_task.c **** 
 317:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_next_period ()
 318:..//src/kernel/source/nrk_task.c **** {
 319:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 320:..//src/kernel/source/nrk_task.c **** 
 321:..//src/kernel/source/nrk_task.c **** 	nrk_stack_check ();
 322:..//src/kernel/source/nrk_task.c **** 	// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
 323:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 324:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->num_periods = 1;
 325:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 326:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 327:..//src/kernel/source/nrk_task.c **** 
 328:..//src/kernel/source/nrk_task.c **** 	//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
 329:..//src/kernel/source/nrk_task.c **** 
 330:..//src/kernel/source/nrk_task.c **** 	if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 331:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 332:..//src/kernel/source/nrk_task.c **** 		{
 333:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 334:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special c
 335:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
 336:..//src/kernel/source/nrk_task.c **** 		}
 337:..//src/kernel/source/nrk_task.c **** 
 338:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 339:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 340:..//src/kernel/source/nrk_task.c **** 		return NRK_OK;
 341:..//src/kernel/source/nrk_task.c **** }
 342:..//src/kernel/source/nrk_task.c **** 
 343:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_next_n_periods (uint16_t p)
 344:..//src/kernel/source/nrk_task.c **** {
 345:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 346:..//src/kernel/source/nrk_task.c **** 
 347:..//src/kernel/source/nrk_task.c **** 	nrk_stack_check ();
 348:..//src/kernel/source/nrk_task.c **** 
 349:..//src/kernel/source/nrk_task.c **** 	if (p == 0)
 350:..//src/kernel/source/nrk_task.c **** 		p = 1;
 351:..//src/kernel/source/nrk_task.c **** 	// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
 352:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 353:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 354:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->num_periods = p;
 355:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 356:..//src/kernel/source/nrk_task.c **** 
 357:..//src/kernel/source/nrk_task.c **** 	//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
 358:..//src/kernel/source/nrk_task.c **** 
 359:..//src/kernel/source/nrk_task.c **** 	// +2 allows for potential time conflict resolution
 360:..//src/kernel/source/nrk_task.c **** 	if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
 361:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 362:..//src/kernel/source/nrk_task.c **** 		{
 363:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 364:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 365:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
 366:..//src/kernel/source/nrk_task.c **** 		}
 367:..//src/kernel/source/nrk_task.c **** 
 368:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 369:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 370:..//src/kernel/source/nrk_task.c **** 		return NRK_OK;
 371:..//src/kernel/source/nrk_task.c **** }
 372:..//src/kernel/source/nrk_task.c **** 
 373:..//src/kernel/source/nrk_task.c **** /*
 374:..//src/kernel/source/nrk_task.c **** * nrk_wait_ticks()
 375:..//src/kernel/source/nrk_task.c **** *
 376:..//src/kernel/source/nrk_task.c **** * This function will wait until a specified number of
 377:..//src/kernel/source/nrk_task.c **** * timer ticks after the curret OS tick timer.
 378:..//src/kernel/source/nrk_task.c **** *
 379:..//src/kernel/source/nrk_task.c **** */
 380:..//src/kernel/source/nrk_task.c **** 
 381:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait_ticks (uint16_t ticks)
 382:..//src/kernel/source/nrk_task.c **** {
 383:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 384:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 385:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 386:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 387:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = ticks + timer;
 388:..//src/kernel/source/nrk_task.c **** 
 389:..//src/kernel/source/nrk_task.c **** 	if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 390:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 391:..//src/kernel/source/nrk_task.c **** 		{
 392:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 393:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 394:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 395:..//src/kernel/source/nrk_task.c **** 		}
 396:..//src/kernel/source/nrk_task.c **** 		//else nrk_cur_task_TCB->next_wakeup=ticks+1;
 397:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 398:..//src/kernel/source/nrk_task.c **** 		//while(nrk_cur_task_TCB->suspend_flag==1);
 399:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 400:..//src/kernel/source/nrk_task.c **** 		return NRK_OK;
 401:..//src/kernel/source/nrk_task.c **** }
 402:..//src/kernel/source/nrk_task.c **** 
 403:..//src/kernel/source/nrk_task.c **** 
 404:..//src/kernel/source/nrk_task.c **** /*
 405:..//src/kernel/source/nrk_task.c **** * nrk_wait_until_ticks()
 406:..//src/kernel/source/nrk_task.c **** *
 407:..//src/kernel/source/nrk_task.c **** * This function will wait until a specified number of
 408:..//src/kernel/source/nrk_task.c **** * timer ticks starting from when the task was swapped in.
 409:..//src/kernel/source/nrk_task.c **** * This means that this function can set periodic timing
 410:..//src/kernel/source/nrk_task.c **** * taking into account any task processing time.
 411:..//src/kernel/source/nrk_task.c **** *
 412:..//src/kernel/source/nrk_task.c **** */
 413:..//src/kernel/source/nrk_task.c **** 
 414:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_ticks (uint16_t ticks)
 415:..//src/kernel/source/nrk_task.c **** {
 416:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 417:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 418:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 419:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = ticks;
 420:..//src/kernel/source/nrk_task.c **** 	// printf( "t %u\r\n",ticks );
 421:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 422:..//src/kernel/source/nrk_task.c **** 
 423:..//src/kernel/source/nrk_task.c **** 	if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 424:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 425:..//src/kernel/source/nrk_task.c **** 		{
 426:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 427:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 428:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 429:..//src/kernel/source/nrk_task.c **** 		}
 430:..//src/kernel/source/nrk_task.c **** 		//else nrk_cur_task_TCB->next_wakeup=ticks+1;
 431:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 432:..//src/kernel/source/nrk_task.c **** 		//while(nrk_cur_task_TCB->suspend_flag==1);
 433:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 434:..//src/kernel/source/nrk_task.c **** 		return NRK_OK;
 435:..//src/kernel/source/nrk_task.c **** }
 436:..//src/kernel/source/nrk_task.c **** 
 437:..//src/kernel/source/nrk_task.c **** int8_t nrk_set_next_wakeup (nrk_time_t t)
 438:..//src/kernel/source/nrk_task.c **** {
 810               	.LM80:
 811               	.LFBB6:
 812 034e 1F93      		push r17
 813 0350 DF93      		push r29
 814 0352 CF93      		push r28
 815 0354 CDB7      		in r28,__SP_L__
 816 0356 DEB7      		in r29,__SP_H__
 817 0358 2897      		sbiw r28,8
 818 035a 0FB6      		in __tmp_reg__,__SREG__
 819 035c F894      		cli
 820 035e DEBF      		out __SP_H__,r29
 821 0360 0FBE      		out __SREG__,__tmp_reg__
 822 0362 CDBF      		out __SP_L__,r28
 823               	/* prologue: function */
 824               	/* frame size = 8 */
 825               	/* stack size = 11 */
 826               	.L__stack_usage = 11
 827 0364 2983      		std Y+1,r18
 828 0366 3A83      		std Y+2,r19
 829 0368 4B83      		std Y+3,r20
 830 036a 5C83      		std Y+4,r21
 831 036c 6D83      		std Y+5,r22
 832 036e 7E83      		std Y+6,r23
 833 0370 8F83      		std Y+7,r24
 834 0372 9887      		std Y+8,r25
 439:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 440:..//src/kernel/source/nrk_task.c **** 	uint16_t nw;
 441:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 836               	.LM81:
 837 0374 0E94 0000 		call nrk_int_disable
 442:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 839               	.LM82:
 840 0378 0E94 0000 		call _nrk_os_timer_get
 841 037c 182F      		mov r17,r24
 443:..//src/kernel/source/nrk_task.c **** 	nw = _nrk_time_to_ticks (&t);
 843               	.LM83:
 844 037e CE01      		movw r24,r28
 845 0380 0196      		adiw r24,1
 846 0382 0E94 0000 		call _nrk_time_to_ticks
 847 0386 9C01      		movw r18,r24
 444:..//src/kernel/source/nrk_task.c **** 	if (nw <= TIME_PAD)
 849               	.LM84:
 850 0388 8330      		cpi r24,3
 851 038a 9105      		cpc r25,__zero_reg__
 852 038c 00F0      		brlo .L36
 445:..//src/kernel/source/nrk_task.c **** 		return NRK_ERROR;
 446:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = nw + timer;
 854               	.LM85:
 855 038e E091 0000 		lds r30,nrk_cur_task_TCB
 856 0392 F091 0000 		lds r31,nrk_cur_task_TCB+1
 857 0396 210F      		add r18,r17
 858 0398 311D      		adc r19,__zero_reg__
 859 039a 368B      		std Z+22,r19
 860 039c 258B      		std Z+21,r18
 447:..//src/kernel/source/nrk_task.c **** 	/*	if(timer<(254-TIME_PAD))
 448:..//src/kernel/source/nrk_task.c **** 	if((timer+TIME_PAD)<=_nrk_get_next_wakeup())
 449:..//src/kernel/source/nrk_task.c **** 	{
 450:..//src/kernel/source/nrk_task.c **** 	timer+=TIME_PAD;
 451:..//src/kernel/source/nrk_task.c **** 	_nrk_prev_timer_val=timer;
 452:..//src/kernel/source/nrk_task.c **** 	_nrk_set_next_wakeup(timer);
 453:..//src/kernel/source/nrk_task.c **** 	}
 454:..//src/kernel/source/nrk_task.c **** 	*/
 455:..//src/kernel/source/nrk_task.c **** 	//      nrk_cur_task_TCB->nw_flag=1;
 456:..//src/kernel/source/nrk_task.c **** 	nrk_int_enable ();
 862               	.LM86:
 863 039e 0E94 0000 		call nrk_int_enable
 457:..//src/kernel/source/nrk_task.c **** 
 458:..//src/kernel/source/nrk_task.c **** 	return NRK_OK;
 865               	.LM87:
 866 03a2 81E0      		ldi r24,lo8(1)
 867 03a4 00C0      		rjmp .L35
 868               	.L36:
 445:..//src/kernel/source/nrk_task.c **** 		return NRK_ERROR;
 870               	.LM88:
 871 03a6 8FEF      		ldi r24,lo8(-1)
 872               	.L35:
 873               	/* epilogue start */
 459:..//src/kernel/source/nrk_task.c **** }
 875               	.LM89:
 876 03a8 2896      		adiw r28,8
 877 03aa 0FB6      		in __tmp_reg__,__SREG__
 878 03ac F894      		cli
 879 03ae DEBF      		out __SP_H__,r29
 880 03b0 0FBE      		out __SREG__,__tmp_reg__
 881 03b2 CDBF      		out __SP_L__,r28
 882 03b4 CF91      		pop r28
 883 03b6 DF91      		pop r29
 884 03b8 1F91      		pop r17
 885 03ba 0895      		ret
 891               	.Lscope6:
 893               		.stabd	78,0,0
 895               	.global	_nrk_wait_for_scheduler
 897               	_nrk_wait_for_scheduler:
 898               		.stabd	46,0,0
 460:..//src/kernel/source/nrk_task.c **** 
 461:..//src/kernel/source/nrk_task.c **** /*
 462:..//src/kernel/source/nrk_task.c **** * nrk_wait_until_nw()
 463:..//src/kernel/source/nrk_task.c **** *
 464:..//src/kernel/source/nrk_task.c **** * This function will wait until a specified number of
 465:..//src/kernel/source/nrk_task.c **** * timer ticks starting from when the task was swapped in.
 466:..//src/kernel/source/nrk_task.c **** * This means that this function can set periodic timing
 467:..//src/kernel/source/nrk_task.c **** * taking into account any task processing time.
 468:..//src/kernel/source/nrk_task.c **** *
 469:..//src/kernel/source/nrk_task.c **** */
 470:..//src/kernel/source/nrk_task.c **** 
 471:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_nw ()
 472:..//src/kernel/source/nrk_task.c **** {
 473:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 474:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 475:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 476:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->nw_flag = 1;
 477:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 478:..//src/kernel/source/nrk_task.c **** 
 479:..//src/kernel/source/nrk_task.c **** 	if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 480:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 481:..//src/kernel/source/nrk_task.c **** 		{
 482:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 483:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 484:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 485:..//src/kernel/source/nrk_task.c **** 		}
 486:..//src/kernel/source/nrk_task.c **** 		//else nrk_cur_task_TCB->next_wakeup=ticks+1;
 487:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 488:..//src/kernel/source/nrk_task.c **** 		//while(nrk_cur_task_TCB->suspend_flag==1);
 489:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 490:..//src/kernel/source/nrk_task.c **** 		return NRK_OK;
 491:..//src/kernel/source/nrk_task.c **** }
 492:..//src/kernel/source/nrk_task.c **** 
 493:..//src/kernel/source/nrk_task.c **** 
 494:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait (nrk_time_t t)
 495:..//src/kernel/source/nrk_task.c **** {
 496:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 497:..//src/kernel/source/nrk_task.c **** 	uint16_t nw;
 498:..//src/kernel/source/nrk_task.c **** 
 499:..//src/kernel/source/nrk_task.c **** 	nrk_stack_check ();
 500:..//src/kernel/source/nrk_task.c **** 
 501:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 502:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 503:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->num_periods = 1;
 504:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 505:..//src/kernel/source/nrk_task.c **** 
 506:..//src/kernel/source/nrk_task.c **** 	//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);
 507:..//src/kernel/source/nrk_task.c **** 
 508:..//src/kernel/source/nrk_task.c **** 	nw = _nrk_time_to_ticks (&t);
 509:..//src/kernel/source/nrk_task.c **** 	// printf( "t2 %u %u\r\n",timer, nw);
 510:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = nw + timer;
 511:..//src/kernel/source/nrk_task.c **** 	//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
 512:..//src/kernel/source/nrk_task.c **** 	if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 513:..//src/kernel/source/nrk_task.c **** 	{
 514:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 515:..//src/kernel/source/nrk_task.c **** 		{
 516:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 517:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 518:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 519:..//src/kernel/source/nrk_task.c **** 		}
 520:..//src/kernel/source/nrk_task.c **** 	}
 521:..//src/kernel/source/nrk_task.c **** 	nrk_int_enable ();
 522:..//src/kernel/source/nrk_task.c **** 
 523:..//src/kernel/source/nrk_task.c **** 	_nrk_wait_for_scheduler ();
 524:..//src/kernel/source/nrk_task.c **** 	return NRK_OK;
 525:..//src/kernel/source/nrk_task.c **** }
 526:..//src/kernel/source/nrk_task.c **** 
 527:..//src/kernel/source/nrk_task.c **** 
 528:..//src/kernel/source/nrk_task.c **** inline void _nrk_wait_for_scheduler ()
 529:..//src/kernel/source/nrk_task.c **** {
 900               	.LM90:
 901               	.LFBB7:
 902               	/* prologue: function */
 903               	/* frame size = 0 */
 904               	/* stack size = 0 */
 905               	.L__stack_usage = 0
 906               	.L38:
 530:..//src/kernel/source/nrk_task.c **** 
 531:..//src/kernel/source/nrk_task.c **** 	//TIMSK = BM (OCIE1A);
 532:..//src/kernel/source/nrk_task.c **** 	do
 533:..//src/kernel/source/nrk_task.c **** 	{
 534:..//src/kernel/source/nrk_task.c **** 		nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until 
 908               	.LM91:
 909 03bc 0E94 0000 		call nrk_idle
 535:..//src/kernel/source/nrk_task.c **** 	}
 536:..//src/kernel/source/nrk_task.c **** 	while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was th
 911               	.LM92:
 912 03c0 E091 0000 		lds r30,nrk_cur_task_TCB
 913 03c4 F091 0000 		lds r31,nrk_cur_task_TCB+1
 914 03c8 8581      		ldd r24,Z+5
 915 03ca 8823      		tst r24
 916 03cc 01F4      		brne .L38
 917               	/* epilogue start */
 537:..//src/kernel/source/nrk_task.c **** 
 538:..//src/kernel/source/nrk_task.c **** 	//TIMSK = BM (OCIE1A) | BM(OCIE0);
 539:..//src/kernel/source/nrk_task.c **** }
 919               	.LM93:
 920 03ce 0895      		ret
 922               	.Lscope7:
 924               		.stabd	78,0,0
 927               	.global	nrk_wait
 929               	nrk_wait:
 930               		.stabd	46,0,0
 495:..//src/kernel/source/nrk_task.c **** {
 932               	.LM94:
 933               	.LFBB8:
 934 03d0 FF92      		push r15
 935 03d2 0F93      		push r16
 936 03d4 1F93      		push r17
 937 03d6 DF93      		push r29
 938 03d8 CF93      		push r28
 939 03da CDB7      		in r28,__SP_L__
 940 03dc DEB7      		in r29,__SP_H__
 941 03de 2897      		sbiw r28,8
 942 03e0 0FB6      		in __tmp_reg__,__SREG__
 943 03e2 F894      		cli
 944 03e4 DEBF      		out __SP_H__,r29
 945 03e6 0FBE      		out __SREG__,__tmp_reg__
 946 03e8 CDBF      		out __SP_L__,r28
 947               	/* prologue: function */
 948               	/* frame size = 8 */
 949               	/* stack size = 13 */
 950               	.L__stack_usage = 13
 951 03ea 2983      		std Y+1,r18
 952 03ec 3A83      		std Y+2,r19
 953 03ee 4B83      		std Y+3,r20
 954 03f0 5C83      		std Y+4,r21
 955 03f2 6D83      		std Y+5,r22
 956 03f4 7E83      		std Y+6,r23
 957 03f6 8F83      		std Y+7,r24
 958 03f8 9887      		std Y+8,r25
 499:..//src/kernel/source/nrk_task.c **** 	nrk_stack_check ();
 960               	.LM95:
 961 03fa 0E94 0000 		call nrk_stack_check
 501:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 963               	.LM96:
 964 03fe 0E94 0000 		call nrk_int_disable
 502:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 966               	.LM97:
 967 0402 E091 0000 		lds r30,nrk_cur_task_TCB
 968 0406 F091 0000 		lds r31,nrk_cur_task_TCB+1
 969 040a 81E0      		ldi r24,lo8(1)
 970 040c 8583      		std Z+5,r24
 503:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->num_periods = 1;
 972               	.LM98:
 973 040e 81E0      		ldi r24,lo8(1)
 974 0410 90E0      		ldi r25,hi8(1)
 975 0412 90A3      		std Z+32,r25
 976 0414 878F      		std Z+31,r24
 504:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 978               	.LM99:
 979 0416 0E94 0000 		call _nrk_os_timer_get
 980 041a F82E      		mov r15,r24
 508:..//src/kernel/source/nrk_task.c **** 	nw = _nrk_time_to_ticks (&t);
 982               	.LM100:
 983 041c CE01      		movw r24,r28
 984 041e 0196      		adiw r24,1
 985 0420 0E94 0000 		call _nrk_time_to_ticks
 510:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = nw + timer;
 987               	.LM101:
 988 0424 E091 0000 		lds r30,nrk_cur_task_TCB
 989 0428 F091 0000 		lds r31,nrk_cur_task_TCB+1
 990 042c 0F2D      		mov r16,r15
 991 042e 10E0      		ldi r17,lo8(0)
 992 0430 9801      		movw r18,r16
 993 0432 280F      		add r18,r24
 994 0434 391F      		adc r19,r25
 995 0436 368B      		std Z+22,r19
 996 0438 258B      		std Z+21,r18
 512:..//src/kernel/source/nrk_task.c **** 	if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 998               	.LM102:
 999 043a 8F2D      		mov r24,r15
 1000 043c 883F      		cpi r24,lo8(-8)
 1001 043e 00F4      		brsh .L41
 514:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1003               	.LM103:
 1004 0440 0E94 0000 		call _nrk_get_next_wakeup
 1005 0444 0F5F      		subi r16,lo8(-(1))
 1006 0446 1F4F      		sbci r17,hi8(-(1))
 1007 0448 282F      		mov r18,r24
 1008 044a 30E0      		ldi r19,lo8(0)
 1009 044c 0217      		cp r16,r18
 1010 044e 1307      		cpc r17,r19
 1011 0450 04F4      		brge .L41
 516:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 1013               	.LM104:
 1014 0452 8F2D      		mov r24,r15
 1015 0454 8E5F      		subi r24,lo8(-(2))
 517:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 1017               	.LM105:
 1018 0456 8093 0000 		sts _nrk_prev_timer_val,r24
 518:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 1020               	.LM106:
 1021 045a 0E94 0000 		call _nrk_set_next_wakeup
 1022               	.L41:
 521:..//src/kernel/source/nrk_task.c **** 	nrk_int_enable ();
 1024               	.LM107:
 1025 045e 0E94 0000 		call nrk_int_enable
 523:..//src/kernel/source/nrk_task.c **** 	_nrk_wait_for_scheduler ();
 1027               	.LM108:
 1028 0462 0E94 0000 		call _nrk_wait_for_scheduler
 525:..//src/kernel/source/nrk_task.c **** }
 1030               	.LM109:
 1031 0466 81E0      		ldi r24,lo8(1)
 1032               	/* epilogue start */
 1033 0468 2896      		adiw r28,8
 1034 046a 0FB6      		in __tmp_reg__,__SREG__
 1035 046c F894      		cli
 1036 046e DEBF      		out __SP_H__,r29
 1037 0470 0FBE      		out __SREG__,__tmp_reg__
 1038 0472 CDBF      		out __SP_L__,r28
 1039 0474 CF91      		pop r28
 1040 0476 DF91      		pop r29
 1041 0478 1F91      		pop r17
 1042 047a 0F91      		pop r16
 1043 047c FF90      		pop r15
 1044 047e 0895      		ret
 1046               	.Lscope8:
 1048               		.stabd	78,0,0
 1050               	.global	nrk_wait_until_nw
 1052               	nrk_wait_until_nw:
 1053               		.stabd	46,0,0
 472:..//src/kernel/source/nrk_task.c **** {
 1055               	.LM110:
 1056               	.LFBB9:
 1057 0480 1F93      		push r17
 1058               	/* prologue: function */
 1059               	/* frame size = 0 */
 1060               	/* stack size = 1 */
 1061               	.L__stack_usage = 1
 474:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 1063               	.LM111:
 1064 0482 0E94 0000 		call nrk_int_disable
 475:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 1066               	.LM112:
 1067 0486 E091 0000 		lds r30,nrk_cur_task_TCB
 1068 048a F091 0000 		lds r31,nrk_cur_task_TCB+1
 1069 048e 81E0      		ldi r24,lo8(1)
 1070 0490 8583      		std Z+5,r24
 476:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->nw_flag = 1;
 1072               	.LM113:
 1073 0492 8683      		std Z+6,r24
 477:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 1075               	.LM114:
 1076 0494 0E94 0000 		call _nrk_os_timer_get
 1077 0498 182F      		mov r17,r24
 479:..//src/kernel/source/nrk_task.c **** 	if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 1079               	.LM115:
 1080 049a 883F      		cpi r24,lo8(-8)
 1081 049c 00F4      		brsh .L43
 480:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1083               	.LM116:
 1084 049e 0E94 0000 		call _nrk_get_next_wakeup
 1085 04a2 212F      		mov r18,r17
 1086 04a4 30E0      		ldi r19,lo8(0)
 1087 04a6 2F5F      		subi r18,lo8(-(1))
 1088 04a8 3F4F      		sbci r19,hi8(-(1))
 1089 04aa 482F      		mov r20,r24
 1090 04ac 50E0      		ldi r21,lo8(0)
 1091 04ae 2417      		cp r18,r20
 1092 04b0 3507      		cpc r19,r21
 1093 04b2 04F4      		brge .L43
 482:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 1095               	.LM117:
 1096 04b4 812F      		mov r24,r17
 1097 04b6 8E5F      		subi r24,lo8(-(2))
 483:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 1099               	.LM118:
 1100 04b8 8093 0000 		sts _nrk_prev_timer_val,r24
 484:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 1102               	.LM119:
 1103 04bc 0E94 0000 		call _nrk_set_next_wakeup
 1104               	.L43:
 487:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 1106               	.LM120:
 1107 04c0 0E94 0000 		call nrk_int_enable
 489:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 1109               	.LM121:
 1110 04c4 0E94 0000 		call _nrk_wait_for_scheduler
 491:..//src/kernel/source/nrk_task.c **** }
 1112               	.LM122:
 1113 04c8 81E0      		ldi r24,lo8(1)
 1114               	/* epilogue start */
 1115 04ca 1F91      		pop r17
 1116 04cc 0895      		ret
 1118               	.Lscope9:
 1120               		.stabd	78,0,0
 1123               	.global	nrk_wait_until_ticks
 1125               	nrk_wait_until_ticks:
 1126               		.stabd	46,0,0
 415:..//src/kernel/source/nrk_task.c **** {
 1128               	.LM123:
 1129               	.LFBB10:
 1130 04ce 1F93      		push r17
 1131 04d0 CF93      		push r28
 1132 04d2 DF93      		push r29
 1133               	/* prologue: function */
 1134               	/* frame size = 0 */
 1135               	/* stack size = 3 */
 1136               	.L__stack_usage = 3
 1137 04d4 EC01      		movw r28,r24
 417:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 1139               	.LM124:
 1140 04d6 0E94 0000 		call nrk_int_disable
 418:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 1142               	.LM125:
 1143 04da E091 0000 		lds r30,nrk_cur_task_TCB
 1144 04de F091 0000 		lds r31,nrk_cur_task_TCB+1
 1145 04e2 81E0      		ldi r24,lo8(1)
 1146 04e4 8583      		std Z+5,r24
 419:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = ticks;
 1148               	.LM126:
 1149 04e6 D68B      		std Z+22,r29
 1150 04e8 C58B      		std Z+21,r28
 421:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 1152               	.LM127:
 1153 04ea 0E94 0000 		call _nrk_os_timer_get
 1154 04ee 182F      		mov r17,r24
 423:..//src/kernel/source/nrk_task.c **** 	if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 1156               	.LM128:
 1157 04f0 883F      		cpi r24,lo8(-8)
 1158 04f2 00F4      		brsh .L45
 424:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1160               	.LM129:
 1161 04f4 0E94 0000 		call _nrk_get_next_wakeup
 1162 04f8 212F      		mov r18,r17
 1163 04fa 30E0      		ldi r19,lo8(0)
 1164 04fc 2F5F      		subi r18,lo8(-(1))
 1165 04fe 3F4F      		sbci r19,hi8(-(1))
 1166 0500 482F      		mov r20,r24
 1167 0502 50E0      		ldi r21,lo8(0)
 1168 0504 2417      		cp r18,r20
 1169 0506 3507      		cpc r19,r21
 1170 0508 04F4      		brge .L45
 426:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 1172               	.LM130:
 1173 050a 812F      		mov r24,r17
 1174 050c 8E5F      		subi r24,lo8(-(2))
 427:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 1176               	.LM131:
 1177 050e 8093 0000 		sts _nrk_prev_timer_val,r24
 428:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 1179               	.LM132:
 1180 0512 0E94 0000 		call _nrk_set_next_wakeup
 1181               	.L45:
 431:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 1183               	.LM133:
 1184 0516 0E94 0000 		call nrk_int_enable
 433:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 1186               	.LM134:
 1187 051a 0E94 0000 		call _nrk_wait_for_scheduler
 435:..//src/kernel/source/nrk_task.c **** }
 1189               	.LM135:
 1190 051e 81E0      		ldi r24,lo8(1)
 1191               	/* epilogue start */
 1192 0520 DF91      		pop r29
 1193 0522 CF91      		pop r28
 1194 0524 1F91      		pop r17
 1195 0526 0895      		ret
 1197               	.Lscope10:
 1199               		.stabd	78,0,0
 1202               	.global	nrk_wait_ticks
 1204               	nrk_wait_ticks:
 1205               		.stabd	46,0,0
 382:..//src/kernel/source/nrk_task.c **** {
 1207               	.LM136:
 1208               	.LFBB11:
 1209 0528 EF92      		push r14
 1210 052a FF92      		push r15
 1211 052c 0F93      		push r16
 1212 052e 1F93      		push r17
 1213 0530 DF93      		push r29
 1214 0532 CF93      		push r28
 1215 0534 0F92      		push __tmp_reg__
 1216 0536 CDB7      		in r28,__SP_L__
 1217 0538 DEB7      		in r29,__SP_H__
 1218               	/* prologue: function */
 1219               	/* frame size = 1 */
 1220               	/* stack size = 7 */
 1221               	.L__stack_usage = 7
 1222 053a 8C01      		movw r16,r24
 384:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 1224               	.LM137:
 1225 053c 0E94 0000 		call nrk_int_disable
 385:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 1227               	.LM138:
 1228 0540 E091 0000 		lds r30,nrk_cur_task_TCB
 1229 0544 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1230 0548 81E0      		ldi r24,lo8(1)
 1231 054a 8583      		std Z+5,r24
 386:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 1233               	.LM139:
 1234 054c 0E94 0000 		call _nrk_os_timer_get
 387:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = ticks + timer;
 1236               	.LM140:
 1237 0550 E091 0000 		lds r30,nrk_cur_task_TCB
 1238 0554 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1239 0558 E82E      		mov r14,r24
 1240 055a FF24      		clr r15
 1241 055c 0E0D      		add r16,r14
 1242 055e 1F1D      		adc r17,r15
 1243 0560 168B      		std Z+22,r17
 1244 0562 058B      		std Z+21,r16
 389:..//src/kernel/source/nrk_task.c **** 	if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 1246               	.LM141:
 1247 0564 883F      		cpi r24,lo8(-8)
 1248 0566 00F4      		brsh .L47
 390:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1250               	.LM142:
 1251 0568 8983      		std Y+1,r24
 1252 056a 0E94 0000 		call _nrk_get_next_wakeup
 1253 056e 0894      		sec
 1254 0570 E11C      		adc r14,__zero_reg__
 1255 0572 F11C      		adc r15,__zero_reg__
 1256 0574 282F      		mov r18,r24
 1257 0576 30E0      		ldi r19,lo8(0)
 1258 0578 9981      		ldd r25,Y+1
 1259 057a E216      		cp r14,r18
 1260 057c F306      		cpc r15,r19
 1261 057e 04F4      		brge .L47
 392:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 1263               	.LM143:
 1264 0580 892F      		mov r24,r25
 1265 0582 8E5F      		subi r24,lo8(-(2))
 393:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 1267               	.LM144:
 1268 0584 8093 0000 		sts _nrk_prev_timer_val,r24
 394:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 1270               	.LM145:
 1271 0588 0E94 0000 		call _nrk_set_next_wakeup
 1272               	.L47:
 397:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 1274               	.LM146:
 1275 058c 0E94 0000 		call nrk_int_enable
 399:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 1277               	.LM147:
 1278 0590 0E94 0000 		call _nrk_wait_for_scheduler
 401:..//src/kernel/source/nrk_task.c **** }
 1280               	.LM148:
 1281 0594 81E0      		ldi r24,lo8(1)
 1282               	/* epilogue start */
 1283 0596 0F90      		pop __tmp_reg__
 1284 0598 CF91      		pop r28
 1285 059a DF91      		pop r29
 1286 059c 1F91      		pop r17
 1287 059e 0F91      		pop r16
 1288 05a0 FF90      		pop r15
 1289 05a2 EF90      		pop r14
 1290 05a4 0895      		ret
 1292               	.Lscope11:
 1294               		.stabd	78,0,0
 1297               	.global	nrk_wait_until_next_n_periods
 1299               	nrk_wait_until_next_n_periods:
 1300               		.stabd	46,0,0
 344:..//src/kernel/source/nrk_task.c **** {
 1302               	.LM149:
 1303               	.LFBB12:
 1304 05a6 1F93      		push r17
 1305 05a8 CF93      		push r28
 1306 05aa DF93      		push r29
 1307               	/* prologue: function */
 1308               	/* frame size = 0 */
 1309               	/* stack size = 3 */
 1310               	.L__stack_usage = 3
 1311 05ac EC01      		movw r28,r24
 347:..//src/kernel/source/nrk_task.c **** 	nrk_stack_check ();
 1313               	.LM150:
 1314 05ae 0E94 0000 		call nrk_stack_check
 349:..//src/kernel/source/nrk_task.c **** 	if (p == 0)
 1316               	.LM151:
 1317 05b2 2097      		sbiw r28,0
 1318 05b4 01F4      		brne .L49
 350:..//src/kernel/source/nrk_task.c **** 		p = 1;
 1320               	.LM152:
 1321 05b6 C1E0      		ldi r28,lo8(1)
 1322 05b8 D0E0      		ldi r29,hi8(1)
 1323               	.L49:
 352:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 1325               	.LM153:
 1326 05ba 0E94 0000 		call nrk_int_disable
 353:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 1328               	.LM154:
 1329 05be E091 0000 		lds r30,nrk_cur_task_TCB
 1330 05c2 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1331 05c6 81E0      		ldi r24,lo8(1)
 1332 05c8 8583      		std Z+5,r24
 354:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->num_periods = p;
 1334               	.LM155:
 1335 05ca D0A3      		std Z+32,r29
 1336 05cc C78F      		std Z+31,r28
 355:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 1338               	.LM156:
 1339 05ce 0E94 0000 		call _nrk_os_timer_get
 1340 05d2 182F      		mov r17,r24
 360:..//src/kernel/source/nrk_task.c **** 	if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
 1342               	.LM157:
 1343 05d4 883F      		cpi r24,lo8(-8)
 1344 05d6 00F4      		brsh .L50
 361:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1346               	.LM158:
 1347 05d8 0E94 0000 		call _nrk_get_next_wakeup
 1348 05dc 212F      		mov r18,r17
 1349 05de 30E0      		ldi r19,lo8(0)
 1350 05e0 2F5F      		subi r18,lo8(-(1))
 1351 05e2 3F4F      		sbci r19,hi8(-(1))
 1352 05e4 482F      		mov r20,r24
 1353 05e6 50E0      		ldi r21,lo8(0)
 1354 05e8 2417      		cp r18,r20
 1355 05ea 3507      		cpc r19,r21
 1356 05ec 04F4      		brge .L50
 363:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 1358               	.LM159:
 1359 05ee 812F      		mov r24,r17
 1360 05f0 8E5F      		subi r24,lo8(-(2))
 364:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 1362               	.LM160:
 1363 05f2 8093 0000 		sts _nrk_prev_timer_val,r24
 365:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
 1365               	.LM161:
 1366 05f6 0E94 0000 		call _nrk_set_next_wakeup
 1367               	.L50:
 368:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 1369               	.LM162:
 1370 05fa 0E94 0000 		call nrk_int_enable
 369:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 1372               	.LM163:
 1373 05fe 0E94 0000 		call _nrk_wait_for_scheduler
 371:..//src/kernel/source/nrk_task.c **** }
 1375               	.LM164:
 1376 0602 81E0      		ldi r24,lo8(1)
 1377               	/* epilogue start */
 1378 0604 DF91      		pop r29
 1379 0606 CF91      		pop r28
 1380 0608 1F91      		pop r17
 1381 060a 0895      		ret
 1383               	.Lscope12:
 1385               		.stabd	78,0,0
 1387               	.global	nrk_wait_until_next_period
 1389               	nrk_wait_until_next_period:
 1390               		.stabd	46,0,0
 318:..//src/kernel/source/nrk_task.c **** {
 1392               	.LM165:
 1393               	.LFBB13:
 1394 060c 1F93      		push r17
 1395               	/* prologue: function */
 1396               	/* frame size = 0 */
 1397               	/* stack size = 1 */
 1398               	.L__stack_usage = 1
 321:..//src/kernel/source/nrk_task.c **** 	nrk_stack_check ();
 1400               	.LM166:
 1401 060e 0E94 0000 		call nrk_stack_check
 323:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 1403               	.LM167:
 1404 0612 0E94 0000 		call nrk_int_disable
 324:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->num_periods = 1;
 1406               	.LM168:
 1407 0616 E091 0000 		lds r30,nrk_cur_task_TCB
 1408 061a F091 0000 		lds r31,nrk_cur_task_TCB+1
 1409 061e 81E0      		ldi r24,lo8(1)
 1410 0620 90E0      		ldi r25,hi8(1)
 1411 0622 90A3      		std Z+32,r25
 1412 0624 878F      		std Z+31,r24
 325:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 1414               	.LM169:
 1415 0626 81E0      		ldi r24,lo8(1)
 1416 0628 8583      		std Z+5,r24
 326:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 1418               	.LM170:
 1419 062a 0E94 0000 		call _nrk_os_timer_get
 1420 062e 182F      		mov r17,r24
 330:..//src/kernel/source/nrk_task.c **** 	if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 1422               	.LM171:
 1423 0630 883F      		cpi r24,lo8(-8)
 1424 0632 00F4      		brsh .L53
 331:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1426               	.LM172:
 1427 0634 0E94 0000 		call _nrk_get_next_wakeup
 1428 0638 212F      		mov r18,r17
 1429 063a 30E0      		ldi r19,lo8(0)
 1430 063c 2F5F      		subi r18,lo8(-(1))
 1431 063e 3F4F      		sbci r19,hi8(-(1))
 1432 0640 482F      		mov r20,r24
 1433 0642 50E0      		ldi r21,lo8(0)
 1434 0644 2417      		cp r18,r20
 1435 0646 3507      		cpc r19,r21
 1436 0648 04F4      		brge .L53
 333:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 1438               	.LM173:
 1439 064a 812F      		mov r24,r17
 1440 064c 8E5F      		subi r24,lo8(-(2))
 334:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special c
 1442               	.LM174:
 1443 064e 8093 0000 		sts _nrk_prev_timer_val,r24
 335:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
 1445               	.LM175:
 1446 0652 0E94 0000 		call _nrk_set_next_wakeup
 1447               	.L53:
 338:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 1449               	.LM176:
 1450 0656 0E94 0000 		call nrk_int_enable
 339:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 1452               	.LM177:
 1453 065a 0E94 0000 		call _nrk_wait_for_scheduler
 341:..//src/kernel/source/nrk_task.c **** }
 1455               	.LM178:
 1456 065e 81E0      		ldi r24,lo8(1)
 1457               	/* epilogue start */
 1458 0660 1F91      		pop r17
 1459 0662 0895      		ret
 1461               	.Lscope13:
 1463               		.stabd	78,0,0
 1465               	.global	nrk_terminate_task
 1467               	nrk_terminate_task:
 1468               		.stabd	46,0,0
 308:..//src/kernel/source/nrk_task.c **** {
 1470               	.LM179:
 1471               	.LFBB14:
 1472               	/* prologue: function */
 1473               	/* frame size = 0 */
 1474               	/* stack size = 0 */
 1475               	.L__stack_usage = 0
 309:..//src/kernel/source/nrk_task.c **** 	nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
 1477               	.LM180:
 1478 0664 E091 0000 		lds r30,nrk_cur_task_TCB
 1479 0668 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1480 066c 8085      		ldd r24,Z+8
 1481 066e 0E94 0000 		call nrk_rem_from_readyQ
 310:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->task_state = FINISHED;
 1483               	.LM181:
 1484 0672 E091 0000 		lds r30,nrk_cur_task_TCB
 1485 0676 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1486 067a 84E0      		ldi r24,lo8(4)
 1487 067c 8187      		std Z+9,r24
 313:..//src/kernel/source/nrk_task.c **** 	nrk_wait_until_next_period ();
 1489               	.LM182:
 1490 067e 0E94 0000 		call nrk_wait_until_next_period
 315:..//src/kernel/source/nrk_task.c **** }
 1492               	.LM183:
 1493 0682 81E0      		ldi r24,lo8(1)
 1494               	/* epilogue start */
 1495 0684 0895      		ret
 1497               	.Lscope14:
 1499               		.stabd	78,0,0
 1502               	.global	nrk_wait_until
 1504               	nrk_wait_until:
 1505               		.stabd	46,0,0
 540:..//src/kernel/source/nrk_task.c **** 
 541:..//src/kernel/source/nrk_task.c **** 
 542:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait_until (nrk_time_t t)
 543:..//src/kernel/source/nrk_task.c **** {
 1507               	.LM184:
 1508               	.LFBB15:
 1509 0686 8F92      		push r8
 1510 0688 9F92      		push r9
 1511 068a AF92      		push r10
 1512 068c BF92      		push r11
 1513 068e CF92      		push r12
 1514 0690 DF92      		push r13
 1515 0692 EF92      		push r14
 1516 0694 FF92      		push r15
 1517 0696 0F93      		push r16
 1518 0698 1F93      		push r17
 1519 069a DF93      		push r29
 1520 069c CF93      		push r28
 1521 069e CDB7      		in r28,__SP_L__
 1522 06a0 DEB7      		in r29,__SP_H__
 1523 06a2 6097      		sbiw r28,16
 1524 06a4 0FB6      		in __tmp_reg__,__SREG__
 1525 06a6 F894      		cli
 1526 06a8 DEBF      		out __SP_H__,r29
 1527 06aa 0FBE      		out __SREG__,__tmp_reg__
 1528 06ac CDBF      		out __SP_L__,r28
 1529               	/* prologue: function */
 1530               	/* frame size = 16 */
 1531               	/* stack size = 28 */
 1532               	.L__stack_usage = 28
 1533 06ae 2987      		std Y+9,r18
 1534 06b0 3A87      		std Y+10,r19
 1535 06b2 4B87      		std Y+11,r20
 1536 06b4 5C87      		std Y+12,r21
 1537 06b6 6D87      		std Y+13,r22
 1538 06b8 7E87      		std Y+14,r23
 1539 06ba 8F87      		std Y+15,r24
 1540 06bc 988B      		std Y+16,r25
 544:..//src/kernel/source/nrk_task.c **** 	nrk_time_t ct;
 545:..//src/kernel/source/nrk_task.c **** 	int8_t v;
 546:..//src/kernel/source/nrk_task.c **** 	//    uint8_t c;
 547:..//src/kernel/source/nrk_task.c **** 
 548:..//src/kernel/source/nrk_task.c **** 	//c = _nrk_os_timer_get ();
 549:..//src/kernel/source/nrk_task.c **** 	//do{
 550:..//src/kernel/source/nrk_task.c **** 	//}while(_nrk_os_timer_get()==c);
 551:..//src/kernel/source/nrk_task.c **** 
 552:..//src/kernel/source/nrk_task.c **** 	//ttt=c+1;
 553:..//src/kernel/source/nrk_task.c **** 	nrk_time_get (&ct);
 1542               	.LM185:
 1543 06be CE01      		movw r24,r28
 1544 06c0 0196      		adiw r24,1
 1545 06c2 0E94 0000 		call nrk_time_get
 554:..//src/kernel/source/nrk_task.c **** 
 555:..//src/kernel/source/nrk_task.c **** 	v = nrk_time_sub (&t, t, ct);
 1547               	.LM186:
 1548 06c6 CE01      		movw r24,r28
 1549 06c8 0996      		adiw r24,9
 1550 06ca 0985      		ldd r16,Y+9
 1551 06cc 1A85      		ldd r17,Y+10
 1552 06ce 2B85      		ldd r18,Y+11
 1553 06d0 3C85      		ldd r19,Y+12
 1554 06d2 4D85      		ldd r20,Y+13
 1555 06d4 5E85      		ldd r21,Y+14
 1556 06d6 6F85      		ldd r22,Y+15
 1557 06d8 7889      		ldd r23,Y+16
 1558 06da 8980      		ldd r8,Y+1
 1559 06dc 9A80      		ldd r9,Y+2
 1560 06de AB80      		ldd r10,Y+3
 1561 06e0 BC80      		ldd r11,Y+4
 1562 06e2 CD80      		ldd r12,Y+5
 1563 06e4 DE80      		ldd r13,Y+6
 1564 06e6 EF80      		ldd r14,Y+7
 1565 06e8 F884      		ldd r15,Y+8
 1566 06ea 0E94 0000 		call nrk_time_sub
 556:..//src/kernel/source/nrk_task.c **** 	//nrk_time_compact_nanos(&t);
 557:..//src/kernel/source/nrk_task.c **** 	if (v == NRK_ERROR)
 1568               	.LM187:
 1569 06ee 8F3F      		cpi r24,lo8(-1)
 1570 06f0 01F0      		breq .L57
 558:..//src/kernel/source/nrk_task.c **** 	{
 559:..//src/kernel/source/nrk_task.c **** 		return NRK_ERROR;
 560:..//src/kernel/source/nrk_task.c **** 	}
 561:..//src/kernel/source/nrk_task.c **** 	//if(t.secs<ct.secs) return 0;
 562:..//src/kernel/source/nrk_task.c **** 	//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;
 563:..//src/kernel/source/nrk_task.c **** 
 564:..//src/kernel/source/nrk_task.c **** 	//t.secs-=ct.secs;
 565:..//src/kernel/source/nrk_task.c **** 	//t.nano_secs-=ct.nano_secs;
 566:..//src/kernel/source/nrk_task.c **** 	//
 567:..//src/kernel/source/nrk_task.c **** 	nrk_wait (t);
 1572               	.LM188:
 1573 06f2 2985      		ldd r18,Y+9
 1574 06f4 3A85      		ldd r19,Y+10
 1575 06f6 4B85      		ldd r20,Y+11
 1576 06f8 5C85      		ldd r21,Y+12
 1577 06fa 6D85      		ldd r22,Y+13
 1578 06fc 7E85      		ldd r23,Y+14
 1579 06fe 8F85      		ldd r24,Y+15
 1580 0700 9889      		ldd r25,Y+16
 1581 0702 0E94 0000 		call nrk_wait
 568:..//src/kernel/source/nrk_task.c **** 
 569:..//src/kernel/source/nrk_task.c **** 	return NRK_OK;
 1583               	.LM189:
 1584 0706 81E0      		ldi r24,lo8(1)
 1585 0708 00C0      		rjmp .L56
 1586               	.L57:
 559:..//src/kernel/source/nrk_task.c **** 		return NRK_ERROR;
 1588               	.LM190:
 1589 070a 8FEF      		ldi r24,lo8(-1)
 1590               	.L56:
 1591               	/* epilogue start */
 570:..//src/kernel/source/nrk_task.c **** }
 1593               	.LM191:
 1594 070c 6096      		adiw r28,16
 1595 070e 0FB6      		in __tmp_reg__,__SREG__
 1596 0710 F894      		cli
 1597 0712 DEBF      		out __SP_H__,r29
 1598 0714 0FBE      		out __SREG__,__tmp_reg__
 1599 0716 CDBF      		out __SP_L__,r28
 1600 0718 CF91      		pop r28
 1601 071a DF91      		pop r29
 1602 071c 1F91      		pop r17
 1603 071e 0F91      		pop r16
 1604 0720 FF90      		pop r15
 1605 0722 EF90      		pop r14
 1606 0724 DF90      		pop r13
 1607 0726 CF90      		pop r12
 1608 0728 BF90      		pop r11
 1609 072a AF90      		pop r10
 1610 072c 9F90      		pop r9
 1611 072e 8F90      		pop r8
 1612 0730 0895      		ret
 1617               	.Lscope15:
 1619               		.stabd	78,0,0
 1621               	.global	nrk_get_pid
 1623               	nrk_get_pid:
 1624               		.stabd	46,0,0
 571:..//src/kernel/source/nrk_task.c **** 
 572:..//src/kernel/source/nrk_task.c **** 
 573:..//src/kernel/source/nrk_task.c **** uint8_t nrk_get_pid ()
 574:..//src/kernel/source/nrk_task.c **** {
 1626               	.LM192:
 1627               	.LFBB16:
 1628               	/* prologue: function */
 1629               	/* frame size = 0 */
 1630               	/* stack size = 0 */
 1631               	.L__stack_usage = 0
 575:..//src/kernel/source/nrk_task.c **** 	return nrk_cur_task_TCB->task_ID;
 1633               	.LM193:
 1634 0732 E091 0000 		lds r30,nrk_cur_task_TCB
 1635 0736 F091 0000 		lds r31,nrk_cur_task_TCB+1
 576:..//src/kernel/source/nrk_task.c **** }
 1637               	.LM194:
 1638 073a 8085      		ldd r24,Z+8
 1639               	/* epilogue start */
 1640 073c 0895      		ret
 1642               	.Lscope16:
 1644               		.stabd	78,0,0
 1645               		.comm _nrk_signal_list,4,1
 1646               		.comm nrk_idle_task_stk,128,1
 1647               		.comm nrk_kernel_stk,128,1
 1648               		.comm nrk_kernel_stk_ptr,2,1
 1649               		.comm nrk_task_TCB,170,1
 1650               		.comm nrk_wakeup_signal,1,1
 1651               		.comm _nrk_readyQ,30,1
 1652               		.comm _free_node,2,1
 1653               		.comm _head_node,2,1
 1654               		.comm nrk_cur_task_prio,1,1
 1655               		.comm nrk_cur_task_TCB,2,1
 1656               		.comm nrk_high_ready_prio,1,1
 1657               		.comm nrk_high_ready_TCB,2,1
 1658               		.comm _nrk_resource_cnt,1,1
 1659               		.comm nrk_system_time,8,1
 1660               		.comm _nrk_prev_timer_val,1,1
 1661               		.comm _nrk_time_trigger,1,1
 1662               		.comm app_timer0_callback,2,1
 1663               		.comm app_timer0_prescale,1,1
 1664               		.comm _nrk_cpu_state,1,1
 1665               		.comm next_next_wakeup,2,1
 1666               		.comm error_task,1,1
 1667               		.comm error_num,1,1
 1668               		.comm nrk_sem_list,15,1
 1669               		.comm systemceiling,1,1
 1670               		.section	.progmem.data,"a",@progbits
 1673               	__c.2136:
 1674 0000 0A0D 00   		.string	"\n\r"
 1677               	__c.2131:
 1678 0003 6E72 6B5F 		.string	"nrk_queue: "
 1678      7175 6575 
 1678      653A 2000 
 1704               		.text
 1706               	.Letext0:
 1707               	.global __do_copy_data
 1708               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_task.c
     /tmp/ccT93C59.s:2      *ABS*:0000003f __SREG__
     /tmp/ccT93C59.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccT93C59.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccT93C59.s:5      *ABS*:00000034 __CCP__
     /tmp/ccT93C59.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccT93C59.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccT93C59.s:140    .text:00000000 nrk_get_high_ready_task_ID
                            *COM*:00000002 _head_node
     /tmp/ccT93C59.s:169    .text:0000000c nrk_print_readyQ
     /tmp/ccT93C59.s:1677   .progmem.data:00000003 __c.2131
                            *COM*:000000aa nrk_task_TCB
     /tmp/ccT93C59.s:1673   .progmem.data:00000000 __c.2136
     /tmp/ccT93C59.s:266    .text:0000007e nrk_add_to_readyQ
                            *COM*:00000002 _free_node
     /tmp/ccT93C59.s:541    .text:000001fc nrk_rem_from_readyQ
     /tmp/ccT93C59.s:671    .text:0000029c nrk_activate_task
     /tmp/ccT93C59.s:807    .text:0000034e nrk_set_next_wakeup
                            *COM*:00000002 nrk_cur_task_TCB
     /tmp/ccT93C59.s:897    .text:000003bc _nrk_wait_for_scheduler
     /tmp/ccT93C59.s:929    .text:000003d0 nrk_wait
                            *COM*:00000001 _nrk_prev_timer_val
     /tmp/ccT93C59.s:1052   .text:00000480 nrk_wait_until_nw
     /tmp/ccT93C59.s:1125   .text:000004ce nrk_wait_until_ticks
     /tmp/ccT93C59.s:1204   .text:00000528 nrk_wait_ticks
     /tmp/ccT93C59.s:1299   .text:000005a6 nrk_wait_until_next_n_periods
     /tmp/ccT93C59.s:1389   .text:0000060c nrk_wait_until_next_period
     /tmp/ccT93C59.s:1467   .text:00000664 nrk_terminate_task
     /tmp/ccT93C59.s:1504   .text:00000686 nrk_wait_until
     /tmp/ccT93C59.s:1623   .text:00000732 nrk_get_pid
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000080 nrk_kernel_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:0000001e _nrk_readyQ
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:00000008 nrk_system_time
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:0000000f nrk_sem_list
                            *COM*:00000001 systemceiling

UNDEFINED SYMBOLS
nrk_kprintf
printf
puts
nrk_task_stk_init
nrk_TCB_init
nrk_int_disable
_nrk_os_timer_get
_nrk_time_to_ticks
nrk_int_enable
nrk_idle
nrk_stack_check
_nrk_get_next_wakeup
_nrk_set_next_wakeup
nrk_time_get
nrk_time_sub
__do_copy_data
__do_clear_bss
