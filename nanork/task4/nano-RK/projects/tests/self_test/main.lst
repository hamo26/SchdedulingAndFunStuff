   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 302               		.data
 303               	.LC0:
 304 0000 7478 5F74 		.string	"tx_task PID=%d\r\n"
 304      6173 6B20 
 304      5049 443D 
 304      2564 0D0A 
 304      00
 305               	.LC1:
 306 0011 5468 6973 		.string	"This is a test %d"
 306      2069 7320 
 306      6120 7465 
 306      7374 2025 
 306      6400 
 307               	.LC2:
 308 0023 2564 0D0A 		.string	"%d\r\n"
 308      00
 309               	.LC3:
 310 0028 2575 2025 		.string	"%u %u %u\r\n\r\n"
 310      7520 2575 
 310      0D0A 0D0A 
 310      00
 311               		.text
 313               	.global	tx_task
 315               	tx_task:
 316               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** 
  25:main.c        **** #include <nrk.h>
  26:main.c        **** #include <include.h>
  27:main.c        **** #include <ulib.h>
  28:main.c        **** #include <stdio.h>
  29:main.c        **** #include <avr/sleep.h>
  30:main.c        **** #include <hal.h>
  31:main.c        **** #include <bmac.h>
  32:main.c        **** #include <nrk_defs.h>
  33:main.c        **** #include <nrk_error.h>
  34:main.c        **** 
  35:main.c        **** 
  36:main.c        **** nrk_task_type RX_TASK;
  37:main.c        **** NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
  38:main.c        **** void rx_task (void);
  39:main.c        **** 
  40:main.c        **** 
  41:main.c        **** nrk_task_type TX_TASK;
  42:main.c        **** NRK_STK tx_task_stack[NRK_APP_STACKSIZE];
  43:main.c        **** void tx_task (void);
  44:main.c        **** 
  45:main.c        **** void nrk_create_taskset ();
  46:main.c        **** 
  47:main.c        **** uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
  48:main.c        **** uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
  49:main.c        **** uint8_t rx_data_ok;
  50:main.c        **** uint8_t tx_data_ok;
  51:main.c        **** int8_t rx_rssi;
  52:main.c        **** 
  53:main.c        **** int main ()
  54:main.c        **** {
  55:main.c        ****   uint16_t div;
  56:main.c        ****   nrk_setup_ports ();
  57:main.c        ****   nrk_setup_uart (UART_BAUDRATE_115K2);
  58:main.c        **** 
  59:main.c        ****   nrk_init ();
  60:main.c        **** 
  61:main.c        ****   nrk_led_clr (0);
  62:main.c        ****   nrk_led_clr (1);
  63:main.c        ****   nrk_led_clr (2);
  64:main.c        ****   nrk_led_clr (3);
  65:main.c        **** 
  66:main.c        ****   nrk_time_set (0, 0);
  67:main.c        **** 
  68:main.c        ****   bmac_task_config ();
  69:main.c        **** 
  70:main.c        ****   nrk_create_taskset ();
  71:main.c        ****   nrk_start ();
  72:main.c        **** 
  73:main.c        ****   return 0;
  74:main.c        **** }
  75:main.c        **** 
  76:main.c        **** void rx_task ()
  77:main.c        **** {
  78:main.c        ****   uint8_t i, len;
  79:main.c        ****   int8_t rssi, val;
  80:main.c        ****   uint8_t *local_rx_buf;
  81:main.c        ****   nrk_time_t check_period;
  82:main.c        ****   printf ("rx_task PID=%d\r\n", nrk_get_pid ());
  83:main.c        **** 
  84:main.c        ****   // init bmac on channel 25 
  85:main.c        ****   bmac_init (25);
  86:main.c        ****   rx_data_ok=0;
  87:main.c        ****   // By default the RX check rate is 100ms
  88:main.c        ****   // below shows how to change that
  89:main.c        ****   //check_period.secs=0;
  90:main.c        ****   //check_period.nano_secs=200*NANOS_PER_MS;
  91:main.c        ****   //val=bmac_set_rx_check_rate(check_period);
  92:main.c        **** 
  93:main.c        ****   // The default Clear Channel Assement RSSI threshold is -45
  94:main.c        ****   // Setting this value higher means that you will only trigger
  95:main.c        ****   // receive with a very strong signal.  Setting this lower means
  96:main.c        ****   // bmac will try to receive fainter packets.  If the value is set
  97:main.c        ****   // too high or too low performance will suffer greatly.
  98:main.c        ****   // bmac_set_cca_thresh(-45); 
  99:main.c        **** 
 100:main.c        **** 
 101:main.c        ****   if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
 102:main.c        ****   // This sets the next RX buffer.
 103:main.c        ****   // This can be called at anytime before releaseing the packet
 104:main.c        ****   // if you wish to do a zero-copy buffer switch
 105:main.c        ****   bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
 106:main.c        **** 
 107:main.c        ****   while (1) {
 108:main.c        ****     // Wait until an RX packet is received
 109:main.c        ****     val = bmac_wait_until_rx_pkt ();
 110:main.c        ****     // Get the RX packet 
 111:main.c        ****     nrk_led_set (ORANGE_LED);
 112:main.c        ****     local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
 113:main.c        ****     rx_data_ok=1;
 114:main.c        ****     rx_rssi=rssi;
 115:main.c        ****     //printf ("Got RX packet len=%d RSSI=%d [", len, rssi);
 116:main.c        ****     //for (i = 0; i < len; i++)
 117:main.c        ****     //  printf ("%c", rx_buf[i]);
 118:main.c        ****     //printf ("]\r\n");
 119:main.c        ****     nrk_led_clr (ORANGE_LED);
 120:main.c        ****     // Release the RX buffer so future packets can arrive 
 121:main.c        ****     bmac_rx_pkt_release ();
 122:main.c        ****   }
 123:main.c        **** 
 124:main.c        **** }
 125:main.c        **** 
 126:main.c        **** 
 127:main.c        **** void tx_task ()
 128:main.c        **** {
 318               	.LM0:
 319               	.LFBB1:
 320 0000 2F92      		push r2
 321 0002 3F92      		push r3
 322 0004 4F92      		push r4
 323 0006 5F92      		push r5
 324 0008 6F92      		push r6
 325 000a 7F92      		push r7
 326 000c 8F92      		push r8
 327 000e 9F92      		push r9
 328 0010 AF92      		push r10
 329 0012 BF92      		push r11
 330 0014 CF92      		push r12
 331 0016 DF92      		push r13
 332 0018 EF92      		push r14
 333 001a FF92      		push r15
 334 001c 0F93      		push r16
 335 001e 1F93      		push r17
 336 0020 DF93      		push r29
 337 0022 CF93      		push r28
 338 0024 00D0      		rcall .
 339 0026 00D0      		rcall .
 340 0028 CDB7      		in r28,__SP_L__
 341 002a DEB7      		in r29,__SP_H__
 342               	/* prologue: function */
 343               	/* frame size = 4 */
 344               	/* stack size = 22 */
 345               	.L__stack_usage = 22
 129:main.c        ****   uint8_t j, i, val, len, cnt;
 130:main.c        ****   volatile uint8_t start;
 131:main.c        ****   uint16_t ticks,ticks_min,ticks_max;
 132:main.c        ****   uint16_t iterations;
 133:main.c        ****   uint16_t nrk_max_sleep_wakeup_time;
 134:main.c        ****   nrk_sig_t tx_done_signal;
 135:main.c        ****   nrk_sig_mask_t ret;
 136:main.c        **** 
 137:main.c        ****   iterations=0;
 138:main.c        ****   ticks_min=-1;
 139:main.c        ****   ticks_max=0;
 140:main.c        ****   tx_data_ok=0;
 347               	.LM1:
 348 002c 1092 0000 		sts tx_data_ok,__zero_reg__
 141:main.c        ****   printf ("tx_task PID=%d\r\n", nrk_get_pid ());
 350               	.LM2:
 351 0030 0E94 0000 		call nrk_get_pid
 352 0034 00D0      		rcall .
 353 0036 00D0      		rcall .
 354 0038 EDB7      		in r30,__SP_L__
 355 003a FEB7      		in r31,__SP_H__
 356 003c 3196      		adiw r30,1
 357 003e 20E0      		ldi r18,lo8(.LC0)
 358 0040 30E0      		ldi r19,hi8(.LC0)
 359 0042 ADB7      		in r26,__SP_L__
 360 0044 BEB7      		in r27,__SP_H__
 361 0046 1296      		adiw r26,1+1
 362 0048 3C93      		st X,r19
 363 004a 2E93      		st -X,r18
 364 004c 1197      		sbiw r26,1
 365 004e 8283      		std Z+2,r24
 366 0050 1382      		std Z+3,__zero_reg__
 367 0052 0E94 0000 		call printf
 142:main.c        **** 
 143:main.c        ****   // Wait until the tx_task starts up bmac
 144:main.c        ****   // This should be called by all tasks using bmac that
 145:main.c        ****   // do not call bmac_init()...
 146:main.c        ****   while (!bmac_started ())
 369               	.LM3:
 370 0056 0F90      		pop __tmp_reg__
 371 0058 0F90      		pop __tmp_reg__
 372 005a 0F90      		pop __tmp_reg__
 373 005c 0F90      		pop __tmp_reg__
 374 005e 00C0      		rjmp .L2
 375               	.L3:
 147:main.c        ****     nrk_wait_until_next_period ();
 377               	.LM4:
 378 0060 0E94 0000 		call nrk_wait_until_next_period
 379               	.L2:
 146:main.c        ****   while (!bmac_started ())
 381               	.LM5:
 382 0064 0E94 0000 		call bmac_started
 383 0068 8823      		tst r24
 384 006a 01F0      		breq .L3
 148:main.c        **** 
 149:main.c        ****   // Get and register the tx_done_signal if you want to
 150:main.c        ****   // do non-blocking transmits
 151:main.c        ****   tx_done_signal = bmac_get_tx_done_signal ();
 386               	.LM6:
 387 006c 0E94 0000 		call bmac_get_tx_done_signal
 388 0070 C82E      		mov r12,r24
 152:main.c        ****   nrk_signal_register (tx_done_signal);
 390               	.LM7:
 391 0072 0E94 0000 		call nrk_signal_register
 392               	.LBB2:
 153:main.c        **** 
 154:main.c        ****   cnt = 0;
 155:main.c        ****   while (1) {
 156:main.c        ****     // Build a TX packet
 157:main.c        ****     sprintf (tx_buf, "This is a test %d", cnt);
 158:main.c        ****     cnt++;
 159:main.c        ****     nrk_led_set (GREEN_LED);
 160:main.c        **** 
 161:main.c        ****     // For blocking transmits, use the following function call.
 162:main.c        ****     // For this there is no need to register  
 163:main.c        ****     // val=bmac_tx_packet(tx_buf, strlen(tx_buf));
 164:main.c        **** 
 165:main.c        ****     // This function shows how to transmit packets in a
 166:main.c        ****     // non-blocking manner  
 167:main.c        ****     val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
 168:main.c        ****     // This functions waits on the tx_done_signal
 169:main.c        ****     ret = nrk_event_wait (SIG(tx_done_signal));
 394               	.LM8:
 395 0076 41E0      		ldi r20,lo8(1)
 396 0078 E42E      		mov r14,r20
 397 007a F12C      		mov r15,__zero_reg__
 398 007c 012D      		mov r16,__zero_reg__
 399 007e 112D      		mov r17,__zero_reg__
 400 0080 00C0      		rjmp 2f
 401 0082 EE0C      	1:	lsl r14
 402 0084 FF1C      		rol r15
 403 0086 001F      		rol r16
 404 0088 111F      		rol r17
 405 008a CA94      	2:	dec r12
 406 008c 02F4      		brpl 1b
 170:main.c        **** 
 171:main.c        ****     // Just check to be sure signal is okay
 172:main.c        ****     if(ret & SIG(tx_done_signal) == 0 ) 
 408               	.LM9:
 409 008e 21E0      		ldi r18,lo8(1)
 410 0090 30E0      		ldi r19,hi8(1)
 411 0092 40E0      		ldi r20,hlo8(1)
 412 0094 50E0      		ldi r21,hhi8(1)
 413 0096 2983      		std Y+1,r18
 414 0098 3A83      		std Y+2,r19
 415 009a 4B83      		std Y+3,r20
 416 009c 5C83      		std Y+4,r21
 417 009e E114      		cp r14,__zero_reg__
 418 00a0 F104      		cpc r15,__zero_reg__
 419 00a2 0105      		cpc r16,__zero_reg__
 420 00a4 1105      		cpc r17,__zero_reg__
 421 00a6 01F0      		breq .L4
 422 00a8 1982      		std Y+1,__zero_reg__
 423 00aa 1A82      		std Y+2,__zero_reg__
 424 00ac 1B82      		std Y+3,__zero_reg__
 425 00ae 1C82      		std Y+4,__zero_reg__
 426               	.L4:
 137:main.c        ****   iterations=0;
 428               	.LM10:
 429 00b0 CC24      		clr r12
 430 00b2 DD24      		clr r13
 139:main.c        ****   ticks_max=0;
 432               	.LM11:
 433 00b4 AA24      		clr r10
 434 00b6 BB24      		clr r11
 138:main.c        ****   ticks_min=-1;
 436               	.LM12:
 437 00b8 8824      		clr r8
 438 00ba 8A94      		dec r8
 439 00bc 982C      		mov r9,r8
 157:main.c        ****     sprintf (tx_buf, "This is a test %d", cnt);
 441               	.LM13:
 442 00be 30E0      		ldi r19,lo8(tx_buf)
 443 00c0 632E      		mov r6,r19
 444 00c2 30E0      		ldi r19,hi8(tx_buf)
 445 00c4 732E      		mov r7,r19
 173:main.c        ****     	nrk_kprintf (PSTR ("TX done signal error\r\n"));
 174:main.c        ****     else tx_data_ok=1;
 175:main.c        ****     // Task gets control again after TX complete
 176:main.c        ****     //nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
 177:main.c        ****     nrk_led_clr (GREEN_LED);
 178:main.c        ****     nrk_wait_until_next_period ();
 179:main.c        **** 
 180:main.c        ****    nrk_kprintf( PSTR( "Self Test Cycle: ") );
 181:main.c        ****    printf( "%d\r\n",iterations);
 447               	.LM14:
 448 00c6 20E0      		ldi r18,lo8(.LC2)
 449 00c8 422E      		mov r4,r18
 450 00ca 20E0      		ldi r18,hi8(.LC2)
 451 00cc 522E      		mov r5,r18
 452               	.L14:
 157:main.c        ****     sprintf (tx_buf, "This is a test %d", cnt);
 454               	.LM15:
 455 00ce 00D0      		rcall .
 456 00d0 00D0      		rcall .
 457 00d2 00D0      		rcall .
 458 00d4 EDB7      		in r30,__SP_L__
 459 00d6 FEB7      		in r31,__SP_H__
 460 00d8 3196      		adiw r30,1
 461 00da ADB7      		in r26,__SP_L__
 462 00dc BEB7      		in r27,__SP_H__
 463 00de 1296      		adiw r26,1+1
 464 00e0 7C92      		st X,r7
 465 00e2 6E92      		st -X,r6
 466 00e4 1197      		sbiw r26,1
 467 00e6 90E0      		ldi r25,lo8(.LC1)
 468 00e8 292E      		mov r2,r25
 469 00ea 90E0      		ldi r25,hi8(.LC1)
 470 00ec 392E      		mov r3,r25
 471 00ee 3382      		std Z+3,r3
 472 00f0 2282      		std Z+2,r2
 473 00f2 C482      		std Z+4,r12
 474 00f4 1582      		std Z+5,__zero_reg__
 475 00f6 0E94 0000 		call sprintf
 159:main.c        ****     nrk_led_set (GREEN_LED);
 477               	.LM16:
 478 00fa 2DB7      		in r18,__SP_L__
 479 00fc 3EB7      		in r19,__SP_H__
 480 00fe 2A5F      		subi r18,lo8(-(6))
 481 0100 3F4F      		sbci r19,hi8(-(6))
 482 0102 0FB6      		in __tmp_reg__,__SREG__
 483 0104 F894      		cli
 484 0106 3EBF      		out __SP_H__,r19
 485 0108 0FBE      		out __SREG__,__tmp_reg__
 486 010a 2DBF      		out __SP_L__,r18
 487 010c 81E0      		ldi r24,lo8(1)
 488 010e 90E0      		ldi r25,hi8(1)
 489 0110 0E94 0000 		call nrk_led_set
 167:main.c        ****     val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
 491               	.LM17:
 492 0114 D301      		movw r26,r6
 493 0116 0D90      		ld __tmp_reg__,X+
 494 0118 0020      		tst __tmp_reg__
 495 011a 01F4      		brne .-6
 496 011c BD01      		movw r22,r26
 497 011e 6150      		subi r22,lo8(-(-1))
 498 0120 7040      		sbci r23,hi8(-(-1))
 499 0122 6050      		subi r22,lo8(tx_buf)
 500 0124 7040      		sbci r23,hi8(tx_buf)
 501 0126 C301      		movw r24,r6
 502 0128 0E94 0000 		call bmac_tx_pkt_nonblocking
 169:main.c        ****     ret = nrk_event_wait (SIG(tx_done_signal));
 504               	.LM18:
 505 012c C801      		movw r24,r16
 506 012e B701      		movw r22,r14
 507 0130 0E94 0000 		call nrk_event_wait
 172:main.c        ****     if(ret & SIG(tx_done_signal) == 0 ) 
 509               	.LM19:
 510 0134 2981      		ldd r18,Y+1
 511 0136 3A81      		ldd r19,Y+2
 512 0138 4B81      		ldd r20,Y+3
 513 013a 5C81      		ldd r21,Y+4
 514 013c 6223      		and r22,r18
 515 013e 7323      		and r23,r19
 516 0140 8423      		and r24,r20
 517 0142 9523      		and r25,r21
 518 0144 6115      		cp r22,__zero_reg__
 519 0146 7105      		cpc r23,__zero_reg__
 520 0148 8105      		cpc r24,__zero_reg__
 521 014a 9105      		cpc r25,__zero_reg__
 522 014c 01F0      		breq .L5
 173:main.c        ****     	nrk_kprintf (PSTR ("TX done signal error\r\n"));
 524               	.LM20:
 525 014e 80E0      		ldi r24,lo8(__c.2885)
 526 0150 90E0      		ldi r25,hi8(__c.2885)
 527 0152 0E94 0000 		call nrk_kprintf
 528 0156 00C0      		rjmp .L6
 529               	.L5:
 174:main.c        ****     else tx_data_ok=1;
 531               	.LM21:
 532 0158 31E0      		ldi r19,lo8(1)
 533 015a 3093 0000 		sts tx_data_ok,r19
 534               	.L6:
 177:main.c        ****     nrk_led_clr (GREEN_LED);
 536               	.LM22:
 537 015e 81E0      		ldi r24,lo8(1)
 538 0160 90E0      		ldi r25,hi8(1)
 539 0162 0E94 0000 		call nrk_led_clr
 178:main.c        ****     nrk_wait_until_next_period ();
 541               	.LM23:
 542 0166 0E94 0000 		call nrk_wait_until_next_period
 180:main.c        ****    nrk_kprintf( PSTR( "Self Test Cycle: ") );
 544               	.LM24:
 545 016a 80E0      		ldi r24,lo8(__c.2887)
 546 016c 90E0      		ldi r25,hi8(__c.2887)
 547 016e 0E94 0000 		call nrk_kprintf
 549               	.LM25:
 550 0172 00D0      		rcall .
 551 0174 00D0      		rcall .
 552 0176 ADB7      		in r26,__SP_L__
 553 0178 BEB7      		in r27,__SP_H__
 554 017a 1296      		adiw r26,1+1
 555 017c 5C92      		st X,r5
 556 017e 4E92      		st -X,r4
 557 0180 1197      		sbiw r26,1
 558 0182 1496      		adiw r26,3+1
 559 0184 DC92      		st X,r13
 560 0186 CE92      		st -X,r12
 561 0188 1397      		sbiw r26,3
 562 018a 0E94 0000 		call printf
 182:main.c        ****    iterations++;
 564               	.LM26:
 565 018e 0894      		sec
 566 0190 C11C      		adc r12,__zero_reg__
 567 0192 D11C      		adc r13,__zero_reg__
 183:main.c        ****    nrk_kprintf( PSTR( "TX status: ") );
 569               	.LM27:
 570 0194 0F90      		pop __tmp_reg__
 571 0196 0F90      		pop __tmp_reg__
 572 0198 0F90      		pop __tmp_reg__
 573 019a 0F90      		pop __tmp_reg__
 574 019c 80E0      		ldi r24,lo8(__c.2889)
 575 019e 90E0      		ldi r25,hi8(__c.2889)
 576 01a0 0E94 0000 		call nrk_kprintf
 184:main.c        ****    if(tx_data_ok==1) nrk_kprintf( PSTR( "OK\r\n" ));
 578               	.LM28:
 579 01a4 8091 0000 		lds r24,tx_data_ok
 580 01a8 8130      		cpi r24,lo8(1)
 581 01aa 01F4      		brne .L7
 583               	.LM29:
 584 01ac 80E0      		ldi r24,lo8(__c.2891)
 585 01ae 90E0      		ldi r25,hi8(__c.2891)
 586 01b0 00C0      		rjmp .L16
 587               	.L7:
 185:main.c        **** 	else  nrk_kprintf( PSTR( "NONE\r\n" ));
 589               	.LM30:
 590 01b2 80E0      		ldi r24,lo8(__c.2893)
 591 01b4 90E0      		ldi r25,hi8(__c.2893)
 592               	.L16:
 593 01b6 0E94 0000 		call nrk_kprintf
 186:main.c        **** 
 187:main.c        ****    nrk_kprintf( PSTR( "RX status: ") );
 595               	.LM31:
 596 01ba 80E0      		ldi r24,lo8(__c.2895)
 597 01bc 90E0      		ldi r25,hi8(__c.2895)
 598 01be 0E94 0000 		call nrk_kprintf
 188:main.c        ****    if(rx_data_ok==1) {
 600               	.LM32:
 601 01c2 8091 0000 		lds r24,rx_data_ok
 602 01c6 8130      		cpi r24,lo8(1)
 603 01c8 01F4      		brne .L9
 189:main.c        **** 		nrk_led_clr(RED_LED);
 605               	.LM33:
 606 01ca 80E0      		ldi r24,lo8(0)
 607 01cc 90E0      		ldi r25,hi8(0)
 608 01ce 0E94 0000 		call nrk_led_clr
 190:main.c        **** 		nrk_kprintf( PSTR( "OK  RSSI:" ));
 610               	.LM34:
 611 01d2 80E0      		ldi r24,lo8(__c.2897)
 612 01d4 90E0      		ldi r25,hi8(__c.2897)
 613 01d6 0E94 0000 		call nrk_kprintf
 191:main.c        **** 		printf( "%d\r\n",rx_rssi );
 615               	.LM35:
 616 01da 00D0      		rcall .
 617 01dc 00D0      		rcall .
 618 01de EDB7      		in r30,__SP_L__
 619 01e0 FEB7      		in r31,__SP_H__
 620 01e2 5282      		std Z+2,r5
 621 01e4 4182      		std Z+1,r4
 622 01e6 8091 0000 		lds r24,rx_rssi
 623 01ea 9927      		clr r25
 624 01ec 87FD      		sbrc r24,7
 625 01ee 9095      		com r25
 626 01f0 9483      		std Z+4,r25
 627 01f2 8383      		std Z+3,r24
 628 01f4 0E94 0000 		call printf
 629 01f8 0F90      		pop __tmp_reg__
 630 01fa 0F90      		pop __tmp_reg__
 631 01fc 0F90      		pop __tmp_reg__
 632 01fe 0F90      		pop __tmp_reg__
 633 0200 00C0      		rjmp .L10
 634               	.L9:
 192:main.c        **** 	}
 193:main.c        **** 	else  {
 194:main.c        **** 	nrk_led_set(RED_LED);
 636               	.LM36:
 637 0202 80E0      		ldi r24,lo8(0)
 638 0204 90E0      		ldi r25,hi8(0)
 639 0206 0E94 0000 		call nrk_led_set
 195:main.c        **** 	nrk_kprintf( PSTR( "NO PKT\r\n" ));
 641               	.LM37:
 642 020a 80E0      		ldi r24,lo8(__c.2899)
 643 020c 90E0      		ldi r25,hi8(__c.2899)
 644 020e 0E94 0000 		call nrk_kprintf
 645               	.L10:
 196:main.c        **** 	}
 197:main.c        ****    rx_data_ok=0;
 647               	.LM38:
 648 0212 1092 0000 		sts rx_data_ok,__zero_reg__
 198:main.c        ****    nrk_kprintf( PSTR( "Max wakeup time: " ));
 650               	.LM39:
 651 0216 80E0      		ldi r24,lo8(__c.2901)
 652 0218 90E0      		ldi r25,hi8(__c.2901)
 653 021a 0E94 0000 		call nrk_kprintf
 199:main.c        ****    printf( "%d\r\n",nrk_max_sleep_wakeup_time );
 655               	.LM40:
 656 021e 00D0      		rcall .
 657 0220 00D0      		rcall .
 658 0222 ADB7      		in r26,__SP_L__
 659 0224 BEB7      		in r27,__SP_H__
 660 0226 1296      		adiw r26,1+1
 661 0228 5C92      		st X,r5
 662 022a 4E92      		st -X,r4
 663 022c 1197      		sbiw r26,1
 664 022e 1496      		adiw r26,3+1
 665 0230 1C92      		st X,__zero_reg__
 666 0232 1E92      		st -X,__zero_reg__
 667 0234 1397      		sbiw r26,3
 668 0236 0E94 0000 		call printf
 200:main.c        ****    
 201:main.c        ****    nrk_wait_until_next_period ();
 670               	.LM41:
 671 023a 0F90      		pop __tmp_reg__
 672 023c 0F90      		pop __tmp_reg__
 673 023e 0F90      		pop __tmp_reg__
 674 0240 0F90      		pop __tmp_reg__
 675 0242 0E94 0000 		call nrk_wait_until_next_period
 202:main.c        ****    _nrk_set_next_wakeup(25);
 677               	.LM42:
 678 0246 89E1      		ldi r24,lo8(25)
 679 0248 90E0      		ldi r25,hi8(25)
 680 024a 0E94 0000 		call _nrk_set_next_wakeup
 203:main.c        ****    nrk_int_disable(); 
 682               	.LM43:
 683 024e 0E94 0000 		call nrk_int_disable
 204:main.c        ****    	_nrk_os_timer_reset();
 685               	.LM44:
 686 0252 0E94 0000 		call _nrk_os_timer_reset
 205:main.c        ****    	_nrk_high_speed_timer_reset(); 
 688               	.LM45:
 689 0256 0E94 0000 		call _nrk_high_speed_timer_reset
 690               	.L11:
 691               	.LBB3:
 206:main.c        ****    	do{
 207:main.c        ****    	} while((volatile)_nrk_os_timer_get()<16);
 693               	.LM46:
 694 025a 0E94 0000 		call _nrk_os_timer_get
 695 025e 8031      		cpi r24,16
 696 0260 9105      		cpc r25,__zero_reg__
 697 0262 04F0      		brlt .L11
 698               	.LBE3:
 208:main.c        ****    	ticks=_nrk_high_speed_timer_get(); 
 700               	.LM47:
 701 0264 0E94 0000 		call _nrk_high_speed_timer_get
 209:main.c        ****    	
 210:main.c        **** 	ticks=ticks/16;
 703               	.LM48:
 704 0268 1C01      		movw r2,r24
 705 026a 84E0      		ldi r24,4
 706 026c 3694      	1:	lsr r3
 707 026e 2794      		ror r2
 708 0270 8A95      		dec r24
 709 0272 01F4      		brne 1b
 710 0274 2814      		cp r2,r8
 711 0276 3904      		cpc r3,r9
 712 0278 00F4      		brsh .L12
 713 027a 4101      		movw r8,r2
 714               	.L12:
 715 027c A214      		cp r10,r2
 716 027e B304      		cpc r11,r3
 717 0280 00F4      		brsh .L13
 718 0282 5101      		movw r10,r2
 719               	.L13:
 211:main.c        ****    	if(ticks<ticks_min) ticks_min=ticks;
 212:main.c        ****    	if(ticks>ticks_max) ticks_max=ticks;
 213:main.c        ****    	nrk_kprintf( PSTR( "OS tick time: " ));
 721               	.LM49:
 722 0284 80E0      		ldi r24,lo8(__c.2911)
 723 0286 90E0      		ldi r25,hi8(__c.2911)
 724 0288 0E94 0000 		call nrk_kprintf
 214:main.c        ****    	printf( "%u %u %u\r\n\r\n",ticks_min,ticks,ticks_max);
 726               	.LM50:
 727 028c EDB7      		in r30,__SP_L__
 728 028e FEB7      		in r31,__SP_H__
 729 0290 3897      		sbiw r30,8
 730 0292 0FB6      		in __tmp_reg__,__SREG__
 731 0294 F894      		cli
 732 0296 FEBF      		out __SP_H__,r31
 733 0298 0FBE      		out __SREG__,__tmp_reg__
 734 029a EDBF      		out __SP_L__,r30
 735 029c 3196      		adiw r30,1
 736 029e 20E0      		ldi r18,lo8(.LC3)
 737 02a0 30E0      		ldi r19,hi8(.LC3)
 738 02a2 ADB7      		in r26,__SP_L__
 739 02a4 BEB7      		in r27,__SP_H__
 740 02a6 1296      		adiw r26,1+1
 741 02a8 3C93      		st X,r19
 742 02aa 2E93      		st -X,r18
 743 02ac 1197      		sbiw r26,1
 744 02ae 9382      		std Z+3,r9
 745 02b0 8282      		std Z+2,r8
 746 02b2 3582      		std Z+5,r3
 747 02b4 2482      		std Z+4,r2
 748 02b6 B782      		std Z+7,r11
 749 02b8 A682      		std Z+6,r10
 750 02ba 0E94 0000 		call printf
 215:main.c        ****    nrk_int_enable(); 
 752               	.LM51:
 753 02be 4DB7      		in r20,__SP_L__
 754 02c0 5EB7      		in r21,__SP_H__
 755 02c2 485F      		subi r20,lo8(-(8))
 756 02c4 5F4F      		sbci r21,hi8(-(8))
 757 02c6 0FB6      		in __tmp_reg__,__SREG__
 758 02c8 F894      		cli
 759 02ca 5EBF      		out __SP_H__,r21
 760 02cc 0FBE      		out __SREG__,__tmp_reg__
 761 02ce 4DBF      		out __SP_L__,r20
 762 02d0 0E94 0000 		call nrk_int_enable
 216:main.c        **** 
 217:main.c        ****    nrk_wait_until_next_period ();
 764               	.LM52:
 765 02d4 0E94 0000 		call nrk_wait_until_next_period
 766               	.LBE2:
 218:main.c        ****    
 219:main.c        **** 
 220:main.c        ****   }
 768               	.LM53:
 769 02d8 00C0      		rjmp .L14
 777               	.Lscope1:
 779               		.stabd	78,0,0
 780               		.data
 781               	.LC4:
 782 0035 7278 5F74 		.string	"rx_task PID=%d\r\n"
 782      6173 6B20 
 782      5049 443D 
 782      2564 0D0A 
 782      00
 783               		.text
 785               	.global	rx_task
 787               	rx_task:
 788               		.stabd	46,0,0
  77:main.c        **** {
 790               	.LM54:
 791               	.LFBB2:
 792 02da DF92      		push r13
 793 02dc EF92      		push r14
 794 02de FF92      		push r15
 795 02e0 0F93      		push r16
 796 02e2 1F93      		push r17
 797 02e4 DF93      		push r29
 798 02e6 CF93      		push r28
 799 02e8 00D0      		rcall .
 800 02ea CDB7      		in r28,__SP_L__
 801 02ec DEB7      		in r29,__SP_H__
 802               	/* prologue: function */
 803               	/* frame size = 2 */
 804               	/* stack size = 9 */
 805               	.L__stack_usage = 9
  82:main.c        ****   printf ("rx_task PID=%d\r\n", nrk_get_pid ());
 807               	.LM55:
 808 02ee 0E94 0000 		call nrk_get_pid
 809 02f2 00D0      		rcall .
 810 02f4 00D0      		rcall .
 811 02f6 EDB7      		in r30,__SP_L__
 812 02f8 FEB7      		in r31,__SP_H__
 813 02fa 3196      		adiw r30,1
 814 02fc 20E0      		ldi r18,lo8(.LC4)
 815 02fe 30E0      		ldi r19,hi8(.LC4)
 816 0300 ADB7      		in r26,__SP_L__
 817 0302 BEB7      		in r27,__SP_H__
 818 0304 1296      		adiw r26,1+1
 819 0306 3C93      		st X,r19
 820 0308 2E93      		st -X,r18
 821 030a 1197      		sbiw r26,1
 822 030c 8283      		std Z+2,r24
 823 030e 1382      		std Z+3,__zero_reg__
 824 0310 0E94 0000 		call printf
  85:main.c        ****   bmac_init (25);
 826               	.LM56:
 827 0314 0F90      		pop __tmp_reg__
 828 0316 0F90      		pop __tmp_reg__
 829 0318 0F90      		pop __tmp_reg__
 830 031a 0F90      		pop __tmp_reg__
 831 031c 89E1      		ldi r24,lo8(25)
 832 031e 0E94 0000 		call bmac_init
  86:main.c        ****   rx_data_ok=0;
 834               	.LM57:
 835 0322 1092 0000 		sts rx_data_ok,__zero_reg__
 105:main.c        ****   bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
 837               	.LM58:
 838 0326 80E0      		ldi r24,lo8(rx_buf)
 839 0328 90E0      		ldi r25,hi8(rx_buf)
 840 032a 64E7      		ldi r22,lo8(116)
 841 032c 0E94 0000 		call bmac_rx_pkt_set_buffer
 112:main.c        ****     local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
 843               	.LM59:
 844 0330 52E0      		ldi r21,lo8(2)
 845 0332 E52E      		mov r14,r21
 846 0334 F12C      		mov r15,__zero_reg__
 847 0336 EC0E      		add r14,r28
 848 0338 FD1E      		adc r15,r29
 849 033a 8E01      		movw r16,r28
 850 033c 0F5F      		subi r16,lo8(-(1))
 851 033e 1F4F      		sbci r17,hi8(-(1))
 113:main.c        ****     rx_data_ok=1;
 853               	.LM60:
 854 0340 DD24      		clr r13
 855 0342 D394      		inc r13
 856               	.L19:
 109:main.c        ****     val = bmac_wait_until_rx_pkt ();
 858               	.LM61:
 859 0344 0E94 0000 		call bmac_wait_until_rx_pkt
 111:main.c        ****     nrk_led_set (ORANGE_LED);
 861               	.LM62:
 862 0348 82E0      		ldi r24,lo8(2)
 863 034a 90E0      		ldi r25,hi8(2)
 864 034c 0E94 0000 		call nrk_led_set
 112:main.c        ****     local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
 866               	.LM63:
 867 0350 C801      		movw r24,r16
 868 0352 B701      		movw r22,r14
 869 0354 0E94 0000 		call bmac_rx_pkt_get
 113:main.c        ****     rx_data_ok=1;
 871               	.LM64:
 872 0358 D092 0000 		sts rx_data_ok,r13
 114:main.c        ****     rx_rssi=rssi;
 874               	.LM65:
 875 035c 8A81      		ldd r24,Y+2
 876 035e 8093 0000 		sts rx_rssi,r24
 119:main.c        ****     nrk_led_clr (ORANGE_LED);
 878               	.LM66:
 879 0362 82E0      		ldi r24,lo8(2)
 880 0364 90E0      		ldi r25,hi8(2)
 881 0366 0E94 0000 		call nrk_led_clr
 121:main.c        ****     bmac_rx_pkt_release ();
 883               	.LM67:
 884 036a 0E94 0000 		call bmac_rx_pkt_release
 885 036e 00C0      		rjmp .L19
 891               	.Lscope2:
 893               		.stabd	78,0,0
 895               	.global	nrk_create_taskset
 897               	nrk_create_taskset:
 898               		.stabd	46,0,0
 221:main.c        **** 
 222:main.c        **** }
 223:main.c        **** 
 224:main.c        **** void nrk_create_taskset ()
 225:main.c        **** {
 900               	.LM68:
 901               	.LFBB3:
 902 0370 CF92      		push r12
 903 0372 DF92      		push r13
 904 0374 EF92      		push r14
 905 0376 FF92      		push r15
 906 0378 1F93      		push r17
 907 037a CF93      		push r28
 908 037c DF93      		push r29
 909               	/* prologue: function */
 910               	/* frame size = 0 */
 911               	/* stack size = 7 */
 912               	.L__stack_usage = 7
 226:main.c        **** 
 227:main.c        **** 
 228:main.c        ****   RX_TASK.task = rx_task;
 914               	.LM69:
 915 037e 80E0      		ldi r24,lo8(gs(rx_task))
 916 0380 90E0      		ldi r25,hi8(gs(rx_task))
 917 0382 9093 0000 		sts RX_TASK+5+1,r25
 918 0386 8093 0000 		sts RX_TASK+5,r24
 229:main.c        ****   nrk_task_set_stk( &RX_TASK, rx_task_stack, NRK_APP_STACKSIZE);
 920               	.LM70:
 921 038a C0E0      		ldi r28,lo8(RX_TASK)
 922 038c D0E0      		ldi r29,hi8(RX_TASK)
 923 038e CE01      		movw r24,r28
 924 0390 60E0      		ldi r22,lo8(rx_task_stack)
 925 0392 70E0      		ldi r23,hi8(rx_task_stack)
 926 0394 40E8      		ldi r20,lo8(128)
 927 0396 50E0      		ldi r21,hi8(128)
 928 0398 0E94 0000 		call nrk_task_set_stk
 230:main.c        ****   RX_TASK.prio = 2;
 930               	.LM71:
 931 039c 82E0      		ldi r24,lo8(2)
 932 039e 8887      		std Y+8,r24
 231:main.c        ****   RX_TASK.FirstActivation = TRUE;
 934               	.LM72:
 935 03a0 11E0      		ldi r17,lo8(1)
 936 03a2 1F83      		std Y+7,r17
 232:main.c        ****   RX_TASK.Type = BASIC_TASK;
 938               	.LM73:
 939 03a4 1987      		std Y+9,r17
 233:main.c        ****   RX_TASK.SchType = PREEMPTIVE;
 941               	.LM74:
 942 03a6 1A87      		std Y+10,r17
 234:main.c        ****   RX_TASK.period.secs = 1;
 944               	.LM75:
 945 03a8 61E0      		ldi r22,lo8(1)
 946 03aa C62E      		mov r12,r22
 947 03ac D12C      		mov r13,__zero_reg__
 948 03ae E12C      		mov r14,__zero_reg__
 949 03b0 F12C      		mov r15,__zero_reg__
 950 03b2 CB86      		std Y+11,r12
 951 03b4 DC86      		std Y+12,r13
 952 03b6 ED86      		std Y+13,r14
 953 03b8 FE86      		std Y+14,r15
 235:main.c        ****   RX_TASK.period.nano_secs = 0;
 955               	.LM76:
 956 03ba 1F86      		std Y+15,__zero_reg__
 957 03bc 188A      		std Y+16,__zero_reg__
 958 03be 198A      		std Y+17,__zero_reg__
 959 03c0 1A8A      		std Y+18,__zero_reg__
 236:main.c        ****   RX_TASK.cpu_reserve.secs = 1;
 961               	.LM77:
 962 03c2 CB8A      		std Y+19,r12
 963 03c4 DC8A      		std Y+20,r13
 964 03c6 ED8A      		std Y+21,r14
 965 03c8 FE8A      		std Y+22,r15
 237:main.c        ****   RX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS;
 967               	.LM78:
 968 03ca 80E0      		ldi r24,lo8(500000000)
 969 03cc 95E6      		ldi r25,hi8(500000000)
 970 03ce ADEC      		ldi r26,hlo8(500000000)
 971 03d0 BDE1      		ldi r27,hhi8(500000000)
 972 03d2 8F8B      		std Y+23,r24
 973 03d4 988F      		std Y+24,r25
 974 03d6 A98F      		std Y+25,r26
 975 03d8 BA8F      		std Y+26,r27
 238:main.c        ****   RX_TASK.offset.secs = 0;
 977               	.LM79:
 978 03da 1B8E      		std Y+27,__zero_reg__
 979 03dc 1C8E      		std Y+28,__zero_reg__
 980 03de 1D8E      		std Y+29,__zero_reg__
 981 03e0 1E8E      		std Y+30,__zero_reg__
 239:main.c        ****   RX_TASK.offset.nano_secs = 0;
 983               	.LM80:
 984 03e2 1F8E      		std Y+31,__zero_reg__
 985 03e4 18A2      		std Y+32,__zero_reg__
 986 03e6 19A2      		std Y+33,__zero_reg__
 987 03e8 1AA2      		std Y+34,__zero_reg__
 240:main.c        ****   nrk_activate_task (&RX_TASK);
 989               	.LM81:
 990 03ea CE01      		movw r24,r28
 991 03ec 0E94 0000 		call nrk_activate_task
 241:main.c        **** 
 242:main.c        ****   TX_TASK.task = tx_task;
 993               	.LM82:
 994 03f0 80E0      		ldi r24,lo8(gs(tx_task))
 995 03f2 90E0      		ldi r25,hi8(gs(tx_task))
 996 03f4 9093 0000 		sts TX_TASK+5+1,r25
 997 03f8 8093 0000 		sts TX_TASK+5,r24
 243:main.c        ****   nrk_task_set_stk( &TX_TASK, tx_task_stack, NRK_APP_STACKSIZE);
 999               	.LM83:
 1000 03fc C0E0      		ldi r28,lo8(TX_TASK)
 1001 03fe D0E0      		ldi r29,hi8(TX_TASK)
 1002 0400 CE01      		movw r24,r28
 1003 0402 60E0      		ldi r22,lo8(tx_task_stack)
 1004 0404 70E0      		ldi r23,hi8(tx_task_stack)
 1005 0406 40E8      		ldi r20,lo8(128)
 1006 0408 50E0      		ldi r21,hi8(128)
 1007 040a 0E94 0000 		call nrk_task_set_stk
 244:main.c        ****   TX_TASK.prio = 25;
 1009               	.LM84:
 1010 040e 89E1      		ldi r24,lo8(25)
 1011 0410 8887      		std Y+8,r24
 245:main.c        ****   TX_TASK.FirstActivation = TRUE;
 1013               	.LM85:
 1014 0412 1F83      		std Y+7,r17
 246:main.c        ****   TX_TASK.Type = BASIC_TASK;
 1016               	.LM86:
 1017 0414 1987      		std Y+9,r17
 247:main.c        ****   TX_TASK.SchType = PREEMPTIVE;
 1019               	.LM87:
 1020 0416 1A87      		std Y+10,r17
 248:main.c        ****   TX_TASK.period.secs = 1;
 1022               	.LM88:
 1023 0418 CB86      		std Y+11,r12
 1024 041a DC86      		std Y+12,r13
 1025 041c ED86      		std Y+13,r14
 1026 041e FE86      		std Y+14,r15
 249:main.c        ****   TX_TASK.period.nano_secs = 0;
 1028               	.LM89:
 1029 0420 1F86      		std Y+15,__zero_reg__
 1030 0422 188A      		std Y+16,__zero_reg__
 1031 0424 198A      		std Y+17,__zero_reg__
 1032 0426 1A8A      		std Y+18,__zero_reg__
 250:main.c        ****   TX_TASK.cpu_reserve.secs = 0;
 1034               	.LM90:
 1035 0428 1B8A      		std Y+19,__zero_reg__
 1036 042a 1C8A      		std Y+20,__zero_reg__
 1037 042c 1D8A      		std Y+21,__zero_reg__
 1038 042e 1E8A      		std Y+22,__zero_reg__
 251:main.c        ****   TX_TASK.cpu_reserve.nano_secs = 0;
 1040               	.LM91:
 1041 0430 1F8A      		std Y+23,__zero_reg__
 1042 0432 188E      		std Y+24,__zero_reg__
 1043 0434 198E      		std Y+25,__zero_reg__
 1044 0436 1A8E      		std Y+26,__zero_reg__
 252:main.c        ****   TX_TASK.offset.secs = 0;
 1046               	.LM92:
 1047 0438 1B8E      		std Y+27,__zero_reg__
 1048 043a 1C8E      		std Y+28,__zero_reg__
 1049 043c 1D8E      		std Y+29,__zero_reg__
 1050 043e 1E8E      		std Y+30,__zero_reg__
 253:main.c        ****   TX_TASK.offset.nano_secs = 0;
 1052               	.LM93:
 1053 0440 1F8E      		std Y+31,__zero_reg__
 1054 0442 18A2      		std Y+32,__zero_reg__
 1055 0444 19A2      		std Y+33,__zero_reg__
 1056 0446 1AA2      		std Y+34,__zero_reg__
 254:main.c        ****   nrk_activate_task (&TX_TASK);
 1058               	.LM94:
 1059 0448 CE01      		movw r24,r28
 1060 044a 0E94 0000 		call nrk_activate_task
 1061               	/* epilogue start */
 255:main.c        **** 
 256:main.c        **** }
 1063               	.LM95:
 1064 044e DF91      		pop r29
 1065 0450 CF91      		pop r28
 1066 0452 1F91      		pop r17
 1067 0454 FF90      		pop r15
 1068 0456 EF90      		pop r14
 1069 0458 DF90      		pop r13
 1070 045a CF90      		pop r12
 1071 045c 0895      		ret
 1073               	.Lscope3:
 1075               		.stabd	78,0,0
 1077               	.global	main
 1079               	main:
 1080               		.stabd	46,0,0
  54:main.c        **** {
 1082               	.LM96:
 1083               	.LFBB4:
 1084               	/* prologue: function */
 1085               	/* frame size = 0 */
 1086               	/* stack size = 0 */
 1087               	.L__stack_usage = 0
  56:main.c        ****   nrk_setup_ports ();
 1089               	.LM97:
 1090 045e 0E94 0000 		call nrk_setup_ports
  57:main.c        ****   nrk_setup_uart (UART_BAUDRATE_115K2);
 1092               	.LM98:
 1093 0462 80E1      		ldi r24,lo8(16)
 1094 0464 90E0      		ldi r25,hi8(16)
 1095 0466 0E94 0000 		call nrk_setup_uart
  59:main.c        ****   nrk_init ();
 1097               	.LM99:
 1098 046a 0E94 0000 		call nrk_init
  61:main.c        ****   nrk_led_clr (0);
 1100               	.LM100:
 1101 046e 80E0      		ldi r24,lo8(0)
 1102 0470 90E0      		ldi r25,hi8(0)
 1103 0472 0E94 0000 		call nrk_led_clr
  62:main.c        ****   nrk_led_clr (1);
 1105               	.LM101:
 1106 0476 81E0      		ldi r24,lo8(1)
 1107 0478 90E0      		ldi r25,hi8(1)
 1108 047a 0E94 0000 		call nrk_led_clr
  63:main.c        ****   nrk_led_clr (2);
 1110               	.LM102:
 1111 047e 82E0      		ldi r24,lo8(2)
 1112 0480 90E0      		ldi r25,hi8(2)
 1113 0482 0E94 0000 		call nrk_led_clr
  64:main.c        ****   nrk_led_clr (3);
 1115               	.LM103:
 1116 0486 83E0      		ldi r24,lo8(3)
 1117 0488 90E0      		ldi r25,hi8(3)
 1118 048a 0E94 0000 		call nrk_led_clr
  66:main.c        ****   nrk_time_set (0, 0);
 1120               	.LM104:
 1121 048e 60E0      		ldi r22,lo8(0)
 1122 0490 70E0      		ldi r23,hi8(0)
 1123 0492 CB01      		movw r24,r22
 1124 0494 20E0      		ldi r18,lo8(0)
 1125 0496 30E0      		ldi r19,hi8(0)
 1126 0498 A901      		movw r20,r18
 1127 049a 0E94 0000 		call nrk_time_set
  68:main.c        ****   bmac_task_config ();
 1129               	.LM105:
 1130 049e 0E94 0000 		call bmac_task_config
  70:main.c        ****   nrk_create_taskset ();
 1132               	.LM106:
 1133 04a2 0E94 0000 		call nrk_create_taskset
  71:main.c        ****   nrk_start ();
 1135               	.LM107:
 1136 04a6 0E94 0000 		call nrk_start
  74:main.c        **** }
 1138               	.LM108:
 1139 04aa 80E0      		ldi r24,lo8(0)
 1140 04ac 90E0      		ldi r25,hi8(0)
 1141               	/* epilogue start */
 1142 04ae 0895      		ret
 1144               	.Lscope4:
 1146               		.stabd	78,0,0
 1147               		.comm _nrk_signal_list,4,1
 1148               		.comm nrk_idle_task_stk,128,1
 1149               		.comm nrk_kernel_stk_ptr,2,1
 1150               		.comm nrk_task_TCB,132,1
 1151               		.comm nrk_wakeup_signal,1,1
 1152               		.comm _nrk_readyQ,25,1
 1153               		.comm _free_node,2,1
 1154               		.comm _head_node,2,1
 1155               		.comm nrk_cur_task_prio,1,1
 1156               		.comm nrk_cur_task_TCB,2,1
 1157               		.comm nrk_high_ready_prio,1,1
 1158               		.comm nrk_high_ready_TCB,2,1
 1159               		.comm _nrk_resource_cnt,1,1
 1160               		.comm nrk_system_time,8,1
 1161               		.comm bmac_rx_pkt_signal,1,1
 1162               		.comm bmac_tx_pkt_done_signal,1,1
 1163               		.comm bmac_enable_signal,1,1
 1164               		.comm bmac_rfRxInfo,9,1
 1165               		.comm bmac_rfTxInfo,7,1
 1166               		.comm nrk_sem_list,6,1
 1167               		.comm error_task,1,1
 1168               		.comm error_num,1,1
 1169               		.comm RX_TASK,35,1
 1170               		.comm rx_task_stack,128,1
 1171               		.comm TX_TASK,35,1
 1172               		.comm tx_task_stack,128,1
 1173               		.comm tx_buf,116,1
 1174               		.comm rx_buf,116,1
 1175               		.comm rx_data_ok,1,1
 1176               		.comm tx_data_ok,1,1
 1177               		.comm rx_rssi,1,1
 1178               		.section	.progmem.data,"a",@progbits
 1181               	__c.2911:
 1182 0000 4F53 2074 		.string	"OS tick time: "
 1182      6963 6B20 
 1182      7469 6D65 
 1182      3A20 00
 1185               	__c.2901:
 1186 000f 4D61 7820 		.string	"Max wakeup time: "
 1186      7761 6B65 
 1186      7570 2074 
 1186      696D 653A 
 1186      2000 
 1189               	__c.2899:
 1190 0021 4E4F 2050 		.string	"NO PKT\r\n"
 1190      4B54 0D0A 
 1190      00
 1193               	__c.2897:
 1194 002a 4F4B 2020 		.string	"OK  RSSI:"
 1194      5253 5349 
 1194      3A00 
 1197               	__c.2895:
 1198 0034 5258 2073 		.string	"RX status: "
 1198      7461 7475 
 1198      733A 2000 
 1201               	__c.2893:
 1202 0040 4E4F 4E45 		.string	"NONE\r\n"
 1202      0D0A 00
 1205               	__c.2891:
 1206 0047 4F4B 0D0A 		.string	"OK\r\n"
 1206      00
 1209               	__c.2889:
 1210 004c 5458 2073 		.string	"TX status: "
 1210      7461 7475 
 1210      733A 2000 
 1213               	__c.2887:
 1214 0058 5365 6C66 		.string	"Self Test Cycle: "
 1214      2054 6573 
 1214      7420 4379 
 1214      636C 653A 
 1214      2000 
 1217               	__c.2885:
 1218 006a 5458 2064 		.string	"TX done signal error\r\n"
 1218      6F6E 6520 
 1218      7369 676E 
 1218      616C 2065 
 1218      7272 6F72 
 1221               	__c.2864:
 1222 0081 4552 524F 		.string	"ERROR setting bmac rate\r\n"
 1222      5220 7365 
 1222      7474 696E 
 1222      6720 626D 
 1222      6163 2072 
 1254               		.text
 1256               	.Letext0:
 1257               	.global __do_copy_data
 1258               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccMrtmky.s:2      *ABS*:0000003f __SREG__
     /tmp/ccMrtmky.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccMrtmky.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccMrtmky.s:5      *ABS*:00000034 __CCP__
     /tmp/ccMrtmky.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccMrtmky.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccMrtmky.s:315    .text:00000000 tx_task
                            *COM*:00000001 tx_data_ok
                            *COM*:00000074 tx_buf
     /tmp/ccMrtmky.s:1217   .progmem.data:0000006a __c.2885
     /tmp/ccMrtmky.s:1213   .progmem.data:00000058 __c.2887
     /tmp/ccMrtmky.s:1209   .progmem.data:0000004c __c.2889
     /tmp/ccMrtmky.s:1205   .progmem.data:00000047 __c.2891
     /tmp/ccMrtmky.s:1201   .progmem.data:00000040 __c.2893
     /tmp/ccMrtmky.s:1197   .progmem.data:00000034 __c.2895
                            *COM*:00000001 rx_data_ok
     /tmp/ccMrtmky.s:1193   .progmem.data:0000002a __c.2897
                            *COM*:00000001 rx_rssi
     /tmp/ccMrtmky.s:1189   .progmem.data:00000021 __c.2899
     /tmp/ccMrtmky.s:1185   .progmem.data:0000000f __c.2901
     /tmp/ccMrtmky.s:1181   .progmem.data:00000000 __c.2911
     /tmp/ccMrtmky.s:787    .text:000002da rx_task
                            *COM*:00000074 rx_buf
     /tmp/ccMrtmky.s:897    .text:00000370 nrk_create_taskset
                            *COM*:00000023 RX_TASK
                            *COM*:00000080 rx_task_stack
                            *COM*:00000023 TX_TASK
                            *COM*:00000080 tx_task_stack
     /tmp/ccMrtmky.s:1079   .text:0000045e main
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000084 nrk_task_TCB
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000019 _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:00000008 nrk_system_time
                            *COM*:00000001 bmac_rx_pkt_signal
                            *COM*:00000001 bmac_tx_pkt_done_signal
                            *COM*:00000001 bmac_enable_signal
                            *COM*:00000009 bmac_rfRxInfo
                            *COM*:00000007 bmac_rfTxInfo
                            *COM*:00000006 nrk_sem_list
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
     /tmp/ccMrtmky.s:1221   .progmem.data:00000081 __c.2864

UNDEFINED SYMBOLS
nrk_get_pid
printf
nrk_wait_until_next_period
bmac_started
bmac_get_tx_done_signal
nrk_signal_register
sprintf
nrk_led_set
bmac_tx_pkt_nonblocking
nrk_event_wait
nrk_kprintf
nrk_led_clr
_nrk_set_next_wakeup
nrk_int_disable
_nrk_os_timer_reset
_nrk_high_speed_timer_reset
_nrk_os_timer_get
_nrk_high_speed_timer_get
nrk_int_enable
bmac_init
bmac_rx_pkt_set_buffer
bmac_wait_until_rx_pkt
bmac_rx_pkt_get
bmac_rx_pkt_release
nrk_task_set_stk
nrk_activate_task
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
bmac_task_config
nrk_start
__do_copy_data
__do_clear_bss
