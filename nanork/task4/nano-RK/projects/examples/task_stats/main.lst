   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 141               		.data
 142               	.LC0:
 143 0000 5461 736B 		.string	"Task4 PID=%u\r\n"
 143      3420 5049 
 143      443D 2575 
 143      0D0A 00
 144               	.LC1:
 145 000f 5461 736B 		.string	"Task4 cnt=%u\r\n"
 145      3420 636E 
 145      743D 2575 
 145      0D0A 00
 146               		.text
 148               	.global	Task4
 150               	Task4:
 151               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** #include <nrk.h>
  25:main.c        **** #include <include.h>
  26:main.c        **** #include <ulib.h>
  27:main.c        **** #include <stdio.h>
  28:main.c        **** #include <hal.h>
  29:main.c        **** #include <nrk_error.h>
  30:main.c        **** #include <nrk_timer.h>
  31:main.c        **** #include <nrk_stack_check.h>
  32:main.c        **** #include <nrk_stats.h>
  33:main.c        **** 
  34:main.c        **** 
  35:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  36:main.c        **** nrk_task_type TaskOne;
  37:main.c        **** void Task1(void);
  38:main.c        **** 
  39:main.c        **** NRK_STK Stack2[NRK_APP_STACKSIZE];
  40:main.c        **** nrk_task_type TaskTwo;
  41:main.c        **** void Task2 (void);
  42:main.c        **** 
  43:main.c        **** NRK_STK Stack3[NRK_APP_STACKSIZE];
  44:main.c        **** nrk_task_type TaskThree;
  45:main.c        **** void Task3 (void);
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** NRK_STK Stack4[NRK_APP_STACKSIZE];
  49:main.c        **** nrk_task_type TaskFour;
  50:main.c        **** void Task4 (void);
  51:main.c        **** 
  52:main.c        **** void nrk_create_taskset();
  53:main.c        **** uint8_t kill_stack(uint8_t val);
  54:main.c        **** 
  55:main.c        **** int
  56:main.c        **** main ()
  57:main.c        **** {
  58:main.c        ****   nrk_setup_ports();
  59:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  60:main.c        **** 
  61:main.c        ****   nrk_init();
  62:main.c        **** 
  63:main.c        ****   nrk_led_clr(ORANGE_LED);
  64:main.c        ****   nrk_led_clr(BLUE_LED);
  65:main.c        ****   nrk_led_clr(GREEN_LED);
  66:main.c        ****   nrk_led_clr(RED_LED);
  67:main.c        ****  
  68:main.c        ****   nrk_time_set(0,0);
  69:main.c        ****   nrk_create_taskset ();
  70:main.c        ****   nrk_start();
  71:main.c        ****   
  72:main.c        ****   return 0;
  73:main.c        **** }
  74:main.c        **** 
  75:main.c        **** // This structure should be global since it is quite large!
  76:main.c        **** nrk_task_stat_t my_stats;
  77:main.c        **** 
  78:main.c        **** void Task1()
  79:main.c        **** {
  80:main.c        **** nrk_time_t t;
  81:main.c        **** uint16_t cnt;
  82:main.c        **** cnt=0;
  83:main.c        **** nrk_kprintf( PSTR("Nano-RK Version ") );
  84:main.c        **** printf( "%d\r\n",NRK_VERSION );
  85:main.c        **** 
  86:main.c        **** printf( "My node's address is %u\r\n",NODE_ADDR );
  87:main.c        ****   
  88:main.c        **** printf( "Task1 PID=%u\r\n",nrk_get_pid());
  89:main.c        **** 
  90:main.c        ****   while(1) {
  91:main.c        **** 	nrk_led_toggle(ORANGE_LED);
  92:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_0);
  93:main.c        **** 	printf( "Task1 cnt=%u\r\n",cnt );
  94:main.c        **** 	nrk_wait_until_next_period();
  95:main.c        ****         // Uncomment this line to cause a stack overflow
  96:main.c        **** 	// if(cnt>20) kill_stack(10);
  97:main.c        **** 
  98:main.c        **** 	// At time 50, the OS will halt and print statistics
  99:main.c        **** 	// This requires the NRK_STATS_TRACKER #define in nrk_cfg.h
 100:main.c        **** 	 if(cnt==50)  {
 101:main.c        **** 		nrk_stats_display_all();
 102:main.c        **** 		// This will induce a kernel panic on purpose	
 103:main.c        **** 		nrk_halt();
 104:main.c        **** 		}
 105:main.c        **** 
 106:main.c        ****         // This is an example of how to access the task execution data
 107:main.c        **** 	if( cnt==10 ) {
 108:main.c        **** 	nrk_stats_get(nrk_get_pid(), &my_stats);
 109:main.c        **** 	nrk_kprintf( PSTR( "\r\n   Total CPU: "));
 110:main.c        **** 	t=_nrk_ticks_to_time(my_stats.total_ticks);
 111:main.c        **** 	printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
 112:main.c        **** 	nrk_kprintf( PSTR( "\r\n   Time [Min,Last,Max]: "));
 113:main.c        **** 	t=_nrk_ticks_to_time(my_stats.min_exec_ticks);
 114:main.c        **** 	printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
 115:main.c        **** 	t=_nrk_ticks_to_time(my_stats.last_exec_ticks);
 116:main.c        **** 	printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
 117:main.c        **** 	t=_nrk_ticks_to_time(my_stats.max_exec_ticks);
 118:main.c        **** 	printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
 119:main.c        **** 	nrk_kprintf( PSTR( "\r\n   Swap-ins: "));
 120:main.c        **** 	printf( "%lu",my_stats.swapped_in );
 121:main.c        **** 	nrk_kprintf( PSTR( "\r\n   Preemptions: "));
 122:main.c        **** 	printf( "%lu",my_stats.preempted);
 123:main.c        **** 	nrk_kprintf( PSTR( "\r\n   Kernel Violations: "));
 124:main.c        **** 	printf( "%u",my_stats.violations);
 125:main.c        **** 	nrk_kprintf( PSTR( "\r\n   Overflow Error Status: "));
 126:main.c        **** 	printf( "%u",my_stats.overflow);
 127:main.c        **** 	nrk_kprintf( PSTR("\r\n") );
 128:main.c        **** 	}
 129:main.c        **** 
 130:main.c        **** 	cnt++;
 131:main.c        **** 	}
 132:main.c        **** }
 133:main.c        **** 
 134:main.c        **** void Task2()
 135:main.c        **** {
 136:main.c        ****   int16_t cnt;
 137:main.c        ****   printf( "Task2 PID=%u\r\n",nrk_get_pid());
 138:main.c        ****   cnt=0;
 139:main.c        ****   while(1) {
 140:main.c        **** 	nrk_led_toggle(BLUE_LED);
 141:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_1);
 142:main.c        **** 	printf( "Task2 signed cnt=%d\r\n",cnt );
 143:main.c        **** 	nrk_wait_until_next_period();
 144:main.c        **** 	//nrk_stats_display_pid(nrk_get_pid());
 145:main.c        **** 	cnt--;
 146:main.c        **** 	}
 147:main.c        **** }
 148:main.c        **** 
 149:main.c        **** void Task3()
 150:main.c        **** {
 151:main.c        **** uint16_t cnt;
 152:main.c        ****   printf( "Task3 PID=%u\r\n",nrk_get_pid());
 153:main.c        ****   cnt=0;
 154:main.c        ****   while(1) {
 155:main.c        **** 	nrk_led_toggle(GREEN_LED);
 156:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_2);
 157:main.c        **** 	printf( "Task3 cnt=%u\r\n",cnt );
 158:main.c        **** 	nrk_wait_until_next_period();
 159:main.c        **** 	cnt++;
 160:main.c        **** 	}
 161:main.c        **** }
 162:main.c        **** 
 163:main.c        **** void Task4()
 164:main.c        **** {
 153               	.LM0:
 154               	.LFBB1:
 155 0000 FF92      		push r15
 156 0002 0F93      		push r16
 157 0004 1F93      		push r17
 158 0006 CF93      		push r28
 159 0008 DF93      		push r29
 160               	/* prologue: function */
 161               	/* frame size = 0 */
 162               	/* stack size = 5 */
 163               	.L__stack_usage = 5
 165:main.c        **** uint16_t cnt;
 166:main.c        **** 
 167:main.c        ****   printf( "Task4 PID=%u\r\n",nrk_get_pid());
 165               	.LM1:
 166 000a 0E94 0000 		call nrk_get_pid
 167 000e 00D0      		rcall .
 168 0010 00D0      		rcall .
 169 0012 EDB7      		in r30,__SP_L__
 170 0014 FEB7      		in r31,__SP_H__
 171 0016 3196      		adiw r30,1
 172 0018 20E0      		ldi r18,lo8(.LC0)
 173 001a 30E0      		ldi r19,hi8(.LC0)
 174 001c ADB7      		in r26,__SP_L__
 175 001e BEB7      		in r27,__SP_H__
 176 0020 1296      		adiw r26,1+1
 177 0022 3C93      		st X,r19
 178 0024 2E93      		st -X,r18
 179 0026 1197      		sbiw r26,1
 180 0028 8283      		std Z+2,r24
 181 002a 1382      		std Z+3,__zero_reg__
 182 002c 0E94 0000 		call printf
 183 0030 0F90      		pop __tmp_reg__
 184 0032 0F90      		pop __tmp_reg__
 185 0034 0F90      		pop __tmp_reg__
 186 0036 0F90      		pop __tmp_reg__
 168:main.c        ****   cnt=0;
 188               	.LM2:
 189 0038 C0E0      		ldi r28,lo8(0)
 190 003a D0E0      		ldi r29,hi8(0)
 169:main.c        ****   while(1) {
 170:main.c        **** 	nrk_led_toggle(RED_LED);
 171:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_3);
 192               	.LM3:
 193 003c F090 0000 		lds r15,NRK_DEBUG_3
 172:main.c        **** 	printf( "Task4 cnt=%u\r\n",cnt );
 195               	.LM4:
 196 0040 00E0      		ldi r16,lo8(.LC1)
 197 0042 10E0      		ldi r17,hi8(.LC1)
 198               	.L2:
 170:main.c        **** 	nrk_led_toggle(RED_LED);
 200               	.LM5:
 201 0044 83E0      		ldi r24,lo8(3)
 202 0046 90E0      		ldi r25,hi8(3)
 203 0048 0E94 0000 		call nrk_led_toggle
 171:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_3);
 205               	.LM6:
 206 004c 8F2D      		mov r24,r15
 207 004e 0E94 0000 		call nrk_gpio_toggle
 209               	.LM7:
 210 0052 00D0      		rcall .
 211 0054 00D0      		rcall .
 212 0056 EDB7      		in r30,__SP_L__
 213 0058 FEB7      		in r31,__SP_H__
 214 005a 1283      		std Z+2,r17
 215 005c 0183      		std Z+1,r16
 216 005e D483      		std Z+4,r29
 217 0060 C383      		std Z+3,r28
 218 0062 0E94 0000 		call printf
 173:main.c        **** 	nrk_wait_until_next_period();
 220               	.LM8:
 221 0066 0F90      		pop __tmp_reg__
 222 0068 0F90      		pop __tmp_reg__
 223 006a 0F90      		pop __tmp_reg__
 224 006c 0F90      		pop __tmp_reg__
 225 006e 0E94 0000 		call nrk_wait_until_next_period
 174:main.c        **** 	cnt++;
 227               	.LM9:
 228 0072 2196      		adiw r28,1
 229 0074 00C0      		rjmp .L2
 234               	.Lscope1:
 236               		.stabd	78,0,0
 237               		.data
 238               	.LC2:
 239 001e 5461 736B 		.string	"Task3 PID=%u\r\n"
 239      3320 5049 
 239      443D 2575 
 239      0D0A 00
 240               	.LC3:
 241 002d 5461 736B 		.string	"Task3 cnt=%u\r\n"
 241      3320 636E 
 241      743D 2575 
 241      0D0A 00
 242               		.text
 244               	.global	Task3
 246               	Task3:
 247               		.stabd	46,0,0
 150:main.c        **** {
 249               	.LM10:
 250               	.LFBB2:
 251 0076 FF92      		push r15
 252 0078 0F93      		push r16
 253 007a 1F93      		push r17
 254 007c CF93      		push r28
 255 007e DF93      		push r29
 256               	/* prologue: function */
 257               	/* frame size = 0 */
 258               	/* stack size = 5 */
 259               	.L__stack_usage = 5
 152:main.c        ****   printf( "Task3 PID=%u\r\n",nrk_get_pid());
 261               	.LM11:
 262 0080 0E94 0000 		call nrk_get_pid
 263 0084 00D0      		rcall .
 264 0086 00D0      		rcall .
 265 0088 EDB7      		in r30,__SP_L__
 266 008a FEB7      		in r31,__SP_H__
 267 008c 3196      		adiw r30,1
 268 008e 20E0      		ldi r18,lo8(.LC2)
 269 0090 30E0      		ldi r19,hi8(.LC2)
 270 0092 ADB7      		in r26,__SP_L__
 271 0094 BEB7      		in r27,__SP_H__
 272 0096 1296      		adiw r26,1+1
 273 0098 3C93      		st X,r19
 274 009a 2E93      		st -X,r18
 275 009c 1197      		sbiw r26,1
 276 009e 8283      		std Z+2,r24
 277 00a0 1382      		std Z+3,__zero_reg__
 278 00a2 0E94 0000 		call printf
 279 00a6 0F90      		pop __tmp_reg__
 280 00a8 0F90      		pop __tmp_reg__
 281 00aa 0F90      		pop __tmp_reg__
 282 00ac 0F90      		pop __tmp_reg__
 153:main.c        ****   cnt=0;
 284               	.LM12:
 285 00ae C0E0      		ldi r28,lo8(0)
 286 00b0 D0E0      		ldi r29,hi8(0)
 156:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_2);
 288               	.LM13:
 289 00b2 F090 0000 		lds r15,NRK_DEBUG_2
 157:main.c        **** 	printf( "Task3 cnt=%u\r\n",cnt );
 291               	.LM14:
 292 00b6 00E0      		ldi r16,lo8(.LC3)
 293 00b8 10E0      		ldi r17,hi8(.LC3)
 294               	.L4:
 155:main.c        **** 	nrk_led_toggle(GREEN_LED);
 296               	.LM15:
 297 00ba 82E0      		ldi r24,lo8(2)
 298 00bc 90E0      		ldi r25,hi8(2)
 299 00be 0E94 0000 		call nrk_led_toggle
 156:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_2);
 301               	.LM16:
 302 00c2 8F2D      		mov r24,r15
 303 00c4 0E94 0000 		call nrk_gpio_toggle
 157:main.c        **** 	printf( "Task3 cnt=%u\r\n",cnt );
 305               	.LM17:
 306 00c8 00D0      		rcall .
 307 00ca 00D0      		rcall .
 308 00cc EDB7      		in r30,__SP_L__
 309 00ce FEB7      		in r31,__SP_H__
 310 00d0 1283      		std Z+2,r17
 311 00d2 0183      		std Z+1,r16
 312 00d4 D483      		std Z+4,r29
 313 00d6 C383      		std Z+3,r28
 314 00d8 0E94 0000 		call printf
 158:main.c        **** 	nrk_wait_until_next_period();
 316               	.LM18:
 317 00dc 0F90      		pop __tmp_reg__
 318 00de 0F90      		pop __tmp_reg__
 319 00e0 0F90      		pop __tmp_reg__
 320 00e2 0F90      		pop __tmp_reg__
 321 00e4 0E94 0000 		call nrk_wait_until_next_period
 159:main.c        **** 	cnt++;
 323               	.LM19:
 324 00e8 2196      		adiw r28,1
 325 00ea 00C0      		rjmp .L4
 330               	.Lscope2:
 332               		.stabd	78,0,0
 333               		.data
 334               	.LC4:
 335 003c 5461 736B 		.string	"Task2 PID=%u\r\n"
 335      3220 5049 
 335      443D 2575 
 335      0D0A 00
 336               	.LC5:
 337 004b 5461 736B 		.string	"Task2 signed cnt=%d\r\n"
 337      3220 7369 
 337      676E 6564 
 337      2063 6E74 
 337      3D25 640D 
 338               		.text
 340               	.global	Task2
 342               	Task2:
 343               		.stabd	46,0,0
 135:main.c        **** {
 345               	.LM20:
 346               	.LFBB3:
 347 00ec FF92      		push r15
 348 00ee 0F93      		push r16
 349 00f0 1F93      		push r17
 350 00f2 CF93      		push r28
 351 00f4 DF93      		push r29
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	/* stack size = 5 */
 355               	.L__stack_usage = 5
 137:main.c        ****   printf( "Task2 PID=%u\r\n",nrk_get_pid());
 357               	.LM21:
 358 00f6 0E94 0000 		call nrk_get_pid
 359 00fa 00D0      		rcall .
 360 00fc 00D0      		rcall .
 361 00fe EDB7      		in r30,__SP_L__
 362 0100 FEB7      		in r31,__SP_H__
 363 0102 3196      		adiw r30,1
 364 0104 20E0      		ldi r18,lo8(.LC4)
 365 0106 30E0      		ldi r19,hi8(.LC4)
 366 0108 ADB7      		in r26,__SP_L__
 367 010a BEB7      		in r27,__SP_H__
 368 010c 1296      		adiw r26,1+1
 369 010e 3C93      		st X,r19
 370 0110 2E93      		st -X,r18
 371 0112 1197      		sbiw r26,1
 372 0114 8283      		std Z+2,r24
 373 0116 1382      		std Z+3,__zero_reg__
 374 0118 0E94 0000 		call printf
 375 011c 0F90      		pop __tmp_reg__
 376 011e 0F90      		pop __tmp_reg__
 377 0120 0F90      		pop __tmp_reg__
 378 0122 0F90      		pop __tmp_reg__
 138:main.c        ****   cnt=0;
 380               	.LM22:
 381 0124 C0E0      		ldi r28,lo8(0)
 382 0126 D0E0      		ldi r29,hi8(0)
 141:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_1);
 384               	.LM23:
 385 0128 F090 0000 		lds r15,NRK_DEBUG_1
 142:main.c        **** 	printf( "Task2 signed cnt=%d\r\n",cnt );
 387               	.LM24:
 388 012c 00E0      		ldi r16,lo8(.LC5)
 389 012e 10E0      		ldi r17,hi8(.LC5)
 390               	.L6:
 140:main.c        **** 	nrk_led_toggle(BLUE_LED);
 392               	.LM25:
 393 0130 81E0      		ldi r24,lo8(1)
 394 0132 90E0      		ldi r25,hi8(1)
 395 0134 0E94 0000 		call nrk_led_toggle
 141:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_1);
 397               	.LM26:
 398 0138 8F2D      		mov r24,r15
 399 013a 0E94 0000 		call nrk_gpio_toggle
 142:main.c        **** 	printf( "Task2 signed cnt=%d\r\n",cnt );
 401               	.LM27:
 402 013e 00D0      		rcall .
 403 0140 00D0      		rcall .
 404 0142 EDB7      		in r30,__SP_L__
 405 0144 FEB7      		in r31,__SP_H__
 406 0146 1283      		std Z+2,r17
 407 0148 0183      		std Z+1,r16
 408 014a D483      		std Z+4,r29
 409 014c C383      		std Z+3,r28
 410 014e 0E94 0000 		call printf
 143:main.c        **** 	nrk_wait_until_next_period();
 412               	.LM28:
 413 0152 0F90      		pop __tmp_reg__
 414 0154 0F90      		pop __tmp_reg__
 415 0156 0F90      		pop __tmp_reg__
 416 0158 0F90      		pop __tmp_reg__
 417 015a 0E94 0000 		call nrk_wait_until_next_period
 145:main.c        **** 	cnt--;
 419               	.LM29:
 420 015e 2197      		sbiw r28,1
 421 0160 00C0      		rjmp .L6
 426               	.Lscope3:
 428               		.stabd	78,0,0
 429               		.data
 430               	.LC6:
 431 0061 2564 0D0A 		.string	"%d\r\n"
 431      00
 432               	.LC7:
 433 0066 4D79 206E 		.string	"My node's address is %u\r\n"
 433      6F64 6527 
 433      7320 6164 
 433      6472 6573 
 433      7320 6973 
 434               	.LC8:
 435 0080 5461 736B 		.string	"Task1 PID=%u\r\n"
 435      3120 5049 
 435      443D 2575 
 435      0D0A 00
 436               	.LC9:
 437 008f 5461 736B 		.string	"Task1 cnt=%u\r\n"
 437      3120 636E 
 437      743D 2575 
 437      0D0A 00
 438               	.LC10:
 439 009e 256C 7520 		.string	"%lu secs %lu ms"
 439      7365 6373 
 439      2025 6C75 
 439      206D 7300 
 440               	.LC11:
 441 00ae 256C 7520 		.string	"%lu secs %lu ms, "
 441      7365 6373 
 441      2025 6C75 
 441      206D 732C 
 441      2000 
 442               	.LC12:
 443 00c0 256C 7500 		.string	"%lu"
 444               	.LC13:
 445 00c4 2575 00   		.string	"%u"
 446               		.text
 448               	.global	Task1
 450               	Task1:
 451               		.stabd	46,0,0
  79:main.c        **** {
 453               	.LM30:
 454               	.LFBB4:
 455 0162 2F92      		push r2
 456 0164 3F92      		push r3
 457 0166 4F92      		push r4
 458 0168 5F92      		push r5
 459 016a 6F92      		push r6
 460 016c 7F92      		push r7
 461 016e 8F92      		push r8
 462 0170 9F92      		push r9
 463 0172 AF92      		push r10
 464 0174 BF92      		push r11
 465 0176 CF92      		push r12
 466 0178 DF92      		push r13
 467 017a EF92      		push r14
 468 017c FF92      		push r15
 469 017e 0F93      		push r16
 470 0180 1F93      		push r17
 471 0182 DF93      		push r29
 472 0184 CF93      		push r28
 473 0186 CDB7      		in r28,__SP_L__
 474 0188 DEB7      		in r29,__SP_H__
 475 018a 6197      		sbiw r28,17
 476 018c 0FB6      		in __tmp_reg__,__SREG__
 477 018e F894      		cli
 478 0190 DEBF      		out __SP_H__,r29
 479 0192 0FBE      		out __SREG__,__tmp_reg__
 480 0194 CDBF      		out __SP_L__,r28
 481               	/* prologue: function */
 482               	/* frame size = 17 */
 483               	/* stack size = 35 */
 484               	.L__stack_usage = 35
  83:main.c        **** nrk_kprintf( PSTR("Nano-RK Version ") );
 486               	.LM31:
 487 0196 80E0      		ldi r24,lo8(__c.2166)
 488 0198 90E0      		ldi r25,hi8(__c.2166)
 489 019a 0E94 0000 		call nrk_kprintf
  84:main.c        **** printf( "%d\r\n",NRK_VERSION );
 491               	.LM32:
 492 019e 00D0      		rcall .
 493 01a0 00D0      		rcall .
 494 01a2 80E0      		ldi r24,lo8(.LC6)
 495 01a4 90E0      		ldi r25,hi8(.LC6)
 496 01a6 ADB7      		in r26,__SP_L__
 497 01a8 BEB7      		in r27,__SP_H__
 498 01aa 1296      		adiw r26,1+1
 499 01ac 9C93      		st X,r25
 500 01ae 8E93      		st -X,r24
 501 01b0 1197      		sbiw r26,1
 502 01b2 85E6      		ldi r24,lo8(101)
 503 01b4 90E0      		ldi r25,hi8(101)
 504 01b6 1496      		adiw r26,3+1
 505 01b8 9C93      		st X,r25
 506 01ba 8E93      		st -X,r24
 507 01bc 1397      		sbiw r26,3
 508 01be 0E94 0000 		call printf
  86:main.c        **** printf( "My node's address is %u\r\n",NODE_ADDR );
 510               	.LM33:
 511 01c2 80E0      		ldi r24,lo8(.LC7)
 512 01c4 90E0      		ldi r25,hi8(.LC7)
 513 01c6 EDB7      		in r30,__SP_L__
 514 01c8 FEB7      		in r31,__SP_H__
 515 01ca 9283      		std Z+2,r25
 516 01cc 8183      		std Z+1,r24
 517 01ce 1482      		std Z+4,__zero_reg__
 518 01d0 1382      		std Z+3,__zero_reg__
 519 01d2 0E94 0000 		call printf
  88:main.c        **** printf( "Task1 PID=%u\r\n",nrk_get_pid());
 521               	.LM34:
 522 01d6 0F90      		pop __tmp_reg__
 523 01d8 0F90      		pop __tmp_reg__
 524 01da 0F90      		pop __tmp_reg__
 525 01dc 0F90      		pop __tmp_reg__
 526 01de 0E94 0000 		call nrk_get_pid
 527 01e2 00D0      		rcall .
 528 01e4 00D0      		rcall .
 529 01e6 EDB7      		in r30,__SP_L__
 530 01e8 FEB7      		in r31,__SP_H__
 531 01ea 3196      		adiw r30,1
 532 01ec 20E0      		ldi r18,lo8(.LC8)
 533 01ee 30E0      		ldi r19,hi8(.LC8)
 534 01f0 ADB7      		in r26,__SP_L__
 535 01f2 BEB7      		in r27,__SP_H__
 536 01f4 1296      		adiw r26,1+1
 537 01f6 3C93      		st X,r19
 538 01f8 2E93      		st -X,r18
 539 01fa 1197      		sbiw r26,1
 540 01fc 8283      		std Z+2,r24
 541 01fe 1382      		std Z+3,__zero_reg__
 542 0200 0E94 0000 		call printf
 543 0204 0F90      		pop __tmp_reg__
 544 0206 0F90      		pop __tmp_reg__
 545 0208 0F90      		pop __tmp_reg__
 546 020a 0F90      		pop __tmp_reg__
  82:main.c        **** cnt=0;
 548               	.LM35:
 549 020c 00E0      		ldi r16,lo8(0)
 550 020e 10E0      		ldi r17,hi8(0)
  92:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_0);
 552               	.LM36:
 553 0210 B091 0000 		lds r27,NRK_DEBUG_0
 554 0214 B98B      		std Y+17,r27
 110:main.c        **** 	t=_nrk_ticks_to_time(my_stats.total_ticks);
 556               	.LM37:
 557 0216 5E01      		movw r10,r28
 558 0218 0894      		sec
 559 021a A11C      		adc r10,__zero_reg__
 560 021c B11C      		adc r11,__zero_reg__
 561 021e 39E0      		ldi r19,lo8(9)
 562 0220 632E      		mov r6,r19
 563 0222 712C      		mov r7,__zero_reg__
 564 0224 6C0E      		add r6,r28
 565 0226 7D1E      		adc r7,r29
 111:main.c        **** 	printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
 567               	.LM38:
 568 0228 20E0      		ldi r18,lo8(.LC10)
 569 022a 422E      		mov r4,r18
 570 022c 20E0      		ldi r18,hi8(.LC10)
 571 022e 522E      		mov r5,r18
 572 0230 90E4      		ldi r25,lo8(1000000)
 573 0232 C92E      		mov r12,r25
 574 0234 92E4      		ldi r25,hi8(1000000)
 575 0236 D92E      		mov r13,r25
 576 0238 9FE0      		ldi r25,hlo8(1000000)
 577 023a E92E      		mov r14,r25
 578 023c F12C      		mov r15,__zero_reg__
 114:main.c        **** 	printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
 580               	.LM39:
 581 023e 80E0      		ldi r24,lo8(.LC11)
 582 0240 282E      		mov r2,r24
 583 0242 80E0      		ldi r24,hi8(.LC11)
 584 0244 382E      		mov r3,r24
 585               	.L14:
  91:main.c        **** 	nrk_led_toggle(ORANGE_LED);
 587               	.LM40:
 588 0246 80E0      		ldi r24,lo8(0)
 589 0248 90E0      		ldi r25,hi8(0)
 590 024a 0E94 0000 		call nrk_led_toggle
  92:main.c        **** 	nrk_gpio_toggle(NRK_DEBUG_0);
 592               	.LM41:
 593 024e 8989      		ldd r24,Y+17
 594 0250 0E94 0000 		call nrk_gpio_toggle
  93:main.c        **** 	printf( "Task1 cnt=%u\r\n",cnt );
 596               	.LM42:
 597 0254 00D0      		rcall .
 598 0256 00D0      		rcall .
 599 0258 80E0      		ldi r24,lo8(.LC9)
 600 025a 90E0      		ldi r25,hi8(.LC9)
 601 025c EDB7      		in r30,__SP_L__
 602 025e FEB7      		in r31,__SP_H__
 603 0260 9283      		std Z+2,r25
 604 0262 8183      		std Z+1,r24
 605 0264 1483      		std Z+4,r17
 606 0266 0383      		std Z+3,r16
 607 0268 0E94 0000 		call printf
  94:main.c        **** 	nrk_wait_until_next_period();
 609               	.LM43:
 610 026c 0F90      		pop __tmp_reg__
 611 026e 0F90      		pop __tmp_reg__
 612 0270 0F90      		pop __tmp_reg__
 613 0272 0F90      		pop __tmp_reg__
 614 0274 0E94 0000 		call nrk_wait_until_next_period
 100:main.c        **** 	 if(cnt==50)  {
 616               	.LM44:
 617 0278 0233      		cpi r16,50
 618 027a 1105      		cpc r17,__zero_reg__
 619 027c 01F4      		brne .L8
 101:main.c        **** 		nrk_stats_display_all();
 621               	.LM45:
 622 027e 0E94 0000 		call nrk_stats_display_all
 103:main.c        **** 		nrk_halt();
 624               	.LM46:
 625 0282 0E94 0000 		call nrk_halt
 626 0286 00C0      		rjmp .L9
 627               	.L8:
 107:main.c        **** 	if( cnt==10 ) {
 629               	.LM47:
 630 0288 0A30      		cpi r16,10
 631 028a 1105      		cpc r17,__zero_reg__
 632 028c 01F0      		breq .+2
 633 028e 00C0      		rjmp .L9
 108:main.c        **** 	nrk_stats_get(nrk_get_pid(), &my_stats);
 635               	.LM48:
 636 0290 0E94 0000 		call nrk_get_pid
 637 0294 60E0      		ldi r22,lo8(my_stats)
 638 0296 70E0      		ldi r23,hi8(my_stats)
 639 0298 0E94 0000 		call nrk_stats_get
 109:main.c        **** 	nrk_kprintf( PSTR( "\r\n   Total CPU: "));
 641               	.LM49:
 642 029c 80E0      		ldi r24,lo8(__c.2168)
 643 029e 90E0      		ldi r25,hi8(__c.2168)
 644 02a0 0E94 0000 		call nrk_kprintf
 110:main.c        **** 	t=_nrk_ticks_to_time(my_stats.total_ticks);
 646               	.LM50:
 647 02a4 6091 0000 		lds r22,my_stats
 648 02a8 7091 0000 		lds r23,my_stats+1
 649 02ac 8091 0000 		lds r24,my_stats+2
 650 02b0 9091 0000 		lds r25,my_stats+3
 651 02b4 0E94 0000 		call _nrk_ticks_to_time
 652 02b8 2987      		std Y+9,r18
 653 02ba 3A87      		std Y+10,r19
 654 02bc 4B87      		std Y+11,r20
 655 02be 5C87      		std Y+12,r21
 656 02c0 6D87      		std Y+13,r22
 657 02c2 7E87      		std Y+14,r23
 658 02c4 8F87      		std Y+15,r24
 659 02c6 988B      		std Y+16,r25
 660 02c8 F501      		movw r30,r10
 661 02ca D301      		movw r26,r6
 662 02cc 88E0      		ldi r24,lo8(8)
 663               	.L10:
 664 02ce 0D90      		ld r0,X+
 665 02d0 0192      		st Z+,r0
 666 02d2 8150      		subi r24,lo8(-(-1))
 667 02d4 01F4      		brne .L10
 111:main.c        **** 	printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
 669               	.LM51:
 670 02d6 ADB7      		in r26,__SP_L__
 671 02d8 BEB7      		in r27,__SP_H__
 672 02da 1A97      		sbiw r26,10
 673 02dc 0FB6      		in __tmp_reg__,__SREG__
 674 02de F894      		cli
 675 02e0 BEBF      		out __SP_H__,r27
 676 02e2 0FBE      		out __SREG__,__tmp_reg__
 677 02e4 ADBF      		out __SP_L__,r26
 678 02e6 8DB6      		in r8,__SP_L__
 679 02e8 9EB6      		in r9,__SP_H__
 680 02ea 0894      		sec
 681 02ec 811C      		adc r8,__zero_reg__
 682 02ee 911C      		adc r9,__zero_reg__
 683 02f0 1296      		adiw r26,1+1
 684 02f2 5C92      		st X,r5
 685 02f4 4E92      		st -X,r4
 686 02f6 1197      		sbiw r26,1
 687 02f8 8981      		ldd r24,Y+1
 688 02fa 9A81      		ldd r25,Y+2
 689 02fc AB81      		ldd r26,Y+3
 690 02fe BC81      		ldd r27,Y+4
 691 0300 F401      		movw r30,r8
 692 0302 8283      		std Z+2,r24
 693 0304 9383      		std Z+3,r25
 694 0306 A483      		std Z+4,r26
 695 0308 B583      		std Z+5,r27
 696 030a 6D81      		ldd r22,Y+5
 697 030c 7E81      		ldd r23,Y+6
 698 030e 8F81      		ldd r24,Y+7
 699 0310 9885      		ldd r25,Y+8
 700 0312 A701      		movw r20,r14
 701 0314 9601      		movw r18,r12
 702 0316 0E94 0000 		call __udivmodsi4
 703 031a D401      		movw r26,r8
 704 031c 1696      		adiw r26,6
 705 031e 2D93      		st X+,r18
 706 0320 3D93      		st X+,r19
 707 0322 4D93      		st X+,r20
 708 0324 5C93      		st X,r21
 709 0326 1997      		sbiw r26,6+3
 710 0328 0E94 0000 		call printf
 112:main.c        **** 	nrk_kprintf( PSTR( "\r\n   Time [Min,Last,Max]: "));
 712               	.LM52:
 713 032c EDB7      		in r30,__SP_L__
 714 032e FEB7      		in r31,__SP_H__
 715 0330 3A96      		adiw r30,10
 716 0332 0FB6      		in __tmp_reg__,__SREG__
 717 0334 F894      		cli
 718 0336 FEBF      		out __SP_H__,r31
 719 0338 0FBE      		out __SREG__,__tmp_reg__
 720 033a EDBF      		out __SP_L__,r30
 721 033c 80E0      		ldi r24,lo8(__c.2170)
 722 033e 90E0      		ldi r25,hi8(__c.2170)
 723 0340 0E94 0000 		call nrk_kprintf
 113:main.c        **** 	t=_nrk_ticks_to_time(my_stats.min_exec_ticks);
 725               	.LM53:
 726 0344 6091 0000 		lds r22,my_stats+4
 727 0348 7091 0000 		lds r23,my_stats+4+1
 728 034c 8091 0000 		lds r24,my_stats+4+2
 729 0350 9091 0000 		lds r25,my_stats+4+3
 730 0354 0E94 0000 		call _nrk_ticks_to_time
 731 0358 2987      		std Y+9,r18
 732 035a 3A87      		std Y+10,r19
 733 035c 4B87      		std Y+11,r20
 734 035e 5C87      		std Y+12,r21
 735 0360 6D87      		std Y+13,r22
 736 0362 7E87      		std Y+14,r23
 737 0364 8F87      		std Y+15,r24
 738 0366 988B      		std Y+16,r25
 739 0368 F501      		movw r30,r10
 740 036a D301      		movw r26,r6
 741 036c 88E0      		ldi r24,lo8(8)
 742               	.L11:
 743 036e 0D90      		ld r0,X+
 744 0370 0192      		st Z+,r0
 745 0372 8150      		subi r24,lo8(-(-1))
 746 0374 01F4      		brne .L11
 114:main.c        **** 	printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
 748               	.LM54:
 749 0376 8DB7      		in r24,__SP_L__
 750 0378 9EB7      		in r25,__SP_H__
 751 037a 0A97      		sbiw r24,10
 752 037c 0FB6      		in __tmp_reg__,__SREG__
 753 037e F894      		cli
 754 0380 9EBF      		out __SP_H__,r25
 755 0382 0FBE      		out __SREG__,__tmp_reg__
 756 0384 8DBF      		out __SP_L__,r24
 757 0386 8DB6      		in r8,__SP_L__
 758 0388 9EB6      		in r9,__SP_H__
 759 038a 0894      		sec
 760 038c 811C      		adc r8,__zero_reg__
 761 038e 911C      		adc r9,__zero_reg__
 762 0390 ADB7      		in r26,__SP_L__
 763 0392 BEB7      		in r27,__SP_H__
 764 0394 1296      		adiw r26,1+1
 765 0396 3C92      		st X,r3
 766 0398 2E92      		st -X,r2
 767 039a 1197      		sbiw r26,1
 768 039c 8981      		ldd r24,Y+1
 769 039e 9A81      		ldd r25,Y+2
 770 03a0 AB81      		ldd r26,Y+3
 771 03a2 BC81      		ldd r27,Y+4
 772 03a4 F401      		movw r30,r8
 773 03a6 8283      		std Z+2,r24
 774 03a8 9383      		std Z+3,r25
 775 03aa A483      		std Z+4,r26
 776 03ac B583      		std Z+5,r27
 777 03ae 6D81      		ldd r22,Y+5
 778 03b0 7E81      		ldd r23,Y+6
 779 03b2 8F81      		ldd r24,Y+7
 780 03b4 9885      		ldd r25,Y+8
 781 03b6 A701      		movw r20,r14
 782 03b8 9601      		movw r18,r12
 783 03ba 0E94 0000 		call __udivmodsi4
 784 03be D401      		movw r26,r8
 785 03c0 1696      		adiw r26,6
 786 03c2 2D93      		st X+,r18
 787 03c4 3D93      		st X+,r19
 788 03c6 4D93      		st X+,r20
 789 03c8 5C93      		st X,r21
 790 03ca 1997      		sbiw r26,6+3
 791 03cc 0E94 0000 		call printf
 115:main.c        **** 	t=_nrk_ticks_to_time(my_stats.last_exec_ticks);
 793               	.LM55:
 794 03d0 EDB7      		in r30,__SP_L__
 795 03d2 FEB7      		in r31,__SP_H__
 796 03d4 3A96      		adiw r30,10
 797 03d6 0FB6      		in __tmp_reg__,__SREG__
 798 03d8 F894      		cli
 799 03da FEBF      		out __SP_H__,r31
 800 03dc 0FBE      		out __SREG__,__tmp_reg__
 801 03de EDBF      		out __SP_L__,r30
 802 03e0 6091 0000 		lds r22,my_stats+12
 803 03e4 7091 0000 		lds r23,my_stats+12+1
 804 03e8 8091 0000 		lds r24,my_stats+12+2
 805 03ec 9091 0000 		lds r25,my_stats+12+3
 806 03f0 0E94 0000 		call _nrk_ticks_to_time
 807 03f4 2987      		std Y+9,r18
 808 03f6 3A87      		std Y+10,r19
 809 03f8 4B87      		std Y+11,r20
 810 03fa 5C87      		std Y+12,r21
 811 03fc 6D87      		std Y+13,r22
 812 03fe 7E87      		std Y+14,r23
 813 0400 8F87      		std Y+15,r24
 814 0402 988B      		std Y+16,r25
 815 0404 F501      		movw r30,r10
 816 0406 D301      		movw r26,r6
 817 0408 88E0      		ldi r24,lo8(8)
 818               	.L12:
 819 040a 0D90      		ld r0,X+
 820 040c 0192      		st Z+,r0
 821 040e 8150      		subi r24,lo8(-(-1))
 822 0410 01F4      		brne .L12
 116:main.c        **** 	printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
 824               	.LM56:
 825 0412 8DB7      		in r24,__SP_L__
 826 0414 9EB7      		in r25,__SP_H__
 827 0416 0A97      		sbiw r24,10
 828 0418 0FB6      		in __tmp_reg__,__SREG__
 829 041a F894      		cli
 830 041c 9EBF      		out __SP_H__,r25
 831 041e 0FBE      		out __SREG__,__tmp_reg__
 832 0420 8DBF      		out __SP_L__,r24
 833 0422 8DB6      		in r8,__SP_L__
 834 0424 9EB6      		in r9,__SP_H__
 835 0426 0894      		sec
 836 0428 811C      		adc r8,__zero_reg__
 837 042a 911C      		adc r9,__zero_reg__
 838 042c ADB7      		in r26,__SP_L__
 839 042e BEB7      		in r27,__SP_H__
 840 0430 1296      		adiw r26,1+1
 841 0432 3C92      		st X,r3
 842 0434 2E92      		st -X,r2
 843 0436 1197      		sbiw r26,1
 844 0438 8981      		ldd r24,Y+1
 845 043a 9A81      		ldd r25,Y+2
 846 043c AB81      		ldd r26,Y+3
 847 043e BC81      		ldd r27,Y+4
 848 0440 F401      		movw r30,r8
 849 0442 8283      		std Z+2,r24
 850 0444 9383      		std Z+3,r25
 851 0446 A483      		std Z+4,r26
 852 0448 B583      		std Z+5,r27
 853 044a 6D81      		ldd r22,Y+5
 854 044c 7E81      		ldd r23,Y+6
 855 044e 8F81      		ldd r24,Y+7
 856 0450 9885      		ldd r25,Y+8
 857 0452 A701      		movw r20,r14
 858 0454 9601      		movw r18,r12
 859 0456 0E94 0000 		call __udivmodsi4
 860 045a D401      		movw r26,r8
 861 045c 1696      		adiw r26,6
 862 045e 2D93      		st X+,r18
 863 0460 3D93      		st X+,r19
 864 0462 4D93      		st X+,r20
 865 0464 5C93      		st X,r21
 866 0466 1997      		sbiw r26,6+3
 867 0468 0E94 0000 		call printf
 117:main.c        **** 	t=_nrk_ticks_to_time(my_stats.max_exec_ticks);
 869               	.LM57:
 870 046c EDB7      		in r30,__SP_L__
 871 046e FEB7      		in r31,__SP_H__
 872 0470 3A96      		adiw r30,10
 873 0472 0FB6      		in __tmp_reg__,__SREG__
 874 0474 F894      		cli
 875 0476 FEBF      		out __SP_H__,r31
 876 0478 0FBE      		out __SREG__,__tmp_reg__
 877 047a EDBF      		out __SP_L__,r30
 878 047c 6091 0000 		lds r22,my_stats+8
 879 0480 7091 0000 		lds r23,my_stats+8+1
 880 0484 8091 0000 		lds r24,my_stats+8+2
 881 0488 9091 0000 		lds r25,my_stats+8+3
 882 048c 0E94 0000 		call _nrk_ticks_to_time
 883 0490 2987      		std Y+9,r18
 884 0492 3A87      		std Y+10,r19
 885 0494 4B87      		std Y+11,r20
 886 0496 5C87      		std Y+12,r21
 887 0498 6D87      		std Y+13,r22
 888 049a 7E87      		std Y+14,r23
 889 049c 8F87      		std Y+15,r24
 890 049e 988B      		std Y+16,r25
 891 04a0 F501      		movw r30,r10
 892 04a2 D301      		movw r26,r6
 893 04a4 88E0      		ldi r24,lo8(8)
 894               	.L13:
 895 04a6 0D90      		ld r0,X+
 896 04a8 0192      		st Z+,r0
 897 04aa 8150      		subi r24,lo8(-(-1))
 898 04ac 01F4      		brne .L13
 118:main.c        **** 	printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
 900               	.LM58:
 901 04ae 8DB7      		in r24,__SP_L__
 902 04b0 9EB7      		in r25,__SP_H__
 903 04b2 0A97      		sbiw r24,10
 904 04b4 0FB6      		in __tmp_reg__,__SREG__
 905 04b6 F894      		cli
 906 04b8 9EBF      		out __SP_H__,r25
 907 04ba 0FBE      		out __SREG__,__tmp_reg__
 908 04bc 8DBF      		out __SP_L__,r24
 909 04be 8DB6      		in r8,__SP_L__
 910 04c0 9EB6      		in r9,__SP_H__
 911 04c2 0894      		sec
 912 04c4 811C      		adc r8,__zero_reg__
 913 04c6 911C      		adc r9,__zero_reg__
 914 04c8 ADB7      		in r26,__SP_L__
 915 04ca BEB7      		in r27,__SP_H__
 916 04cc 1296      		adiw r26,1+1
 917 04ce 5C92      		st X,r5
 918 04d0 4E92      		st -X,r4
 919 04d2 1197      		sbiw r26,1
 920 04d4 8981      		ldd r24,Y+1
 921 04d6 9A81      		ldd r25,Y+2
 922 04d8 AB81      		ldd r26,Y+3
 923 04da BC81      		ldd r27,Y+4
 924 04dc F401      		movw r30,r8
 925 04de 8283      		std Z+2,r24
 926 04e0 9383      		std Z+3,r25
 927 04e2 A483      		std Z+4,r26
 928 04e4 B583      		std Z+5,r27
 929 04e6 6D81      		ldd r22,Y+5
 930 04e8 7E81      		ldd r23,Y+6
 931 04ea 8F81      		ldd r24,Y+7
 932 04ec 9885      		ldd r25,Y+8
 933 04ee A701      		movw r20,r14
 934 04f0 9601      		movw r18,r12
 935 04f2 0E94 0000 		call __udivmodsi4
 936 04f6 D401      		movw r26,r8
 937 04f8 1696      		adiw r26,6
 938 04fa 2D93      		st X+,r18
 939 04fc 3D93      		st X+,r19
 940 04fe 4D93      		st X+,r20
 941 0500 5C93      		st X,r21
 942 0502 1997      		sbiw r26,6+3
 943 0504 0E94 0000 		call printf
 119:main.c        **** 	nrk_kprintf( PSTR( "\r\n   Swap-ins: "));
 945               	.LM59:
 946 0508 EDB7      		in r30,__SP_L__
 947 050a FEB7      		in r31,__SP_H__
 948 050c 3A96      		adiw r30,10
 949 050e 0FB6      		in __tmp_reg__,__SREG__
 950 0510 F894      		cli
 951 0512 FEBF      		out __SP_H__,r31
 952 0514 0FBE      		out __SREG__,__tmp_reg__
 953 0516 EDBF      		out __SP_L__,r30
 954 0518 80E0      		ldi r24,lo8(__c.2172)
 955 051a 90E0      		ldi r25,hi8(__c.2172)
 956 051c 0E94 0000 		call nrk_kprintf
 120:main.c        **** 	printf( "%lu",my_stats.swapped_in );
 958               	.LM60:
 959 0520 00D0      		rcall .
 960 0522 00D0      		rcall .
 961 0524 00D0      		rcall .
 962 0526 E0E0      		ldi r30,lo8(.LC12)
 963 0528 F0E0      		ldi r31,hi8(.LC12)
 964 052a ADB7      		in r26,__SP_L__
 965 052c BEB7      		in r27,__SP_H__
 966 052e 1296      		adiw r26,1+1
 967 0530 FC93      		st X,r31
 968 0532 EE93      		st -X,r30
 969 0534 1197      		sbiw r26,1
 970 0536 8091 0000 		lds r24,my_stats+16
 971 053a 9091 0000 		lds r25,my_stats+16+1
 972 053e A091 0000 		lds r26,my_stats+16+2
 973 0542 B091 0000 		lds r27,my_stats+16+3
 974 0546 EDB7      		in r30,__SP_L__
 975 0548 FEB7      		in r31,__SP_H__
 976 054a 8383      		std Z+3,r24
 977 054c 9483      		std Z+4,r25
 978 054e A583      		std Z+5,r26
 979 0550 B683      		std Z+6,r27
 980 0552 0E94 0000 		call printf
 121:main.c        **** 	nrk_kprintf( PSTR( "\r\n   Preemptions: "));
 982               	.LM61:
 983 0556 8DB7      		in r24,__SP_L__
 984 0558 9EB7      		in r25,__SP_H__
 985 055a 0696      		adiw r24,6
 986 055c 0FB6      		in __tmp_reg__,__SREG__
 987 055e F894      		cli
 988 0560 9EBF      		out __SP_H__,r25
 989 0562 0FBE      		out __SREG__,__tmp_reg__
 990 0564 8DBF      		out __SP_L__,r24
 991 0566 80E0      		ldi r24,lo8(__c.2174)
 992 0568 90E0      		ldi r25,hi8(__c.2174)
 993 056a 0E94 0000 		call nrk_kprintf
 122:main.c        **** 	printf( "%lu",my_stats.preempted);
 995               	.LM62:
 996 056e 00D0      		rcall .
 997 0570 00D0      		rcall .
 998 0572 00D0      		rcall .
 999 0574 E0E0      		ldi r30,lo8(.LC12)
 1000 0576 F0E0      		ldi r31,hi8(.LC12)
 1001 0578 ADB7      		in r26,__SP_L__
 1002 057a BEB7      		in r27,__SP_H__
 1003 057c 1296      		adiw r26,1+1
 1004 057e FC93      		st X,r31
 1005 0580 EE93      		st -X,r30
 1006 0582 1197      		sbiw r26,1
 1007 0584 8091 0000 		lds r24,my_stats+24
 1008 0588 9091 0000 		lds r25,my_stats+24+1
 1009 058c A091 0000 		lds r26,my_stats+24+2
 1010 0590 B091 0000 		lds r27,my_stats+24+3
 1011 0594 EDB7      		in r30,__SP_L__
 1012 0596 FEB7      		in r31,__SP_H__
 1013 0598 8383      		std Z+3,r24
 1014 059a 9483      		std Z+4,r25
 1015 059c A583      		std Z+5,r26
 1016 059e B683      		std Z+6,r27
 1017 05a0 0E94 0000 		call printf
 123:main.c        **** 	nrk_kprintf( PSTR( "\r\n   Kernel Violations: "));
 1019               	.LM63:
 1020 05a4 8DB7      		in r24,__SP_L__
 1021 05a6 9EB7      		in r25,__SP_H__
 1022 05a8 0696      		adiw r24,6
 1023 05aa 0FB6      		in __tmp_reg__,__SREG__
 1024 05ac F894      		cli
 1025 05ae 9EBF      		out __SP_H__,r25
 1026 05b0 0FBE      		out __SREG__,__tmp_reg__
 1027 05b2 8DBF      		out __SP_L__,r24
 1028 05b4 80E0      		ldi r24,lo8(__c.2176)
 1029 05b6 90E0      		ldi r25,hi8(__c.2176)
 1030 05b8 0E94 0000 		call nrk_kprintf
 124:main.c        **** 	printf( "%u",my_stats.violations);
 1032               	.LM64:
 1033 05bc 00D0      		rcall .
 1034 05be 00D0      		rcall .
 1035 05c0 EDB7      		in r30,__SP_L__
 1036 05c2 FEB7      		in r31,__SP_H__
 1037 05c4 3196      		adiw r30,1
 1038 05c6 80E0      		ldi r24,lo8(.LC13)
 1039 05c8 90E0      		ldi r25,hi8(.LC13)
 1040 05ca ADB7      		in r26,__SP_L__
 1041 05cc BEB7      		in r27,__SP_H__
 1042 05ce 1296      		adiw r26,1+1
 1043 05d0 9C93      		st X,r25
 1044 05d2 8E93      		st -X,r24
 1045 05d4 1197      		sbiw r26,1
 1046 05d6 8091 0000 		lds r24,my_stats+28
 1047 05da 8283      		std Z+2,r24
 1048 05dc 1382      		std Z+3,__zero_reg__
 1049 05de 0E94 0000 		call printf
 125:main.c        **** 	nrk_kprintf( PSTR( "\r\n   Overflow Error Status: "));
 1051               	.LM65:
 1052 05e2 0F90      		pop __tmp_reg__
 1053 05e4 0F90      		pop __tmp_reg__
 1054 05e6 0F90      		pop __tmp_reg__
 1055 05e8 0F90      		pop __tmp_reg__
 1056 05ea 80E0      		ldi r24,lo8(__c.2178)
 1057 05ec 90E0      		ldi r25,hi8(__c.2178)
 1058 05ee 0E94 0000 		call nrk_kprintf
 126:main.c        **** 	printf( "%u",my_stats.overflow);
 1060               	.LM66:
 1061 05f2 00D0      		rcall .
 1062 05f4 00D0      		rcall .
 1063 05f6 EDB7      		in r30,__SP_L__
 1064 05f8 FEB7      		in r31,__SP_H__
 1065 05fa 3196      		adiw r30,1
 1066 05fc 80E0      		ldi r24,lo8(.LC13)
 1067 05fe 90E0      		ldi r25,hi8(.LC13)
 1068 0600 ADB7      		in r26,__SP_L__
 1069 0602 BEB7      		in r27,__SP_H__
 1070 0604 1296      		adiw r26,1+1
 1071 0606 9C93      		st X,r25
 1072 0608 8E93      		st -X,r24
 1073 060a 1197      		sbiw r26,1
 1074 060c 8091 0000 		lds r24,my_stats+29
 1075 0610 8283      		std Z+2,r24
 1076 0612 1382      		std Z+3,__zero_reg__
 1077 0614 0E94 0000 		call printf
 127:main.c        **** 	nrk_kprintf( PSTR("\r\n") );
 1079               	.LM67:
 1080 0618 0F90      		pop __tmp_reg__
 1081 061a 0F90      		pop __tmp_reg__
 1082 061c 0F90      		pop __tmp_reg__
 1083 061e 0F90      		pop __tmp_reg__
 1084 0620 80E0      		ldi r24,lo8(__c.2180)
 1085 0622 90E0      		ldi r25,hi8(__c.2180)
 1086 0624 0E94 0000 		call nrk_kprintf
 1087               	.L9:
 130:main.c        **** 	cnt++;
 1089               	.LM68:
 1090 0628 0F5F      		subi r16,lo8(-(1))
 1091 062a 1F4F      		sbci r17,hi8(-(1))
 131:main.c        **** 	}
 1093               	.LM69:
 1094 062c 00C0      		rjmp .L14
 1100               	.Lscope4:
 1102               		.stabd	78,0,0
 1104               	.global	nrk_create_taskset
 1106               	nrk_create_taskset:
 1107               		.stabd	46,0,0
 175:main.c        **** 	}
 176:main.c        **** }
 177:main.c        **** 
 178:main.c        **** void
 179:main.c        **** nrk_create_taskset()
 180:main.c        **** {
 1109               	.LM70:
 1110               	.LFBB5:
 1111 062e 8F92      		push r8
 1112 0630 9F92      		push r9
 1113 0632 AF92      		push r10
 1114 0634 BF92      		push r11
 1115 0636 CF92      		push r12
 1116 0638 DF92      		push r13
 1117 063a EF92      		push r14
 1118 063c FF92      		push r15
 1119 063e 1F93      		push r17
 1120 0640 CF93      		push r28
 1121 0642 DF93      		push r29
 1122               	/* prologue: function */
 1123               	/* frame size = 0 */
 1124               	/* stack size = 11 */
 1125               	.L__stack_usage = 11
 181:main.c        ****   nrk_task_set_entry_function( &TaskOne, Task1);
 1127               	.LM71:
 1128 0644 C0E0      		ldi r28,lo8(TaskOne)
 1129 0646 D0E0      		ldi r29,hi8(TaskOne)
 1130 0648 CE01      		movw r24,r28
 1131 064a 60E0      		ldi r22,lo8(gs(Task1))
 1132 064c 70E0      		ldi r23,hi8(gs(Task1))
 1133 064e 0E94 0000 		call nrk_task_set_entry_function
 182:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 1135               	.LM72:
 1136 0652 CE01      		movw r24,r28
 1137 0654 60E0      		ldi r22,lo8(Stack1)
 1138 0656 70E0      		ldi r23,hi8(Stack1)
 1139 0658 40E8      		ldi r20,lo8(128)
 1140 065a 50E0      		ldi r21,hi8(128)
 1141 065c 0E94 0000 		call nrk_task_set_stk
 183:main.c        ****   TaskOne.prio = 1;
 1143               	.LM73:
 1144 0660 11E0      		ldi r17,lo8(1)
 1145 0662 1093 0000 		sts TaskOne+8,r17
 184:main.c        ****   TaskOne.FirstActivation = TRUE;
 1147               	.LM74:
 1148 0666 1093 0000 		sts TaskOne+7,r17
 185:main.c        ****   TaskOne.Type = BASIC_TASK;
 1150               	.LM75:
 1151 066a 1093 0000 		sts TaskOne+9,r17
 186:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 1153               	.LM76:
 1154 066e 1093 0000 		sts TaskOne+10,r17
 187:main.c        ****   TaskOne.period.secs = 0;
 1156               	.LM77:
 1157 0672 1092 0000 		sts TaskOne+11,__zero_reg__
 1158 0676 1092 0000 		sts TaskOne+11+1,__zero_reg__
 1159 067a 1092 0000 		sts TaskOne+11+2,__zero_reg__
 1160 067e 1092 0000 		sts TaskOne+11+3,__zero_reg__
 188:main.c        ****   TaskOne.period.nano_secs = 250*NANOS_PER_MS;
 1162               	.LM78:
 1163 0682 80E8      		ldi r24,lo8(250000000)
 1164 0684 92EB      		ldi r25,hi8(250000000)
 1165 0686 A6EE      		ldi r26,hlo8(250000000)
 1166 0688 BEE0      		ldi r27,hhi8(250000000)
 1167 068a 8093 0000 		sts TaskOne+15,r24
 1168 068e 9093 0000 		sts TaskOne+15+1,r25
 1169 0692 A093 0000 		sts TaskOne+15+2,r26
 1170 0696 B093 0000 		sts TaskOne+15+3,r27
 189:main.c        ****   TaskOne.cpu_reserve.secs = 1;
 1172               	.LM79:
 1173 069a 51E0      		ldi r21,lo8(1)
 1174 069c 852E      		mov r8,r21
 1175 069e 912C      		mov r9,__zero_reg__
 1176 06a0 A12C      		mov r10,__zero_reg__
 1177 06a2 B12C      		mov r11,__zero_reg__
 1178 06a4 8092 0000 		sts TaskOne+19,r8
 1179 06a8 9092 0000 		sts TaskOne+19+1,r9
 1180 06ac A092 0000 		sts TaskOne+19+2,r10
 1181 06b0 B092 0000 		sts TaskOne+19+3,r11
 190:main.c        ****   TaskOne.cpu_reserve.nano_secs = 50*NANOS_PER_MS;
 1183               	.LM80:
 1184 06b4 80E8      		ldi r24,lo8(50000000)
 1185 06b6 90EF      		ldi r25,hi8(50000000)
 1186 06b8 AAEF      		ldi r26,hlo8(50000000)
 1187 06ba B2E0      		ldi r27,hhi8(50000000)
 1188 06bc 8093 0000 		sts TaskOne+23,r24
 1189 06c0 9093 0000 		sts TaskOne+23+1,r25
 1190 06c4 A093 0000 		sts TaskOne+23+2,r26
 1191 06c8 B093 0000 		sts TaskOne+23+3,r27
 191:main.c        ****   TaskOne.offset.secs = 0;
 1193               	.LM81:
 1194 06cc 1092 0000 		sts TaskOne+27,__zero_reg__
 1195 06d0 1092 0000 		sts TaskOne+27+1,__zero_reg__
 1196 06d4 1092 0000 		sts TaskOne+27+2,__zero_reg__
 1197 06d8 1092 0000 		sts TaskOne+27+3,__zero_reg__
 192:main.c        ****   TaskOne.offset.nano_secs= 0;
 1199               	.LM82:
 1200 06dc 1092 0000 		sts TaskOne+31,__zero_reg__
 1201 06e0 1092 0000 		sts TaskOne+31+1,__zero_reg__
 1202 06e4 1092 0000 		sts TaskOne+31+2,__zero_reg__
 1203 06e8 1092 0000 		sts TaskOne+31+3,__zero_reg__
 193:main.c        ****   nrk_activate_task (&TaskOne);
 1205               	.LM83:
 1206 06ec CE01      		movw r24,r28
 1207 06ee 0E94 0000 		call nrk_activate_task
 194:main.c        **** 
 195:main.c        ****   nrk_task_set_entry_function( &TaskTwo, Task2);
 1209               	.LM84:
 1210 06f2 C0E0      		ldi r28,lo8(TaskTwo)
 1211 06f4 D0E0      		ldi r29,hi8(TaskTwo)
 1212 06f6 CE01      		movw r24,r28
 1213 06f8 60E0      		ldi r22,lo8(gs(Task2))
 1214 06fa 70E0      		ldi r23,hi8(gs(Task2))
 1215 06fc 0E94 0000 		call nrk_task_set_entry_function
 196:main.c        ****   nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
 1217               	.LM85:
 1218 0700 CE01      		movw r24,r28
 1219 0702 60E0      		ldi r22,lo8(Stack2)
 1220 0704 70E0      		ldi r23,hi8(Stack2)
 1221 0706 40E8      		ldi r20,lo8(128)
 1222 0708 50E0      		ldi r21,hi8(128)
 1223 070a 0E94 0000 		call nrk_task_set_stk
 197:main.c        ****   TaskTwo.prio = 2;
 1225               	.LM86:
 1226 070e 82E0      		ldi r24,lo8(2)
 1227 0710 8093 0000 		sts TaskTwo+8,r24
 198:main.c        ****   TaskTwo.FirstActivation = TRUE;
 1229               	.LM87:
 1230 0714 1093 0000 		sts TaskTwo+7,r17
 199:main.c        ****   TaskTwo.Type = BASIC_TASK;
 1232               	.LM88:
 1233 0718 1093 0000 		sts TaskTwo+9,r17
 200:main.c        ****   TaskTwo.SchType = PREEMPTIVE;
 1235               	.LM89:
 1236 071c 1093 0000 		sts TaskTwo+10,r17
 201:main.c        ****   TaskTwo.period.secs = 0;
 1238               	.LM90:
 1239 0720 1092 0000 		sts TaskTwo+11,__zero_reg__
 1240 0724 1092 0000 		sts TaskTwo+11+1,__zero_reg__
 1241 0728 1092 0000 		sts TaskTwo+11+2,__zero_reg__
 1242 072c 1092 0000 		sts TaskTwo+11+3,__zero_reg__
 202:main.c        ****   TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
 1244               	.LM91:
 1245 0730 80E0      		ldi r24,lo8(500000000)
 1246 0732 95E6      		ldi r25,hi8(500000000)
 1247 0734 ADEC      		ldi r26,hlo8(500000000)
 1248 0736 BDE1      		ldi r27,hhi8(500000000)
 1249 0738 8093 0000 		sts TaskTwo+15,r24
 1250 073c 9093 0000 		sts TaskTwo+15+1,r25
 1251 0740 A093 0000 		sts TaskTwo+15+2,r26
 1252 0744 B093 0000 		sts TaskTwo+15+3,r27
 203:main.c        ****   TaskTwo.cpu_reserve.secs = 0;
 1254               	.LM92:
 1255 0748 1092 0000 		sts TaskTwo+19,__zero_reg__
 1256 074c 1092 0000 		sts TaskTwo+19+1,__zero_reg__
 1257 0750 1092 0000 		sts TaskTwo+19+2,__zero_reg__
 1258 0754 1092 0000 		sts TaskTwo+19+3,__zero_reg__
 204:main.c        ****   TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 1260               	.LM93:
 1261 0758 C12C      		mov r12,__zero_reg__
 1262 075a 41EE      		ldi r20,hi8(100000000)
 1263 075c D42E      		mov r13,r20
 1264 075e 45EF      		ldi r20,hlo8(100000000)
 1265 0760 E42E      		mov r14,r20
 1266 0762 45E0      		ldi r20,hhi8(100000000)
 1267 0764 F42E      		mov r15,r20
 1268 0766 C092 0000 		sts TaskTwo+23,r12
 1269 076a D092 0000 		sts TaskTwo+23+1,r13
 1270 076e E092 0000 		sts TaskTwo+23+2,r14
 1271 0772 F092 0000 		sts TaskTwo+23+3,r15
 205:main.c        ****   TaskTwo.offset.secs = 0;
 1273               	.LM94:
 1274 0776 1092 0000 		sts TaskTwo+27,__zero_reg__
 1275 077a 1092 0000 		sts TaskTwo+27+1,__zero_reg__
 1276 077e 1092 0000 		sts TaskTwo+27+2,__zero_reg__
 1277 0782 1092 0000 		sts TaskTwo+27+3,__zero_reg__
 206:main.c        ****   TaskTwo.offset.nano_secs= 0;
 1279               	.LM95:
 1280 0786 1092 0000 		sts TaskTwo+31,__zero_reg__
 1281 078a 1092 0000 		sts TaskTwo+31+1,__zero_reg__
 1282 078e 1092 0000 		sts TaskTwo+31+2,__zero_reg__
 1283 0792 1092 0000 		sts TaskTwo+31+3,__zero_reg__
 207:main.c        ****   nrk_activate_task (&TaskTwo);
 1285               	.LM96:
 1286 0796 CE01      		movw r24,r28
 1287 0798 0E94 0000 		call nrk_activate_task
 208:main.c        **** 
 209:main.c        **** 
 210:main.c        ****   nrk_task_set_entry_function( &TaskThree, Task3);
 1289               	.LM97:
 1290 079c C0E0      		ldi r28,lo8(TaskThree)
 1291 079e D0E0      		ldi r29,hi8(TaskThree)
 1292 07a0 CE01      		movw r24,r28
 1293 07a2 60E0      		ldi r22,lo8(gs(Task3))
 1294 07a4 70E0      		ldi r23,hi8(gs(Task3))
 1295 07a6 0E94 0000 		call nrk_task_set_entry_function
 211:main.c        ****   nrk_task_set_stk( &TaskThree, Stack3, NRK_APP_STACKSIZE);
 1297               	.LM98:
 1298 07aa CE01      		movw r24,r28
 1299 07ac 60E0      		ldi r22,lo8(Stack3)
 1300 07ae 70E0      		ldi r23,hi8(Stack3)
 1301 07b0 40E8      		ldi r20,lo8(128)
 1302 07b2 50E0      		ldi r21,hi8(128)
 1303 07b4 0E94 0000 		call nrk_task_set_stk
 212:main.c        ****   TaskThree.prio = 3;
 1305               	.LM99:
 1306 07b8 83E0      		ldi r24,lo8(3)
 1307 07ba 8093 0000 		sts TaskThree+8,r24
 213:main.c        ****   TaskThree.FirstActivation = TRUE;
 1309               	.LM100:
 1310 07be 1093 0000 		sts TaskThree+7,r17
 214:main.c        ****   TaskThree.Type = BASIC_TASK;
 1312               	.LM101:
 1313 07c2 1093 0000 		sts TaskThree+9,r17
 215:main.c        ****   TaskThree.SchType = PREEMPTIVE;
 1315               	.LM102:
 1316 07c6 1093 0000 		sts TaskThree+10,r17
 216:main.c        ****   TaskThree.period.secs = 1;
 1318               	.LM103:
 1319 07ca 8092 0000 		sts TaskThree+11,r8
 1320 07ce 9092 0000 		sts TaskThree+11+1,r9
 1321 07d2 A092 0000 		sts TaskThree+11+2,r10
 1322 07d6 B092 0000 		sts TaskThree+11+3,r11
 217:main.c        ****   TaskThree.period.nano_secs = 0;
 1324               	.LM104:
 1325 07da 1092 0000 		sts TaskThree+15,__zero_reg__
 1326 07de 1092 0000 		sts TaskThree+15+1,__zero_reg__
 1327 07e2 1092 0000 		sts TaskThree+15+2,__zero_reg__
 1328 07e6 1092 0000 		sts TaskThree+15+3,__zero_reg__
 218:main.c        ****   TaskThree.cpu_reserve.secs = 0;
 1330               	.LM105:
 1331 07ea 1092 0000 		sts TaskThree+19,__zero_reg__
 1332 07ee 1092 0000 		sts TaskThree+19+1,__zero_reg__
 1333 07f2 1092 0000 		sts TaskThree+19+2,__zero_reg__
 1334 07f6 1092 0000 		sts TaskThree+19+3,__zero_reg__
 219:main.c        ****   TaskThree.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 1336               	.LM106:
 1337 07fa C092 0000 		sts TaskThree+23,r12
 1338 07fe D092 0000 		sts TaskThree+23+1,r13
 1339 0802 E092 0000 		sts TaskThree+23+2,r14
 1340 0806 F092 0000 		sts TaskThree+23+3,r15
 220:main.c        ****   TaskThree.offset.secs = 0;
 1342               	.LM107:
 1343 080a 1092 0000 		sts TaskThree+27,__zero_reg__
 1344 080e 1092 0000 		sts TaskThree+27+1,__zero_reg__
 1345 0812 1092 0000 		sts TaskThree+27+2,__zero_reg__
 1346 0816 1092 0000 		sts TaskThree+27+3,__zero_reg__
 221:main.c        ****   TaskThree.offset.nano_secs= 0;
 1348               	.LM108:
 1349 081a 1092 0000 		sts TaskThree+31,__zero_reg__
 1350 081e 1092 0000 		sts TaskThree+31+1,__zero_reg__
 1351 0822 1092 0000 		sts TaskThree+31+2,__zero_reg__
 1352 0826 1092 0000 		sts TaskThree+31+3,__zero_reg__
 222:main.c        ****   nrk_activate_task (&TaskThree);
 1354               	.LM109:
 1355 082a CE01      		movw r24,r28
 1356 082c 0E94 0000 		call nrk_activate_task
 223:main.c        **** 
 224:main.c        **** 
 225:main.c        ****   nrk_task_set_entry_function( &TaskFour, Task4);
 1358               	.LM110:
 1359 0830 C0E0      		ldi r28,lo8(TaskFour)
 1360 0832 D0E0      		ldi r29,hi8(TaskFour)
 1361 0834 CE01      		movw r24,r28
 1362 0836 60E0      		ldi r22,lo8(gs(Task4))
 1363 0838 70E0      		ldi r23,hi8(gs(Task4))
 1364 083a 0E94 0000 		call nrk_task_set_entry_function
 226:main.c        ****   nrk_task_set_stk( &TaskFour, Stack4, NRK_APP_STACKSIZE);
 1366               	.LM111:
 1367 083e CE01      		movw r24,r28
 1368 0840 60E0      		ldi r22,lo8(Stack4)
 1369 0842 70E0      		ldi r23,hi8(Stack4)
 1370 0844 40E8      		ldi r20,lo8(128)
 1371 0846 50E0      		ldi r21,hi8(128)
 1372 0848 0E94 0000 		call nrk_task_set_stk
 227:main.c        ****   TaskFour.prio = 4;
 1374               	.LM112:
 1375 084c 84E0      		ldi r24,lo8(4)
 1376 084e 8093 0000 		sts TaskFour+8,r24
 228:main.c        ****   TaskFour.FirstActivation = TRUE;
 1378               	.LM113:
 1379 0852 1093 0000 		sts TaskFour+7,r17
 229:main.c        ****   TaskFour.Type = BASIC_TASK;
 1381               	.LM114:
 1382 0856 1093 0000 		sts TaskFour+9,r17
 230:main.c        ****   TaskFour.SchType = PREEMPTIVE;
 1384               	.LM115:
 1385 085a 1093 0000 		sts TaskFour+10,r17
 231:main.c        ****   TaskFour.period.secs = 2;
 1387               	.LM116:
 1388 085e 82E0      		ldi r24,lo8(2)
 1389 0860 90E0      		ldi r25,hi8(2)
 1390 0862 A0E0      		ldi r26,hlo8(2)
 1391 0864 B0E0      		ldi r27,hhi8(2)
 1392 0866 8093 0000 		sts TaskFour+11,r24
 1393 086a 9093 0000 		sts TaskFour+11+1,r25
 1394 086e A093 0000 		sts TaskFour+11+2,r26
 1395 0872 B093 0000 		sts TaskFour+11+3,r27
 232:main.c        ****   TaskFour.period.nano_secs = 0;
 1397               	.LM117:
 1398 0876 1092 0000 		sts TaskFour+15,__zero_reg__
 1399 087a 1092 0000 		sts TaskFour+15+1,__zero_reg__
 1400 087e 1092 0000 		sts TaskFour+15+2,__zero_reg__
 1401 0882 1092 0000 		sts TaskFour+15+3,__zero_reg__
 233:main.c        ****   TaskFour.cpu_reserve.secs = 0;
 1403               	.LM118:
 1404 0886 1092 0000 		sts TaskFour+19,__zero_reg__
 1405 088a 1092 0000 		sts TaskFour+19+1,__zero_reg__
 1406 088e 1092 0000 		sts TaskFour+19+2,__zero_reg__
 1407 0892 1092 0000 		sts TaskFour+19+3,__zero_reg__
 234:main.c        ****   TaskFour.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 1409               	.LM119:
 1410 0896 C092 0000 		sts TaskFour+23,r12
 1411 089a D092 0000 		sts TaskFour+23+1,r13
 1412 089e E092 0000 		sts TaskFour+23+2,r14
 1413 08a2 F092 0000 		sts TaskFour+23+3,r15
 235:main.c        ****   TaskFour.offset.secs = 0;
 1415               	.LM120:
 1416 08a6 1092 0000 		sts TaskFour+27,__zero_reg__
 1417 08aa 1092 0000 		sts TaskFour+27+1,__zero_reg__
 1418 08ae 1092 0000 		sts TaskFour+27+2,__zero_reg__
 1419 08b2 1092 0000 		sts TaskFour+27+3,__zero_reg__
 236:main.c        ****   TaskFour.offset.nano_secs= 0;
 1421               	.LM121:
 1422 08b6 1092 0000 		sts TaskFour+31,__zero_reg__
 1423 08ba 1092 0000 		sts TaskFour+31+1,__zero_reg__
 1424 08be 1092 0000 		sts TaskFour+31+2,__zero_reg__
 1425 08c2 1092 0000 		sts TaskFour+31+3,__zero_reg__
 237:main.c        ****   nrk_activate_task (&TaskFour);
 1427               	.LM122:
 1428 08c6 CE01      		movw r24,r28
 1429 08c8 0E94 0000 		call nrk_activate_task
 1430               	/* epilogue start */
 238:main.c        **** 
 239:main.c        **** 
 240:main.c        **** }
 1432               	.LM123:
 1433 08cc DF91      		pop r29
 1434 08ce CF91      		pop r28
 1435 08d0 1F91      		pop r17
 1436 08d2 FF90      		pop r15
 1437 08d4 EF90      		pop r14
 1438 08d6 DF90      		pop r13
 1439 08d8 CF90      		pop r12
 1440 08da BF90      		pop r11
 1441 08dc AF90      		pop r10
 1442 08de 9F90      		pop r9
 1443 08e0 8F90      		pop r8
 1444 08e2 0895      		ret
 1446               	.Lscope5:
 1448               		.stabd	78,0,0
 1450               	.global	main
 1452               	main:
 1453               		.stabd	46,0,0
  57:main.c        **** {
 1455               	.LM124:
 1456               	.LFBB6:
 1457               	/* prologue: function */
 1458               	/* frame size = 0 */
 1459               	/* stack size = 0 */
 1460               	.L__stack_usage = 0
  58:main.c        ****   nrk_setup_ports();
 1462               	.LM125:
 1463 08e4 0E94 0000 		call nrk_setup_ports
  59:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 1465               	.LM126:
 1466 08e8 87E0      		ldi r24,lo8(7)
 1467 08ea 90E0      		ldi r25,hi8(7)
 1468 08ec 0E94 0000 		call nrk_setup_uart
  61:main.c        ****   nrk_init();
 1470               	.LM127:
 1471 08f0 0E94 0000 		call nrk_init
  63:main.c        ****   nrk_led_clr(ORANGE_LED);
 1473               	.LM128:
 1474 08f4 80E0      		ldi r24,lo8(0)
 1475 08f6 90E0      		ldi r25,hi8(0)
 1476 08f8 0E94 0000 		call nrk_led_clr
  64:main.c        ****   nrk_led_clr(BLUE_LED);
 1478               	.LM129:
 1479 08fc 81E0      		ldi r24,lo8(1)
 1480 08fe 90E0      		ldi r25,hi8(1)
 1481 0900 0E94 0000 		call nrk_led_clr
  65:main.c        ****   nrk_led_clr(GREEN_LED);
 1483               	.LM130:
 1484 0904 82E0      		ldi r24,lo8(2)
 1485 0906 90E0      		ldi r25,hi8(2)
 1486 0908 0E94 0000 		call nrk_led_clr
  66:main.c        ****   nrk_led_clr(RED_LED);
 1488               	.LM131:
 1489 090c 83E0      		ldi r24,lo8(3)
 1490 090e 90E0      		ldi r25,hi8(3)
 1491 0910 0E94 0000 		call nrk_led_clr
  68:main.c        ****   nrk_time_set(0,0);
 1493               	.LM132:
 1494 0914 60E0      		ldi r22,lo8(0)
 1495 0916 70E0      		ldi r23,hi8(0)
 1496 0918 CB01      		movw r24,r22
 1497 091a 20E0      		ldi r18,lo8(0)
 1498 091c 30E0      		ldi r19,hi8(0)
 1499 091e A901      		movw r20,r18
 1500 0920 0E94 0000 		call nrk_time_set
  69:main.c        ****   nrk_create_taskset ();
 1502               	.LM133:
 1503 0924 0E94 0000 		call nrk_create_taskset
  70:main.c        ****   nrk_start();
 1505               	.LM134:
 1506 0928 0E94 0000 		call nrk_start
  73:main.c        **** }
 1508               	.LM135:
 1509 092c 80E0      		ldi r24,lo8(0)
 1510 092e 90E0      		ldi r25,hi8(0)
 1511               	/* epilogue start */
 1512 0930 0895      		ret
 1514               	.Lscope6:
 1516               		.stabd	78,0,0
 1517               		.data
 1518               	.LC14:
 1519 00c7 2564 2000 		.string	"%d "
 1520               	.LC15:
 1521 00cb 4469 6520 		.string	"Die Stack %d\r\n"
 1521      5374 6163 
 1521      6B20 2564 
 1521      0D0A 00
 1522               		.text
 1525               	.global	kill_stack
 1527               	kill_stack:
 1528               		.stabd	46,0,0
 241:main.c        **** 
 242:main.c        **** uint8_t kill_stack(uint8_t val)
 243:main.c        **** {
 1530               	.LM136:
 1531               	.LFBB7:
 1532 0932 BF92      		push r11
 1533 0934 CF92      		push r12
 1534 0936 DF92      		push r13
 1535 0938 EF92      		push r14
 1536 093a FF92      		push r15
 1537 093c 0F93      		push r16
 1538 093e 1F93      		push r17
 1539 0940 DF93      		push r29
 1540 0942 CF93      		push r28
 1541 0944 CDB7      		in r28,__SP_L__
 1542 0946 DEB7      		in r29,__SP_H__
 1543 0948 2A97      		sbiw r28,10
 1544 094a 0FB6      		in __tmp_reg__,__SREG__
 1545 094c F894      		cli
 1546 094e DEBF      		out __SP_H__,r29
 1547 0950 0FBE      		out __SREG__,__tmp_reg__
 1548 0952 CDBF      		out __SP_L__,r28
 1549               	/* prologue: function */
 1550               	/* frame size = 10 */
 1551               	/* stack size = 19 */
 1552               	.L__stack_usage = 19
 1553 0954 B82E      		mov r11,r24
 244:main.c        **** char bad_memory[10];
 245:main.c        **** uint8_t i;
 246:main.c        **** for(i=0; i<10; i++ ) bad_memory[i]=i;
 1555               	.LM137:
 1556 0956 8E01      		movw r16,r28
 1557 0958 0F5F      		subi r16,lo8(-(1))
 1558 095a 1F4F      		sbci r17,hi8(-(1))
 243:main.c        **** {
 1560               	.LM138:
 1561 095c F801      		movw r30,r16
 1563               	.LM139:
 1564 095e 80E0      		ldi r24,lo8(0)
 1565               	.L22:
 1567               	.LM140:
 1568 0960 8193      		st Z+,r24
 1569 0962 8F5F      		subi r24,lo8(-(1))
 1570 0964 8A30      		cpi r24,lo8(10)
 1571 0966 01F4      		brne .L22
 242:main.c        **** uint8_t kill_stack(uint8_t val)
 1573               	.LM141:
 1574 0968 7BE0      		ldi r23,lo8(11)
 1575 096a E72E      		mov r14,r23
 1576 096c F12C      		mov r15,__zero_reg__
 1577 096e EC0E      		add r14,r28
 1578 0970 FD1E      		adc r15,r29
 247:main.c        **** for(i=0; i<10; i++ ) printf( "%d ", bad_memory[i]);
 1580               	.LM142:
 1581 0972 60E0      		ldi r22,lo8(.LC14)
 1582 0974 C62E      		mov r12,r22
 1583 0976 60E0      		ldi r22,hi8(.LC14)
 1584 0978 D62E      		mov r13,r22
 1585               	.L23:
 1587               	.LM143:
 1588 097a D801      		movw r26,r16
 1589 097c 8D91      		ld r24,X+
 1590 097e 8D01      		movw r16,r26
 1591 0980 00D0      		rcall .
 1592 0982 00D0      		rcall .
 1593 0984 EDB7      		in r30,__SP_L__
 1594 0986 FEB7      		in r31,__SP_H__
 1595 0988 3196      		adiw r30,1
 1596 098a ADB7      		in r26,__SP_L__
 1597 098c BEB7      		in r27,__SP_H__
 1598 098e 1296      		adiw r26,1+1
 1599 0990 DC92      		st X,r13
 1600 0992 CE92      		st -X,r12
 1601 0994 1197      		sbiw r26,1
 1602 0996 8283      		std Z+2,r24
 1603 0998 1382      		std Z+3,__zero_reg__
 1604 099a 0E94 0000 		call printf
 1605 099e 0F90      		pop __tmp_reg__
 1606 09a0 0F90      		pop __tmp_reg__
 1607 09a2 0F90      		pop __tmp_reg__
 1608 09a4 0F90      		pop __tmp_reg__
 1609 09a6 0E15      		cp r16,r14
 1610 09a8 1F05      		cpc r17,r15
 1611 09aa 01F4      		brne .L23
 248:main.c        ****    printf( "Die Stack %d\r\n",val );
 1613               	.LM144:
 1614 09ac 00D0      		rcall .
 1615 09ae 00D0      		rcall .
 1616 09b0 EDB7      		in r30,__SP_L__
 1617 09b2 FEB7      		in r31,__SP_H__
 1618 09b4 3196      		adiw r30,1
 1619 09b6 20E0      		ldi r18,lo8(.LC15)
 1620 09b8 30E0      		ldi r19,hi8(.LC15)
 1621 09ba ADB7      		in r26,__SP_L__
 1622 09bc BEB7      		in r27,__SP_H__
 1623 09be 1296      		adiw r26,1+1
 1624 09c0 3C93      		st X,r19
 1625 09c2 2E93      		st -X,r18
 1626 09c4 1197      		sbiw r26,1
 1627 09c6 B282      		std Z+2,r11
 1628 09c8 1382      		std Z+3,__zero_reg__
 1629 09ca 0E94 0000 		call printf
 249:main.c        **** if(val>1) kill_stack(val-1);
 1631               	.LM145:
 1632 09ce 0F90      		pop __tmp_reg__
 1633 09d0 0F90      		pop __tmp_reg__
 1634 09d2 0F90      		pop __tmp_reg__
 1635 09d4 0F90      		pop __tmp_reg__
 1636 09d6 BB2D      		mov r27,r11
 1637 09d8 B230      		cpi r27,lo8(2)
 1638 09da 00F0      		brlo .L24
 1640               	.LM146:
 1641 09dc 8B2D      		mov r24,r11
 1642 09de 8150      		subi r24,lo8(-(-1))
 1643 09e0 0E94 0000 		call kill_stack
 1644               	.L24:
 250:main.c        **** return 0;
 251:main.c        **** }
 1646               	.LM147:
 1647 09e4 80E0      		ldi r24,lo8(0)
 1648               	/* epilogue start */
 1649 09e6 2A96      		adiw r28,10
 1650 09e8 0FB6      		in __tmp_reg__,__SREG__
 1651 09ea F894      		cli
 1652 09ec DEBF      		out __SP_H__,r29
 1653 09ee 0FBE      		out __SREG__,__tmp_reg__
 1654 09f0 CDBF      		out __SP_L__,r28
 1655 09f2 CF91      		pop r28
 1656 09f4 DF91      		pop r29
 1657 09f6 1F91      		pop r17
 1658 09f8 0F91      		pop r16
 1659 09fa FF90      		pop r15
 1660 09fc EF90      		pop r14
 1661 09fe DF90      		pop r13
 1662 0a00 CF90      		pop r12
 1663 0a02 BF90      		pop r11
 1664 0a04 0895      		ret
 1670               	.Lscope7:
 1672               		.stabd	78,0,0
 1673               		.comm _nrk_signal_list,4,1
 1674               		.comm nrk_idle_task_stk,128,1
 1675               		.comm nrk_kernel_stk_ptr,2,1
 1676               		.comm error_task,1,1
 1677               		.comm error_num,1,1
 1678               		.comm _nrk_prev_timer_val,1,1
 1679               		.comm _nrk_time_trigger,1,1
 1680               		.comm app_timer0_callback,2,1
 1681               		.comm app_timer0_prescale,1,1
 1682               		.comm cur_task_stats,150,1
 1683               		.comm _nrk_stats_sleep_time,8,1
 1684               		.comm Stack1,128,1
 1685               		.comm TaskOne,35,1
 1686               		.comm Stack2,128,1
 1687               		.comm TaskTwo,35,1
 1688               		.comm Stack3,128,1
 1689               		.comm TaskThree,35,1
 1690               		.comm Stack4,128,1
 1691               		.comm TaskFour,35,1
 1692               		.comm my_stats,30,1
 1693               		.section	.progmem.data,"a",@progbits
 1696               	__c.2180:
 1697 0000 0D0A 00   		.string	"\r\n"
 1700               	__c.2178:
 1701 0003 0D0A 2020 		.string	"\r\n   Overflow Error Status: "
 1701      204F 7665 
 1701      7266 6C6F 
 1701      7720 4572 
 1701      726F 7220 
 1704               	__c.2176:
 1705 0020 0D0A 2020 		.string	"\r\n   Kernel Violations: "
 1705      204B 6572 
 1705      6E65 6C20 
 1705      5669 6F6C 
 1705      6174 696F 
 1708               	__c.2174:
 1709 0039 0D0A 2020 		.string	"\r\n   Preemptions: "
 1709      2050 7265 
 1709      656D 7074 
 1709      696F 6E73 
 1709      3A20 00
 1712               	__c.2172:
 1713 004c 0D0A 2020 		.string	"\r\n   Swap-ins: "
 1713      2053 7761 
 1713      702D 696E 
 1713      733A 2000 
 1716               	__c.2170:
 1717 005c 0D0A 2020 		.string	"\r\n   Time [Min,Last,Max]: "
 1717      2054 696D 
 1717      6520 5B4D 
 1717      696E 2C4C 
 1717      6173 742C 
 1720               	__c.2168:
 1721 0077 0D0A 2020 		.string	"\r\n   Total CPU: "
 1721      2054 6F74 
 1721      616C 2043 
 1721      5055 3A20 
 1721      00
 1724               	__c.2166:
 1725 0088 4E61 6E6F 		.string	"Nano-RK Version "
 1725      2D52 4B20 
 1725      5665 7273 
 1725      696F 6E20 
 1725      00
 1746               		.text
 1748               	.Letext0:
 1749               	.global __do_copy_data
 1750               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccfM38Yy.s:2      *ABS*:0000003f __SREG__
     /tmp/ccfM38Yy.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccfM38Yy.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccfM38Yy.s:5      *ABS*:00000034 __CCP__
     /tmp/ccfM38Yy.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccfM38Yy.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccfM38Yy.s:150    .text:00000000 Task4
     /tmp/ccfM38Yy.s:246    .text:00000076 Task3
     /tmp/ccfM38Yy.s:342    .text:000000ec Task2
     /tmp/ccfM38Yy.s:450    .text:00000162 Task1
     /tmp/ccfM38Yy.s:1724   .progmem.data:00000088 __c.2166
                            *COM*:0000001e my_stats
     /tmp/ccfM38Yy.s:1720   .progmem.data:00000077 __c.2168
     /tmp/ccfM38Yy.s:1716   .progmem.data:0000005c __c.2170
     /tmp/ccfM38Yy.s:1712   .progmem.data:0000004c __c.2172
     /tmp/ccfM38Yy.s:1708   .progmem.data:00000039 __c.2174
     /tmp/ccfM38Yy.s:1704   .progmem.data:00000020 __c.2176
     /tmp/ccfM38Yy.s:1700   .progmem.data:00000003 __c.2178
     /tmp/ccfM38Yy.s:1696   .progmem.data:00000000 __c.2180
     /tmp/ccfM38Yy.s:1106   .text:0000062e nrk_create_taskset
                            *COM*:00000023 TaskOne
                            *COM*:00000080 Stack1
                            *COM*:00000023 TaskTwo
                            *COM*:00000080 Stack2
                            *COM*:00000023 TaskThree
                            *COM*:00000080 Stack3
                            *COM*:00000023 TaskFour
                            *COM*:00000080 Stack4
     /tmp/ccfM38Yy.s:1452   .text:000008e4 main
     /tmp/ccfM38Yy.s:1527   .text:00000932 kill_stack
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000096 cur_task_stats
                            *COM*:00000008 _nrk_stats_sleep_time

UNDEFINED SYMBOLS
nrk_get_pid
printf
NRK_DEBUG_3
nrk_led_toggle
nrk_gpio_toggle
nrk_wait_until_next_period
NRK_DEBUG_2
NRK_DEBUG_1
nrk_kprintf
NRK_DEBUG_0
nrk_stats_display_all
nrk_halt
nrk_stats_get
_nrk_ticks_to_time
__udivmodsi4
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_led_clr
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
