
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001bc  00800200  000063ca  0000645e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000063ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b8  008003bc  008003bc  0000661a  2**0
                  ALLOC
  3 .stab         000108a8  00000000  00000000  0000661c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000994f  00000000  00000000  00016ec4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 02 	jmp	0x524	; 0x524 <__ctors_end>
       4:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__vector_1>
       8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
       c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      10:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      14:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      18:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      1c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      20:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      24:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__vector_9>
      28:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      2c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      30:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      34:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__vector_13>
      38:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      3c:	0c 94 a5 23 	jmp	0x474a	; 0x474a <__vector_13>
      40:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      44:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      48:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      4c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      50:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      54:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      58:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      5c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      60:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      64:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      68:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      6c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      70:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      74:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      78:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      7c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      80:	0c 94 d8 23 	jmp	0x47b0	; 0x47b0 <__vector_32>
      84:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      88:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      8c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      90:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      94:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      98:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      9c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      a0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      a4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      a8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      ac:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      b0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      b4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      b8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      bc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      c0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      c4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      c8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      cc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      d0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      d4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      d8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      dc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      e0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      e4:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__vector_57>
      e8:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__vector_58>
      ec:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__vector_59>
      f0:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__vector_60>
      f4:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <__vector_61>
      f8:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__vector_62>
      fc:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__vector_63>
     100:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__vector_64>
     104:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     108:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     10c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     110:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     114:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     118:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     11c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     120:	be 14       	cp	r11, r14
     122:	c4 14       	cp	r12, r4
     124:	c7 14       	cp	r12, r7
     126:	ca 14       	cp	r12, r10
     128:	cd 14       	cp	r12, r13
     12a:	d0 14       	cp	r13, r0
     12c:	d6 14       	cp	r13, r6
     12e:	d3 14       	cp	r13, r3
     130:	d9 14       	cp	r13, r9
     132:	dc 14       	cp	r13, r12
     134:	df 14       	cp	r13, r15
     136:	e8 14       	cp	r14, r8
     138:	eb 14       	cp	r14, r11
     13a:	ee 14       	cp	r14, r14
     13c:	f1 14       	cp	r15, r1
     13e:	e5 14       	cp	r14, r5
     140:	bb 14       	cp	r11, r11
     142:	c1 14       	cp	r12, r1
     144:	f4 14       	cp	r15, r4
     146:	f7 14       	cp	r15, r7
     148:	e2 14       	cp	r14, r2
     14a:	b8 14       	cp	r11, r8

0000014c <__c.2911>:
     14c:	4f 53 20 74 69 63 6b 20 74 69 6d 65 3a 20 00        OS tick time: .

0000015b <__c.2901>:
     15b:	4d 61 78 20 77 61 6b 65 75 70 20 74 69 6d 65 3a     Max wakeup time:
     16b:	20 00                                                .

0000016d <__c.2899>:
     16d:	4e 4f 20 50 4b 54 0d 0a 00                          NO PKT...

00000176 <__c.2897>:
     176:	4f 4b 20 20 52 53 53 49 3a 00                       OK  RSSI:.

00000180 <__c.2895>:
     180:	52 58 20 73 74 61 74 75 73 3a 20 00                 RX status: .

0000018c <__c.2893>:
     18c:	4e 4f 4e 45 0d 0a 00                                NONE...

00000193 <__c.2891>:
     193:	4f 4b 0d 0a 00                                      OK...

00000198 <__c.2889>:
     198:	54 58 20 73 74 61 74 75 73 3a 20 00                 TX status: .

000001a4 <__c.2887>:
     1a4:	53 65 6c 66 20 54 65 73 74 20 43 79 63 6c 65 3a     Self Test Cycle:
     1b4:	20 00                                                .

000001b6 <__c.2885>:
     1b6:	54 58 20 64 6f 6e 65 20 73 69 67 6e 61 6c 20 65     TX done signal e
     1c6:	72 72 6f 72 0d 0a 00                                rror...

000001cd <__c.2864>:
     1cd:	45 52 52 4f 52 20 73 65 74 74 69 6e 67 20 62 6d     ERROR setting bm
     1dd:	61 63 20 72 61 74 65 0d 0a 00                       ac rate...

000001e7 <__c.3154>:
     1e7:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     1f7:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

00000203 <__c.3128>:
     203:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     213:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     223:	0d 0a 00                                            ...

00000226 <__c.3126>:
     226:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     236:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     246:	74 0d 0a 00                                         t...

0000024a <__c.3110>:
     24a:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     25a:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     26a:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

00000276 <__c.3108>:
     276:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     286:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     296:	61 69 6c 65 64 0d 0a 00                             ailed...

0000029e <__c.3106>:
     29e:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2ae:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     2be:	61 69 6c 65 64 0d 0a 00                             ailed...

000002c6 <__c.2852>:
     2c6:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000002cd <__c.2849>:
     2cd:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000002dc <__c.2846>:
     2dc:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000002ed <__c.2843>:
     2ed:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2fd:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000308 <__c.2840>:
     308:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     318:	20 53 69 67 6e 61 6c 00                              Signal.

00000320 <__c.2837>:
     320:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     330:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000340 <__c.2834>:
     340:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     350:	72 6f 72 00                                         ror.

00000354 <__c.2831>:
     354:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000365 <__c.2828>:
     365:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     375:	61 72 74 00                                         art.

00000379 <__c.2825>:
     379:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000388 <__c.2822>:
     388:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     398:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000003a3 <__c.2819>:
     3a3:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000003af <__c.2816>:
     3af:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     3bf:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     3cf:	20 6f 6b 3f 00                                       ok?.

000003d4 <__c.2813>:
     3d4:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     3e4:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000003f2 <__c.2810>:
     3f2:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     402:	72 74 00                                            rt.

00000405 <__c.2807>:
     405:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     415:	49 44 00                                            ID.

00000418 <__c.2804>:
     418:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     428:	20 57 61 6b 65 75 70 00                              Wakeup.

00000430 <__c.2801>:
     430:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     440:	6c 61 74 65 64 00                                   lated.

00000446 <__c.2798>:
     446:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     456:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000461 <__c.2795>:
     461:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     471:	69 6e 74 65 72 00                                   inter.

00000477 <__c.2792>:
     477:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     487:	6c 6f 77 00                                         low.

0000048b <__c.2789>:
     48b:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     49b:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     4ab:	6e 6f 75 67 68 21 00                                nough!.

000004b2 <__c.2785>:
     4b2:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     4c2:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     4d2:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     4e2:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000004ee <__c.2782>:
     4ee:	29 3a 20 00                                         ): .

000004f2 <__c.2780>:
     4f2:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000004fe <__c.2705>:
     4fe:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

0000050d <__c.1851>:
     50d:	45 46 47 65 66 67 00                                EFGefg.

00000514 <__c.1845>:
     514:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000524 <__ctors_end>:
     524:	11 24       	eor	r1, r1
     526:	1f be       	out	0x3f, r1	; 63
     528:	cf ef       	ldi	r28, 0xFF	; 255
     52a:	d1 e4       	ldi	r29, 0x41	; 65
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	cd bf       	out	0x3d, r28	; 61

00000530 <__do_copy_data>:
     530:	13 e0       	ldi	r17, 0x03	; 3
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b2 e0       	ldi	r27, 0x02	; 2
     536:	ea ec       	ldi	r30, 0xCA	; 202
     538:	f3 e6       	ldi	r31, 0x63	; 99
     53a:	00 e0       	ldi	r16, 0x00	; 0
     53c:	0b bf       	out	0x3b, r16	; 59
     53e:	02 c0       	rjmp	.+4      	; 0x544 <__do_copy_data+0x14>
     540:	07 90       	elpm	r0, Z+
     542:	0d 92       	st	X+, r0
     544:	ac 3b       	cpi	r26, 0xBC	; 188
     546:	b1 07       	cpc	r27, r17
     548:	d9 f7       	brne	.-10     	; 0x540 <__do_copy_data+0x10>

0000054a <__do_clear_bss>:
     54a:	18 e0       	ldi	r17, 0x08	; 8
     54c:	ac eb       	ldi	r26, 0xBC	; 188
     54e:	b3 e0       	ldi	r27, 0x03	; 3
     550:	01 c0       	rjmp	.+2      	; 0x554 <.do_clear_bss_start>

00000552 <.do_clear_bss_loop>:
     552:	1d 92       	st	X+, r1

00000554 <.do_clear_bss_start>:
     554:	a4 37       	cpi	r26, 0x74	; 116
     556:	b1 07       	cpc	r27, r17
     558:	e1 f7       	brne	.-8      	; 0x552 <.do_clear_bss_loop>
     55a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <main>
     55e:	0c 94 e3 31 	jmp	0x63c6	; 0x63c6 <_exit>

00000562 <__bad_interrupt>:
     562:	0c 94 8d 23 	jmp	0x471a	; 0x471a <__vector_default>

00000566 <tx_task>:

}


void tx_task ()
{
     566:	2f 92       	push	r2
     568:	3f 92       	push	r3
     56a:	4f 92       	push	r4
     56c:	5f 92       	push	r5
     56e:	6f 92       	push	r6
     570:	7f 92       	push	r7
     572:	8f 92       	push	r8
     574:	9f 92       	push	r9
     576:	af 92       	push	r10
     578:	bf 92       	push	r11
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	df 93       	push	r29
     588:	cf 93       	push	r28
     58a:	00 d0       	rcall	.+0      	; 0x58c <tx_task+0x26>
     58c:	00 d0       	rcall	.+0      	; 0x58e <tx_task+0x28>
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
  nrk_sig_mask_t ret;

  iterations=0;
  ticks_min=-1;
  ticks_max=0;
  tx_data_ok=0;
     592:	10 92 01 05 	sts	0x0501, r1
  printf ("tx_task PID=%d\r\n", nrk_get_pid ());
     596:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_get_pid>
     59a:	00 d0       	rcall	.+0      	; 0x59c <tx_task+0x36>
     59c:	00 d0       	rcall	.+0      	; 0x59e <tx_task+0x38>
     59e:	ed b7       	in	r30, 0x3d	; 61
     5a0:	fe b7       	in	r31, 0x3e	; 62
     5a2:	31 96       	adiw	r30, 0x01	; 1
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	32 e0       	ldi	r19, 0x02	; 2
     5a8:	ad b7       	in	r26, 0x3d	; 61
     5aa:	be b7       	in	r27, 0x3e	; 62
     5ac:	12 96       	adiw	r26, 0x02	; 2
     5ae:	3c 93       	st	X, r19
     5b0:	2e 93       	st	-X, r18
     5b2:	11 97       	sbiw	r26, 0x01	; 1
     5b4:	82 83       	std	Z+2, r24	; 0x02
     5b6:	13 82       	std	Z+3, r1	; 0x03
     5b8:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>

  // Wait until the tx_task starts up bmac
  // This should be called by all tasks using bmac that
  // do not call bmac_init()...
  while (!bmac_started ())
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <tx_task+0x64>
    nrk_wait_until_next_period ();
     5c6:	0e 94 77 1c 	call	0x38ee	; 0x38ee <nrk_wait_until_next_period>
  printf ("tx_task PID=%d\r\n", nrk_get_pid ());

  // Wait until the tx_task starts up bmac
  // This should be called by all tasks using bmac that
  // do not call bmac_init()...
  while (!bmac_started ())
     5ca:	0e 94 fd 06 	call	0xdfa	; 0xdfa <bmac_started>
     5ce:	88 23       	and	r24, r24
     5d0:	d1 f3       	breq	.-12     	; 0x5c6 <tx_task+0x60>
    nrk_wait_until_next_period ();

  // Get and register the tx_done_signal if you want to
  // do non-blocking transmits
  tx_done_signal = bmac_get_tx_done_signal ();
     5d2:	0e 94 2e 06 	call	0xc5c	; 0xc5c <bmac_get_tx_done_signal>
     5d6:	c8 2e       	mov	r12, r24
  nrk_signal_register (tx_done_signal);
     5d8:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <nrk_signal_register>

    // This function shows how to transmit packets in a
    // non-blocking manner  
    val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
    // This functions waits on the tx_done_signal
    ret = nrk_event_wait (SIG(tx_done_signal));
     5dc:	41 e0       	ldi	r20, 0x01	; 1
     5de:	e4 2e       	mov	r14, r20
     5e0:	f1 2c       	mov	r15, r1
     5e2:	01 2d       	mov	r16, r1
     5e4:	11 2d       	mov	r17, r1
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <tx_task+0x8a>
     5e8:	ee 0c       	add	r14, r14
     5ea:	ff 1c       	adc	r15, r15
     5ec:	00 1f       	adc	r16, r16
     5ee:	11 1f       	adc	r17, r17
     5f0:	ca 94       	dec	r12
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <tx_task+0x82>

    // Just check to be sure signal is okay
    if(ret & SIG(tx_done_signal) == 0 ) 
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	29 83       	std	Y+1, r18	; 0x01
     5fe:	3a 83       	std	Y+2, r19	; 0x02
     600:	4b 83       	std	Y+3, r20	; 0x03
     602:	5c 83       	std	Y+4, r21	; 0x04
     604:	e1 14       	cp	r14, r1
     606:	f1 04       	cpc	r15, r1
     608:	01 05       	cpc	r16, r1
     60a:	11 05       	cpc	r17, r1
     60c:	21 f0       	breq	.+8      	; 0x616 <tx_task+0xb0>
     60e:	19 82       	std	Y+1, r1	; 0x01
     610:	1a 82       	std	Y+2, r1	; 0x02
     612:	1b 82       	std	Y+3, r1	; 0x03
     614:	1c 82       	std	Y+4, r1	; 0x04
  uint16_t iterations;
  uint16_t nrk_max_sleep_wakeup_time;
  nrk_sig_t tx_done_signal;
  nrk_sig_mask_t ret;

  iterations=0;
     616:	cc 24       	eor	r12, r12
     618:	dd 24       	eor	r13, r13
  ticks_min=-1;
  ticks_max=0;
     61a:	aa 24       	eor	r10, r10
     61c:	bb 24       	eor	r11, r11
  uint16_t nrk_max_sleep_wakeup_time;
  nrk_sig_t tx_done_signal;
  nrk_sig_mask_t ret;

  iterations=0;
  ticks_min=-1;
     61e:	88 24       	eor	r8, r8
     620:	8a 94       	dec	r8
     622:	98 2c       	mov	r9, r8
  nrk_signal_register (tx_done_signal);

  cnt = 0;
  while (1) {
    // Build a TX packet
    sprintf (tx_buf, "This is a test %d", cnt);
     624:	3d e1       	ldi	r19, 0x1D	; 29
     626:	63 2e       	mov	r6, r19
     628:	36 e0       	ldi	r19, 0x06	; 6
     62a:	73 2e       	mov	r7, r19
    //nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
    nrk_led_clr (GREEN_LED);
    nrk_wait_until_next_period ();

   nrk_kprintf( PSTR( "Self Test Cycle: ") );
   printf( "%d\r\n",iterations);
     62c:	23 e2       	ldi	r18, 0x23	; 35
     62e:	42 2e       	mov	r4, r18
     630:	22 e0       	ldi	r18, 0x02	; 2
     632:	52 2e       	mov	r5, r18
  nrk_signal_register (tx_done_signal);

  cnt = 0;
  while (1) {
    // Build a TX packet
    sprintf (tx_buf, "This is a test %d", cnt);
     634:	00 d0       	rcall	.+0      	; 0x636 <tx_task+0xd0>
     636:	00 d0       	rcall	.+0      	; 0x638 <tx_task+0xd2>
     638:	00 d0       	rcall	.+0      	; 0x63a <tx_task+0xd4>
     63a:	ed b7       	in	r30, 0x3d	; 61
     63c:	fe b7       	in	r31, 0x3e	; 62
     63e:	31 96       	adiw	r30, 0x01	; 1
     640:	ad b7       	in	r26, 0x3d	; 61
     642:	be b7       	in	r27, 0x3e	; 62
     644:	12 96       	adiw	r26, 0x02	; 2
     646:	7c 92       	st	X, r7
     648:	6e 92       	st	-X, r6
     64a:	11 97       	sbiw	r26, 0x01	; 1
     64c:	91 e1       	ldi	r25, 0x11	; 17
     64e:	29 2e       	mov	r2, r25
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	39 2e       	mov	r3, r25
     654:	33 82       	std	Z+3, r3	; 0x03
     656:	22 82       	std	Z+2, r2	; 0x02
     658:	c4 82       	std	Z+4, r12	; 0x04
     65a:	15 82       	std	Z+5, r1	; 0x05
     65c:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <sprintf>
    cnt++;
    nrk_led_set (GREEN_LED);
     660:	2d b7       	in	r18, 0x3d	; 61
     662:	3e b7       	in	r19, 0x3e	; 62
     664:	2a 5f       	subi	r18, 0xFA	; 250
     666:	3f 4f       	sbci	r19, 0xFF	; 255
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	3e bf       	out	0x3e, r19	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	2d bf       	out	0x3d, r18	; 61
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 52 10 	call	0x20a4	; 0x20a4 <nrk_led_set>
    // For this there is no need to register  
    // val=bmac_tx_packet(tx_buf, strlen(tx_buf));

    // This function shows how to transmit packets in a
    // non-blocking manner  
    val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
     67a:	d3 01       	movw	r26, r6
     67c:	0d 90       	ld	r0, X+
     67e:	00 20       	and	r0, r0
     680:	e9 f7       	brne	.-6      	; 0x67c <tx_task+0x116>
     682:	bd 01       	movw	r22, r26
     684:	61 50       	subi	r22, 0x01	; 1
     686:	70 40       	sbci	r23, 0x00	; 0
     688:	6d 51       	subi	r22, 0x1D	; 29
     68a:	76 40       	sbci	r23, 0x06	; 6
     68c:	c3 01       	movw	r24, r6
     68e:	0e 94 16 06 	call	0xc2c	; 0xc2c <bmac_tx_pkt_nonblocking>
    // This functions waits on the tx_done_signal
    ret = nrk_event_wait (SIG(tx_done_signal));
     692:	c8 01       	movw	r24, r16
     694:	b7 01       	movw	r22, r14
     696:	0e 94 79 18 	call	0x30f2	; 0x30f2 <nrk_event_wait>

    // Just check to be sure signal is okay
    if(ret & SIG(tx_done_signal) == 0 ) 
     69a:	29 81       	ldd	r18, Y+1	; 0x01
     69c:	3a 81       	ldd	r19, Y+2	; 0x02
     69e:	4b 81       	ldd	r20, Y+3	; 0x03
     6a0:	5c 81       	ldd	r21, Y+4	; 0x04
     6a2:	62 23       	and	r22, r18
     6a4:	73 23       	and	r23, r19
     6a6:	84 23       	and	r24, r20
     6a8:	95 23       	and	r25, r21
     6aa:	61 15       	cp	r22, r1
     6ac:	71 05       	cpc	r23, r1
     6ae:	81 05       	cpc	r24, r1
     6b0:	91 05       	cpc	r25, r1
     6b2:	29 f0       	breq	.+10     	; 0x6be <tx_task+0x158>
    	nrk_kprintf (PSTR ("TX done signal error\r\n"));
     6b4:	86 eb       	ldi	r24, 0xB6	; 182
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
     6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <tx_task+0x15e>
    else tx_data_ok=1;
     6be:	31 e0       	ldi	r19, 0x01	; 1
     6c0:	30 93 01 05 	sts	0x0501, r19
    // Task gets control again after TX complete
    //nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
    nrk_led_clr (GREEN_LED);
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
    nrk_wait_until_next_period ();
     6cc:	0e 94 77 1c 	call	0x38ee	; 0x38ee <nrk_wait_until_next_period>

   nrk_kprintf( PSTR( "Self Test Cycle: ") );
     6d0:	84 ea       	ldi	r24, 0xA4	; 164
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
   printf( "%d\r\n",iterations);
     6d8:	00 d0       	rcall	.+0      	; 0x6da <tx_task+0x174>
     6da:	00 d0       	rcall	.+0      	; 0x6dc <tx_task+0x176>
     6dc:	ad b7       	in	r26, 0x3d	; 61
     6de:	be b7       	in	r27, 0x3e	; 62
     6e0:	12 96       	adiw	r26, 0x02	; 2
     6e2:	5c 92       	st	X, r5
     6e4:	4e 92       	st	-X, r4
     6e6:	11 97       	sbiw	r26, 0x01	; 1
     6e8:	14 96       	adiw	r26, 0x04	; 4
     6ea:	dc 92       	st	X, r13
     6ec:	ce 92       	st	-X, r12
     6ee:	13 97       	sbiw	r26, 0x03	; 3
     6f0:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
   iterations++;
     6f4:	08 94       	sec
     6f6:	c1 1c       	adc	r12, r1
     6f8:	d1 1c       	adc	r13, r1
   nrk_kprintf( PSTR( "TX status: ") );
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	88 e9       	ldi	r24, 0x98	; 152
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
   if(tx_data_ok==1) nrk_kprintf( PSTR( "OK\r\n" ));
     70a:	80 91 01 05 	lds	r24, 0x0501
     70e:	81 30       	cpi	r24, 0x01	; 1
     710:	19 f4       	brne	.+6      	; 0x718 <tx_task+0x1b2>
     712:	83 e9       	ldi	r24, 0x93	; 147
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	02 c0       	rjmp	.+4      	; 0x71c <tx_task+0x1b6>
	else  nrk_kprintf( PSTR( "NONE\r\n" ));
     718:	8c e8       	ldi	r24, 0x8C	; 140
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>

   nrk_kprintf( PSTR( "RX status: ") );
     720:	80 e8       	ldi	r24, 0x80	; 128
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
   if(rx_data_ok==1) {
     728:	80 91 7f 04 	lds	r24, 0x047F
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	e1 f4       	brne	.+56     	; 0x768 <tx_task+0x202>
		nrk_led_clr(RED_LED);
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
		nrk_kprintf( PSTR( "OK  RSSI:" ));
     738:	86 e7       	ldi	r24, 0x76	; 118
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
		printf( "%d\r\n",rx_rssi );
     740:	00 d0       	rcall	.+0      	; 0x742 <tx_task+0x1dc>
     742:	00 d0       	rcall	.+0      	; 0x744 <tx_task+0x1de>
     744:	ed b7       	in	r30, 0x3d	; 61
     746:	fe b7       	in	r31, 0x3e	; 62
     748:	52 82       	std	Z+2, r5	; 0x02
     74a:	41 82       	std	Z+1, r4	; 0x01
     74c:	80 91 00 05 	lds	r24, 0x0500
     750:	99 27       	eor	r25, r25
     752:	87 fd       	sbrc	r24, 7
     754:	90 95       	com	r25
     756:	94 83       	std	Z+4, r25	; 0x04
     758:	83 83       	std	Z+3, r24	; 0x03
     75a:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	08 c0       	rjmp	.+16     	; 0x778 <tx_task+0x212>
	}
	else  {
	nrk_led_set(RED_LED);
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <nrk_led_set>
	nrk_kprintf( PSTR( "NO PKT\r\n" ));
     770:	8d e6       	ldi	r24, 0x6D	; 109
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
	}
   rx_data_ok=0;
     778:	10 92 7f 04 	sts	0x047F, r1
   nrk_kprintf( PSTR( "Max wakeup time: " ));
     77c:	8b e5       	ldi	r24, 0x5B	; 91
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
   printf( "%d\r\n",nrk_max_sleep_wakeup_time );
     784:	00 d0       	rcall	.+0      	; 0x786 <tx_task+0x220>
     786:	00 d0       	rcall	.+0      	; 0x788 <tx_task+0x222>
     788:	ad b7       	in	r26, 0x3d	; 61
     78a:	be b7       	in	r27, 0x3e	; 62
     78c:	12 96       	adiw	r26, 0x02	; 2
     78e:	5c 92       	st	X, r5
     790:	4e 92       	st	-X, r4
     792:	11 97       	sbiw	r26, 0x01	; 1
     794:	14 96       	adiw	r26, 0x04	; 4
     796:	1c 92       	st	X, r1
     798:	1e 92       	st	-X, r1
     79a:	13 97       	sbiw	r26, 0x03	; 3
     79c:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
   
   nrk_wait_until_next_period ();
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	0e 94 77 1c 	call	0x38ee	; 0x38ee <nrk_wait_until_next_period>
   _nrk_set_next_wakeup(25);
     7ac:	89 e1       	ldi	r24, 0x19	; 25
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 25 23 	call	0x464a	; 0x464a <_nrk_set_next_wakeup>
   nrk_int_disable(); 
     7b4:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
   	_nrk_os_timer_reset();
     7b8:	0e 94 da 22 	call	0x45b4	; 0x45b4 <_nrk_os_timer_reset>
   	_nrk_high_speed_timer_reset(); 
     7bc:	0e 94 6e 22 	call	0x44dc	; 0x44dc <_nrk_high_speed_timer_reset>
   	do{
   	} while((volatile)_nrk_os_timer_get()<16);
     7c0:	0e 94 8a 23 	call	0x4714	; 0x4714 <_nrk_os_timer_get>
     7c4:	80 31       	cpi	r24, 0x10	; 16
     7c6:	91 05       	cpc	r25, r1
     7c8:	dc f3       	brlt	.-10     	; 0x7c0 <tx_task+0x25a>
   	ticks=_nrk_high_speed_timer_get(); 
     7ca:	0e 94 76 22 	call	0x44ec	; 0x44ec <_nrk_high_speed_timer_get>
   	
	ticks=ticks/16;
     7ce:	1c 01       	movw	r2, r24
     7d0:	84 e0       	ldi	r24, 0x04	; 4
     7d2:	36 94       	lsr	r3
     7d4:	27 94       	ror	r2
     7d6:	8a 95       	dec	r24
     7d8:	e1 f7       	brne	.-8      	; 0x7d2 <tx_task+0x26c>
     7da:	28 14       	cp	r2, r8
     7dc:	39 04       	cpc	r3, r9
     7de:	08 f4       	brcc	.+2      	; 0x7e2 <tx_task+0x27c>
     7e0:	41 01       	movw	r8, r2
     7e2:	a2 14       	cp	r10, r2
     7e4:	b3 04       	cpc	r11, r3
     7e6:	08 f4       	brcc	.+2      	; 0x7ea <tx_task+0x284>
     7e8:	51 01       	movw	r10, r2
   	if(ticks<ticks_min) ticks_min=ticks;
   	if(ticks>ticks_max) ticks_max=ticks;
   	nrk_kprintf( PSTR( "OS tick time: " ));
     7ea:	8c e4       	ldi	r24, 0x4C	; 76
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
   	printf( "%u %u %u\r\n\r\n",ticks_min,ticks,ticks_max);
     7f2:	ed b7       	in	r30, 0x3d	; 61
     7f4:	fe b7       	in	r31, 0x3e	; 62
     7f6:	38 97       	sbiw	r30, 0x08	; 8
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	fe bf       	out	0x3e, r31	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	ed bf       	out	0x3d, r30	; 61
     802:	31 96       	adiw	r30, 0x01	; 1
     804:	28 e2       	ldi	r18, 0x28	; 40
     806:	32 e0       	ldi	r19, 0x02	; 2
     808:	ad b7       	in	r26, 0x3d	; 61
     80a:	be b7       	in	r27, 0x3e	; 62
     80c:	12 96       	adiw	r26, 0x02	; 2
     80e:	3c 93       	st	X, r19
     810:	2e 93       	st	-X, r18
     812:	11 97       	sbiw	r26, 0x01	; 1
     814:	93 82       	std	Z+3, r9	; 0x03
     816:	82 82       	std	Z+2, r8	; 0x02
     818:	35 82       	std	Z+5, r3	; 0x05
     81a:	24 82       	std	Z+4, r2	; 0x04
     81c:	b7 82       	std	Z+7, r11	; 0x07
     81e:	a6 82       	std	Z+6, r10	; 0x06
     820:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
   nrk_int_enable(); 
     824:	4d b7       	in	r20, 0x3d	; 61
     826:	5e b7       	in	r21, 0x3e	; 62
     828:	48 5f       	subi	r20, 0xF8	; 248
     82a:	5f 4f       	sbci	r21, 0xFF	; 255
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	5e bf       	out	0x3e, r21	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	4d bf       	out	0x3d, r20	; 61
     836:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>

   nrk_wait_until_next_period ();
     83a:	0e 94 77 1c 	call	0x38ee	; 0x38ee <nrk_wait_until_next_period>
   

  }
     83e:	fa ce       	rjmp	.-524    	; 0x634 <tx_task+0xce>

00000840 <rx_task>:

  return 0;
}

void rx_task ()
{
     840:	df 92       	push	r13
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	df 93       	push	r29
     84c:	cf 93       	push	r28
     84e:	00 d0       	rcall	.+0      	; 0x850 <rx_task+0x10>
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
  uint8_t i, len;
  int8_t rssi, val;
  uint8_t *local_rx_buf;
  nrk_time_t check_period;
  printf ("rx_task PID=%d\r\n", nrk_get_pid ());
     854:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_get_pid>
     858:	00 d0       	rcall	.+0      	; 0x85a <rx_task+0x1a>
     85a:	00 d0       	rcall	.+0      	; 0x85c <rx_task+0x1c>
     85c:	ed b7       	in	r30, 0x3d	; 61
     85e:	fe b7       	in	r31, 0x3e	; 62
     860:	31 96       	adiw	r30, 0x01	; 1
     862:	25 e3       	ldi	r18, 0x35	; 53
     864:	32 e0       	ldi	r19, 0x02	; 2
     866:	ad b7       	in	r26, 0x3d	; 61
     868:	be b7       	in	r27, 0x3e	; 62
     86a:	12 96       	adiw	r26, 0x02	; 2
     86c:	3c 93       	st	X, r19
     86e:	2e 93       	st	-X, r18
     870:	11 97       	sbiw	r26, 0x01	; 1
     872:	82 83       	std	Z+2, r24	; 0x02
     874:	13 82       	std	Z+3, r1	; 0x03
     876:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>

  // init bmac on channel 25 
  bmac_init (25);
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	89 e1       	ldi	r24, 0x19	; 25
     884:	0e 94 a6 05 	call	0xb4c	; 0xb4c <bmac_init>
  rx_data_ok=0;
     888:	10 92 7f 04 	sts	0x047F, r1

  if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
  // This sets the next RX buffer.
  // This can be called at anytime before releaseing the packet
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
     88c:	85 ea       	ldi	r24, 0xA5	; 165
     88e:	95 e0       	ldi	r25, 0x05	; 5
     890:	64 e7       	ldi	r22, 0x74	; 116
     892:	0e 94 98 05 	call	0xb30	; 0xb30 <bmac_rx_pkt_set_buffer>
  while (1) {
    // Wait until an RX packet is received
    val = bmac_wait_until_rx_pkt ();
    // Get the RX packet 
    nrk_led_set (ORANGE_LED);
    local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     896:	52 e0       	ldi	r21, 0x02	; 2
     898:	e5 2e       	mov	r14, r21
     89a:	f1 2c       	mov	r15, r1
     89c:	ec 0e       	add	r14, r28
     89e:	fd 1e       	adc	r15, r29
     8a0:	8e 01       	movw	r16, r28
     8a2:	0f 5f       	subi	r16, 0xFF	; 255
     8a4:	1f 4f       	sbci	r17, 0xFF	; 255
    rx_data_ok=1;
     8a6:	dd 24       	eor	r13, r13
     8a8:	d3 94       	inc	r13
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

  while (1) {
    // Wait until an RX packet is received
    val = bmac_wait_until_rx_pkt ();
     8aa:	0e 94 70 05 	call	0xae0	; 0xae0 <bmac_wait_until_rx_pkt>
    // Get the RX packet 
    nrk_led_set (ORANGE_LED);
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <nrk_led_set>
    local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     8b6:	c8 01       	movw	r24, r16
     8b8:	b7 01       	movw	r22, r14
     8ba:	0e 94 8a 06 	call	0xd14	; 0xd14 <bmac_rx_pkt_get>
    rx_data_ok=1;
     8be:	d0 92 7f 04 	sts	0x047F, r13
    rx_rssi=rssi;
     8c2:	8a 81       	ldd	r24, Y+2	; 0x02
     8c4:	80 93 00 05 	sts	0x0500, r24
    //printf ("Got RX packet len=%d RSSI=%d [", len, rssi);
    //for (i = 0; i < len; i++)
    //  printf ("%c", rx_buf[i]);
    //printf ("]\r\n");
    nrk_led_clr (ORANGE_LED);
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
    // Release the RX buffer so future packets can arrive 
    bmac_rx_pkt_release ();
     8d0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <bmac_rx_pkt_release>
     8d4:	ea cf       	rjmp	.-44     	; 0x8aa <rx_task+0x6a>

000008d6 <nrk_create_taskset>:
  }

}

void nrk_create_taskset ()
{
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29


  RX_TASK.task = rx_task;
     8e4:	80 e2       	ldi	r24, 0x20	; 32
     8e6:	94 e0       	ldi	r25, 0x04	; 4
     8e8:	90 93 97 06 	sts	0x0697, r25
     8ec:	80 93 96 06 	sts	0x0696, r24
  nrk_task_set_stk( &RX_TASK, rx_task_stack, NRK_APP_STACKSIZE);
     8f0:	c1 e9       	ldi	r28, 0x91	; 145
     8f2:	d6 e0       	ldi	r29, 0x06	; 6
     8f4:	ce 01       	movw	r24, r28
     8f6:	6e e0       	ldi	r22, 0x0E	; 14
     8f8:	75 e0       	ldi	r23, 0x05	; 5
     8fa:	40 e8       	ldi	r20, 0x80	; 128
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	0e 94 ef 25 	call	0x4bde	; 0x4bde <nrk_task_set_stk>
  RX_TASK.prio = 2;
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	88 87       	std	Y+8, r24	; 0x08
  RX_TASK.FirstActivation = TRUE;
     906:	11 e0       	ldi	r17, 0x01	; 1
     908:	1f 83       	std	Y+7, r17	; 0x07
  RX_TASK.Type = BASIC_TASK;
     90a:	19 87       	std	Y+9, r17	; 0x09
  RX_TASK.SchType = PREEMPTIVE;
     90c:	1a 87       	std	Y+10, r17	; 0x0a
  RX_TASK.period.secs = 1;
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	c6 2e       	mov	r12, r22
     912:	d1 2c       	mov	r13, r1
     914:	e1 2c       	mov	r14, r1
     916:	f1 2c       	mov	r15, r1
     918:	cb 86       	std	Y+11, r12	; 0x0b
     91a:	dc 86       	std	Y+12, r13	; 0x0c
     91c:	ed 86       	std	Y+13, r14	; 0x0d
     91e:	fe 86       	std	Y+14, r15	; 0x0e
  RX_TASK.period.nano_secs = 0;
     920:	1f 86       	std	Y+15, r1	; 0x0f
     922:	18 8a       	std	Y+16, r1	; 0x10
     924:	19 8a       	std	Y+17, r1	; 0x11
     926:	1a 8a       	std	Y+18, r1	; 0x12
  RX_TASK.cpu_reserve.secs = 1;
     928:	cb 8a       	std	Y+19, r12	; 0x13
     92a:	dc 8a       	std	Y+20, r13	; 0x14
     92c:	ed 8a       	std	Y+21, r14	; 0x15
     92e:	fe 8a       	std	Y+22, r15	; 0x16
  RX_TASK.cpu_reserve.nano_secs = 500 * NANOS_PER_MS;
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	95 e6       	ldi	r25, 0x65	; 101
     934:	ad ec       	ldi	r26, 0xCD	; 205
     936:	bd e1       	ldi	r27, 0x1D	; 29
     938:	8f 8b       	std	Y+23, r24	; 0x17
     93a:	98 8f       	std	Y+24, r25	; 0x18
     93c:	a9 8f       	std	Y+25, r26	; 0x19
     93e:	ba 8f       	std	Y+26, r27	; 0x1a
  RX_TASK.offset.secs = 0;
     940:	1b 8e       	std	Y+27, r1	; 0x1b
     942:	1c 8e       	std	Y+28, r1	; 0x1c
     944:	1d 8e       	std	Y+29, r1	; 0x1d
     946:	1e 8e       	std	Y+30, r1	; 0x1e
  RX_TASK.offset.nano_secs = 0;
     948:	1f 8e       	std	Y+31, r1	; 0x1f
     94a:	18 a2       	std	Y+32, r1	; 0x20
     94c:	19 a2       	std	Y+33, r1	; 0x21
     94e:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&RX_TASK);
     950:	ce 01       	movw	r24, r28
     952:	0e 94 c3 1a 	call	0x3586	; 0x3586 <nrk_activate_task>

  TX_TASK.task = tx_task;
     956:	83 eb       	ldi	r24, 0xB3	; 179
     958:	92 e0       	ldi	r25, 0x02	; 2
     95a:	90 93 ba 06 	sts	0x06BA, r25
     95e:	80 93 b9 06 	sts	0x06B9, r24
  nrk_task_set_stk( &TX_TASK, tx_task_stack, NRK_APP_STACKSIZE);
     962:	c4 eb       	ldi	r28, 0xB4	; 180
     964:	d6 e0       	ldi	r29, 0x06	; 6
     966:	ce 01       	movw	r24, r28
     968:	60 e8       	ldi	r22, 0x80	; 128
     96a:	74 e0       	ldi	r23, 0x04	; 4
     96c:	40 e8       	ldi	r20, 0x80	; 128
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	0e 94 ef 25 	call	0x4bde	; 0x4bde <nrk_task_set_stk>
  TX_TASK.prio = 25;
     974:	89 e1       	ldi	r24, 0x19	; 25
     976:	88 87       	std	Y+8, r24	; 0x08
  TX_TASK.FirstActivation = TRUE;
     978:	1f 83       	std	Y+7, r17	; 0x07
  TX_TASK.Type = BASIC_TASK;
     97a:	19 87       	std	Y+9, r17	; 0x09
  TX_TASK.SchType = PREEMPTIVE;
     97c:	1a 87       	std	Y+10, r17	; 0x0a
  TX_TASK.period.secs = 1;
     97e:	cb 86       	std	Y+11, r12	; 0x0b
     980:	dc 86       	std	Y+12, r13	; 0x0c
     982:	ed 86       	std	Y+13, r14	; 0x0d
     984:	fe 86       	std	Y+14, r15	; 0x0e
  TX_TASK.period.nano_secs = 0;
     986:	1f 86       	std	Y+15, r1	; 0x0f
     988:	18 8a       	std	Y+16, r1	; 0x10
     98a:	19 8a       	std	Y+17, r1	; 0x11
     98c:	1a 8a       	std	Y+18, r1	; 0x12
  TX_TASK.cpu_reserve.secs = 0;
     98e:	1b 8a       	std	Y+19, r1	; 0x13
     990:	1c 8a       	std	Y+20, r1	; 0x14
     992:	1d 8a       	std	Y+21, r1	; 0x15
     994:	1e 8a       	std	Y+22, r1	; 0x16
  TX_TASK.cpu_reserve.nano_secs = 0;
     996:	1f 8a       	std	Y+23, r1	; 0x17
     998:	18 8e       	std	Y+24, r1	; 0x18
     99a:	19 8e       	std	Y+25, r1	; 0x19
     99c:	1a 8e       	std	Y+26, r1	; 0x1a
  TX_TASK.offset.secs = 0;
     99e:	1b 8e       	std	Y+27, r1	; 0x1b
     9a0:	1c 8e       	std	Y+28, r1	; 0x1c
     9a2:	1d 8e       	std	Y+29, r1	; 0x1d
     9a4:	1e 8e       	std	Y+30, r1	; 0x1e
  TX_TASK.offset.nano_secs = 0;
     9a6:	1f 8e       	std	Y+31, r1	; 0x1f
     9a8:	18 a2       	std	Y+32, r1	; 0x20
     9aa:	19 a2       	std	Y+33, r1	; 0x21
     9ac:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&TX_TASK);
     9ae:	ce 01       	movw	r24, r28
     9b0:	0e 94 c3 1a 	call	0x3586	; 0x3586 <nrk_activate_task>

}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	df 90       	pop	r13
     9c0:	cf 90       	pop	r12
     9c2:	08 95       	ret

000009c4 <main>:
int8_t rx_rssi;

int main ()
{
  uint16_t div;
  nrk_setup_ports ();
     9c4:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <nrk_setup_ports>
  nrk_setup_uart (UART_BAUDRATE_115K2);
     9c8:	80 e1       	ldi	r24, 0x10	; 16
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 a5 10 	call	0x214a	; 0x214a <nrk_setup_uart>

  nrk_init ();
     9d0:	0e 94 7e 11 	call	0x22fc	; 0x22fc <nrk_init>

  nrk_led_clr (0);
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
  nrk_led_clr (1);
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
  nrk_led_clr (2);
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
  nrk_led_clr (3);
     9ec:	83 e0       	ldi	r24, 0x03	; 3
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>

  nrk_time_set (0, 0);
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	cb 01       	movw	r24, r22
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	a9 01       	movw	r20, r18
     a00:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <nrk_time_set>

  bmac_task_config ();
     a04:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <bmac_task_config>

  nrk_create_taskset ();
     a08:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <nrk_create_taskset>
  nrk_start ();
     a0c:	0e 94 45 12 	call	0x248a	; 0x248a <nrk_start>

  return 0;
}
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	08 95       	ret

00000a16 <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     a16:	08 95       	ret

00000a18 <bmac_encryption_set_ctr_counter>:

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
     a18:	64 30       	cpi	r22, 0x04	; 4
     a1a:	21 f4       	brne	.+8      	; 0xa24 <bmac_encryption_set_ctr_counter+0xc>
    return NRK_ERROR;
  rf_security_set_ctr_counter (counter);
     a1c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <rf_security_set_ctr_counter>
  return NRK_OK;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	08 95       	ret
}

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    return NRK_ERROR;
     a24:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_ctr_counter (counter);
  return NRK_OK;
}
     a26:	08 95       	ret

00000a28 <bmac_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	08 95       	ret

00000a2c <bmac_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	08 95       	ret

00000a32 <bmac_auto_ack_disable>:


int8_t bmac_auto_ack_disable ()
{
  rf_auto_ack_disable ();
     a32:	0e 94 2c 09 	call	0x1258	; 0x1258 <rf_auto_ack_disable>
  return NRK_OK;
}
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	08 95       	ret

00000a3a <bmac_auto_ack_enable>:

int8_t bmac_auto_ack_enable ()
{
  rf_auto_ack_enable ();
     a3a:	0e 94 26 09 	call	0x124c	; 0x124c <rf_auto_ack_enable>
  return NRK_OK;
}
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	08 95       	ret

00000a42 <bmac_addr_decode_disable>:

int8_t bmac_addr_decode_disable ()
{
  rf_addr_decode_disable ();
     a42:	0e 94 20 09 	call	0x1240	; 0x1240 <rf_addr_decode_disable>
  return NRK_OK;
}
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	08 95       	ret

00000a4a <bmac_addr_decode_enable>:

int8_t bmac_addr_decode_enable ()
{
  rf_addr_decode_enable ();
     a4a:	0e 94 1a 09 	call	0x1234	; 0x1234 <rf_addr_decode_enable>
  return NRK_OK;
}
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	08 95       	ret

00000a52 <bmac_addr_decode_set_my_mac>:

int8_t bmac_addr_decode_set_my_mac (uint16_t my_mac)
{
  rf_addr_decode_set_my_mac (my_mac);
     a52:	0e 94 32 09 	call	0x1264	; 0x1264 <rf_addr_decode_set_my_mac>
  return NRK_OK;
}
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	08 95       	ret

00000a5a <bmac_addr_decode_dest_mac>:

int8_t bmac_addr_decode_dest_mac (uint16_t dest)
{
  bmac_rfTxInfo.destAddr = dest;
     a5a:	90 93 8f 05 	sts	0x058F, r25
     a5e:	80 93 8e 05 	sts	0x058E, r24
  return NRK_OK;
}
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	08 95       	ret

00000a66 <bmac_rx_pkt_is_encrypted>:

int8_t bmac_rx_pkt_is_encrypted ()
{
  return rf_security_last_pkt_status ();
     a66:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <rf_security_last_pkt_status>
}
     a6a:	08 95       	ret

00000a6c <bmac_encryption_set_key>:

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
     a6c:	60 31       	cpi	r22, 0x10	; 16
     a6e:	21 f4       	brne	.+8      	; 0xa78 <bmac_encryption_set_key+0xc>
    return NRK_ERROR;
  rf_security_set_key (key);
     a70:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <rf_security_set_key>
  return NRK_OK;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	08 95       	ret
}

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    return NRK_ERROR;
     a78:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_key (key);
  return NRK_OK;
}
     a7a:	08 95       	ret

00000a7c <bmac_encryption_enable>:

int8_t bmac_encryption_enable ()
{
  //rf_security_enable();
  return NRK_OK;
}
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	08 95       	ret

00000a80 <bmac_encryption_disable>:

int8_t bmac_encryption_disable ()
{
  //rf_security_disable();
  return NRK_OK;
}
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	08 95       	ret

00000a84 <bmac_set_rf_power>:


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
     a84:	80 32       	cpi	r24, 0x20	; 32
     a86:	20 f4       	brcc	.+8      	; 0xa90 <bmac_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     a88:	0e 94 10 09 	call	0x1220	; 0x1220 <rf_tx_power>
  return NRK_OK;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	08 95       	ret


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     a90:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     a92:	08 95       	ret

00000a94 <bmac_set_cca_active>:

void bmac_set_cca_active (uint8_t active)
{
  cca_active = active;
     a94:	80 93 5f 04 	sts	0x045F, r24
}
     a98:	08 95       	ret

00000a9a <bmac_set_cca_thresh>:

int8_t bmac_set_cca_thresh (int8_t thresh)
{
  rf_set_cca_thresh (thresh);
     a9a:	99 27       	eor	r25, r25
     a9c:	87 fd       	sbrc	r24, 7
     a9e:	90 95       	com	r25
     aa0:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <rf_set_cca_thresh>
  return NRK_OK;
}
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	08 95       	ret

00000aa8 <bmac_set_channel>:

int8_t bmac_set_channel (uint8_t chan)
{
     aa8:	df 93       	push	r29
     aaa:	cf 93       	push	r28
     aac:	0f 92       	push	r0
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
  if (chan > 26)
     ab2:	8b 31       	cpi	r24, 0x1B	; 27
     ab4:	80 f4       	brcc	.+32     	; 0xad6 <bmac_set_channel+0x2e>
    return NRK_ERROR;
  g_chan = chan;
     ab6:	80 93 7a 04 	sts	0x047A, r24
  rf_power_up ();
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     ac0:	88 ed       	ldi	r24, 0xD8	; 216
     ac2:	96 e0       	ldi	r25, 0x06	; 6
     ac4:	69 81       	ldd	r22, Y+1	; 0x01
     ac6:	4f ef       	ldi	r20, 0xFF	; 255
     ac8:	5f ef       	ldi	r21, 0xFF	; 255
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	0e 94 4d 09 	call	0x129a	; 0x129a <rf_init>
  return NRK_OK;
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	01 c0       	rjmp	.+2      	; 0xad8 <bmac_set_channel+0x30>
}

int8_t bmac_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
  g_chan = chan;
  rf_power_up ();
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
  return NRK_OK;
}
     ad8:	0f 90       	pop	r0
     ada:	cf 91       	pop	r28
     adc:	df 91       	pop	r29
     ade:	08 95       	ret

00000ae0 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
     ae0:	80 91 76 04 	lds	r24, 0x0476
     ae4:	88 23       	and	r24, r24
     ae6:	01 f1       	breq	.+64     	; 0xb28 <bmac_wait_until_rx_pkt+0x48>
    return NRK_OK;

  nrk_signal_register (bmac_rx_pkt_signal);
     ae8:	80 91 a4 05 	lds	r24, 0x05A4
     aec:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <nrk_signal_register>
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	00 90 a4 05 	lds	r0, 0x05A4
     afc:	04 c0       	rjmp	.+8      	; 0xb06 <bmac_wait_until_rx_pkt+0x26>
     afe:	66 0f       	add	r22, r22
     b00:	77 1f       	adc	r23, r23
     b02:	88 1f       	adc	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	0a 94       	dec	r0
     b08:	d2 f7       	brpl	.-12     	; 0xafe <bmac_wait_until_rx_pkt+0x1e>
     b0a:	0e 94 79 18 	call	0x30f2	; 0x30f2 <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
     b0e:	00 90 a4 05 	lds	r0, 0x05A4
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <bmac_wait_until_rx_pkt+0x3c>
     b14:	96 95       	lsr	r25
     b16:	87 95       	ror	r24
     b18:	77 95       	ror	r23
     b1a:	67 95       	ror	r22
     b1c:	0a 94       	dec	r0
     b1e:	d2 f7       	brpl	.-12     	; 0xb14 <bmac_wait_until_rx_pkt+0x34>
     b20:	60 fd       	sbrc	r22, 0
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <bmac_wait_until_rx_pkt+0x4c>
    return NRK_ERROR;
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	08 95       	ret
int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
    return NRK_OK;
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	08 95       	ret

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    return NRK_ERROR;
  else
    return NRK_OK;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
}
     b2e:	08 95       	ret

00000b30 <bmac_rx_pkt_set_buffer>:

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	51 f0       	breq	.+20     	; 0xb48 <bmac_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  bmac_rfRxInfo.pPayload = buf;
     b34:	90 93 de 06 	sts	0x06DE, r25
     b38:	80 93 dd 06 	sts	0x06DD, r24
  bmac_rfRxInfo.max_length = size;
     b3c:	60 93 dc 06 	sts	0x06DC, r22
  rx_buf_empty = 1;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	80 93 76 04 	sts	0x0476, r24
  return NRK_OK;
     b46:	08 95       	ret
}

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     b48:	8f ef       	ldi	r24, 0xFF	; 255
  bmac_rfRxInfo.pPayload = buf;
  bmac_rfRxInfo.max_length = size;
  rx_buf_empty = 1;
  return NRK_OK;
}
     b4a:	08 95       	ret

00000b4c <bmac_init>:

int8_t bmac_init (uint8_t chan)
{
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	08 2f       	mov	r16, r24
  bmac_running = 0;
     b52:	10 92 77 04 	sts	0x0477, r1
  tx_reserve = -1;
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	80 93 79 04 	sts	0x0479, r24
  cca_active = true;
     b5c:	11 e0       	ldi	r17, 0x01	; 1
     b5e:	10 93 5f 04 	sts	0x045F, r17
  rx_failure_cnt = 0;
     b62:	10 92 6a 04 	sts	0x046A, r1
     b66:	10 92 6b 04 	sts	0x046B, r1
     b6a:	10 92 6c 04 	sts	0x046C, r1
     b6e:	10 92 6d 04 	sts	0x046D, r1
#endif
#endif



  _bmac_check_period.secs = 0;
     b72:	10 92 60 04 	sts	0x0460, r1
     b76:	10 92 61 04 	sts	0x0461, r1
     b7a:	10 92 62 04 	sts	0x0462, r1
     b7e:	10 92 63 04 	sts	0x0463, r1
  _bmac_check_period.nano_secs = BMAC_DEFAULT_CHECK_RATE_MS * NANOS_PER_MS;
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	31 ee       	ldi	r19, 0xE1	; 225
     b86:	45 ef       	ldi	r20, 0xF5	; 245
     b88:	55 e0       	ldi	r21, 0x05	; 5
     b8a:	20 93 64 04 	sts	0x0464, r18
     b8e:	30 93 65 04 	sts	0x0465, r19
     b92:	40 93 66 04 	sts	0x0466, r20
     b96:	50 93 67 04 	sts	0x0467, r21
  bmac_rx_pkt_signal = nrk_signal_create ();
     b9a:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_signal_create>
     b9e:	80 93 a4 05 	sts	0x05A4, r24
  if (bmac_rx_pkt_signal == NRK_ERROR) {
     ba2:	8f 3f       	cpi	r24, 0xFF	; 255
     ba4:	19 f4       	brne	.+6      	; 0xbac <bmac_init+0x60>
    nrk_kprintf (PSTR ("BMAC ERROR: creating rx signal failed\r\n"));
     ba6:	8e e9       	ldi	r24, 0x9E	; 158
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	08 c0       	rjmp	.+16     	; 0xbbc <bmac_init+0x70>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  bmac_tx_pkt_done_signal = nrk_signal_create ();
     bac:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_signal_create>
     bb0:	80 93 62 07 	sts	0x0762, r24
  if (bmac_tx_pkt_done_signal == NRK_ERROR) {
     bb4:	8f 3f       	cpi	r24, 0xFF	; 255
     bb6:	71 f4       	brne	.+28     	; 0xbd4 <bmac_init+0x88>
    nrk_kprintf (PSTR ("BMAC ERROR: creating tx signal failed\r\n"));
     bb8:	86 e7       	ldi	r24, 0x76	; 118
     bba:	92 e0       	ldi	r25, 0x02	; 2
     bbc:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
     bc0:	e0 91 19 06 	lds	r30, 0x0619
     bc4:	f0 91 1a 06 	lds	r31, 0x061A
     bc8:	8e e0       	ldi	r24, 0x0E	; 14
     bca:	60 85       	ldd	r22, Z+8	; 0x08
     bcc:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
    return NRK_ERROR;
     bd0:	8f ef       	ldi	r24, 0xFF	; 255
     bd2:	29 c0       	rjmp	.+82     	; 0xc26 <bmac_init+0xda>
  }
  bmac_enable_signal = nrk_signal_create ();
     bd4:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_signal_create>
     bd8:	80 93 0d 05 	sts	0x050D, r24
  if (bmac_enable_signal == NRK_ERROR) {
     bdc:	8f 3f       	cpi	r24, 0xFF	; 255
     bde:	19 f4       	brne	.+6      	; 0xbe6 <bmac_init+0x9a>
    nrk_kprintf (PSTR ("BMAC ERROR: creating enable signal failed\r\n"));
     be0:	8a e4       	ldi	r24, 0x4A	; 74
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	eb cf       	rjmp	.-42     	; 0xbbc <bmac_init+0x70>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }


  tx_data_ready = 0;
     be6:	10 92 69 04 	sts	0x0469, r1
  // Set the one main rx buffer
  rx_buf_empty = 0;
     bea:	10 92 76 04 	sts	0x0476, r1
  bmac_rfRxInfo.pPayload = NULL;
     bee:	10 92 de 06 	sts	0x06DE, r1
     bf2:	10 92 dd 06 	sts	0x06DD, r1
  bmac_rfRxInfo.max_length = 0;
     bf6:	10 92 dc 06 	sts	0x06DC, r1

  // Setup the cc2420 chip
  rf_power_up ();
     bfa:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
     bfe:	88 ed       	ldi	r24, 0xD8	; 216
     c00:	96 e0       	ldi	r25, 0x06	; 6
     c02:	60 2f       	mov	r22, r16
     c04:	4f ef       	ldi	r20, 0xFF	; 255
     c06:	5f ef       	ldi	r21, 0xFF	; 255
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	0e 94 4d 09 	call	0x129a	; 0x129a <rf_init>
  g_chan = chan;
     c10:	00 93 7a 04 	sts	0x047A, r16
//    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
//    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
//    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
  // default cca thresh of -45
  //rf_set_cca_thresh(-45); 
  rf_set_cca_thresh (0x0);
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <rf_set_cca_thresh>
  bmac_running = 1;
     c1c:	10 93 77 04 	sts	0x0477, r17
  is_enabled = 1;
     c20:	10 93 78 04 	sts	0x0478, r17
  return NRK_OK;
     c24:	81 e0       	ldi	r24, 0x01	; 1
}
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	08 95       	ret

00000c2c <bmac_tx_pkt_nonblocking>:

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
     c2c:	20 91 69 04 	lds	r18, 0x0469
     c30:	21 30       	cpi	r18, 0x01	; 1
     c32:	59 f0       	breq	.+22     	; 0xc4a <bmac_tx_pkt_nonblocking+0x1e>
    return NRK_ERROR;
  tx_data_ready = 1;
     c34:	21 e0       	ldi	r18, 0x01	; 1
     c36:	20 93 69 04 	sts	0x0469, r18
  bmac_rfTxInfo.pPayload = buf;
     c3a:	90 93 92 05 	sts	0x0592, r25
     c3e:	80 93 91 05 	sts	0x0591, r24
  bmac_rfTxInfo.length = len;
     c42:	60 93 90 05 	sts	0x0590, r22
  return NRK_OK;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	08 95       	ret
}

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    return NRK_ERROR;
     c4a:	8f ef       	ldi	r24, 0xFF	; 255
  tx_data_ready = 1;
  bmac_rfTxInfo.pPayload = buf;
  bmac_rfTxInfo.length = len;
  return NRK_OK;
}
     c4c:	08 95       	ret

00000c4e <bmac_get_rx_pkt_signal>:

nrk_sig_t bmac_get_rx_pkt_signal ()
{
  nrk_signal_register (bmac_rx_pkt_signal);
     c4e:	80 91 a4 05 	lds	r24, 0x05A4
     c52:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <nrk_signal_register>
  return (bmac_rx_pkt_signal);
}
     c56:	80 91 a4 05 	lds	r24, 0x05A4
     c5a:	08 95       	ret

00000c5c <bmac_get_tx_done_signal>:

nrk_sig_t bmac_get_tx_done_signal ()
{
  nrk_signal_register (bmac_tx_pkt_done_signal);
     c5c:	80 91 62 07 	lds	r24, 0x0762
     c60:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <nrk_signal_register>
  return (bmac_tx_pkt_done_signal);
}
     c64:	80 91 62 07 	lds	r24, 0x0762
     c68:	08 95       	ret

00000c6a <bmac_tx_pkt>:


int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	0f 92       	push	r0
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	7c 01       	movw	r14, r24
  uint32_t mask;
  if (tx_data_ready == 1)
     c7e:	80 91 69 04 	lds	r24, 0x0469
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	f1 f1       	breq	.+124    	; 0xd02 <bmac_tx_pkt+0x98>
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  nrk_signal_register (bmac_tx_pkt_done_signal);
     c86:	80 91 62 07 	lds	r24, 0x0762
     c8a:	69 83       	std	Y+1, r22	; 0x01
     c8c:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <nrk_signal_register>
  tx_data_ready = 1;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	80 93 69 04 	sts	0x0469, r24
  bmac_rfTxInfo.pPayload = buf;
     c96:	f0 92 92 05 	sts	0x0592, r15
     c9a:	e0 92 91 05 	sts	0x0591, r14
  bmac_rfTxInfo.length = len;
     c9e:	69 81       	ldd	r22, Y+1	; 0x01
     ca0:	60 93 90 05 	sts	0x0590, r22
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif
  mask = nrk_event_wait (SIG (bmac_tx_pkt_done_signal));
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	00 90 62 07 	lds	r0, 0x0762
     cb0:	04 c0       	rjmp	.+8      	; 0xcba <bmac_tx_pkt+0x50>
     cb2:	66 0f       	add	r22, r22
     cb4:	77 1f       	adc	r23, r23
     cb6:	88 1f       	adc	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	0a 94       	dec	r0
     cbc:	d2 f7       	brpl	.-12     	; 0xcb2 <bmac_tx_pkt+0x48>
     cbe:	0e 94 79 18 	call	0x30f2	; 0x30f2 <nrk_event_wait>
     cc2:	7b 01       	movw	r14, r22
     cc4:	8c 01       	movw	r16, r24
  if (mask == 0)
     cc6:	61 15       	cp	r22, r1
     cc8:	71 05       	cpc	r23, r1
     cca:	81 05       	cpc	r24, r1
     ccc:	91 05       	cpc	r25, r1
     cce:	21 f4       	brne	.+8      	; 0xcd8 <bmac_tx_pkt+0x6e>
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
     cd0:	86 e2       	ldi	r24, 0x26	; 38
     cd2:	92 e0       	ldi	r25, 0x02	; 2
     cd4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
     cd8:	00 90 62 07 	lds	r0, 0x0762
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <bmac_tx_pkt+0x7c>
     cde:	16 95       	lsr	r17
     ce0:	07 95       	ror	r16
     ce2:	f7 94       	ror	r15
     ce4:	e7 94       	ror	r14
     ce6:	0a 94       	dec	r0
     ce8:	d2 f7       	brpl	.-12     	; 0xcde <bmac_tx_pkt+0x74>
     cea:	e0 fc       	sbrc	r14, 0
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <bmac_tx_pkt+0x8c>
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	92 e0       	ldi	r25, 0x02	; 2
     cf2:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
  if (pkt_got_ack)
     cf6:	80 91 68 04 	lds	r24, 0x0468
     cfa:	88 23       	and	r24, r24
     cfc:	11 f0       	breq	.+4      	; 0xd02 <bmac_tx_pkt+0x98>
    return NRK_OK;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	01 c0       	rjmp	.+2      	; 0xd04 <bmac_tx_pkt+0x9a>
  return NRK_ERROR;
     d02:	8f ef       	ldi	r24, 0xFF	; 255
}
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	ff 90       	pop	r15
     d10:	ef 90       	pop	r14
     d12:	08 95       	ret

00000d14 <bmac_rx_pkt_get>:


uint8_t *bmac_rx_pkt_get (uint8_t * len, int8_t * rssi)
{
     d14:	fc 01       	movw	r30, r24
     d16:	db 01       	movw	r26, r22

  if (bmac_rx_pkt_ready () == 0) {
     d18:	80 91 76 04 	lds	r24, 0x0476
     d1c:	88 23       	and	r24, r24
     d1e:	29 f0       	breq	.+10     	; 0xd2a <bmac_rx_pkt_get+0x16>
    *len = 0;
     d20:	10 82       	st	Z, r1
    *rssi = 0;
     d22:	1c 92       	st	X, r1
    return NULL;
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	0a c0       	rjmp	.+20     	; 0xd3e <bmac_rx_pkt_get+0x2a>
  }
  *len = bmac_rfRxInfo.length;
     d2a:	80 91 db 06 	lds	r24, 0x06DB
     d2e:	80 83       	st	Z, r24
  *rssi = bmac_rfRxInfo.rssi;
     d30:	80 91 e0 06 	lds	r24, 0x06E0
     d34:	8c 93       	st	X, r24
  return bmac_rfRxInfo.pPayload;
     d36:	20 91 dd 06 	lds	r18, 0x06DD
     d3a:	30 91 de 06 	lds	r19, 0x06DE
}
     d3e:	c9 01       	movw	r24, r18
     d40:	08 95       	ret

00000d42 <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready (void)
{
  return (!rx_buf_empty);
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 91 76 04 	lds	r25, 0x0476
     d48:	91 11       	cpse	r25, r1
     d4a:	80 e0       	ldi	r24, 0x00	; 0
}
     d4c:	08 95       	ret

00000d4e <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release (void)
{
  rx_buf_empty = 1;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	80 93 76 04 	sts	0x0476, r24
  return NRK_OK;
}
     d54:	08 95       	ret

00000d56 <bmac_disable>:

void bmac_disable ()
{
  is_enabled = 0;
     d56:	10 92 78 04 	sts	0x0478, r1
  rf_power_down ();
     d5a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <rf_power_down>
}
     d5e:	08 95       	ret

00000d60 <bmac_enable>:

void bmac_enable ()
{
  is_enabled = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	80 93 78 04 	sts	0x0478, r24
  rf_power_up ();
     d66:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
     d6a:	80 91 0d 05 	lds	r24, 0x050D
     d6e:	0e 94 06 18 	call	0x300c	; 0x300c <nrk_event_signal>
}
     d72:	08 95       	ret

00000d74 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	28 97       	sbiw	r28, 0x08	; 8
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	29 83       	std	Y+1, r18	; 0x01
     d8a:	3a 83       	std	Y+2, r19	; 0x02
     d8c:	4b 83       	std	Y+3, r20	; 0x03
     d8e:	5c 83       	std	Y+4, r21	; 0x04
     d90:	6d 83       	std	Y+5, r22	; 0x05
     d92:	7e 83       	std	Y+6, r23	; 0x06
     d94:	8f 83       	std	Y+7, r24	; 0x07
     d96:	98 87       	std	Y+8, r25	; 0x08
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
     d98:	29 81       	ldd	r18, Y+1	; 0x01
     d9a:	3a 81       	ldd	r19, Y+2	; 0x02
     d9c:	4b 81       	ldd	r20, Y+3	; 0x03
     d9e:	5c 81       	ldd	r21, Y+4	; 0x04
     da0:	8d 81       	ldd	r24, Y+5	; 0x05
     da2:	9e 81       	ldd	r25, Y+6	; 0x06
     da4:	af 81       	ldd	r26, Y+7	; 0x07
     da6:	b8 85       	ldd	r27, Y+8	; 0x08
}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
     da8:	21 15       	cp	r18, r1
     daa:	31 05       	cpc	r19, r1
     dac:	41 05       	cpc	r20, r1
     dae:	51 05       	cpc	r21, r1
     db0:	41 f4       	brne	.+16     	; 0xdc2 <bmac_set_rx_check_rate+0x4e>
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
     db2:	80 30       	cpi	r24, 0x00	; 0
     db4:	6d e2       	ldi	r22, 0x2D	; 45
     db6:	96 07       	cpc	r25, r22
     db8:	61 e3       	ldi	r22, 0x31	; 49
     dba:	a6 07       	cpc	r26, r22
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	b6 07       	cpc	r27, r22
     dc0:	90 f0       	brcs	.+36     	; 0xde6 <bmac_set_rx_check_rate+0x72>
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
     dc2:	20 93 60 04 	sts	0x0460, r18
     dc6:	30 93 61 04 	sts	0x0461, r19
     dca:	40 93 62 04 	sts	0x0462, r20
     dce:	50 93 63 04 	sts	0x0463, r21
  _bmac_check_period.nano_secs = period.nano_secs;
     dd2:	80 93 64 04 	sts	0x0464, r24
     dd6:	90 93 65 04 	sts	0x0465, r25
     dda:	a0 93 66 04 	sts	0x0466, r26
     dde:	b0 93 67 04 	sts	0x0467, r27
  return NRK_OK;
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <bmac_set_rx_check_rate+0x74>

int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
     de6:	8f ef       	ldi	r24, 0xFF	; 255
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
}
     de8:	28 96       	adiw	r28, 0x08	; 8
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <bmac_started>:

int8_t bmac_started ()
{
  return bmac_running;
}
     dfa:	80 91 77 04 	lds	r24, 0x0477
     dfe:	08 95       	ret

00000e00 <_bmac_channel_check>:

int8_t _bmac_channel_check ()
{
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
  int8_t val = 0;

  rf_rx_on ();
     e04:	0e 94 c3 09 	call	0x1386	; 0x1386 <rf_rx_on>
  val += rf_cca_check ();
     e08:	0e 94 03 0b 	call	0x1606	; 0x1606 <rf_cca_check>
     e0c:	08 2f       	mov	r16, r24
  val += rf_cca_check ();
     e0e:	0e 94 03 0b 	call	0x1606	; 0x1606 <rf_cca_check>
     e12:	18 2f       	mov	r17, r24
  val += rf_cca_check ();
     e14:	0e 94 03 0b 	call	0x1606	; 0x1606 <rf_cca_check>
{
  int8_t val = 0;

  rf_rx_on ();
  val += rf_cca_check ();
  val += rf_cca_check ();
     e18:	10 0f       	add	r17, r16
  val += rf_cca_check ();
     e1a:	18 0f       	add	r17, r24
  if (val > 1)
    val = 1;
  rf_rx_off ();
     e1c:	0e 94 cb 09 	call	0x1396	; 0x1396 <rf_rx_off>
     e20:	81 2f       	mov	r24, r17
     e22:	11 16       	cp	r1, r17
     e24:	0c f4       	brge	.+2      	; 0xe28 <_bmac_channel_check+0x28>
     e26:	81 e0       	ldi	r24, 0x01	; 1
  return val;
}
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	08 95       	ret

00000e2e <_bmac_rx>:
int8_t _bmac_rx ()
{
  int8_t n;
  uint8_t cnt;

  rf_rx_on ();
     e2e:	0e 94 c3 09 	call	0x1386	; 0x1386 <rf_rx_on>
  cnt = 0;
//printf( "calling rx\r\n" );
  dummy_t.secs = 0;
     e32:	10 92 6e 04 	sts	0x046E, r1
     e36:	10 92 6f 04 	sts	0x046F, r1
     e3a:	10 92 70 04 	sts	0x0470, r1
     e3e:	10 92 71 04 	sts	0x0471, r1
  dummy_t.nano_secs = 5 * NANOS_PER_MS;
     e42:	80 e4       	ldi	r24, 0x40	; 64
     e44:	9b e4       	ldi	r25, 0x4B	; 75
     e46:	ac e4       	ldi	r26, 0x4C	; 76
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	68 2f       	mov	r22, r24
     e4c:	80 93 72 04 	sts	0x0472, r24
     e50:	90 93 73 04 	sts	0x0473, r25
     e54:	a0 93 74 04 	sts	0x0474, r26
     e58:	b0 93 75 04 	sts	0x0475, r27
  nrk_wait (dummy_t);
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 91 6f 04 	lds	r19, 0x046F
     e62:	40 91 70 04 	lds	r20, 0x0470
     e66:	50 91 71 04 	lds	r21, 0x0471
     e6a:	70 91 73 04 	lds	r23, 0x0473
     e6e:	80 91 74 04 	lds	r24, 0x0474
     e72:	90 91 75 04 	lds	r25, 0x0475
     e76:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <nrk_wait>

  n = rf_rx_packet_nonblock ();
     e7a:	0e 94 36 0b 	call	0x166c	; 0x166c <rf_rx_packet_nonblock>

  if (n != NRK_OK) {
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	f9 f0       	breq	.+62     	; 0xec0 <_bmac_rx+0x92>
    if (rx_failure_cnt < 65535)
     e82:	80 91 6a 04 	lds	r24, 0x046A
     e86:	90 91 6b 04 	lds	r25, 0x046B
     e8a:	a0 91 6c 04 	lds	r26, 0x046C
     e8e:	b0 91 6d 04 	lds	r27, 0x046D
     e92:	8f 3f       	cpi	r24, 0xFF	; 255
     e94:	2f ef       	ldi	r18, 0xFF	; 255
     e96:	92 07       	cpc	r25, r18
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	a2 07       	cpc	r26, r18
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	b2 07       	cpc	r27, r18
     ea0:	58 f4       	brcc	.+22     	; 0xeb8 <_bmac_rx+0x8a>
      rx_failure_cnt++;
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	a1 1d       	adc	r26, r1
     ea6:	b1 1d       	adc	r27, r1
     ea8:	80 93 6a 04 	sts	0x046A, r24
     eac:	90 93 6b 04 	sts	0x046B, r25
     eb0:	a0 93 6c 04 	sts	0x046C, r26
     eb4:	b0 93 6d 04 	sts	0x046D, r27
    rf_rx_off ();
     eb8:	0e 94 cb 09 	call	0x1396	; 0x1396 <rf_rx_off>
    return 0;
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	08 95       	ret
			} 
	}
*/


  rx_buf_empty = 0;
     ec0:	10 92 76 04 	sts	0x0476, r1
  printf ("BMAC: SNR= %d [", bmac_rfRxInfo.rssi);
  for (uint8_t i = 0; i < bmac_rfRxInfo.length; i++)
    printf ("%c", bmac_rfRxInfo.pPayload[i]);
  printf ("]\r\n");
#endif
  rf_rx_off ();
     ec4:	0e 94 cb 09 	call	0x1396	; 0x1396 <rf_rx_off>
  return 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
}
     eca:	08 95       	ret

00000ecc <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get ()
{
  return rx_failure_cnt;
}
     ecc:	80 91 6a 04 	lds	r24, 0x046A
     ed0:	90 91 6b 04 	lds	r25, 0x046B
     ed4:	08 95       	ret

00000ed6 <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset ()
{
  rx_failure_cnt = 0;
     ed6:	10 92 6a 04 	sts	0x046A, r1
     eda:	10 92 6b 04 	sts	0x046B, r1
     ede:	10 92 6c 04 	sts	0x046C, r1
     ee2:	10 92 6d 04 	sts	0x046D, r1
  return NRK_OK;
}
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	08 95       	ret

00000eea <_b_pow>:
  nrk_event_signal (bmac_tx_pkt_done_signal);
  return NRK_OK;
}

uint8_t _b_pow (uint8_t in)
{
     eea:	98 2f       	mov	r25, r24
  uint8_t i;
  uint8_t result;
  if (in <= 1)
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	50 f0       	brcs	.+20     	; 0xf04 <_b_pow+0x1a>
    return 1;
  if (in > 7)
     ef0:	88 30       	cpi	r24, 0x08	; 8
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <_b_pow+0xc>
    in = 6;                     // cap it at 128 
     ef4:	96 e0       	ldi	r25, 0x06	; 6
  result = 1;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
  for (i = 0; i < in; i++)
     ef8:	20 e0       	ldi	r18, 0x00	; 0
    result = result * 2;
     efa:	88 0f       	add	r24, r24
  if (in <= 1)
    return 1;
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
     efc:	2f 5f       	subi	r18, 0xFF	; 255
     efe:	29 17       	cp	r18, r25
     f00:	e0 f3       	brcs	.-8      	; 0xefa <_b_pow+0x10>
     f02:	08 95       	ret
uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    return 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    result = result * 2;
  return result;
}
     f06:	08 95       	ret

00000f08 <_bmac_tx>:
  rx_failure_cnt = 0;
  return NRK_OK;
}

int8_t _bmac_tx ()
{
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
  uint16_t b;

#ifdef DEBUG
  nrk_kprintf (PSTR ("_bmac_tx()\r\n"));
#endif
  if (cca_active) {
     f14:	80 91 5f 04 	lds	r24, 0x045F
     f18:	88 23       	and	r24, r24
     f1a:	09 f4       	brne	.+2      	; 0xf1e <_bmac_tx+0x16>
     f1c:	47 c0       	rjmp	.+142    	; 0xfac <_bmac_tx+0xa4>

// Add random time here to stop nodes from synchronizing with eachother
    b = _nrk_time_to_ticks (&_bmac_check_period);
     f1e:	80 e6       	ldi	r24, 0x60	; 96
     f20:	94 e0       	ldi	r25, 0x04	; 4
     f22:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_nrk_time_to_ticks>
     f26:	ec 01       	movw	r28, r24
    b = b / ((rand () % 10) + 1);
     f28:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <rand>
     f2c:	6a e0       	ldi	r22, 0x0A	; 10
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <__divmodhi4>
     f34:	bc 01       	movw	r22, r24
     f36:	6f 5f       	subi	r22, 0xFF	; 255
     f38:	7f 4f       	sbci	r23, 0xFF	; 255
     f3a:	ce 01       	movw	r24, r28
     f3c:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <__udivmodhi4>
//printf( "waiting %d\r\n",b );
    nrk_wait_until_ticks (b);
     f40:	cb 01       	movw	r24, r22
     f42:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <nrk_wait_until_ticks>
//nrk_wait_ticks(b);

    backoff_count = 1;
     f46:	ff 24       	eor	r15, r15
     f48:	f3 94       	inc	r15
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
      b = b / ((rand () % 10) + 1);
     f4a:	0a e0       	ldi	r16, 0x0A	; 10
     f4c:	10 e0       	ldi	r17, 0x00	; 0
        if (v == 1) { 
		break; 
	}
        nrk_event_signal (bmac_rx_pkt_signal);
#else
      v = _bmac_channel_check ();
     f4e:	0e 94 00 07 	call	0xe00	; 0xe00 <_bmac_channel_check>
     f52:	e8 2e       	mov	r14, r24
      if (v == 1)
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	51 f1       	breq	.+84     	; 0xfac <_bmac_tx+0xa4>
        break;
#endif
      // Channel is busy
      backoff = rand () % (_b_pow (backoff_count));
     f58:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <rand>
     f5c:	ec 01       	movw	r28, r24
     f5e:	8f 2d       	mov	r24, r15
     f60:	0e 94 75 07 	call	0xeea	; 0xeea <_b_pow>
     f64:	68 2f       	mov	r22, r24
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	ce 01       	movw	r24, r28
     f6a:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <__divmodhi4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 44 1c 	call	0x3888	; 0x3888 <nrk_wait_until_next_n_periods>
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
     f74:	80 e6       	ldi	r24, 0x60	; 96
     f76:	94 e0       	ldi	r25, 0x04	; 4
     f78:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_nrk_time_to_ticks>
     f7c:	ec 01       	movw	r28, r24
      b = b / ((rand () % 10) + 1);
     f7e:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <rand>
     f82:	b8 01       	movw	r22, r16
     f84:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <__divmodhi4>
     f88:	bc 01       	movw	r22, r24
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	ce 01       	movw	r24, r28
     f90:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <__udivmodhi4>
//      printf( "waiting %d\r\n",b );
      nrk_wait_until_ticks (b);
     f94:	cb 01       	movw	r24, r22
     f96:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <nrk_wait_until_ticks>
//      nrk_wait_ticks(b);

    }
    while (v == 0);
     f9a:	ee 20       	and	r14, r14
     f9c:	39 f4       	brne	.+14     	; 0xfac <_bmac_tx+0xa4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
     f9e:	f3 94       	inc	r15
     fa0:	8f 2d       	mov	r24, r15
     fa2:	87 30       	cpi	r24, 0x07	; 7
     fa4:	a0 f2       	brcs	.-88     	; 0xf4e <_bmac_tx+0x46>
     fa6:	86 e0       	ldi	r24, 0x06	; 6
     fa8:	f8 2e       	mov	r15, r24
     faa:	d1 cf       	rjmp	.-94     	; 0xf4e <_bmac_tx+0x46>
    }
    while (v == 0);
  }

  // send extended preamble
  bmac_rfTxInfo.cca = 0;
     fac:	10 92 93 05 	sts	0x0593, r1
  bmac_rfTxInfo.ackRequest = 0;
     fb0:	10 92 94 05 	sts	0x0594, r1

  uint16_t ms = _bmac_check_period.secs * 1000;
     fb4:	20 91 60 04 	lds	r18, 0x0460
     fb8:	30 91 61 04 	lds	r19, 0x0461
     fbc:	88 ee       	ldi	r24, 0xE8	; 232
     fbe:	93 e0       	ldi	r25, 0x03	; 3
     fc0:	28 9f       	mul	r18, r24
     fc2:	e0 01       	movw	r28, r0
     fc4:	29 9f       	mul	r18, r25
     fc6:	d0 0d       	add	r29, r0
     fc8:	38 9f       	mul	r19, r24
     fca:	d0 0d       	add	r29, r0
     fcc:	11 24       	eor	r1, r1
  ms += _bmac_check_period.nano_secs / 1000000;
     fce:	60 91 64 04 	lds	r22, 0x0464
     fd2:	70 91 65 04 	lds	r23, 0x0465
     fd6:	80 91 66 04 	lds	r24, 0x0466
     fda:	90 91 67 04 	lds	r25, 0x0467
     fde:	20 e4       	ldi	r18, 0x40	; 64
     fe0:	32 e4       	ldi	r19, 0x42	; 66
     fe2:	4f e0       	ldi	r20, 0x0F	; 15
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
     fea:	c2 0f       	add	r28, r18
     fec:	d3 1f       	adc	r29, r19
  //printf( "CR ms: %u\n",ms );
  //target_t.nano_secs+=20*NANOS_PER_MS;
  rf_rx_on ();
     fee:	0e 94 c3 09 	call	0x1386	; 0x1386 <rf_rx_on>
  pkt_got_ack = rf_tx_packet_repeat (&bmac_rfTxInfo, ms);
     ff2:	8e e8       	ldi	r24, 0x8E	; 142
     ff4:	95 e0       	ldi	r25, 0x05	; 5
     ff6:	be 01       	movw	r22, r28
     ff8:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <rf_tx_packet_repeat>
     ffc:	80 93 68 04 	sts	0x0468, r24

  // send packet
  // pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
  rf_rx_off ();                 // Just in case auto-ack left radio on
    1000:	0e 94 cb 09 	call	0x1396	; 0x1396 <rf_rx_off>
  tx_data_ready = 0;
    1004:	10 92 69 04 	sts	0x0469, r1
  nrk_event_signal (bmac_tx_pkt_done_signal);
    1008:	80 91 62 07 	lds	r24, 0x0762
    100c:	0e 94 06 18 	call	0x300c	; 0x300c <nrk_event_signal>
  return NRK_OK;
}
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	08 95       	ret

00001020 <bmac_nw_task>:
  nrk_event_signal (bmac_enable_signal);
}


void bmac_nw_task ()
{
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
    1028:	02 c0       	rjmp	.+4      	; 0x102e <bmac_nw_task+0xe>
    nrk_wait_until_next_period ();
    102a:	0e 94 77 1c 	call	0x38ee	; 0x38ee <nrk_wait_until_next_period>
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
    102e:	80 91 77 04 	lds	r24, 0x0477
    1032:	88 23       	and	r24, r24
    1034:	d1 f3       	breq	.-12     	; 0x102a <bmac_nw_task+0xa>
    nrk_wait_until_next_period ();

//register the signal after bmac_init has been called
  v = nrk_signal_register (bmac_enable_signal);
    1036:	80 91 0d 05 	lds	r24, 0x050D
    103a:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <nrk_signal_register>
  if (v == NRK_ERROR)
    103e:	8f 3f       	cpi	r24, 0xFF	; 255
    1040:	21 f4       	brne	.+8      	; 0x104a <bmac_nw_task+0x2a>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
    1042:	87 ee       	ldi	r24, 0xE7	; 231
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
        event = nrk_event_wait (SIG (bmac_enable_signal));
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	e9 2e       	mov	r14, r25
    104e:	f1 2c       	mov	r15, r1
    1050:	01 2d       	mov	r16, r1
    1052:	11 2d       	mov	r17, r1
#ifdef NRK_SW_WDT
#ifdef BMAC_SW_WDT_ID
    nrk_sw_wdt_update (BMAC_SW_WDT_ID);
#endif
#endif
    rf_power_up ();
    1054:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <rf_power_up>
    if (is_enabled) {
    1058:	80 91 78 04 	lds	r24, 0x0478
    105c:	88 23       	and	r24, r24
    105e:	69 f1       	breq	.+90     	; 0x10ba <bmac_nw_task+0x9a>
	 if (_bmac_rx () == 1) e = nrk_event_signal (bmac_rx_pkt_signal);
      }
      else
      e = nrk_event_signal (bmac_rx_pkt_signal);
#else
      if (rx_buf_empty == 1)
    1060:	80 91 76 04 	lds	r24, 0x0476
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	41 f4       	brne	.+16     	; 0x1078 <bmac_nw_task+0x58>
        v = _bmac_channel_check ();
    1068:	0e 94 00 07 	call	0xe00	; 0xe00 <_bmac_channel_check>
      else
        e = nrk_event_signal (bmac_rx_pkt_signal);
      // bmac_channel check turns on radio, don't turn off if
      // data is coming.

      if (v == 0) {
    106c:	88 23       	and	r24, r24
    106e:	41 f4       	brne	.+16     	; 0x1080 <bmac_nw_task+0x60>
        if (_bmac_rx () == 1) {
    1070:	0e 94 17 07 	call	0xe2e	; 0xe2e <_bmac_rx>
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	21 f4       	brne	.+8      	; 0x1080 <bmac_nw_task+0x60>
          e = nrk_event_signal (bmac_rx_pkt_signal);
    1078:	80 91 a4 05 	lds	r24, 0x05A4
    107c:	0e 94 06 18 	call	0x300c	; 0x300c <nrk_event_signal>
        //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));

      }

#endif
      if (tx_data_ready == 1) {
    1080:	80 91 69 04 	lds	r24, 0x0469
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	11 f4       	brne	.+4      	; 0x108c <bmac_nw_task+0x6c>
        _bmac_tx ();
    1088:	0e 94 84 07 	call	0xf08	; 0xf08 <_bmac_tx>
      }
      rf_rx_off ();
    108c:	0e 94 cb 09 	call	0x1396	; 0x1396 <rf_rx_off>
      rf_power_down ();
    1090:	0e 94 d6 08 	call	0x11ac	; 0x11ac <rf_power_down>

      //do {
      nrk_wait (_bmac_check_period);
    1094:	20 91 60 04 	lds	r18, 0x0460
    1098:	30 91 61 04 	lds	r19, 0x0461
    109c:	40 91 62 04 	lds	r20, 0x0462
    10a0:	50 91 63 04 	lds	r21, 0x0463
    10a4:	60 91 64 04 	lds	r22, 0x0464
    10a8:	70 91 65 04 	lds	r23, 0x0465
    10ac:	80 91 66 04 	lds	r24, 0x0466
    10b0:	90 91 67 04 	lds	r25, 0x0467
    10b4:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <nrk_wait>
    10b8:	cd cf       	rjmp	.-102    	; 0x1054 <bmac_nw_task+0x34>
      //} while(rx_buf_empty!=1);
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
    10ba:	80 91 0d 05 	lds	r24, 0x050D
    10be:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <nrk_signal_register>
        event = nrk_event_wait (SIG (bmac_enable_signal));
    10c2:	c8 01       	movw	r24, r16
    10c4:	b7 01       	movw	r22, r14
    10c6:	00 90 0d 05 	lds	r0, 0x050D
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <bmac_nw_task+0xb4>
    10cc:	66 0f       	add	r22, r22
    10ce:	77 1f       	adc	r23, r23
    10d0:	88 1f       	adc	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	d2 f7       	brpl	.-12     	; 0x10cc <bmac_nw_task+0xac>
    10d8:	0e 94 79 18 	call	0x30f2	; 0x30f2 <nrk_event_wait>
      }
      while ((event & SIG (bmac_enable_signal)) == 0);
    10dc:	00 90 0d 05 	lds	r0, 0x050D
    10e0:	04 c0       	rjmp	.+8      	; 0x10ea <bmac_nw_task+0xca>
    10e2:	96 95       	lsr	r25
    10e4:	87 95       	ror	r24
    10e6:	77 95       	ror	r23
    10e8:	67 95       	ror	r22
    10ea:	0a 94       	dec	r0
    10ec:	d2 f7       	brpl	.-12     	; 0x10e2 <bmac_nw_task+0xc2>
    10ee:	60 ff       	sbrs	r22, 0
    10f0:	e4 cf       	rjmp	.-56     	; 0x10ba <bmac_nw_task+0x9a>
    10f2:	b0 cf       	rjmp	.-160    	; 0x1054 <bmac_nw_task+0x34>

000010f4 <bmac_task_config>:
  return result;
}


void bmac_task_config ()
{
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
  nrk_task_set_entry_function (&bmac_task, bmac_nw_task);
    10f8:	cc eb       	ldi	r28, 0xBC	; 188
    10fa:	d3 e0       	ldi	r29, 0x03	; 3
    10fc:	ce 01       	movw	r24, r28
    10fe:	60 e1       	ldi	r22, 0x10	; 16
    1100:	78 e0       	ldi	r23, 0x08	; 8
    1102:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <nrk_task_set_entry_function>
  nrk_task_set_stk (&bmac_task, bmac_task_stack, BMAC_STACKSIZE);
    1106:	ce 01       	movw	r24, r28
    1108:	6f ed       	ldi	r22, 0xDF	; 223
    110a:	73 e0       	ldi	r23, 0x03	; 3
    110c:	40 e8       	ldi	r20, 0x80	; 128
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	0e 94 ef 25 	call	0x4bde	; 0x4bde <nrk_task_set_stk>
  bmac_task.prio = BMAC_TASK_PRIORITY;
    1114:	84 e1       	ldi	r24, 0x14	; 20
    1116:	80 93 c4 03 	sts	0x03C4, r24
  bmac_task.FirstActivation = TRUE;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	80 93 c3 03 	sts	0x03C3, r24
  bmac_task.Type = BASIC_TASK;
    1120:	80 93 c5 03 	sts	0x03C5, r24
  bmac_task.SchType = PREEMPTIVE;
    1124:	80 93 c6 03 	sts	0x03C6, r24
  bmac_task.period.secs = 0;
    1128:	10 92 c7 03 	sts	0x03C7, r1
    112c:	10 92 c8 03 	sts	0x03C8, r1
    1130:	10 92 c9 03 	sts	0x03C9, r1
    1134:	10 92 ca 03 	sts	0x03CA, r1
  bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	9d e2       	ldi	r25, 0x2D	; 45
    113c:	a1 e3       	ldi	r26, 0x31	; 49
    113e:	b1 e0       	ldi	r27, 0x01	; 1
    1140:	80 93 cb 03 	sts	0x03CB, r24
    1144:	90 93 cc 03 	sts	0x03CC, r25
    1148:	a0 93 cd 03 	sts	0x03CD, r26
    114c:	b0 93 ce 03 	sts	0x03CE, r27
  bmac_task.cpu_reserve.secs = 0;       // bmac reserve , 0 to disable
    1150:	10 92 cf 03 	sts	0x03CF, r1
    1154:	10 92 d0 03 	sts	0x03D0, r1
    1158:	10 92 d1 03 	sts	0x03D1, r1
    115c:	10 92 d2 03 	sts	0x03D2, r1
  bmac_task.cpu_reserve.nano_secs = 0;
    1160:	10 92 d3 03 	sts	0x03D3, r1
    1164:	10 92 d4 03 	sts	0x03D4, r1
    1168:	10 92 d5 03 	sts	0x03D5, r1
    116c:	10 92 d6 03 	sts	0x03D6, r1
  bmac_task.offset.secs = 0;
    1170:	10 92 d7 03 	sts	0x03D7, r1
    1174:	10 92 d8 03 	sts	0x03D8, r1
    1178:	10 92 d9 03 	sts	0x03D9, r1
    117c:	10 92 da 03 	sts	0x03DA, r1
  bmac_task.offset.nano_secs = 0;
    1180:	10 92 db 03 	sts	0x03DB, r1
    1184:	10 92 dc 03 	sts	0x03DC, r1
    1188:	10 92 dd 03 	sts	0x03DD, r1
    118c:	10 92 de 03 	sts	0x03DE, r1
#ifdef DEBUG
  printf ("bmac activate\r\n");
#endif
  nrk_activate_task (&bmac_task);
    1190:	ce 01       	movw	r24, r28
    1192:	0e 94 c3 1a 	call	0x3586	; 0x3586 <nrk_activate_task>
}
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    119c:	90 91 41 01 	lds	r25, 0x0141
    11a0:	9f 71       	andi	r25, 0x1F	; 31
    11a2:	9f 31       	cpi	r25, 0x1F	; 31
    11a4:	d9 f3       	breq	.-10     	; 0x119c <rf_cmd>
		continue;
	TRX_STATE = cmd;
    11a6:	80 93 42 01 	sts	0x0142, r24
}
    11aa:	08 95       	ret

000011ac <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    11ac:	80 91 41 01 	lds	r24, 0x0141
    11b0:	8f 71       	andi	r24, 0x1F	; 31
    11b2:	8f 31       	cpi	r24, 0x1F	; 31
    11b4:	d9 f3       	breq	.-10     	; 0x11ac <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    11b6:	80 91 41 01 	lds	r24, 0x0141
    11ba:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    11bc:	d1 f0       	breq	.+52     	; 0x11f2 <rf_power_down+0x46>
    11be:	8f 30       	cpi	r24, 0x0F	; 15
    11c0:	c1 f0       	breq	.+48     	; 0x11f2 <rf_power_down+0x46>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    11c2:	80 91 41 01 	lds	r24, 0x0141
    11c6:	8f 71       	andi	r24, 0x1F	; 31
    11c8:	88 30       	cpi	r24, 0x08	; 8
    11ca:	41 f0       	breq	.+16     	; 0x11dc <rf_power_down+0x30>
		rf_cmd(TRX_OFF);
    11cc:	88 e0       	ldi	r24, 0x08	; 8
    11ce:	0e 94 ce 08 	call	0x119c	; 0x119c <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    11d2:	80 91 41 01 	lds	r24, 0x0141
    11d6:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    11d8:	88 30       	cpi	r24, 0x08	; 8
    11da:	d9 f7       	brne	.-10     	; 0x11d2 <rf_power_down+0x26>
	}

	TRXPR |= (1 << SLPTR);
    11dc:	80 91 39 01 	lds	r24, 0x0139
    11e0:	82 60       	ori	r24, 0x02	; 2
    11e2:	80 93 39 01 	sts	0x0139, r24
	do{
		status = (TRX_STATUS & 0x1F);
    11e6:	80 91 41 01 	lds	r24, 0x0141
    11ea:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <rf_power_down+0x46>
    11ee:	8f 30       	cpi	r24, 0x0F	; 15
    11f0:	d1 f7       	brne	.-12     	; 0x11e6 <rf_power_down+0x3a>
    11f2:	08 95       	ret

000011f4 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    11f4:	80 91 41 01 	lds	r24, 0x0141
    11f8:	8f 71       	andi	r24, 0x1F	; 31
    11fa:	8f 31       	cpi	r24, 0x1F	; 31
    11fc:	d9 f3       	breq	.-10     	; 0x11f4 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    11fe:	80 91 41 01 	lds	r24, 0x0141
    1202:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    1204:	11 f0       	breq	.+4      	; 0x120a <rf_power_up+0x16>
    1206:	8f 30       	cpi	r24, 0x0F	; 15
    1208:	51 f4       	brne	.+20     	; 0x121e <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    120a:	80 91 39 01 	lds	r24, 0x0139
    120e:	8d 7f       	andi	r24, 0xFD	; 253
    1210:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    1214:	80 91 41 01 	lds	r24, 0x0141
    1218:	8f 71       	andi	r24, 0x1F	; 31
    121a:	88 30       	cpi	r24, 0x08	; 8
    121c:	d9 f7       	brne	.-10     	; 0x1214 <rf_power_up+0x20>
    121e:	08 95       	ret

00001220 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    1220:	e5 e4       	ldi	r30, 0x45	; 69
    1222:	f1 e0       	ldi	r31, 0x01	; 1
    1224:	90 81       	ld	r25, Z
    1226:	90 7f       	andi	r25, 0xF0	; 240
    1228:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    122a:	90 81       	ld	r25, Z
    122c:	8f 70       	andi	r24, 0x0F	; 15
    122e:	89 2b       	or	r24, r25
    1230:	80 83       	st	Z, r24
}
    1232:	08 95       	ret

00001234 <rf_addr_decode_enable>:

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    1234:	e7 e5       	ldi	r30, 0x57	; 87
    1236:	f1 e0       	ldi	r31, 0x01	; 1
    1238:	80 81       	ld	r24, Z
    123a:	8d 7f       	andi	r24, 0xFD	; 253
    123c:	80 83       	st	Z, r24
}
    123e:	08 95       	ret

00001240 <rf_addr_decode_disable>:


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    1240:	e7 e5       	ldi	r30, 0x57	; 87
    1242:	f1 e0       	ldi	r31, 0x01	; 1
    1244:	80 81       	ld	r24, Z
    1246:	82 60       	ori	r24, 0x02	; 2
    1248:	80 83       	st	Z, r24
}
    124a:	08 95       	ret

0000124c <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    124c:	ee e6       	ldi	r30, 0x6E	; 110
    124e:	f1 e0       	ldi	r31, 0x01	; 1
    1250:	80 81       	ld	r24, Z
    1252:	8f 7e       	andi	r24, 0xEF	; 239
    1254:	80 83       	st	Z, r24
}
    1256:	08 95       	ret

00001258 <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    1258:	ee e6       	ldi	r30, 0x6E	; 110
    125a:	f1 e0       	ldi	r31, 0x01	; 1
    125c:	80 81       	ld	r24, Z
    125e:	80 61       	ori	r24, 0x10	; 16
    1260:	80 83       	st	Z, r24
}
    1262:	08 95       	ret

00001264 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    1264:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    1268:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    126c:	90 93 77 07 	sts	0x0777, r25
    1270:	80 93 76 07 	sts	0x0776, r24
}
    1274:	08 95       	ret

00001276 <rf_set_rx>:


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    1276:	90 93 71 07 	sts	0x0771, r25
    127a:	80 93 70 07 	sts	0x0770, r24
	PHY_CC_CCA &= ~(0x1F);
    127e:	e8 e4       	ldi	r30, 0x48	; 72
    1280:	f1 e0       	ldi	r31, 0x01	; 1
    1282:	80 81       	ld	r24, Z
    1284:	80 7e       	andi	r24, 0xE0	; 224
    1286:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    1288:	80 81       	ld	r24, Z
    128a:	68 2b       	or	r22, r24
    128c:	60 83       	st	Z, r22
}
    128e:	08 95       	ret

00001290 <rx_start_callback>:

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    1290:	90 93 7c 04 	sts	0x047C, r25
    1294:	80 93 7b 04 	sts	0x047B, r24
}
    1298:	08 95       	ret

0000129a <rf_init>:


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    129a:	1f 93       	push	r17

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    129c:	70 e2       	ldi	r23, 0x20	; 32
    129e:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    12a2:	70 ec       	ldi	r23, 0xC0	; 192
    12a4:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    12a8:	60 62       	ori	r22, 0x20	; 32
    12aa:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    12ae:	65 ec       	ldi	r22, 0xC5	; 197
    12b0:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    12b4:	67 ea       	ldi	r22, 0xA7	; 167
    12b6:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    12ba:	60 e8       	ldi	r22, 0x80	; 128
    12bc:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    12c0:	20 93 60 01 	sts	0x0160, r18
    12c4:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    12c8:	40 93 62 01 	sts	0x0162, r20
    12cc:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    12d0:	e6 e4       	ldi	r30, 0x46	; 70
    12d2:	f1 e0       	ldi	r31, 0x01	; 1
    12d4:	10 81       	ld	r17, Z
    12d6:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    12d8:	60 81       	ld	r22, Z
    12da:	70 81       	ld	r23, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    12dc:	12 95       	swap	r17
    12de:	16 95       	lsr	r17
    12e0:	17 70       	andi	r17, 0x07	; 7
    12e2:	12 95       	swap	r17
    12e4:	11 0f       	add	r17, r17
    12e6:	11 0f       	add	r17, r17
    12e8:	10 7c       	andi	r17, 0xC0	; 192
    12ea:	72 95       	swap	r23
    12ec:	76 95       	lsr	r23
    12ee:	73 70       	andi	r23, 0x03	; 3
    12f0:	17 2b       	or	r17, r23
    12f2:	a2 95       	swap	r26
    12f4:	a6 95       	lsr	r26
    12f6:	a7 70       	andi	r26, 0x07	; 7
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	a3 70       	andi	r26, 0x03	; 3
    12fc:	b0 70       	andi	r27, 0x00	; 0
    12fe:	74 e0       	ldi	r23, 0x04	; 4
    1300:	aa 0f       	add	r26, r26
    1302:	bb 1f       	adc	r27, r27
    1304:	7a 95       	dec	r23
    1306:	e1 f7       	brne	.-8      	; 0x1300 <rf_init+0x66>
    1308:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    130a:	62 95       	swap	r22
    130c:	66 95       	lsr	r22
    130e:	67 70       	andi	r22, 0x07	; 7
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	63 70       	andi	r22, 0x03	; 3
    1314:	70 70       	andi	r23, 0x00	; 0
    1316:	66 0f       	add	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	66 0f       	add	r22, r22
    131c:	77 1f       	adc	r23, r23
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    131e:	16 2b       	or	r17, r22
    1320:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1324:	60 81       	ld	r22, Z
    1326:	e0 81       	ld	r30, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1328:	e2 95       	swap	r30
    132a:	e6 95       	lsr	r30
    132c:	e3 70       	andi	r30, 0x03	; 3
    132e:	e0 64       	ori	r30, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1330:	62 95       	swap	r22
    1332:	66 95       	lsr	r22
    1334:	67 70       	andi	r22, 0x07	; 7
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	63 70       	andi	r22, 0x03	; 3
    133a:	70 70       	andi	r23, 0x00	; 0
    133c:	66 0f       	add	r22, r22
    133e:	77 1f       	adc	r23, r23
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1340:	e6 2b       	or	r30, r22
    1342:	e0 93 6e 01 	sts	0x016E, r30
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    1346:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    134a:	6f ef       	ldi	r22, 0xFF	; 255
    134c:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    1350:	90 93 71 07 	sts	0x0771, r25
    1354:	80 93 70 07 	sts	0x0770, r24
	rfSettings.txSeqNumber = 0;
    1358:	10 92 72 07 	sts	0x0772, r1
	rfSettings.ackReceived = 0;
    135c:	10 92 73 07 	sts	0x0773, r1
	rfSettings.panId = panId;
    1360:	50 93 75 07 	sts	0x0775, r21
    1364:	40 93 74 07 	sts	0x0774, r20
	rfSettings.myAddr = myAddr;
    1368:	30 93 77 07 	sts	0x0777, r19
    136c:	20 93 76 07 	sts	0x0776, r18
	rfSettings.receiveOn = 0;
    1370:	10 92 78 07 	sts	0x0778, r1

	rf_ready = 1;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 82 07 	sts	0x0782, r24
	rx_ready = 0;
    137a:	10 92 91 07 	sts	0x0791, r1
	tx_done = 0;
    137e:	10 92 81 07 	sts	0x0781, r1

} // rf_init() 
    1382:	1f 91       	pop	r17
    1384:	08 95       	ret

00001386 <rf_rx_on>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
	rf_cmd(RX_AACK_ON);
    1386:	86 e1       	ldi	r24, 0x16	; 22
    1388:	0e 94 ce 08 	call	0x119c	; 0x119c <rf_cmd>
}
    138c:	08 95       	ret

0000138e <rf_polling_rx_on>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
	rf_cmd(RX_AACK_ON);
    138e:	86 e1       	ldi	r24, 0x16	; 22
    1390:	0e 94 ce 08 	call	0x119c	; 0x119c <rf_cmd>
}
    1394:	08 95       	ret

00001396 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    1396:	88 e0       	ldi	r24, 0x08	; 8
    1398:	0e 94 ce 08 	call	0x119c	; 0x119c <rf_cmd>
	rx_ready = 0;
    139c:	10 92 91 07 	sts	0x0791, r1
}
    13a0:	08 95       	ret

000013a2 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    13a2:	2f 92       	push	r2
    13a4:	3f 92       	push	r3
    13a6:	4f 92       	push	r4
    13a8:	5f 92       	push	r5
    13aa:	7f 92       	push	r7
    13ac:	8f 92       	push	r8
    13ae:	9f 92       	push	r9
    13b0:	af 92       	push	r10
    13b2:	bf 92       	push	r11
    13b4:	cf 92       	push	r12
    13b6:	df 92       	push	r13
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	ec 01       	movw	r28, r24
    13c6:	1b 01       	movw	r2, r22
	

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready)
    13c8:	80 91 82 07 	lds	r24, 0x0782
    13cc:	88 23       	and	r24, r24
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <rf_tx_packet_repeat+0x30>
    13d0:	01 c1       	rjmp	.+514    	; 0x15d4 <rf_tx_packet_repeat+0x232>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    13d2:	8e 81       	ldd	r24, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    13d4:	90 91 72 07 	lds	r25, 0x0772
    13d8:	9f 5f       	subi	r25, 0xFF	; 255
    13da:	90 93 72 07 	sts	0x0772, r25
	machead->fcf = fcf;
    13de:	e1 e8       	ldi	r30, 0x81	; 129
    13e0:	f1 e0       	ldi	r31, 0x01	; 1
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	82 95       	swap	r24
    13e6:	88 0f       	add	r24, r24
    13e8:	80 72       	andi	r24, 0x20	; 32
    13ea:	81 64       	ori	r24, 0x41	; 65
    13ec:	80 93 81 01 	sts	0x0181, r24
    13f0:	88 e8       	ldi	r24, 0x88	; 136
    13f2:	81 83       	std	Z+1, r24	; 0x01
	machead->fcf = fcf;
	machead->seq_num = rfSettings.txSeqNumber;
    13f4:	80 91 72 07 	lds	r24, 0x0772
    13f8:	82 83       	std	Z+2, r24	; 0x02
	machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    13fa:	90 91 63 01 	lds	r25, 0x0163
    13fe:	80 91 62 01 	lds	r24, 0x0162
    1402:	39 2f       	mov	r19, r25
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	82 2b       	or	r24, r18
    140a:	93 2b       	or	r25, r19
    140c:	94 83       	std	Z+4, r25	; 0x04
    140e:	83 83       	std	Z+3, r24	; 0x03
	machead->dest_addr = pRTI->destAddr;
    1410:	88 81       	ld	r24, Y
    1412:	99 81       	ldd	r25, Y+1	; 0x01
    1414:	96 83       	std	Z+6, r25	; 0x06
    1416:	85 83       	std	Z+5, r24	; 0x05
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    1418:	90 91 61 01 	lds	r25, 0x0161
    141c:	80 91 60 01 	lds	r24, 0x0160
    1420:	39 2f       	mov	r19, r25
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	82 2b       	or	r24, r18
    1428:	93 2b       	or	r25, r19
    142a:	90 87       	std	Z+8, r25	; 0x08
    142c:	87 83       	std	Z+7, r24	; 0x07
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    142e:	4a 81       	ldd	r20, Y+2	; 0x02
    1430:	24 2f       	mov	r18, r20
    1432:	33 27       	eor	r19, r19
    1434:	27 fd       	sbrc	r18, 7
    1436:	30 95       	com	r19
    1438:	6b 81       	ldd	r22, Y+3	; 0x03
    143a:	7c 81       	ldd	r23, Y+4	; 0x04
    143c:	8a e8       	ldi	r24, 0x8A	; 138
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	53 2f       	mov	r21, r19
    1442:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	85 5f       	subi	r24, 0xF5	; 245
    144a:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    144e:	70 90 41 01 	lds	r7, 0x0141
    1452:	8f e1       	ldi	r24, 0x1F	; 31
    1454:	78 22       	and	r7, r24
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1456:	87 2d       	mov	r24, r7
    1458:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    145a:	82 30       	cpi	r24, 0x02	; 2
    145c:	c0 f3       	brcs	.-16     	; 0x144e <rf_tx_packet_repeat+0xac>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    145e:	87 2d       	mov	r24, r7
    1460:	81 31       	cpi	r24, 0x11	; 17
    1462:	a9 f3       	breq	.-22     	; 0x144e <rf_tx_packet_repeat+0xac>
    1464:	82 31       	cpi	r24, 0x12	; 18
    1466:	99 f3       	breq	.-26     	; 0x144e <rf_tx_packet_repeat+0xac>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    1468:	8f 31       	cpi	r24, 0x1F	; 31
    146a:	89 f3       	breq	.-30     	; 0x144e <rf_tx_packet_repeat+0xac>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    146c:	88 30       	cpi	r24, 0x08	; 8
    146e:	39 f0       	breq	.+14     	; 0x147e <rf_tx_packet_repeat+0xdc>
    1470:	86 30       	cpi	r24, 0x06	; 6
    1472:	29 f0       	breq	.+10     	; 0x147e <rf_tx_packet_repeat+0xdc>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
    1474:	86 31       	cpi	r24, 0x16	; 22
    1476:	19 f0       	breq	.+6      	; 0x147e <rf_tx_packet_repeat+0xdc>
    1478:	89 30       	cpi	r24, 0x09	; 9
    147a:	09 f0       	breq	.+2      	; 0x147e <rf_tx_packet_repeat+0xdc>
    147c:	ab c0       	rjmp	.+342    	; 0x15d4 <rf_tx_packet_repeat+0x232>
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    147e:	86 e1       	ldi	r24, 0x16	; 22
    1480:	0e 94 ce 08 	call	0x119c	; 0x119c <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	88 23       	and	r24, r24
    1488:	69 f0       	breq	.+26     	; 0x14a4 <rf_tx_packet_repeat+0x102>
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    148a:	80 91 48 01 	lds	r24, 0x0148
    148e:	80 68       	ori	r24, 0x80	; 128
    1490:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    1494:	80 91 41 01 	lds	r24, 0x0141
    1498:	87 ff       	sbrs	r24, 7
    149a:	fc cf       	rjmp	.-8      	; 0x1494 <rf_tx_packet_repeat+0xf2>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    149c:	80 91 41 01 	lds	r24, 0x0141
    14a0:	86 ff       	sbrs	r24, 6
    14a2:	98 c0       	rjmp	.+304    	; 0x15d4 <rf_tx_packet_repeat+0x232>
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    14a4:	89 e0       	ldi	r24, 0x09	; 9
    14a6:	0e 94 ce 08 	call	0x119c	; 0x119c <rf_cmd>
	if(pRTI->ackRequest)
    14aa:	8e 81       	ldd	r24, Y+6	; 0x06
    14ac:	88 23       	and	r24, r24
    14ae:	19 f0       	breq	.+6      	; 0x14b6 <rf_tx_packet_repeat+0x114>
		rf_cmd(TX_ARET_ON);
    14b0:	89 e1       	ldi	r24, 0x19	; 25
    14b2:	0e 94 ce 08 	call	0x119c	; 0x119c <rf_cmd>
	
	if(ms != 0){
    14b6:	21 14       	cp	r2, r1
    14b8:	31 04       	cpc	r3, r1
    14ba:	a9 f1       	breq	.+106    	; 0x1526 <rf_tx_packet_repeat+0x184>
		nrk_time_get(&curr_t);
    14bc:	89 e7       	ldi	r24, 0x79	; 121
    14be:	97 e0       	ldi	r25, 0x07	; 7
    14c0:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <nrk_time_get>
		target_t.secs = curr_t.secs;
    14c4:	80 91 79 07 	lds	r24, 0x0779
    14c8:	90 91 7a 07 	lds	r25, 0x077A
    14cc:	a0 91 7b 07 	lds	r26, 0x077B
    14d0:	b0 91 7c 07 	lds	r27, 0x077C
    14d4:	80 93 83 07 	sts	0x0783, r24
    14d8:	90 93 84 07 	sts	0x0784, r25
    14dc:	a0 93 85 07 	sts	0x0785, r26
    14e0:	b0 93 86 07 	sts	0x0786, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    14e4:	b1 01       	movw	r22, r2
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	20 e4       	ldi	r18, 0x40	; 64
    14ec:	32 e4       	ldi	r19, 0x42	; 66
    14ee:	4f e0       	ldi	r20, 0x0F	; 15
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    14f6:	20 91 7d 07 	lds	r18, 0x077D
    14fa:	30 91 7e 07 	lds	r19, 0x077E
    14fe:	40 91 7f 07 	lds	r20, 0x077F
    1502:	50 91 80 07 	lds	r21, 0x0780
    1506:	62 0f       	add	r22, r18
    1508:	73 1f       	adc	r23, r19
    150a:	84 1f       	adc	r24, r20
    150c:	95 1f       	adc	r25, r21
    150e:	60 93 87 07 	sts	0x0787, r22
    1512:	70 93 88 07 	sts	0x0788, r23
    1516:	80 93 89 07 	sts	0x0789, r24
    151a:	90 93 8a 07 	sts	0x078A, r25
		nrk_time_compact_nanos(&target_t);
    151e:	83 e8       	ldi	r24, 0x83	; 131
    1520:	97 e0       	ldi	r25, 0x07	; 7
    1522:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <nrk_time_compact_nanos>
	}
	
	do{
		tx_done = 0;
    1526:	10 92 81 07 	sts	0x0781, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	0e 94 ce 08 	call	0x119c	; 0x119c <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    1530:	44 24       	eor	r4, r4
    1532:	55 24       	eor	r5, r5
    1534:	08 c0       	rjmp	.+16     	; 0x1546 <rf_tx_packet_repeat+0x1a4>
    1536:	08 94       	sec
    1538:	41 1c       	adc	r4, r1
    153a:	51 1c       	adc	r5, r1
    153c:	88 ee       	ldi	r24, 0xE8	; 232
    153e:	48 16       	cp	r4, r24
    1540:	8d ef       	ldi	r24, 0xFD	; 253
    1542:	58 06       	cpc	r5, r24
    1544:	21 f0       	breq	.+8      	; 0x154e <rf_tx_packet_repeat+0x1ac>
    1546:	80 91 81 07 	lds	r24, 0x0781
    154a:	88 23       	and	r24, r24
    154c:	a1 f3       	breq	.-24     	; 0x1536 <rf_tx_packet_repeat+0x194>
			continue;
		if(ms == 0)
    154e:	21 14       	cp	r2, r1
    1550:	31 04       	cpc	r3, r1
    1552:	59 f1       	breq	.+86     	; 0x15aa <rf_tx_packet_repeat+0x208>
			break;
		nrk_time_get(&curr_t);
    1554:	89 e7       	ldi	r24, 0x79	; 121
    1556:	97 e0       	ldi	r25, 0x07	; 7
    1558:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    155c:	82 e9       	ldi	r24, 0x92	; 146
    155e:	97 e0       	ldi	r25, 0x07	; 7
    1560:	00 91 83 07 	lds	r16, 0x0783
    1564:	10 91 84 07 	lds	r17, 0x0784
    1568:	20 91 85 07 	lds	r18, 0x0785
    156c:	30 91 86 07 	lds	r19, 0x0786
    1570:	40 91 87 07 	lds	r20, 0x0787
    1574:	50 91 88 07 	lds	r21, 0x0788
    1578:	60 91 89 07 	lds	r22, 0x0789
    157c:	70 91 8a 07 	lds	r23, 0x078A
    1580:	80 90 79 07 	lds	r8, 0x0779
    1584:	90 90 7a 07 	lds	r9, 0x077A
    1588:	a0 90 7b 07 	lds	r10, 0x077B
    158c:	b0 90 7c 07 	lds	r11, 0x077C
    1590:	c0 90 7d 07 	lds	r12, 0x077D
    1594:	d0 90 7e 07 	lds	r13, 0x077E
    1598:	e0 90 7f 07 	lds	r14, 0x077F
    159c:	f0 90 80 07 	lds	r15, 0x0780
    15a0:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <nrk_time_sub>
    15a4:	8f 3f       	cpi	r24, 0xFF	; 255
    15a6:	09 f0       	breq	.+2      	; 0x15aa <rf_tx_packet_repeat+0x208>
    15a8:	be cf       	rjmp	.-132    	; 0x1526 <rf_tx_packet_repeat+0x184>

	trx_error = ((pRTI->ackRequest && 
    15aa:	8e 81       	ldd	r24, Y+6	; 0x06
    15ac:	88 23       	and	r24, r24
    15ae:	31 f0       	breq	.+12     	; 0x15bc <rf_tx_packet_repeat+0x21a>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    15b0:	80 91 42 01 	lds	r24, 0x0142
    15b4:	82 95       	swap	r24
    15b6:	86 95       	lsr	r24
    15b8:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    15ba:	29 f4       	brne	.+10     	; 0x15c6 <rf_tx_packet_repeat+0x224>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    15bc:	88 ee       	ldi	r24, 0xE8	; 232
    15be:	48 16       	cp	r4, r24
    15c0:	8d ef       	ldi	r24, 0xFD	; 253
    15c2:	58 06       	cpc	r5, r24
    15c4:	11 f4       	brne	.+4      	; 0x15ca <rf_tx_packet_repeat+0x228>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    15c6:	1f ef       	ldi	r17, 0xFF	; 255
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <rf_tx_packet_repeat+0x22a>
    15ca:	11 e0       	ldi	r17, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    15cc:	87 2d       	mov	r24, r7
    15ce:	0e 94 ce 08 	call	0x119c	; 0x119c <rf_cmd>

	return trx_error;
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <rf_tx_packet_repeat+0x234>
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
		while(!(TRX_STATUS & (1 << CCA_DONE)))
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
    15d4:	1f ef       	ldi	r17, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);

	return trx_error;
}
    15d6:	81 2f       	mov	r24, r17
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	df 90       	pop	r13
    15e6:	cf 90       	pop	r12
    15e8:	bf 90       	pop	r11
    15ea:	af 90       	pop	r10
    15ec:	9f 90       	pop	r9
    15ee:	8f 90       	pop	r8
    15f0:	7f 90       	pop	r7
    15f2:	5f 90       	pop	r5
    15f4:	4f 90       	pop	r4
    15f6:	3f 90       	pop	r3
    15f8:	2f 90       	pop	r2
    15fa:	08 95       	ret

000015fc <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <rf_tx_packet_repeat>
}
    1604:	08 95       	ret

00001606 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    160a:	80 91 82 07 	lds	r24, 0x0782
    160e:	88 23       	and	r24, r24
    1610:	49 f1       	breq	.+82     	; 0x1664 <rf_cca_check+0x5e>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1612:	10 91 41 01 	lds	r17, 0x0141
    1616:	1f 71       	andi	r17, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1618:	81 2f       	mov	r24, r17
    161a:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	c8 f3       	brcs	.-14     	; 0x1612 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1620:	11 31       	cpi	r17, 0x11	; 17
    1622:	b9 f3       	breq	.-18     	; 0x1612 <rf_cca_check+0xc>
    1624:	12 31       	cpi	r17, 0x12	; 18
    1626:	a9 f3       	breq	.-22     	; 0x1612 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1628:	1f 31       	cpi	r17, 0x1F	; 31
    162a:	99 f3       	breq	.-26     	; 0x1612 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    162c:	18 30       	cpi	r17, 0x08	; 8
    162e:	21 f0       	breq	.+8      	; 0x1638 <rf_cca_check+0x32>
    1630:	16 30       	cpi	r17, 0x06	; 6
    1632:	11 f0       	breq	.+4      	; 0x1638 <rf_cca_check+0x32>
			&& (trx_status != RX_AACK_ON))
    1634:	16 31       	cpi	r17, 0x16	; 22
    1636:	b1 f4       	brne	.+44     	; 0x1664 <rf_cca_check+0x5e>
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    1638:	86 e1       	ldi	r24, 0x16	; 22
    163a:	0e 94 ce 08 	call	0x119c	; 0x119c <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    163e:	80 91 48 01 	lds	r24, 0x0148
    1642:	80 68       	ori	r24, 0x80	; 128
    1644:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    1648:	80 91 41 01 	lds	r24, 0x0141
    164c:	87 ff       	sbrs	r24, 7
    164e:	fc cf       	rjmp	.-8      	; 0x1648 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1650:	00 91 41 01 	lds	r16, 0x0141
	rf_cmd(trx_status);
    1654:	81 2f       	mov	r24, r17
    1656:	0e 94 ce 08 	call	0x119c	; 0x119c <rf_cmd>

	return cca_value;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	06 fd       	sbrc	r16, 6
    165e:	03 c0       	rjmp	.+6      	; 0x1666 <rf_cca_check+0x60>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <rf_cca_check+0x60>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
    1664:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    1666:	1f 91       	pop	r17
    1668:	0f 91       	pop	r16
    166a:	08 95       	ret

0000166c <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    166c:	80 91 82 07 	lds	r24, 0x0782
    1670:	88 23       	and	r24, r24
    1672:	09 f4       	brne	.+2      	; 0x1676 <rf_rx_packet_nonblock+0xa>
    1674:	84 c0       	rjmp	.+264    	; 0x177e <rf_rx_packet_nonblock+0x112>
		return NRK_ERROR;

	if(!rx_ready)
    1676:	80 91 91 07 	lds	r24, 0x0791
    167a:	88 23       	and	r24, r24
    167c:	09 f4       	brne	.+2      	; 0x1680 <rf_rx_packet_nonblock+0x14>
    167e:	81 c0       	rjmp	.+258    	; 0x1782 <rf_rx_packet_nonblock+0x116>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    1680:	80 91 7b 01 	lds	r24, 0x017B
    1684:	e0 91 70 07 	lds	r30, 0x0770
    1688:	f0 91 71 07 	lds	r31, 0x0771
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 97       	sbiw	r24, 0x02	; 2
    1690:	24 81       	ldd	r18, Z+4	; 0x04
    1692:	33 27       	eor	r19, r19
    1694:	27 fd       	sbrc	r18, 7
    1696:	30 95       	com	r19
    1698:	28 17       	cp	r18, r24
    169a:	39 07       	cpc	r19, r25
    169c:	0c f4       	brge	.+2      	; 0x16a0 <rf_rx_packet_nonblock+0x34>
    169e:	73 c0       	rjmp	.+230    	; 0x1786 <rf_rx_packet_nonblock+0x11a>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    16a0:	e0 91 70 07 	lds	r30, 0x0770
    16a4:	f0 91 71 07 	lds	r31, 0x0771
    16a8:	80 91 82 01 	lds	r24, 0x0182
    16ac:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    16ae:	e0 91 70 07 	lds	r30, 0x0770
    16b2:	f0 91 71 07 	lds	r31, 0x0771
    16b6:	80 91 87 01 	lds	r24, 0x0187
    16ba:	90 91 88 01 	lds	r25, 0x0188
    16be:	92 83       	std	Z+2, r25	; 0x02
    16c0:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    16c2:	e0 91 70 07 	lds	r30, 0x0770
    16c6:	f0 91 71 07 	lds	r31, 0x0771
    16ca:	80 91 7b 01 	lds	r24, 0x017B
    16ce:	8b 50       	subi	r24, 0x0B	; 11
    16d0:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    16d2:	a0 91 70 07 	lds	r26, 0x0770
    16d6:	b0 91 71 07 	lds	r27, 0x0771
    16da:	e0 91 70 07 	lds	r30, 0x0770
    16de:	f0 91 71 07 	lds	r31, 0x0771
    16e2:	13 96       	adiw	r26, 0x03	; 3
    16e4:	9c 91       	ld	r25, X
    16e6:	13 97       	sbiw	r26, 0x03	; 3
    16e8:	84 81       	ldd	r24, Z+4	; 0x04
    16ea:	89 17       	cp	r24, r25
    16ec:	3c f0       	brlt	.+14     	; 0x16fc <rf_rx_packet_nonblock+0x90>
			|| (rfSettings.pRxInfo->length < 0)){
    16ee:	e0 91 70 07 	lds	r30, 0x0770
    16f2:	f0 91 71 07 	lds	r31, 0x0771
    16f6:	83 81       	ldd	r24, Z+3	; 0x03
    16f8:	87 ff       	sbrs	r24, 7
    16fa:	0d c0       	rjmp	.+26     	; 0x1716 <rf_rx_packet_nonblock+0xaa>
		rx_ready = 0;
    16fc:	10 92 91 07 	sts	0x0791, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1700:	80 91 4c 01 	lds	r24, 0x014C
    1704:	8f 77       	andi	r24, 0x7F	; 127
    1706:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    170a:	80 91 4c 01 	lds	r24, 0x014C
    170e:	80 68       	ori	r24, 0x80	; 128
    1710:	80 93 4c 01 	sts	0x014C, r24
    1714:	34 c0       	rjmp	.+104    	; 0x177e <rf_rx_packet_nonblock+0x112>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    1716:	e0 91 70 07 	lds	r30, 0x0770
    171a:	f0 91 71 07 	lds	r31, 0x0771
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    171e:	a0 91 70 07 	lds	r26, 0x0770
    1722:	b0 91 71 07 	lds	r27, 0x0771
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    1726:	13 96       	adiw	r26, 0x03	; 3
    1728:	4c 91       	ld	r20, X
    172a:	24 2f       	mov	r18, r20
    172c:	33 27       	eor	r19, r19
    172e:	27 fd       	sbrc	r18, 7
    1730:	30 95       	com	r19
    1732:	85 81       	ldd	r24, Z+5	; 0x05
    1734:	96 81       	ldd	r25, Z+6	; 0x06
    1736:	69 e8       	ldi	r22, 0x89	; 137
    1738:	71 e0       	ldi	r23, 0x01	; 1
    173a:	53 2f       	mov	r21, r19
    173c:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    1740:	e0 91 70 07 	lds	r30, 0x0770
    1744:	f0 91 71 07 	lds	r31, 0x0771
    1748:	80 91 80 01 	lds	r24, 0x0180
    174c:	82 95       	swap	r24
    174e:	86 95       	lsr	r24
    1750:	81 70       	andi	r24, 0x01	; 1
    1752:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    1754:	e0 91 70 07 	lds	r30, 0x0770
    1758:	f0 91 71 07 	lds	r31, 0x0771
    175c:	80 91 47 01 	lds	r24, 0x0147
    1760:	80 87       	std	Z+8, r24	; 0x08

	/* Reset frame buffer protection */
	rx_ready = 0;
    1762:	10 92 91 07 	sts	0x0791, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1766:	80 91 4c 01 	lds	r24, 0x014C
    176a:	8f 77       	andi	r24, 0x7F	; 127
    176c:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1770:	80 91 4c 01 	lds	r24, 0x014C
    1774:	80 68       	ori	r24, 0x80	; 128
    1776:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	08 95       	ret

	if(!rx_ready)
		return 0;
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	08 95       	ret
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
		return NRK_ERROR;
    1786:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1788:	08 95       	ret

0000178a <__vector_60>:


SIGNAL(TRX24_RX_END_vect)
{	
    178a:	1f 92       	push	r1
    178c:	0f 92       	push	r0
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	0f 92       	push	r0
    1792:	11 24       	eor	r1, r1
    1794:	8f 93       	push	r24
    1796:	9f 93       	push	r25
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	01 c0       	rjmp	.+2      	; 0x179e <__vector_60+0x14>
    179c:	8f 5f       	subi	r24, 0xFF	; 255
    179e:	90 91 7b 01 	lds	r25, 0x017B
    17a2:	89 17       	cp	r24, r25
    17a4:	d8 f3       	brcs	.-10     	; 0x179c <__vector_60+0x12>
			vprintf("\r\n");
	}
	vprintf("\r\n");


	if((PHY_RSSI >> RX_CRC_VALID) & 0x1)
    17a6:	80 91 46 01 	lds	r24, 0x0146
    17aa:	87 ff       	sbrs	r24, 7
    17ac:	03 c0       	rjmp	.+6      	; 0x17b4 <__vector_60+0x2a>
		rx_ready = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	80 93 91 07 	sts	0x0791, r24
	IRQ_STATUS = (1 << RX_END);
    17b4:	88 e0       	ldi	r24, 0x08	; 8
    17b6:	80 93 4f 01 	sts	0x014F, r24
	
	return;
}
    17ba:	9f 91       	pop	r25
    17bc:	8f 91       	pop	r24
    17be:	0f 90       	pop	r0
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	0f 90       	pop	r0
    17c4:	1f 90       	pop	r1
    17c6:	18 95       	reti

000017c8 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    17c8:	1f 92       	push	r1
    17ca:	0f 92       	push	r0
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	0f 92       	push	r0
    17d0:	11 24       	eor	r1, r1
    17d2:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    17d4:	80 e8       	ldi	r24, 0x80	; 128
    17d6:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    17da:	8f 91       	pop	r24
    17dc:	0f 90       	pop	r0
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	0f 90       	pop	r0
    17e2:	1f 90       	pop	r1
    17e4:	18 95       	reti

000017e6 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{ 
    17e6:	1f 92       	push	r1
    17e8:	0f 92       	push	r0
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	0f 92       	push	r0
    17ee:	11 24       	eor	r1, r1
    17f0:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	80 93 81 07 	sts	0x0781, r24
	IRQ_STATUS = (1 << TX_END);
    17f8:	80 e4       	ldi	r24, 0x40	; 64
    17fa:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    17fe:	8f 91       	pop	r24
    1800:	0f 90       	pop	r0
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	0f 90       	pop	r0
    1806:	1f 90       	pop	r1
    1808:	18 95       	reti

0000180a <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    180a:	1f 92       	push	r1
    180c:	0f 92       	push	r0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	0f 92       	push	r0
    1812:	11 24       	eor	r1, r1
    1814:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    1816:	80 e2       	ldi	r24, 0x20	; 32
    1818:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    181c:	8f 91       	pop	r24
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	0f 90       	pop	r0
    1824:	1f 90       	pop	r1
    1826:	18 95       	reti

00001828 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    1828:	1f 92       	push	r1
    182a:	0f 92       	push	r0
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	0f 92       	push	r0
    1830:	11 24       	eor	r1, r1
    1832:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    1834:	80 e1       	ldi	r24, 0x10	; 16
    1836:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    183a:	8f 91       	pop	r24
    183c:	0f 90       	pop	r0
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	0f 90       	pop	r0
    1842:	1f 90       	pop	r1
    1844:	18 95       	reti

00001846 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    1846:	1f 92       	push	r1
    1848:	0f 92       	push	r0
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	0f 92       	push	r0
    184e:	0b b6       	in	r0, 0x3b	; 59
    1850:	0f 92       	push	r0
    1852:	11 24       	eor	r1, r1
    1854:	2f 93       	push	r18
    1856:	3f 93       	push	r19
    1858:	4f 93       	push	r20
    185a:	5f 93       	push	r21
    185c:	6f 93       	push	r22
    185e:	7f 93       	push	r23
    1860:	8f 93       	push	r24
    1862:	9f 93       	push	r25
    1864:	af 93       	push	r26
    1866:	bf 93       	push	r27
    1868:	ef 93       	push	r30
    186a:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    186c:	84 e0       	ldi	r24, 0x04	; 4
    186e:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    1872:	e0 91 7b 04 	lds	r30, 0x047B
    1876:	f0 91 7c 04 	lds	r31, 0x047C
    187a:	30 97       	sbiw	r30, 0x00	; 0
    187c:	09 f0       	breq	.+2      	; 0x1880 <__vector_59+0x3a>
		rx_start_func();
    187e:	09 95       	icall

	return;
}
    1880:	ff 91       	pop	r31
    1882:	ef 91       	pop	r30
    1884:	bf 91       	pop	r27
    1886:	af 91       	pop	r26
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	7f 91       	pop	r23
    188e:	6f 91       	pop	r22
    1890:	5f 91       	pop	r21
    1892:	4f 91       	pop	r20
    1894:	3f 91       	pop	r19
    1896:	2f 91       	pop	r18
    1898:	0f 90       	pop	r0
    189a:	0b be       	out	0x3b, r0	; 59
    189c:	0f 90       	pop	r0
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	0f 90       	pop	r0
    18a2:	1f 90       	pop	r1
    18a4:	18 95       	reti

000018a6 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    18a6:	1f 92       	push	r1
    18a8:	0f 92       	push	r0
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	0f 92       	push	r0
    18ae:	11 24       	eor	r1, r1
    18b0:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    18b8:	8f 91       	pop	r24
    18ba:	0f 90       	pop	r0
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	0f 90       	pop	r0
    18c0:	1f 90       	pop	r1
    18c2:	18 95       	reti

000018c4 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    18c4:	1f 92       	push	r1
    18c6:	0f 92       	push	r0
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	0f 92       	push	r0
    18cc:	11 24       	eor	r1, r1
    18ce:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    18d6:	8f 91       	pop	r24
    18d8:	0f 90       	pop	r0
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	0f 90       	pop	r0
    18de:	1f 90       	pop	r1
    18e0:	18 95       	reti

000018e2 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    18e2:	e9 e4       	ldi	r30, 0x49	; 73
    18e4:	f1 e0       	ldi	r31, 0x01	; 1
    18e6:	90 81       	ld	r25, Z
    18e8:	90 7f       	andi	r25, 0xF0	; 240
    18ea:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    18ec:	90 81       	ld	r25, Z
    18ee:	8f 70       	andi	r24, 0x0F	; 15
    18f0:	89 2b       	or	r24, r25
    18f2:	80 83       	st	Z, r24
	return;
}
    18f4:	08 95       	ret

000018f6 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    18f6:	8f ef       	ldi	r24, 0xFF	; 255
    18f8:	08 95       	ret

000018fa <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
	return;
}
    18fa:	08 95       	ret

000018fc <rf_security_set_key>:


void rf_security_set_key(uint8_t *key)
{
	return;
}
    18fc:	08 95       	ret

000018fe <rf_security_disable>:


void rf_security_disable()
{
	return;
}
    18fe:	08 95       	ret

00001900 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    1900:	8f ef       	ldi	r24, 0xFF	; 255
    1902:	08 95       	ret

00001904 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    1904:	80 91 6c 07 	lds	r24, 0x076C
    1908:	90 91 6d 07 	lds	r25, 0x076D
    190c:	08 95       	ret

0000190e <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	08 95       	ret

00001912 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
}
    1912:	08 95       	ret

00001914 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	08 95       	ret

00001918 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	08 95       	ret

0000191c <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	08 95       	ret

00001920 <rf_carrier_on>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1920:	08 95       	ret

00001922 <rf_carrier_off>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1922:	08 95       	ret

00001924 <rf_test_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1924:	08 95       	ret

00001926 <rf_data_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
    1926:	08 95       	ret

00001928 <rf_rx_set_serial>:
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
}
    1928:	08 95       	ret

0000192a <rf_tx_set_serial>:
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
}
    192a:	08 95       	ret

0000192c <rf_set_preamble_length>:
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
}
    192c:	08 95       	ret

0000192e <rf_set_cca_mode>:


void rf_set_cca_mode(uint8_t mode)
{
}
    192e:	08 95       	ret

00001930 <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    1930:	80 91 c0 00 	lds	r24, 0x00C0
    1934:	87 ff       	sbrs	r24, 7
    1936:	fc cf       	rjmp	.-8      	; 0x1930 <getc0>
    1938:	80 91 c0 00 	lds	r24, 0x00C0
    193c:	8f 77       	andi	r24, 0x7F	; 127
    193e:	80 93 c0 00 	sts	0x00C0, r24
    1942:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    1946:	08 95       	ret

00001948 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1948:	90 91 c0 00 	lds	r25, 0x00C0
    194c:	95 ff       	sbrs	r25, 5
    194e:	fc cf       	rjmp	.-8      	; 0x1948 <putc0>
    1950:	90 91 c0 00 	lds	r25, 0x00C0
    1954:	9f 7d       	andi	r25, 0xDF	; 223
    1956:	90 93 c0 00 	sts	0x00C0, r25
    195a:	80 93 c6 00 	sts	0x00C6, r24
}
    195e:	08 95       	ret

00001960 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	08 95       	ret

00001964 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	19 f4       	brne	.+6      	; 0x196e <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1968:	80 91 c8 00 	lds	r24, 0x00C8
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
    196e:	88 23       	and	r24, r24
    1970:	31 f4       	brne	.+12     	; 0x197e <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    1972:	80 91 c0 00 	lds	r24, 0x00C0
{
   return NRK_ERROR;
}


uint8_t nrk_uart_data_ready(uint8_t uart_num)
    1976:	88 1f       	adc	r24, r24
    1978:	88 27       	eor	r24, r24
    197a:	88 1f       	adc	r24, r24
    197c:	08 95       	ret
        }
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
    197e:	80 e0       	ldi	r24, 0x00	; 0
}
    1980:	08 95       	ret

00001982 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	ec 01       	movw	r28, r24
 char c;
   while((c=pgm_read_byte(addr++)))
    1988:	07 c0       	rjmp	.+14     	; 0x1998 <nrk_kprintf+0x16>
        putchar(c);
    198a:	60 91 6c 08 	lds	r22, 0x086C
    198e:	70 91 6d 08 	lds	r23, 0x086D
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <fputc>
    1998:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
    199a:	21 96       	adiw	r28, 0x01	; 1
    199c:	84 91       	lpm	r24, Z+
    199e:	88 23       	and	r24, r24
    19a0:	a1 f7       	brne	.-24     	; 0x198a <nrk_kprintf+0x8>
        putchar(c);
}
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	08 95       	ret

000019a8 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    19a8:	86 e0       	ldi	r24, 0x06	; 6
    19aa:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    19ac:	85 b9       	out	0x05, r24	; 5
#endif
       // DDRE  = ; 
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    19ae:	88 ef       	ldi	r24, 0xF8	; 248
    19b0:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    19b2:	80 ef       	ldi	r24, 0xF0	; 240
    19b4:	8b b9       	out	0x0b, r24	; 11
        PORTE  = BM(UART0_TXD); 
    19b6:	82 e0       	ldi	r24, 0x02	; 2
    19b8:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) ; 
    19ba:	80 e6       	ldi	r24, 0x60	; 96
    19bc:	81 b9       	out	0x01, r24	; 1
        PORTA |= BM(RESET_N); 
    19be:	16 9a       	sbi	0x02, 6	; 2
} 
    19c0:	08 95       	ret

000019c2 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    19c2:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <PORT_INIT>
//SPI_INIT();
}
    19c6:	08 95       	ret

000019c8 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    19c8:	8f 3f       	cpi	r24, 0xFF	; 255
    19ca:	09 f4       	brne	.+2      	; 0x19ce <nrk_gpio_set+0x6>
    19cc:	71 c0       	rjmp	.+226    	; 0x1ab0 <nrk_gpio_set+0xe8>
        switch (pin & 0x07) {
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	27 70       	andi	r18, 0x07	; 7
    19d4:	30 70       	andi	r19, 0x00	; 0
    19d6:	22 30       	cpi	r18, 0x02	; 2
    19d8:	31 05       	cpc	r19, r1
    19da:	89 f1       	breq	.+98     	; 0x1a3e <nrk_gpio_set+0x76>
    19dc:	23 30       	cpi	r18, 0x03	; 3
    19de:	31 05       	cpc	r19, r1
    19e0:	44 f4       	brge	.+16     	; 0x19f2 <nrk_gpio_set+0x2a>
    19e2:	21 15       	cp	r18, r1
    19e4:	31 05       	cpc	r19, r1
    19e6:	89 f0       	breq	.+34     	; 0x1a0a <nrk_gpio_set+0x42>
    19e8:	21 30       	cpi	r18, 0x01	; 1
    19ea:	31 05       	cpc	r19, r1
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <nrk_gpio_set+0x28>
    19ee:	62 c0       	rjmp	.+196    	; 0x1ab4 <nrk_gpio_set+0xec>
    19f0:	1a c0       	rjmp	.+52     	; 0x1a26 <nrk_gpio_set+0x5e>
    19f2:	24 30       	cpi	r18, 0x04	; 4
    19f4:	31 05       	cpc	r19, r1
    19f6:	09 f4       	brne	.+2      	; 0x19fa <nrk_gpio_set+0x32>
    19f8:	3f c0       	rjmp	.+126    	; 0x1a78 <nrk_gpio_set+0xb0>
    19fa:	24 30       	cpi	r18, 0x04	; 4
    19fc:	31 05       	cpc	r19, r1
    19fe:	74 f1       	brlt	.+92     	; 0x1a5c <nrk_gpio_set+0x94>
    1a00:	25 30       	cpi	r18, 0x05	; 5
    1a02:	31 05       	cpc	r19, r1
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <nrk_gpio_set+0x40>
    1a06:	56 c0       	rjmp	.+172    	; 0x1ab4 <nrk_gpio_set+0xec>
    1a08:	45 c0       	rjmp	.+138    	; 0x1a94 <nrk_gpio_set+0xcc>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a0a:	92 b1       	in	r25, 0x02	; 2
    1a0c:	86 95       	lsr	r24
    1a0e:	86 95       	lsr	r24
    1a10:	86 95       	lsr	r24
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <nrk_gpio_set+0x54>
    1a18:	44 0f       	add	r20, r20
    1a1a:	55 1f       	adc	r21, r21
    1a1c:	8a 95       	dec	r24
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <nrk_gpio_set+0x50>
    1a20:	94 2b       	or	r25, r20
    1a22:	92 b9       	out	0x02, r25	; 2
    1a24:	19 c0       	rjmp	.+50     	; 0x1a58 <nrk_gpio_set+0x90>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a26:	95 b1       	in	r25, 0x05	; 5
    1a28:	86 95       	lsr	r24
    1a2a:	86 95       	lsr	r24
    1a2c:	86 95       	lsr	r24
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <nrk_gpio_set+0x6c>
    1a30:	22 0f       	add	r18, r18
    1a32:	33 1f       	adc	r19, r19
    1a34:	8a 95       	dec	r24
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <nrk_gpio_set+0x68>
    1a38:	92 2b       	or	r25, r18
    1a3a:	95 b9       	out	0x05, r25	; 5
    1a3c:	0d c0       	rjmp	.+26     	; 0x1a58 <nrk_gpio_set+0x90>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a3e:	98 b1       	in	r25, 0x08	; 8
    1a40:	86 95       	lsr	r24
    1a42:	86 95       	lsr	r24
    1a44:	86 95       	lsr	r24
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <nrk_gpio_set+0x88>
    1a4c:	44 0f       	add	r20, r20
    1a4e:	55 1f       	adc	r21, r21
    1a50:	8a 95       	dec	r24
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <nrk_gpio_set+0x84>
    1a54:	94 2b       	or	r25, r20
    1a56:	98 b9       	out	0x08, r25	; 8
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a5a:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a5c:	9b b1       	in	r25, 0x0b	; 11
    1a5e:	86 95       	lsr	r24
    1a60:	86 95       	lsr	r24
    1a62:	86 95       	lsr	r24
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <nrk_gpio_set+0xa6>
    1a6a:	44 0f       	add	r20, r20
    1a6c:	55 1f       	adc	r21, r21
    1a6e:	8a 95       	dec	r24
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <nrk_gpio_set+0xa2>
    1a72:	94 2b       	or	r25, r20
    1a74:	9b b9       	out	0x0b, r25	; 11
    1a76:	f0 cf       	rjmp	.-32     	; 0x1a58 <nrk_gpio_set+0x90>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a78:	9e b1       	in	r25, 0x0e	; 14
    1a7a:	86 95       	lsr	r24
    1a7c:	86 95       	lsr	r24
    1a7e:	86 95       	lsr	r24
    1a80:	41 e0       	ldi	r20, 0x01	; 1
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <nrk_gpio_set+0xc2>
    1a86:	44 0f       	add	r20, r20
    1a88:	55 1f       	adc	r21, r21
    1a8a:	8a 95       	dec	r24
    1a8c:	e2 f7       	brpl	.-8      	; 0x1a86 <nrk_gpio_set+0xbe>
    1a8e:	94 2b       	or	r25, r20
    1a90:	9e b9       	out	0x0e, r25	; 14
    1a92:	e2 cf       	rjmp	.-60     	; 0x1a58 <nrk_gpio_set+0x90>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a94:	91 b3       	in	r25, 0x11	; 17
    1a96:	86 95       	lsr	r24
    1a98:	86 95       	lsr	r24
    1a9a:	86 95       	lsr	r24
    1a9c:	41 e0       	ldi	r20, 0x01	; 1
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <nrk_gpio_set+0xde>
    1aa2:	44 0f       	add	r20, r20
    1aa4:	55 1f       	adc	r21, r21
    1aa6:	8a 95       	dec	r24
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <nrk_gpio_set+0xda>
    1aaa:	94 2b       	or	r25, r20
    1aac:	91 bb       	out	0x11, r25	; 17
    1aae:	d4 cf       	rjmp	.-88     	; 0x1a58 <nrk_gpio_set+0x90>
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1ab0:	8f ef       	ldi	r24, 0xFF	; 255
    1ab2:	08 95       	ret
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1ab6:	08 95       	ret

00001ab8 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1ab8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aba:	09 f4       	brne	.+2      	; 0x1abe <nrk_gpio_clr+0x6>
    1abc:	77 c0       	rjmp	.+238    	; 0x1bac <nrk_gpio_clr+0xf4>
        switch (pin & 0x07) {
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	27 70       	andi	r18, 0x07	; 7
    1ac4:	30 70       	andi	r19, 0x00	; 0
    1ac6:	22 30       	cpi	r18, 0x02	; 2
    1ac8:	31 05       	cpc	r19, r1
    1aca:	99 f1       	breq	.+102    	; 0x1b32 <nrk_gpio_clr+0x7a>
    1acc:	23 30       	cpi	r18, 0x03	; 3
    1ace:	31 05       	cpc	r19, r1
    1ad0:	44 f4       	brge	.+16     	; 0x1ae2 <nrk_gpio_clr+0x2a>
    1ad2:	21 15       	cp	r18, r1
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	89 f0       	breq	.+34     	; 0x1afa <nrk_gpio_clr+0x42>
    1ad8:	21 30       	cpi	r18, 0x01	; 1
    1ada:	31 05       	cpc	r19, r1
    1adc:	09 f0       	breq	.+2      	; 0x1ae0 <nrk_gpio_clr+0x28>
    1ade:	68 c0       	rjmp	.+208    	; 0x1bb0 <nrk_gpio_clr+0xf8>
    1ae0:	1b c0       	rjmp	.+54     	; 0x1b18 <nrk_gpio_clr+0x60>
    1ae2:	24 30       	cpi	r18, 0x04	; 4
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <nrk_gpio_clr+0x32>
    1ae8:	43 c0       	rjmp	.+134    	; 0x1b70 <nrk_gpio_clr+0xb8>
    1aea:	24 30       	cpi	r18, 0x04	; 4
    1aec:	31 05       	cpc	r19, r1
    1aee:	8c f1       	brlt	.+98     	; 0x1b52 <nrk_gpio_clr+0x9a>
    1af0:	25 30       	cpi	r18, 0x05	; 5
    1af2:	31 05       	cpc	r19, r1
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <nrk_gpio_clr+0x40>
    1af6:	5c c0       	rjmp	.+184    	; 0x1bb0 <nrk_gpio_clr+0xf8>
    1af8:	4a c0       	rjmp	.+148    	; 0x1b8e <nrk_gpio_clr+0xd6>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1afa:	92 b1       	in	r25, 0x02	; 2
    1afc:	86 95       	lsr	r24
    1afe:	86 95       	lsr	r24
    1b00:	86 95       	lsr	r24
    1b02:	41 e0       	ldi	r20, 0x01	; 1
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <nrk_gpio_clr+0x54>
    1b08:	44 0f       	add	r20, r20
    1b0a:	55 1f       	adc	r21, r21
    1b0c:	8a 95       	dec	r24
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <nrk_gpio_clr+0x50>
    1b10:	40 95       	com	r20
    1b12:	49 23       	and	r20, r25
    1b14:	42 b9       	out	0x02, r20	; 2
    1b16:	1b c0       	rjmp	.+54     	; 0x1b4e <nrk_gpio_clr+0x96>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1b18:	95 b1       	in	r25, 0x05	; 5
    1b1a:	86 95       	lsr	r24
    1b1c:	86 95       	lsr	r24
    1b1e:	86 95       	lsr	r24
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <nrk_gpio_clr+0x6e>
    1b22:	22 0f       	add	r18, r18
    1b24:	33 1f       	adc	r19, r19
    1b26:	8a 95       	dec	r24
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <nrk_gpio_clr+0x6a>
    1b2a:	20 95       	com	r18
    1b2c:	29 23       	and	r18, r25
    1b2e:	25 b9       	out	0x05, r18	; 5
    1b30:	0e c0       	rjmp	.+28     	; 0x1b4e <nrk_gpio_clr+0x96>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1b32:	98 b1       	in	r25, 0x08	; 8
    1b34:	86 95       	lsr	r24
    1b36:	86 95       	lsr	r24
    1b38:	86 95       	lsr	r24
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <nrk_gpio_clr+0x8c>
    1b40:	44 0f       	add	r20, r20
    1b42:	55 1f       	adc	r21, r21
    1b44:	8a 95       	dec	r24
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <nrk_gpio_clr+0x88>
    1b48:	40 95       	com	r20
    1b4a:	49 23       	and	r20, r25
    1b4c:	48 b9       	out	0x08, r20	; 8
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1b50:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1b52:	9b b1       	in	r25, 0x0b	; 11
    1b54:	86 95       	lsr	r24
    1b56:	86 95       	lsr	r24
    1b58:	86 95       	lsr	r24
    1b5a:	41 e0       	ldi	r20, 0x01	; 1
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <nrk_gpio_clr+0xac>
    1b60:	44 0f       	add	r20, r20
    1b62:	55 1f       	adc	r21, r21
    1b64:	8a 95       	dec	r24
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <nrk_gpio_clr+0xa8>
    1b68:	40 95       	com	r20
    1b6a:	49 23       	and	r20, r25
    1b6c:	4b b9       	out	0x0b, r20	; 11
    1b6e:	ef cf       	rjmp	.-34     	; 0x1b4e <nrk_gpio_clr+0x96>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1b70:	9e b1       	in	r25, 0x0e	; 14
    1b72:	86 95       	lsr	r24
    1b74:	86 95       	lsr	r24
    1b76:	86 95       	lsr	r24
    1b78:	41 e0       	ldi	r20, 0x01	; 1
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <nrk_gpio_clr+0xca>
    1b7e:	44 0f       	add	r20, r20
    1b80:	55 1f       	adc	r21, r21
    1b82:	8a 95       	dec	r24
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <nrk_gpio_clr+0xc6>
    1b86:	40 95       	com	r20
    1b88:	49 23       	and	r20, r25
    1b8a:	4e b9       	out	0x0e, r20	; 14
    1b8c:	e0 cf       	rjmp	.-64     	; 0x1b4e <nrk_gpio_clr+0x96>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1b8e:	91 b3       	in	r25, 0x11	; 17
    1b90:	86 95       	lsr	r24
    1b92:	86 95       	lsr	r24
    1b94:	86 95       	lsr	r24
    1b96:	41 e0       	ldi	r20, 0x01	; 1
    1b98:	50 e0       	ldi	r21, 0x00	; 0
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <nrk_gpio_clr+0xe8>
    1b9c:	44 0f       	add	r20, r20
    1b9e:	55 1f       	adc	r21, r21
    1ba0:	8a 95       	dec	r24
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <nrk_gpio_clr+0xe4>
    1ba4:	40 95       	com	r20
    1ba6:	49 23       	and	r20, r25
    1ba8:	41 bb       	out	0x11, r20	; 17
    1baa:	d1 cf       	rjmp	.-94     	; 0x1b4e <nrk_gpio_clr+0x96>
        return 1;
}

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	08 95       	ret
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    1bb0:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1bb2:	08 95       	ret

00001bb4 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1bb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb6:	89 f1       	breq	.+98     	; 0x1c1a <nrk_gpio_get+0x66>
        switch (pin & 0x07) {
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	27 70       	andi	r18, 0x07	; 7
    1bbe:	30 70       	andi	r19, 0x00	; 0
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	c1 f0       	breq	.+48     	; 0x1bf6 <nrk_gpio_get+0x42>
    1bc6:	23 30       	cpi	r18, 0x03	; 3
    1bc8:	31 05       	cpc	r19, r1
    1bca:	3c f4       	brge	.+14     	; 0x1bda <nrk_gpio_get+0x26>
    1bcc:	21 15       	cp	r18, r1
    1bce:	31 05       	cpc	r19, r1
    1bd0:	71 f0       	breq	.+28     	; 0x1bee <nrk_gpio_get+0x3a>
    1bd2:	21 30       	cpi	r18, 0x01	; 1
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	09 f5       	brne	.+66     	; 0x1c1a <nrk_gpio_get+0x66>
    1bd8:	0c c0       	rjmp	.+24     	; 0x1bf2 <nrk_gpio_get+0x3e>
    1bda:	24 30       	cpi	r18, 0x04	; 4
    1bdc:	31 05       	cpc	r19, r1
    1bde:	79 f0       	breq	.+30     	; 0x1bfe <nrk_gpio_get+0x4a>
    1be0:	24 30       	cpi	r18, 0x04	; 4
    1be2:	31 05       	cpc	r19, r1
    1be4:	54 f0       	brlt	.+20     	; 0x1bfa <nrk_gpio_get+0x46>
    1be6:	25 30       	cpi	r18, 0x05	; 5
    1be8:	31 05       	cpc	r19, r1
    1bea:	b9 f4       	brne	.+46     	; 0x1c1a <nrk_gpio_get+0x66>
    1bec:	0a c0       	rjmp	.+20     	; 0x1c02 <nrk_gpio_get+0x4e>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    1bee:	20 b1       	in	r18, 0x00	; 0
    1bf0:	09 c0       	rjmp	.+18     	; 0x1c04 <nrk_gpio_get+0x50>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    1bf2:	23 b1       	in	r18, 0x03	; 3
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <nrk_gpio_get+0x50>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1bf6:	26 b1       	in	r18, 0x06	; 6
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <nrk_gpio_get+0x50>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1bfa:	29 b1       	in	r18, 0x09	; 9
    1bfc:	03 c0       	rjmp	.+6      	; 0x1c04 <nrk_gpio_get+0x50>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    1bfe:	2c b1       	in	r18, 0x0c	; 12
    1c00:	01 c0       	rjmp	.+2      	; 0x1c04 <nrk_gpio_get+0x50>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    1c02:	2f b1       	in	r18, 0x0f	; 15
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	86 95       	lsr	r24
    1c08:	86 95       	lsr	r24
    1c0a:	86 95       	lsr	r24
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <nrk_gpio_get+0x5e>
    1c0e:	35 95       	asr	r19
    1c10:	27 95       	ror	r18
    1c12:	8a 95       	dec	r24
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <nrk_gpio_get+0x5a>
    1c16:	21 70       	andi	r18, 0x01	; 1
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <nrk_gpio_get+0x68>
                default: return -1;
    1c1a:	2f ef       	ldi	r18, 0xFF	; 255
        }
        return 1;
}
    1c1c:	82 2f       	mov	r24, r18
    1c1e:	08 95       	ret

00001c20 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1c20:	8f 3f       	cpi	r24, 0xFF	; 255
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <nrk_gpio_toggle+0x6>
    1c24:	fa c0       	rjmp	.+500    	; 0x1e1a <nrk_gpio_toggle+0x1fa>
        switch (pin & 0x07) {
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	27 70       	andi	r18, 0x07	; 7
    1c2c:	30 70       	andi	r19, 0x00	; 0
    1c2e:	22 30       	cpi	r18, 0x02	; 2
    1c30:	31 05       	cpc	r19, r1
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <nrk_gpio_toggle+0x16>
    1c34:	59 c0       	rjmp	.+178    	; 0x1ce8 <nrk_gpio_toggle+0xc8>
    1c36:	23 30       	cpi	r18, 0x03	; 3
    1c38:	31 05       	cpc	r19, r1
    1c3a:	44 f4       	brge	.+16     	; 0x1c4c <nrk_gpio_toggle+0x2c>
    1c3c:	21 15       	cp	r18, r1
    1c3e:	31 05       	cpc	r19, r1
    1c40:	91 f0       	breq	.+36     	; 0x1c66 <nrk_gpio_toggle+0x46>
    1c42:	21 30       	cpi	r18, 0x01	; 1
    1c44:	31 05       	cpc	r19, r1
    1c46:	09 f0       	breq	.+2      	; 0x1c4a <nrk_gpio_toggle+0x2a>
    1c48:	ea c0       	rjmp	.+468    	; 0x1e1e <nrk_gpio_toggle+0x1fe>
    1c4a:	33 c0       	rjmp	.+102    	; 0x1cb2 <nrk_gpio_toggle+0x92>
    1c4c:	24 30       	cpi	r18, 0x04	; 4
    1c4e:	31 05       	cpc	r19, r1
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <nrk_gpio_toggle+0x34>
    1c52:	97 c0       	rjmp	.+302    	; 0x1d82 <nrk_gpio_toggle+0x162>
    1c54:	24 30       	cpi	r18, 0x04	; 4
    1c56:	31 05       	cpc	r19, r1
    1c58:	0c f4       	brge	.+2      	; 0x1c5c <nrk_gpio_toggle+0x3c>
    1c5a:	6c c0       	rjmp	.+216    	; 0x1d34 <nrk_gpio_toggle+0x114>
    1c5c:	25 30       	cpi	r18, 0x05	; 5
    1c5e:	31 05       	cpc	r19, r1
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <nrk_gpio_toggle+0x44>
    1c62:	dd c0       	rjmp	.+442    	; 0x1e1e <nrk_gpio_toggle+0x1fe>
    1c64:	b4 c0       	rjmp	.+360    	; 0x1dce <nrk_gpio_toggle+0x1ae>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1c66:	90 b1       	in	r25, 0x00	; 0
    1c68:	86 95       	lsr	r24
    1c6a:	86 95       	lsr	r24
    1c6c:	86 95       	lsr	r24
    1c6e:	28 2f       	mov	r18, r24
    1c70:	89 2f       	mov	r24, r25
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	02 2e       	mov	r0, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <nrk_gpio_toggle+0x5c>
    1c78:	95 95       	asr	r25
    1c7a:	87 95       	ror	r24
    1c7c:	0a 94       	dec	r0
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <nrk_gpio_toggle+0x58>
    1c80:	80 fd       	sbrc	r24, 0
    1c82:	0b c0       	rjmp	.+22     	; 0x1c9a <nrk_gpio_toggle+0x7a>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1c84:	32 b1       	in	r19, 0x02	; 2
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <nrk_gpio_toggle+0x70>
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	2a 95       	dec	r18
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <nrk_gpio_toggle+0x6c>
    1c94:	38 2b       	or	r19, r24
    1c96:	32 b9       	out	0x02, r19	; 2
    1c98:	66 c0       	rjmp	.+204    	; 0x1d66 <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    1c9a:	32 b1       	in	r19, 0x02	; 2
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <nrk_gpio_toggle+0x86>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	2a 95       	dec	r18
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <nrk_gpio_toggle+0x82>
    1caa:	80 95       	com	r24
    1cac:	83 23       	and	r24, r19
    1cae:	82 b9       	out	0x02, r24	; 2
    1cb0:	5a c0       	rjmp	.+180    	; 0x1d66 <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1cb2:	43 b1       	in	r20, 0x03	; 3
    1cb4:	86 95       	lsr	r24
    1cb6:	86 95       	lsr	r24
    1cb8:	86 95       	lsr	r24
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	08 2e       	mov	r0, r24
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <nrk_gpio_toggle+0xa4>
    1cc0:	55 95       	asr	r21
    1cc2:	47 95       	ror	r20
    1cc4:	0a 94       	dec	r0
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <nrk_gpio_toggle+0xa0>
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <nrk_gpio_toggle+0xae>
    1cca:	22 0f       	add	r18, r18
    1ccc:	33 1f       	adc	r19, r19
    1cce:	8a 95       	dec	r24
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <nrk_gpio_toggle+0xaa>
    1cd2:	40 fd       	sbrc	r20, 0
    1cd4:	04 c0       	rjmp	.+8      	; 0x1cde <nrk_gpio_toggle+0xbe>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1cd6:	85 b1       	in	r24, 0x05	; 5
    1cd8:	82 2b       	or	r24, r18
    1cda:	85 b9       	out	0x05, r24	; 5
    1cdc:	44 c0       	rjmp	.+136    	; 0x1d66 <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    1cde:	85 b1       	in	r24, 0x05	; 5
    1ce0:	20 95       	com	r18
    1ce2:	28 23       	and	r18, r24
    1ce4:	25 b9       	out	0x05, r18	; 5
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1ce8:	96 b1       	in	r25, 0x06	; 6
    1cea:	86 95       	lsr	r24
    1cec:	86 95       	lsr	r24
    1cee:	86 95       	lsr	r24
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	89 2f       	mov	r24, r25
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 2e       	mov	r0, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <nrk_gpio_toggle+0xde>
    1cfa:	95 95       	asr	r25
    1cfc:	87 95       	ror	r24
    1cfe:	0a 94       	dec	r0
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <nrk_gpio_toggle+0xda>
    1d02:	80 fd       	sbrc	r24, 0
    1d04:	0b c0       	rjmp	.+22     	; 0x1d1c <nrk_gpio_toggle+0xfc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1d06:	38 b1       	in	r19, 0x08	; 8
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <nrk_gpio_toggle+0xf2>
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	2a 95       	dec	r18
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <nrk_gpio_toggle+0xee>
    1d16:	38 2b       	or	r19, r24
    1d18:	38 b9       	out	0x08, r19	; 8
    1d1a:	25 c0       	rjmp	.+74     	; 0x1d66 <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1d1c:	38 b1       	in	r19, 0x08	; 8
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <nrk_gpio_toggle+0x108>
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	2a 95       	dec	r18
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <nrk_gpio_toggle+0x104>
    1d2c:	80 95       	com	r24
    1d2e:	83 23       	and	r24, r19
    1d30:	88 b9       	out	0x08, r24	; 8
    1d32:	19 c0       	rjmp	.+50     	; 0x1d66 <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1d34:	99 b1       	in	r25, 0x09	; 9
    1d36:	86 95       	lsr	r24
    1d38:	86 95       	lsr	r24
    1d3a:	86 95       	lsr	r24
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	89 2f       	mov	r24, r25
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <nrk_gpio_toggle+0x12a>
    1d46:	95 95       	asr	r25
    1d48:	87 95       	ror	r24
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <nrk_gpio_toggle+0x126>
    1d4e:	80 fd       	sbrc	r24, 0
    1d50:	0c c0       	rjmp	.+24     	; 0x1d6a <nrk_gpio_toggle+0x14a>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1d52:	3b b1       	in	r19, 0x0b	; 11
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <nrk_gpio_toggle+0x13e>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	2a 95       	dec	r18
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <nrk_gpio_toggle+0x13a>
    1d62:	38 2b       	or	r19, r24
    1d64:	3b b9       	out	0x0b, r19	; 11
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                default: return -1;
        }
        return 1;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	08 95       	ret
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    1d6a:	3b b1       	in	r19, 0x0b	; 11
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <nrk_gpio_toggle+0x156>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	2a 95       	dec	r18
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <nrk_gpio_toggle+0x152>
    1d7a:	80 95       	com	r24
    1d7c:	83 23       	and	r24, r19
    1d7e:	8b b9       	out	0x0b, r24	; 11
    1d80:	f2 cf       	rjmp	.-28     	; 0x1d66 <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    1d82:	9c b1       	in	r25, 0x0c	; 12
    1d84:	86 95       	lsr	r24
    1d86:	86 95       	lsr	r24
    1d88:	86 95       	lsr	r24
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	89 2f       	mov	r24, r25
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 2e       	mov	r0, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <nrk_gpio_toggle+0x178>
    1d94:	95 95       	asr	r25
    1d96:	87 95       	ror	r24
    1d98:	0a 94       	dec	r0
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <nrk_gpio_toggle+0x174>
    1d9c:	80 fd       	sbrc	r24, 0
    1d9e:	0b c0       	rjmp	.+22     	; 0x1db6 <nrk_gpio_toggle+0x196>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1da0:	3e b1       	in	r19, 0x0e	; 14
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <nrk_gpio_toggle+0x18c>
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	2a 95       	dec	r18
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <nrk_gpio_toggle+0x188>
    1db0:	38 2b       	or	r19, r24
    1db2:	3e b9       	out	0x0e, r19	; 14
    1db4:	d8 cf       	rjmp	.-80     	; 0x1d66 <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    1db6:	3e b1       	in	r19, 0x0e	; 14
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <nrk_gpio_toggle+0x1a2>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	2a 95       	dec	r18
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <nrk_gpio_toggle+0x19e>
    1dc6:	80 95       	com	r24
    1dc8:	83 23       	and	r24, r19
    1dca:	8e b9       	out	0x0e, r24	; 14
    1dcc:	cc cf       	rjmp	.-104    	; 0x1d66 <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1dce:	9f b1       	in	r25, 0x0f	; 15
    1dd0:	86 95       	lsr	r24
    1dd2:	86 95       	lsr	r24
    1dd4:	86 95       	lsr	r24
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	89 2f       	mov	r24, r25
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <nrk_gpio_toggle+0x1c4>
    1de0:	95 95       	asr	r25
    1de2:	87 95       	ror	r24
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <nrk_gpio_toggle+0x1c0>
    1de8:	80 fd       	sbrc	r24, 0
    1dea:	0b c0       	rjmp	.+22     	; 0x1e02 <nrk_gpio_toggle+0x1e2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1dec:	31 b3       	in	r19, 0x11	; 17
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <nrk_gpio_toggle+0x1d8>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	2a 95       	dec	r18
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <nrk_gpio_toggle+0x1d4>
    1dfc:	38 2b       	or	r19, r24
    1dfe:	31 bb       	out	0x11, r19	; 17
    1e00:	b2 cf       	rjmp	.-156    	; 0x1d66 <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    1e02:	31 b3       	in	r19, 0x11	; 17
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <nrk_gpio_toggle+0x1ee>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	2a 95       	dec	r18
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <nrk_gpio_toggle+0x1ea>
    1e12:	80 95       	com	r24
    1e14:	83 23       	and	r24, r19
    1e16:	81 bb       	out	0x11, r24	; 17
    1e18:	a6 cf       	rjmp	.-180    	; 0x1d66 <nrk_gpio_toggle+0x146>
        return 1;
}

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1e1a:	8f ef       	ldi	r24, 0xFF	; 255
    1e1c:	08 95       	ret
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                default: return -1;
    1e1e:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1e20:	08 95       	ret

00001e22 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1e22:	8f 3f       	cpi	r24, 0xFF	; 255
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <nrk_gpio_direction+0x6>
    1e26:	01 c1       	rjmp	.+514    	; 0x202a <nrk_gpio_direction+0x208>
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    1e2c:	66 23       	and	r22, r22
    1e2e:	09 f0       	breq	.+2      	; 0x1e32 <nrk_gpio_direction+0x10>
    1e30:	8d c0       	rjmp	.+282    	; 0x1f4c <nrk_gpio_direction+0x12a>
                switch (pin & 0x07) {
    1e32:	27 70       	andi	r18, 0x07	; 7
    1e34:	30 70       	andi	r19, 0x00	; 0
    1e36:	22 30       	cpi	r18, 0x02	; 2
    1e38:	31 05       	cpc	r19, r1
    1e3a:	e1 f1       	breq	.+120    	; 0x1eb4 <nrk_gpio_direction+0x92>
    1e3c:	23 30       	cpi	r18, 0x03	; 3
    1e3e:	31 05       	cpc	r19, r1
    1e40:	44 f4       	brge	.+16     	; 0x1e52 <nrk_gpio_direction+0x30>
    1e42:	21 15       	cp	r18, r1
    1e44:	31 05       	cpc	r19, r1
    1e46:	91 f0       	breq	.+36     	; 0x1e6c <nrk_gpio_direction+0x4a>
    1e48:	21 30       	cpi	r18, 0x01	; 1
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <nrk_gpio_direction+0x2e>
    1e4e:	ed c0       	rjmp	.+474    	; 0x202a <nrk_gpio_direction+0x208>
    1e50:	20 c0       	rjmp	.+64     	; 0x1e92 <nrk_gpio_direction+0x70>
    1e52:	24 30       	cpi	r18, 0x04	; 4
    1e54:	31 05       	cpc	r19, r1
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <nrk_gpio_direction+0x38>
    1e58:	53 c0       	rjmp	.+166    	; 0x1f00 <nrk_gpio_direction+0xde>
    1e5a:	24 30       	cpi	r18, 0x04	; 4
    1e5c:	31 05       	cpc	r19, r1
    1e5e:	0c f4       	brge	.+2      	; 0x1e62 <nrk_gpio_direction+0x40>
    1e60:	3c c0       	rjmp	.+120    	; 0x1eda <nrk_gpio_direction+0xb8>
    1e62:	25 30       	cpi	r18, 0x05	; 5
    1e64:	31 05       	cpc	r19, r1
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <nrk_gpio_direction+0x48>
    1e68:	e0 c0       	rjmp	.+448    	; 0x202a <nrk_gpio_direction+0x208>
    1e6a:	5d c0       	rjmp	.+186    	; 0x1f26 <nrk_gpio_direction+0x104>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    1e6c:	91 b1       	in	r25, 0x01	; 1
    1e6e:	86 95       	lsr	r24
    1e70:	86 95       	lsr	r24
    1e72:	86 95       	lsr	r24
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <nrk_gpio_direction+0x5c>
    1e7a:	44 0f       	add	r20, r20
    1e7c:	55 1f       	adc	r21, r21
    1e7e:	8a 95       	dec	r24
    1e80:	e2 f7       	brpl	.-8      	; 0x1e7a <nrk_gpio_direction+0x58>
    1e82:	84 2f       	mov	r24, r20
    1e84:	80 95       	com	r24
    1e86:	89 23       	and	r24, r25
    1e88:	81 b9       	out	0x01, r24	; 1
                                PORTA |= BM((pin & 0xF8) >> 3); 
    1e8a:	82 b1       	in	r24, 0x02	; 2
    1e8c:	84 2b       	or	r24, r20
    1e8e:	82 b9       	out	0x02, r24	; 2
    1e90:	ca c0       	rjmp	.+404    	; 0x2026 <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    1e92:	94 b1       	in	r25, 0x04	; 4
    1e94:	86 95       	lsr	r24
    1e96:	86 95       	lsr	r24
    1e98:	86 95       	lsr	r24
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <nrk_gpio_direction+0x7e>
    1e9c:	22 0f       	add	r18, r18
    1e9e:	33 1f       	adc	r19, r19
    1ea0:	8a 95       	dec	r24
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <nrk_gpio_direction+0x7a>
    1ea4:	82 2f       	mov	r24, r18
    1ea6:	80 95       	com	r24
    1ea8:	89 23       	and	r24, r25
    1eaa:	84 b9       	out	0x04, r24	; 4
                                PORTB |= BM((pin & 0xF8) >> 3); 
    1eac:	85 b1       	in	r24, 0x05	; 5
    1eae:	82 2b       	or	r24, r18
    1eb0:	85 b9       	out	0x05, r24	; 5
    1eb2:	b9 c0       	rjmp	.+370    	; 0x2026 <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    1eb4:	97 b1       	in	r25, 0x07	; 7
    1eb6:	86 95       	lsr	r24
    1eb8:	86 95       	lsr	r24
    1eba:	86 95       	lsr	r24
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <nrk_gpio_direction+0xa4>
    1ec2:	44 0f       	add	r20, r20
    1ec4:	55 1f       	adc	r21, r21
    1ec6:	8a 95       	dec	r24
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <nrk_gpio_direction+0xa0>
    1eca:	84 2f       	mov	r24, r20
    1ecc:	80 95       	com	r24
    1ece:	89 23       	and	r24, r25
    1ed0:	87 b9       	out	0x07, r24	; 7
                                PORTC |= BM((pin & 0xF8) >> 3); 
    1ed2:	88 b1       	in	r24, 0x08	; 8
    1ed4:	84 2b       	or	r24, r20
    1ed6:	88 b9       	out	0x08, r24	; 8
    1ed8:	a6 c0       	rjmp	.+332    	; 0x2026 <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    1eda:	9a b1       	in	r25, 0x0a	; 10
    1edc:	86 95       	lsr	r24
    1ede:	86 95       	lsr	r24
    1ee0:	86 95       	lsr	r24
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <nrk_gpio_direction+0xca>
    1ee8:	44 0f       	add	r20, r20
    1eea:	55 1f       	adc	r21, r21
    1eec:	8a 95       	dec	r24
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <nrk_gpio_direction+0xc6>
    1ef0:	84 2f       	mov	r24, r20
    1ef2:	80 95       	com	r24
    1ef4:	89 23       	and	r24, r25
    1ef6:	8a b9       	out	0x0a, r24	; 10
                                PORTD |= BM((pin & 0xF8) >> 3); 
    1ef8:	8b b1       	in	r24, 0x0b	; 11
    1efa:	84 2b       	or	r24, r20
    1efc:	8b b9       	out	0x0b, r24	; 11
    1efe:	93 c0       	rjmp	.+294    	; 0x2026 <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    1f00:	9d b1       	in	r25, 0x0d	; 13
    1f02:	86 95       	lsr	r24
    1f04:	86 95       	lsr	r24
    1f06:	86 95       	lsr	r24
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	50 e0       	ldi	r21, 0x00	; 0
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <nrk_gpio_direction+0xf0>
    1f0e:	44 0f       	add	r20, r20
    1f10:	55 1f       	adc	r21, r21
    1f12:	8a 95       	dec	r24
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <nrk_gpio_direction+0xec>
    1f16:	84 2f       	mov	r24, r20
    1f18:	80 95       	com	r24
    1f1a:	89 23       	and	r24, r25
    1f1c:	8d b9       	out	0x0d, r24	; 13
                                PORTE |= BM((pin & 0xF8) >> 3); 
    1f1e:	8e b1       	in	r24, 0x0e	; 14
    1f20:	84 2b       	or	r24, r20
    1f22:	8e b9       	out	0x0e, r24	; 14
    1f24:	80 c0       	rjmp	.+256    	; 0x2026 <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    1f26:	90 b3       	in	r25, 0x10	; 16
    1f28:	86 95       	lsr	r24
    1f2a:	86 95       	lsr	r24
    1f2c:	86 95       	lsr	r24
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <nrk_gpio_direction+0x116>
    1f34:	44 0f       	add	r20, r20
    1f36:	55 1f       	adc	r21, r21
    1f38:	8a 95       	dec	r24
    1f3a:	e2 f7       	brpl	.-8      	; 0x1f34 <nrk_gpio_direction+0x112>
    1f3c:	84 2f       	mov	r24, r20
    1f3e:	80 95       	com	r24
    1f40:	89 23       	and	r24, r25
    1f42:	80 bb       	out	0x10, r24	; 16
                                PORTF |= BM((pin & 0xF8) >> 3); 
    1f44:	81 b3       	in	r24, 0x11	; 17
    1f46:	84 2b       	or	r24, r20
    1f48:	81 bb       	out	0x11, r24	; 17
    1f4a:	6d c0       	rjmp	.+218    	; 0x2026 <nrk_gpio_direction+0x204>
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1f4c:	27 70       	andi	r18, 0x07	; 7
    1f4e:	30 70       	andi	r19, 0x00	; 0
    1f50:	22 30       	cpi	r18, 0x02	; 2
    1f52:	31 05       	cpc	r19, r1
    1f54:	89 f1       	breq	.+98     	; 0x1fb8 <nrk_gpio_direction+0x196>
    1f56:	23 30       	cpi	r18, 0x03	; 3
    1f58:	31 05       	cpc	r19, r1
    1f5a:	44 f4       	brge	.+16     	; 0x1f6c <nrk_gpio_direction+0x14a>
    1f5c:	21 15       	cp	r18, r1
    1f5e:	31 05       	cpc	r19, r1
    1f60:	89 f0       	breq	.+34     	; 0x1f84 <nrk_gpio_direction+0x162>
    1f62:	21 30       	cpi	r18, 0x01	; 1
    1f64:	31 05       	cpc	r19, r1
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <nrk_gpio_direction+0x148>
    1f68:	62 c0       	rjmp	.+196    	; 0x202e <nrk_gpio_direction+0x20c>
    1f6a:	1a c0       	rjmp	.+52     	; 0x1fa0 <nrk_gpio_direction+0x17e>
    1f6c:	24 30       	cpi	r18, 0x04	; 4
    1f6e:	31 05       	cpc	r19, r1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <nrk_gpio_direction+0x152>
    1f72:	3e c0       	rjmp	.+124    	; 0x1ff0 <nrk_gpio_direction+0x1ce>
    1f74:	24 30       	cpi	r18, 0x04	; 4
    1f76:	31 05       	cpc	r19, r1
    1f78:	6c f1       	brlt	.+90     	; 0x1fd4 <nrk_gpio_direction+0x1b2>
    1f7a:	25 30       	cpi	r18, 0x05	; 5
    1f7c:	31 05       	cpc	r19, r1
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <nrk_gpio_direction+0x160>
    1f80:	56 c0       	rjmp	.+172    	; 0x202e <nrk_gpio_direction+0x20c>
    1f82:	44 c0       	rjmp	.+136    	; 0x200c <nrk_gpio_direction+0x1ea>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    1f84:	91 b1       	in	r25, 0x01	; 1
    1f86:	86 95       	lsr	r24
    1f88:	86 95       	lsr	r24
    1f8a:	86 95       	lsr	r24
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <nrk_gpio_direction+0x174>
    1f92:	44 0f       	add	r20, r20
    1f94:	55 1f       	adc	r21, r21
    1f96:	8a 95       	dec	r24
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <nrk_gpio_direction+0x170>
    1f9a:	94 2b       	or	r25, r20
    1f9c:	91 b9       	out	0x01, r25	; 1
    1f9e:	43 c0       	rjmp	.+134    	; 0x2026 <nrk_gpio_direction+0x204>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    1fa0:	94 b1       	in	r25, 0x04	; 4
    1fa2:	86 95       	lsr	r24
    1fa4:	86 95       	lsr	r24
    1fa6:	86 95       	lsr	r24
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <nrk_gpio_direction+0x18c>
    1faa:	22 0f       	add	r18, r18
    1fac:	33 1f       	adc	r19, r19
    1fae:	8a 95       	dec	r24
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <nrk_gpio_direction+0x188>
    1fb2:	92 2b       	or	r25, r18
    1fb4:	94 b9       	out	0x04, r25	; 4
    1fb6:	37 c0       	rjmp	.+110    	; 0x2026 <nrk_gpio_direction+0x204>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    1fb8:	97 b1       	in	r25, 0x07	; 7
    1fba:	86 95       	lsr	r24
    1fbc:	86 95       	lsr	r24
    1fbe:	86 95       	lsr	r24
    1fc0:	41 e0       	ldi	r20, 0x01	; 1
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <nrk_gpio_direction+0x1a8>
    1fc6:	44 0f       	add	r20, r20
    1fc8:	55 1f       	adc	r21, r21
    1fca:	8a 95       	dec	r24
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <nrk_gpio_direction+0x1a4>
    1fce:	94 2b       	or	r25, r20
    1fd0:	97 b9       	out	0x07, r25	; 7
    1fd2:	29 c0       	rjmp	.+82     	; 0x2026 <nrk_gpio_direction+0x204>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    1fd4:	9a b1       	in	r25, 0x0a	; 10
    1fd6:	86 95       	lsr	r24
    1fd8:	86 95       	lsr	r24
    1fda:	86 95       	lsr	r24
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <nrk_gpio_direction+0x1c4>
    1fe2:	44 0f       	add	r20, r20
    1fe4:	55 1f       	adc	r21, r21
    1fe6:	8a 95       	dec	r24
    1fe8:	e2 f7       	brpl	.-8      	; 0x1fe2 <nrk_gpio_direction+0x1c0>
    1fea:	94 2b       	or	r25, r20
    1fec:	9a b9       	out	0x0a, r25	; 10
    1fee:	1b c0       	rjmp	.+54     	; 0x2026 <nrk_gpio_direction+0x204>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    1ff0:	9d b1       	in	r25, 0x0d	; 13
    1ff2:	86 95       	lsr	r24
    1ff4:	86 95       	lsr	r24
    1ff6:	86 95       	lsr	r24
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	50 e0       	ldi	r21, 0x00	; 0
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <nrk_gpio_direction+0x1e0>
    1ffe:	44 0f       	add	r20, r20
    2000:	55 1f       	adc	r21, r21
    2002:	8a 95       	dec	r24
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <nrk_gpio_direction+0x1dc>
    2006:	94 2b       	or	r25, r20
    2008:	9d b9       	out	0x0d, r25	; 13
    200a:	0d c0       	rjmp	.+26     	; 0x2026 <nrk_gpio_direction+0x204>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    200c:	90 b3       	in	r25, 0x10	; 16
    200e:	86 95       	lsr	r24
    2010:	86 95       	lsr	r24
    2012:	86 95       	lsr	r24
    2014:	41 e0       	ldi	r20, 0x01	; 1
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	02 c0       	rjmp	.+4      	; 0x201e <nrk_gpio_direction+0x1fc>
    201a:	44 0f       	add	r20, r20
    201c:	55 1f       	adc	r21, r21
    201e:	8a 95       	dec	r24
    2020:	e2 f7       	brpl	.-8      	; 0x201a <nrk_gpio_direction+0x1f8>
    2022:	94 2b       	or	r25, r20
    2024:	90 bb       	out	0x10, r25	; 16
                        default: return -1;
                }
        }
        return 1;
    2026:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    2028:	08 95       	ret
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
                                PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
    202a:	8f ef       	ldi	r24, 0xFF	; 255
    202c:	08 95       	ret
                                DDRD |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        default: return -1;
    202e:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    2030:	08 95       	ret

00002032 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    2032:	88 23       	and	r24, r24
    2034:	29 f4       	brne	.+10     	; 0x2040 <nrk_get_button+0xe>
	 return( !(PINA & BM(BUTTON))); 
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	01 9b       	sbis	0x00, 1	; 0
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <nrk_get_button+0x10>
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	08 95       	ret
	} 
return -1;
    2040:	8f ef       	ldi	r24, 0xFF	; 255
}
    2042:	08 95       	ret

00002044 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	11 f4       	brne	.+4      	; 0x204c <nrk_led_toggle+0x8>
    2048:	83 e2       	ldi	r24, 0x23	; 35
    204a:	0e c0       	rjmp	.+28     	; 0x2068 <nrk_led_toggle+0x24>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    204c:	81 30       	cpi	r24, 0x01	; 1
    204e:	91 05       	cpc	r25, r1
    2050:	11 f4       	brne	.+4      	; 0x2056 <nrk_led_toggle+0x12>
    2052:	8b e2       	ldi	r24, 0x2B	; 43
    2054:	09 c0       	rjmp	.+18     	; 0x2068 <nrk_led_toggle+0x24>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    2056:	82 30       	cpi	r24, 0x02	; 2
    2058:	91 05       	cpc	r25, r1
    205a:	11 f4       	brne	.+4      	; 0x2060 <nrk_led_toggle+0x1c>
    205c:	83 e3       	ldi	r24, 0x33	; 51
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <nrk_led_toggle+0x24>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    2060:	83 30       	cpi	r24, 0x03	; 3
    2062:	91 05       	cpc	r25, r1
    2064:	29 f4       	brne	.+10     	; 0x2070 <nrk_led_toggle+0x2c>
    2066:	8b e3       	ldi	r24, 0x3B	; 59
    2068:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <nrk_gpio_toggle>
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	08 95       	ret
return -1;
    2070:	8f ef       	ldi	r24, 0xFF	; 255
}
    2072:	08 95       	ret

00002074 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	11 f4       	brne	.+4      	; 0x207c <nrk_led_clr+0x8>
    2078:	83 e2       	ldi	r24, 0x23	; 35
    207a:	0e c0       	rjmp	.+28     	; 0x2098 <nrk_led_clr+0x24>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    207c:	81 30       	cpi	r24, 0x01	; 1
    207e:	91 05       	cpc	r25, r1
    2080:	11 f4       	brne	.+4      	; 0x2086 <nrk_led_clr+0x12>
    2082:	8b e2       	ldi	r24, 0x2B	; 43
    2084:	09 c0       	rjmp	.+18     	; 0x2098 <nrk_led_clr+0x24>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    2086:	82 30       	cpi	r24, 0x02	; 2
    2088:	91 05       	cpc	r25, r1
    208a:	11 f4       	brne	.+4      	; 0x2090 <nrk_led_clr+0x1c>
    208c:	83 e3       	ldi	r24, 0x33	; 51
    208e:	04 c0       	rjmp	.+8      	; 0x2098 <nrk_led_clr+0x24>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    2090:	83 30       	cpi	r24, 0x03	; 3
    2092:	91 05       	cpc	r25, r1
    2094:	29 f4       	brne	.+10     	; 0x20a0 <nrk_led_clr+0x2c>
    2096:	8b e3       	ldi	r24, 0x3B	; 59
    2098:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <nrk_gpio_set>
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	08 95       	ret
return -1;
    20a0:	8f ef       	ldi	r24, 0xFF	; 255
}
    20a2:	08 95       	ret

000020a4 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	11 f4       	brne	.+4      	; 0x20ac <nrk_led_set+0x8>
    20a8:	83 e2       	ldi	r24, 0x23	; 35
    20aa:	0e c0       	rjmp	.+28     	; 0x20c8 <nrk_led_set+0x24>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	91 05       	cpc	r25, r1
    20b0:	11 f4       	brne	.+4      	; 0x20b6 <nrk_led_set+0x12>
    20b2:	8b e2       	ldi	r24, 0x2B	; 43
    20b4:	09 c0       	rjmp	.+18     	; 0x20c8 <nrk_led_set+0x24>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    20b6:	82 30       	cpi	r24, 0x02	; 2
    20b8:	91 05       	cpc	r25, r1
    20ba:	11 f4       	brne	.+4      	; 0x20c0 <nrk_led_set+0x1c>
    20bc:	83 e3       	ldi	r24, 0x33	; 51
    20be:	04 c0       	rjmp	.+8      	; 0x20c8 <nrk_led_set+0x24>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    20c0:	83 30       	cpi	r24, 0x03	; 3
    20c2:	91 05       	cpc	r25, r1
    20c4:	29 f4       	brne	.+10     	; 0x20d0 <nrk_led_set+0x2c>
    20c6:	8b e3       	ldi	r24, 0x3B	; 59
    20c8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <nrk_gpio_clr>
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	08 95       	ret
return -1;
    20d0:	8f ef       	ldi	r24, 0xFF	; 255
}
    20d2:	08 95       	ret

000020d4 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    20d4:	88 23       	and	r24, r24
    20d6:	19 f0       	breq	.+6      	; 0x20de <nrk_gpio_pullups+0xa>
    20d8:	85 b7       	in	r24, 0x35	; 53
    20da:	8f 7e       	andi	r24, 0xEF	; 239
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    20de:	85 b7       	in	r24, 0x35	; 53
    20e0:	80 61       	ori	r24, 0x10	; 16
    20e2:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	08 95       	ret

000020e8 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    20e8:	90 91 c8 00 	lds	r25, 0x00C8
    20ec:	95 ff       	sbrs	r25, 5
    20ee:	fc cf       	rjmp	.-8      	; 0x20e8 <putc1>
    20f0:	80 93 ce 00 	sts	0x00CE, r24
}
    20f4:	08 95       	ret

000020f6 <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    20f6:	90 93 c5 00 	sts	0x00C5, r25
    20fa:	80 93 c4 00 	sts	0x00C4, r24
    20fe:	86 e0       	ldi	r24, 0x06	; 6
    2100:	80 93 c2 00 	sts	0x00C2, r24
    2104:	e1 ec       	ldi	r30, 0xC1	; 193
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	8b 7f       	andi	r24, 0xFB	; 251
    210c:	80 83       	st	Z, r24
    210e:	a0 ec       	ldi	r26, 0xC0	; 192
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	8c 91       	ld	r24, X
    2114:	82 60       	ori	r24, 0x02	; 2
    2116:	8c 93       	st	X, r24
ENABLE_UART0();
    2118:	80 81       	ld	r24, Z
    211a:	88 61       	ori	r24, 0x18	; 24
    211c:	80 83       	st	Z, r24
}
    211e:	08 95       	ret

00002120 <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2120:	90 93 cd 00 	sts	0x00CD, r25
    2124:	80 93 cc 00 	sts	0x00CC, r24
    2128:	86 e0       	ldi	r24, 0x06	; 6
    212a:	80 93 ca 00 	sts	0x00CA, r24
    212e:	e9 ec       	ldi	r30, 0xC9	; 201
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8b 7f       	andi	r24, 0xFB	; 251
    2136:	80 83       	st	Z, r24
    2138:	a8 ec       	ldi	r26, 0xC8	; 200
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	8c 91       	ld	r24, X
    213e:	82 60       	ori	r24, 0x02	; 2
    2140:	8c 93       	st	X, r24
ENABLE_UART1();
    2142:	80 81       	ld	r24, Z
    2144:	88 61       	ori	r24, 0x18	; 24
    2146:	80 83       	st	Z, r24
}
    2148:	08 95       	ret

0000214a <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    2152:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    2156:	c4 ea       	ldi	r28, 0xA4	; 164
    2158:	dc e0       	ldi	r29, 0x0C	; 12
    215a:	08 e9       	ldi	r16, 0x98	; 152
    215c:	1c e0       	ldi	r17, 0x0C	; 12
    215e:	ce 01       	movw	r24, r28
    2160:	b8 01       	movw	r22, r16
    2162:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <fdevopen>
    2166:	90 93 6d 08 	sts	0x086D, r25
    216a:	80 93 6c 08 	sts	0x086C, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    216e:	ce 01       	movw	r24, r28
    2170:	b8 01       	movw	r22, r16
    2172:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <fdevopen>
    2176:	90 93 6b 08 	sts	0x086B, r25
    217a:	80 93 6a 08 	sts	0x086A, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	08 95       	ret

00002188 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    2188:	80 91 c8 00 	lds	r24, 0x00C8
    218c:	87 ff       	sbrs	r24, 7
    218e:	fc cf       	rjmp	.-8      	; 0x2188 <getc1>
    2190:	80 91 c8 00 	lds	r24, 0x00C8
    2194:	8f 77       	andi	r24, 0x7F	; 127
    2196:	80 93 c8 00 	sts	0x00C8, r24
    219a:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    219e:	08 95       	ret

000021a0 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	d1 f7       	brne	.-12     	; 0x21a0 <halWait>

} // halWait
    21ac:	08 95       	ret

000021ae <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    21ae:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__eerd_byte_m128rfa1>
return v;
}
    21b2:	08 95       	ret

000021b4 <nrk_eeprom_write_byte>:

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    21b4:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__eewr_byte_m128rfa1>
}
    21b8:	08 95       	ret

000021ba <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    21ba:	ef 92       	push	r14
    21bc:	ff 92       	push	r15
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    21c6:	e8 2e       	mov	r14, r24
    21c8:	e7 01       	movw	r28, r14
    21ca:	7e 01       	movw	r14, r28
    21cc:	f9 2e       	mov	r15, r25
    21ce:	e7 01       	movw	r28, r14
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__eerd_byte_m128rfa1>
    21d8:	08 2f       	mov	r16, r24
    21da:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__eerd_byte_m128rfa1>
    21e4:	e8 2e       	mov	r14, r24
    21e6:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    21e8:	82 e0       	ldi	r24, 0x02	; 2
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__eerd_byte_m128rfa1>
    21f0:	f8 2e       	mov	r15, r24
    21f2:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    21f4:	83 e0       	ldi	r24, 0x03	; 3
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__eerd_byte_m128rfa1>
    21fc:	18 2f       	mov	r17, r24
    21fe:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    2200:	84 e0       	ldi	r24, 0x04	; 4
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    2208:	fe 0c       	add	r15, r14
ct+=buf[2];
    220a:	f0 0e       	add	r15, r16
ct+=buf[3];
    220c:	f1 0e       	add	r15, r17
if(checksum==ct) return NRK_OK;
    220e:	8f 15       	cp	r24, r15
    2210:	11 f4       	brne	.+4      	; 0x2216 <read_eeprom_mac_address+0x5c>
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <read_eeprom_mac_address+0x5e>

return NRK_ERROR;
    2216:	8f ef       	ldi	r24, 0xFF	; 255
}
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	1f 91       	pop	r17
    221e:	0f 91       	pop	r16
    2220:	ff 90       	pop	r15
    2222:	ef 90       	pop	r14
    2224:	08 95       	ret

00002226 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    222c:	85 e0       	ldi	r24, 0x05	; 5
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__eerd_byte_m128rfa1>
    2234:	88 83       	st	Y, r24
return NRK_OK;
}
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	08 95       	ret

0000223e <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    223e:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    2240:	86 e0       	ldi	r24, 0x06	; 6
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	60 81       	ld	r22, Z
    2246:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	08 95       	ret

0000224e <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    2254:	86 e0       	ldi	r24, 0x06	; 6
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__eerd_byte_m128rfa1>
    225c:	88 83       	st	Y, r24
  return NRK_OK;
}
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	df 91       	pop	r29
    2262:	cf 91       	pop	r28
    2264:	08 95       	ret

00002266 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	08 2f       	mov	r16, r24
    2270:	19 2f       	mov	r17, r25
    2272:	c8 e0       	ldi	r28, 0x08	; 8
    2274:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    2276:	ce 01       	movw	r24, r28
    2278:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__eerd_byte_m128rfa1>
    227c:	f8 01       	movw	r30, r16
    227e:	81 93       	st	Z+, r24
    2280:	8f 01       	movw	r16, r30
    2282:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2284:	c8 31       	cpi	r28, 0x18	; 24
    2286:	d1 05       	cpc	r29, r1
    2288:	b1 f7       	brne	.-20     	; 0x2276 <read_eeprom_aes_key+0x10>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	08 95       	ret

00002296 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	08 2f       	mov	r16, r24
    22a0:	19 2f       	mov	r17, r25
    22a2:	c8 e0       	ldi	r28, 0x08	; 8
    22a4:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    22a6:	f8 01       	movw	r30, r16
    22a8:	61 91       	ld	r22, Z+
    22aa:	8f 01       	movw	r16, r30
    22ac:	ce 01       	movw	r24, r28
    22ae:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__eewr_byte_m128rfa1>
    22b2:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    22b4:	c8 31       	cpi	r28, 0x18	; 24
    22b6:	d1 05       	cpc	r29, r1
    22b8:	b1 f7       	brne	.-20     	; 0x22a6 <write_eeprom_aes_key+0x10>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	08 95       	ret

000022c6 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    22cc:	87 e0       	ldi	r24, 0x07	; 7
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0e 94 53 30 	call	0x60a6	; 0x60a6 <__eerd_byte_m128rfa1>
    22d4:	88 83       	st	Y, r24
  return NRK_OK;
}
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	08 95       	ret

000022de <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    22de:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    22e0:	87 e0       	ldi	r24, 0x07	; 7
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	60 81       	ld	r22, Z
    22e6:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	08 95       	ret

000022ee <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    22ee:	f8 94       	cli
};
    22f0:	08 95       	ret

000022f2 <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    22f2:	78 94       	sei
};
    22f4:	08 95       	ret

000022f6 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    22f6:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
    22fa:	ff cf       	rjmp	.-2      	; 0x22fa <nrk_halt+0x4>

000022fc <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    22fc:	0f 93       	push	r16
    22fe:	1f 93       	push	r17
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	a3 97       	sbiw	r28, 0x23	; 35
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    2314:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_signal_create>
    2318:	80 93 09 05 	sts	0x0509, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    231c:	8f 3f       	cpi	r24, 0xFF	; 255
    231e:	21 f4       	brne	.+8      	; 0x2328 <nrk_init+0x2c>
    2320:	8e e0       	ldi	r24, 0x0E	; 14
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    2328:	0e 94 14 24 	call	0x4828	; 0x4828 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    232c:	80 ff       	sbrs	r24, 0
    232e:	04 c0       	rjmp	.+8      	; 0x2338 <nrk_init+0x3c>
    2330:	86 e0       	ldi	r24, 0x06	; 6
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
	   }
   #endif
   #endif

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
    2338:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <nrk_watchdog_check>
    233c:	8f 3f       	cpi	r24, 0xFF	; 255
    233e:	31 f4       	brne	.+12     	; 0x234c <nrk_init+0x50>
	{
    	nrk_watchdog_disable();
    2340:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <nrk_watchdog_disable>
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
    2344:	80 e1       	ldi	r24, 0x10	; 16
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
	}
    nrk_watchdog_enable();
    234c:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <nrk_watchdog_enable>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    2350:	10 92 0c 05 	sts	0x050C, r1
    nrk_cur_task_TCB = NULL;
    2354:	10 92 1a 06 	sts	0x061A, r1
    2358:	10 92 19 06 	sts	0x0619, r1
    
    nrk_high_ready_TCB = NULL;
    235c:	10 92 0b 05 	sts	0x050B, r1
    2360:	10 92 0a 05 	sts	0x050A, r1
    nrk_high_ready_prio = 0; 
    2364:	10 92 d7 06 	sts	0x06D7, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2368:	10 92 a3 05 	sts	0x05A3, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    236c:	8f ef       	ldi	r24, 0xFF	; 255
    236e:	80 93 02 05 	sts	0x0502, r24
    nrk_sem_list[i].value=-1;
    2372:	80 93 04 05 	sts	0x0504, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2376:	80 93 03 05 	sts	0x0503, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    237a:	93 e6       	ldi	r25, 0x63	; 99
    237c:	90 93 a4 07 	sts	0x07A4, r25
        nrk_task_TCB[i].task_ID = -1; 
    2380:	80 93 a2 07 	sts	0x07A2, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2384:	90 93 c5 07 	sts	0x07C5, r25
        nrk_task_TCB[i].task_ID = -1; 
    2388:	80 93 c3 07 	sts	0x07C3, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    238c:	90 93 e6 07 	sts	0x07E6, r25
        nrk_task_TCB[i].task_ID = -1; 
    2390:	80 93 e4 07 	sts	0x07E4, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2394:	90 93 07 08 	sts	0x0807, r25
        nrk_task_TCB[i].task_ID = -1; 
    2398:	80 93 05 08 	sts	0x0805, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    239c:	90 93 28 08 	sts	0x0828, r25
        nrk_task_TCB[i].task_ID = -1; 
    23a0:	80 93 26 08 	sts	0x0826, r24
    23a4:	e6 e4       	ldi	r30, 0x46	; 70
    23a6:	f8 e0       	ldi	r31, 0x08	; 8
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <nrk_init+0xb4>
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    23ae:	9a 01       	movw	r18, r20
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    23b0:	a9 01       	movw	r20, r18
    23b2:	4f 5f       	subi	r20, 0xFF	; 255
    23b4:	5f 4f       	sbci	r21, 0xFF	; 255
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    23b6:	ca 01       	movw	r24, r20
    23b8:	88 0f       	add	r24, r24
    23ba:	99 1f       	adc	r25, r25
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	84 0f       	add	r24, r20
    23c2:	95 1f       	adc	r25, r21
    23c4:	8d 5b       	subi	r24, 0xBD	; 189
    23c6:	97 4f       	sbci	r25, 0xF7	; 247
    23c8:	91 83       	std	Z+1, r25	; 0x01
    23ca:	80 83       	st	Z, r24
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    23cc:	c9 01       	movw	r24, r18
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	82 0f       	add	r24, r18
    23d8:	93 1f       	adc	r25, r19
    23da:	8d 5b       	subi	r24, 0xBD	; 189
    23dc:	97 4f       	sbci	r25, 0xF7	; 247
    23de:	94 83       	std	Z+4, r25	; 0x04
    23e0:	83 83       	std	Z+3, r24	; 0x03
    23e2:	35 96       	adiw	r30, 0x05	; 5
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    23e4:	45 30       	cpi	r20, 0x05	; 5
    23e6:	51 05       	cpc	r21, r1
    23e8:	11 f7       	brne	.-60     	; 0x23ae <nrk_init+0xb2>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    23ea:	10 92 45 08 	sts	0x0845, r1
    23ee:	10 92 44 08 	sts	0x0844, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    23f2:	10 92 60 08 	sts	0x0860, r1
    23f6:	10 92 5f 08 	sts	0x085F, r1
	_head_node = NULL;
    23fa:	10 92 96 05 	sts	0x0596, r1
    23fe:	10 92 95 05 	sts	0x0595, r1
	_free_node = &_nrk_readyQ[0];
    2402:	83 e4       	ldi	r24, 0x43	; 67
    2404:	98 e0       	ldi	r25, 0x08	; 8
    2406:	90 93 7e 04 	sts	0x047E, r25
    240a:	80 93 7d 04 	sts	0x047D, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    240e:	8e 01       	movw	r16, r28
    2410:	0f 5f       	subi	r16, 0xFF	; 255
    2412:	1f 4f       	sbci	r17, 0xFF	; 255
    2414:	c8 01       	movw	r24, r16
    2416:	6b ed       	ldi	r22, 0xDB	; 219
    2418:	7f e1       	ldi	r23, 0x1F	; 31
    241a:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    241e:	c8 01       	movw	r24, r16
    2420:	62 ee       	ldi	r22, 0xE2	; 226
    2422:	76 e0       	ldi	r23, 0x06	; 6
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	0e 94 ef 25 	call	0x4bde	; 0x4bde <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    242c:	85 e5       	ldi	r24, 0x55	; 85
    242e:	80 93 e2 06 	sts	0x06E2, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    2432:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    2434:	1c 86       	std	Y+12, r1	; 0x0c
    2436:	1d 86       	std	Y+13, r1	; 0x0d
    2438:	1e 86       	std	Y+14, r1	; 0x0e
    243a:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    243c:	18 8a       	std	Y+16, r1	; 0x10
    243e:	19 8a       	std	Y+17, r1	; 0x11
    2440:	1a 8a       	std	Y+18, r1	; 0x12
    2442:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    2444:	1c 8a       	std	Y+20, r1	; 0x14
    2446:	1d 8a       	std	Y+21, r1	; 0x15
    2448:	1e 8a       	std	Y+22, r1	; 0x16
    244a:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    244c:	18 8e       	std	Y+24, r1	; 0x18
    244e:	19 8e       	std	Y+25, r1	; 0x19
    2450:	1a 8e       	std	Y+26, r1	; 0x1a
    2452:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    2454:	1c 8e       	std	Y+28, r1	; 0x1c
    2456:	1d 8e       	std	Y+29, r1	; 0x1d
    2458:	1e 8e       	std	Y+30, r1	; 0x1e
    245a:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    245c:	18 a2       	std	Y+32, r1	; 0x20
    245e:	19 a2       	std	Y+33, r1	; 0x21
    2460:	1a a2       	std	Y+34, r1	; 0x22
    2462:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2468:	92 e0       	ldi	r25, 0x02	; 2
    246a:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    246c:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    246e:	c8 01       	movw	r24, r16
    2470:	0e 94 c3 1a 	call	0x3586	; 0x3586 <nrk_activate_task>
	
}
    2474:	a3 96       	adiw	r28, 0x23	; 35
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	1f 91       	pop	r17
    2486:	0f 91       	pop	r16
    2488:	08 95       	ret

0000248a <nrk_start>:




void nrk_start (void)
{
    248a:	cf 92       	push	r12
    248c:	df 92       	push	r13
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	00 d0       	rcall	.+0      	; 0x249a <nrk_start+0x10>
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    249e:	b2 ea       	ldi	r27, 0xA2	; 162
    24a0:	cb 2e       	mov	r12, r27
    24a2:	b7 e0       	ldi	r27, 0x07	; 7
    24a4:	db 2e       	mov	r13, r27
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    24a8:	f6 01       	movw	r30, r12
    24aa:	f0 80       	ld	r15, Z
	// only check activated tasks
	if(task_ID!=-1)
    24ac:	ff 2d       	mov	r31, r15
    24ae:	ff 3f       	cpi	r31, 0xFF	; 255
    24b0:	b1 f0       	breq	.+44     	; 0x24de <nrk_start+0x54>
    24b2:	02 ea       	ldi	r16, 0xA2	; 162
    24b4:	17 e0       	ldi	r17, 0x07	; 7
    24b6:	20 e0       	ldi	r18, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    24b8:	92 17       	cp	r25, r18
    24ba:	61 f0       	breq	.+24     	; 0x24d4 <nrk_start+0x4a>
    24bc:	f8 01       	movw	r30, r16
    24be:	80 81       	ld	r24, Z
    24c0:	f8 16       	cp	r15, r24
    24c2:	41 f4       	brne	.+16     	; 0x24d4 <nrk_start+0x4a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    24c4:	85 e0       	ldi	r24, 0x05	; 5
    24c6:	6f 2d       	mov	r22, r15
    24c8:	29 83       	std	Y+1, r18	; 0x01
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
    24d0:	9a 81       	ldd	r25, Y+2	; 0x02
    24d2:	29 81       	ldd	r18, Y+1	; 0x01
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    24d4:	2f 5f       	subi	r18, 0xFF	; 255
    24d6:	0f 5d       	subi	r16, 0xDF	; 223
    24d8:	1f 4f       	sbci	r17, 0xFF	; 255
    24da:	25 30       	cpi	r18, 0x05	; 5
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <nrk_start+0x2e>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    24de:	9f 5f       	subi	r25, 0xFF	; 255
    24e0:	21 e2       	ldi	r18, 0x21	; 33
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	c2 0e       	add	r12, r18
    24e6:	d3 1e       	adc	r13, r19
    24e8:	95 30       	cpi	r25, 0x05	; 5
    24ea:	f1 f6       	brne	.-68     	; 0x24a8 <nrk_start+0x1e>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    24ec:	0e 94 b1 19 	call	0x3362	; 0x3362 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    24f0:	99 27       	eor	r25, r25
    24f2:	87 fd       	sbrc	r24, 7
    24f4:	90 95       	com	r25
    24f6:	fc 01       	movw	r30, r24
    24f8:	a5 e0       	ldi	r26, 0x05	; 5
    24fa:	ee 0f       	add	r30, r30
    24fc:	ff 1f       	adc	r31, r31
    24fe:	aa 95       	dec	r26
    2500:	e1 f7       	brne	.-8      	; 0x24fa <nrk_start+0x70>
    2502:	e8 0f       	add	r30, r24
    2504:	f9 1f       	adc	r31, r25
    2506:	e6 56       	subi	r30, 0x66	; 102
    2508:	f8 4f       	sbci	r31, 0xF8	; 248
    250a:	82 85       	ldd	r24, Z+10	; 0x0a
    250c:	80 93 d7 06 	sts	0x06D7, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2510:	f0 93 1a 06 	sts	0x061A, r31
    2514:	e0 93 19 06 	sts	0x0619, r30
    2518:	f0 93 0b 05 	sts	0x050B, r31
    251c:	e0 93 0a 05 	sts	0x050A, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    2520:	80 93 0c 05 	sts	0x050C, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2524:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <nrk_target_start>
    nrk_stack_pointer_init(); 
    2528:	0e 94 39 26 	call	0x4c72	; 0x4c72 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    252c:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <nrk_start_high_ready_task>
    2530:	ff cf       	rjmp	.-2      	; 0x2530 <nrk_start+0xa6>

00002532 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2532:	ef 92       	push	r14
    2534:	ff 92       	push	r15
    2536:	0f 93       	push	r16
    2538:	1f 93       	push	r17
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	ec 01       	movw	r28, r24
    2540:	7b 01       	movw	r14, r22
    2542:	8a 01       	movw	r16, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2544:	89 85       	ldd	r24, Y+9	; 0x09
    2546:	82 30       	cpi	r24, 0x02	; 2
    2548:	21 f0       	breq	.+8      	; 0x2552 <nrk_TCB_init+0x20>
    	Task->task_ID=nrk_task_init_cnt;
    254a:	80 91 41 08 	lds	r24, 0x0841
    254e:	88 83       	st	Y, r24
    2550:	01 c0       	rjmp	.+2      	; 0x2554 <nrk_TCB_init+0x22>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    2552:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2554:	80 91 41 08 	lds	r24, 0x0841
    2558:	85 30       	cpi	r24, 0x05	; 5
    255a:	20 f0       	brcs	.+8      	; 0x2564 <nrk_TCB_init+0x32>
    255c:	87 e0       	ldi	r24, 0x07	; 7
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2564:	89 85       	ldd	r24, Y+9	; 0x09
    2566:	82 30       	cpi	r24, 0x02	; 2
    2568:	29 f0       	breq	.+10     	; 0x2574 <nrk_TCB_init+0x42>
    256a:	80 91 41 08 	lds	r24, 0x0841
    256e:	8f 5f       	subi	r24, 0xFF	; 255
    2570:	80 93 41 08 	sts	0x0841, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2574:	80 91 41 08 	lds	r24, 0x0841
    2578:	88 23       	and	r24, r24
    257a:	19 f4       	brne	.+6      	; 0x2582 <nrk_TCB_init+0x50>
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	80 93 41 08 	sts	0x0841, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2582:	88 81       	ld	r24, Y
    2584:	99 27       	eor	r25, r25
    2586:	87 fd       	sbrc	r24, 7
    2588:	90 95       	com	r25
    258a:	fc 01       	movw	r30, r24
    258c:	a5 e0       	ldi	r26, 0x05	; 5
    258e:	ee 0f       	add	r30, r30
    2590:	ff 1f       	adc	r31, r31
    2592:	aa 95       	dec	r26
    2594:	e1 f7       	brne	.-8      	; 0x258e <nrk_TCB_init+0x5c>
    2596:	e8 0f       	add	r30, r24
    2598:	f9 1f       	adc	r31, r25
    259a:	e6 56       	subi	r30, 0x66	; 102
    259c:	f8 4f       	sbci	r31, 0xF8	; 248
    259e:	f1 82       	std	Z+1, r15	; 0x01
    25a0:	e0 82       	st	Z, r14
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    25a2:	88 85       	ldd	r24, Y+8	; 0x08
    25a4:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    25a6:	88 81       	ld	r24, Y
    25a8:	99 27       	eor	r25, r25
    25aa:	87 fd       	sbrc	r24, 7
    25ac:	90 95       	com	r25
    25ae:	fc 01       	movw	r30, r24
    25b0:	75 e0       	ldi	r23, 0x05	; 5
    25b2:	ee 0f       	add	r30, r30
    25b4:	ff 1f       	adc	r31, r31
    25b6:	7a 95       	dec	r23
    25b8:	e1 f7       	brne	.-8      	; 0x25b2 <nrk_TCB_init+0x80>
    25ba:	e8 0f       	add	r30, r24
    25bc:	f9 1f       	adc	r31, r25
    25be:	e6 56       	subi	r30, 0x66	; 102
    25c0:	f8 4f       	sbci	r31, 0xF8	; 248
    25c2:	83 e0       	ldi	r24, 0x03	; 3
    25c4:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    25c6:	28 81       	ld	r18, Y
    25c8:	82 2f       	mov	r24, r18
    25ca:	99 27       	eor	r25, r25
    25cc:	87 fd       	sbrc	r24, 7
    25ce:	90 95       	com	r25
    25d0:	fc 01       	movw	r30, r24
    25d2:	65 e0       	ldi	r22, 0x05	; 5
    25d4:	ee 0f       	add	r30, r30
    25d6:	ff 1f       	adc	r31, r31
    25d8:	6a 95       	dec	r22
    25da:	e1 f7       	brne	.-8      	; 0x25d4 <nrk_TCB_init+0xa2>
    25dc:	e8 0f       	add	r30, r24
    25de:	f9 1f       	adc	r31, r25
    25e0:	e6 56       	subi	r30, 0x66	; 102
    25e2:	f8 4f       	sbci	r31, 0xF8	; 248
    25e4:	20 87       	std	Z+8, r18	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    25e6:	88 81       	ld	r24, Y
    25e8:	99 27       	eor	r25, r25
    25ea:	87 fd       	sbrc	r24, 7
    25ec:	90 95       	com	r25
    25ee:	7c 01       	movw	r14, r24
    25f0:	55 e0       	ldi	r21, 0x05	; 5
    25f2:	ee 0c       	add	r14, r14
    25f4:	ff 1c       	adc	r15, r15
    25f6:	5a 95       	dec	r21
    25f8:	e1 f7       	brne	.-8      	; 0x25f2 <nrk_TCB_init+0xc0>
    25fa:	e8 0e       	add	r14, r24
    25fc:	f9 1e       	adc	r15, r25
    25fe:	8a e9       	ldi	r24, 0x9A	; 154
    2600:	97 e0       	ldi	r25, 0x07	; 7
    2602:	e8 0e       	add	r14, r24
    2604:	f9 1e       	adc	r15, r25
    2606:	f7 01       	movw	r30, r14
    2608:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    260a:	ce 01       	movw	r24, r28
    260c:	0b 96       	adiw	r24, 0x0b	; 11
    260e:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_nrk_time_to_ticks>
    2612:	f7 01       	movw	r30, r14
    2614:	94 8f       	std	Z+28, r25	; 0x1c
    2616:	83 8f       	std	Z+27, r24	; 0x1b
    if(Task->period.secs > 61) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    2618:	8b 85       	ldd	r24, Y+11	; 0x0b
    261a:	9c 85       	ldd	r25, Y+12	; 0x0c
    261c:	ad 85       	ldd	r26, Y+13	; 0x0d
    261e:	be 85       	ldd	r27, Y+14	; 0x0e
    2620:	8e 33       	cpi	r24, 0x3E	; 62
    2622:	91 05       	cpc	r25, r1
    2624:	a1 05       	cpc	r26, r1
    2626:	b1 05       	cpc	r27, r1
    2628:	20 f0       	brcs	.+8      	; 0x2632 <nrk_TCB_init+0x100>
    262a:	86 e1       	ldi	r24, 0x16	; 22
    262c:	68 81       	ld	r22, Y
    262e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    2632:	e8 80       	ld	r14, Y
    2634:	ff 24       	eor	r15, r15
    2636:	e7 fc       	sbrc	r14, 7
    2638:	f0 94       	com	r15
    263a:	ce 01       	movw	r24, r28
    263c:	4b 96       	adiw	r24, 0x1b	; 27
    263e:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_nrk_time_to_ticks>
    2642:	f7 01       	movw	r30, r14
    2644:	45 e0       	ldi	r20, 0x05	; 5
    2646:	ee 0f       	add	r30, r30
    2648:	ff 1f       	adc	r31, r31
    264a:	4a 95       	dec	r20
    264c:	e1 f7       	brne	.-8      	; 0x2646 <nrk_TCB_init+0x114>
    264e:	ee 0d       	add	r30, r14
    2650:	ff 1d       	adc	r31, r15
    2652:	e6 56       	subi	r30, 0x66	; 102
    2654:	f8 4f       	sbci	r31, 0xF8	; 248
    2656:	96 8b       	std	Z+22, r25	; 0x16
    2658:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    265a:	88 81       	ld	r24, Y
    265c:	99 27       	eor	r25, r25
    265e:	87 fd       	sbrc	r24, 7
    2660:	90 95       	com	r25
    2662:	7c 01       	movw	r14, r24
    2664:	35 e0       	ldi	r19, 0x05	; 5
    2666:	ee 0c       	add	r14, r14
    2668:	ff 1c       	adc	r15, r15
    266a:	3a 95       	dec	r19
    266c:	e1 f7       	brne	.-8      	; 0x2666 <nrk_TCB_init+0x134>
    266e:	e8 0e       	add	r14, r24
    2670:	f9 1e       	adc	r15, r25
    2672:	8a e9       	ldi	r24, 0x9A	; 154
    2674:	97 e0       	ldi	r25, 0x07	; 7
    2676:	e8 0e       	add	r14, r24
    2678:	f9 1e       	adc	r15, r25
    267a:	f7 01       	movw	r30, r14
    267c:	85 89       	ldd	r24, Z+21	; 0x15
    267e:	96 89       	ldd	r25, Z+22	; 0x16
    2680:	23 8d       	ldd	r18, Z+27	; 0x1b
    2682:	34 8d       	ldd	r19, Z+28	; 0x1c
    2684:	82 0f       	add	r24, r18
    2686:	93 1f       	adc	r25, r19
    2688:	90 8f       	std	Z+24, r25	; 0x18
    268a:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    268c:	ce 01       	movw	r24, r28
    268e:	43 96       	adiw	r24, 0x13	; 19
    2690:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_nrk_time_to_ticks>
    2694:	f7 01       	movw	r30, r14
    2696:	96 8f       	std	Z+30, r25	; 0x1e
    2698:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    269a:	88 81       	ld	r24, Y
    269c:	99 27       	eor	r25, r25
    269e:	87 fd       	sbrc	r24, 7
    26a0:	90 95       	com	r25
    26a2:	fc 01       	movw	r30, r24
    26a4:	25 e0       	ldi	r18, 0x05	; 5
    26a6:	ee 0f       	add	r30, r30
    26a8:	ff 1f       	adc	r31, r31
    26aa:	2a 95       	dec	r18
    26ac:	e1 f7       	brne	.-8      	; 0x26a6 <nrk_TCB_init+0x174>
    26ae:	e8 0f       	add	r30, r24
    26b0:	f9 1f       	adc	r31, r25
    26b2:	e6 56       	subi	r30, 0x66	; 102
    26b4:	f8 4f       	sbci	r31, 0xF8	; 248
    26b6:	85 8d       	ldd	r24, Z+29	; 0x1d
    26b8:	96 8d       	ldd	r25, Z+30	; 0x1e
    26ba:	92 8f       	std	Z+26, r25	; 0x1a
    26bc:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	90 a3       	std	Z+32, r25	; 0x20
    26c4:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    26c6:	13 83       	std	Z+3, r17	; 0x03
    26c8:	02 83       	std	Z+2, r16	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	0f 91       	pop	r16
    26d6:	ff 90       	pop	r15
    26d8:	ef 90       	pop	r14
    26da:	08 95       	ret

000026dc <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    26dc:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <_nrk_scheduler>

  	return;
}
    26e0:	08 95       	ret

000026e2 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    26e2:	85 e6       	ldi	r24, 0x65	; 101
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	08 95       	ret

000026e8 <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    26e8:	e0 91 19 06 	lds	r30, 0x0619
    26ec:	f0 91 1a 06 	lds	r31, 0x061A
    26f0:	84 87       	std	Z+12, r24	; 0x0c
}
    26f2:	08 95       	ret

000026f4 <nrk_errno_get>:

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    26f4:	e0 91 19 06 	lds	r30, 0x0619
    26f8:	f0 91 1a 06 	lds	r31, 0x061A
}
    26fc:	84 85       	ldd	r24, Z+12	; 0x0c
    26fe:	08 95       	ret

00002700 <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    2700:	20 91 e1 06 	lds	r18, 0x06E1
    2704:	22 23       	and	r18, r18
    2706:	41 f0       	breq	.+16     	; 0x2718 <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    2708:	fb 01       	movw	r30, r22
    270a:	20 83       	st	Z, r18
    *task_id = error_task;
    270c:	20 91 08 05 	lds	r18, 0x0508
    2710:	fc 01       	movw	r30, r24
    2712:	20 83       	st	Z, r18
    return 1;
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    2718:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    271a:	08 95       	ret

0000271c <pause>:
    }

}

void pause()
{
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	0f 92       	push	r0
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2726:	19 82       	std	Y+1, r1	; 0x01
    2728:	07 c0       	rjmp	.+14     	; 0x2738 <pause+0x1c>
        nrk_spin_wait_us (2000);
    272a:	80 ed       	ldi	r24, 0xD0	; 208
    272c:	97 e0       	ldi	r25, 0x07	; 7
    272e:	0e 94 42 22 	call	0x4484	; 0x4484 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	8f 5f       	subi	r24, 0xFF	; 255
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	84 36       	cpi	r24, 0x64	; 100
    273c:	b0 f3       	brcs	.-20     	; 0x272a <pause+0xe>
        nrk_spin_wait_us (2000);
}
    273e:	0f 90       	pop	r0
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <blink_dot>:
    pause();
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <nrk_led_set>
    pause();
    274e:	0e 94 8e 13 	call	0x271c	; 0x271c <pause>
    nrk_led_clr(GREEN_LED);
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
    pause();
    275a:	0e 94 8e 13 	call	0x271c	; 0x271c <pause>
}
    275e:	08 95       	ret

00002760 <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e 94 52 10 	call	0x20a4	; 0x20a4 <nrk_led_set>
    pause();
    2768:	0e 94 8e 13 	call	0x271c	; 0x271c <pause>
    pause();
    276c:	0e 94 8e 13 	call	0x271c	; 0x271c <pause>
    pause();
    2770:	0e 94 8e 13 	call	0x271c	; 0x271c <pause>
    nrk_led_clr(GREEN_LED);
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
    pause();
    277c:	0e 94 8e 13 	call	0x271c	; 0x271c <pause>
}
    2780:	08 95       	ret

00002782 <blink_morse_code_error>:
    pause();
}


void blink_morse_code_error( uint8_t number )
{
    2782:	ff 92       	push	r15
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	00 d0       	rcall	.+0      	; 0x278e <blink_morse_code_error+0xc>
    278e:	0f 92       	push	r0
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    2794:	00 d0       	rcall	.+0      	; 0x2796 <blink_morse_code_error+0x14>
    2796:	00 d0       	rcall	.+0      	; 0x2798 <blink_morse_code_error+0x16>
    2798:	00 d0       	rcall	.+0      	; 0x279a <blink_morse_code_error+0x18>
    279a:	ed b7       	in	r30, 0x3d	; 61
    279c:	fe b7       	in	r31, 0x3e	; 62
    279e:	31 96       	adiw	r30, 0x01	; 1
    27a0:	8e 01       	movw	r16, r28
    27a2:	0f 5f       	subi	r16, 0xFF	; 255
    27a4:	1f 4f       	sbci	r17, 0xFF	; 255
    27a6:	ad b7       	in	r26, 0x3d	; 61
    27a8:	be b7       	in	r27, 0x3e	; 62
    27aa:	12 96       	adiw	r26, 0x02	; 2
    27ac:	1c 93       	st	X, r17
    27ae:	0e 93       	st	-X, r16
    27b0:	11 97       	sbiw	r26, 0x01	; 1
    27b2:	20 e6       	ldi	r18, 0x60	; 96
    27b4:	32 e0       	ldi	r19, 0x02	; 2
    27b6:	33 83       	std	Z+3, r19	; 0x03
    27b8:	22 83       	std	Z+2, r18	; 0x02
    27ba:	84 83       	std	Z+4, r24	; 0x04
    27bc:	15 82       	std	Z+5, r1	; 0x05
    27be:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <sprintf>

    for(i=0; i<strlen(str); i++ )
    27c2:	ed b7       	in	r30, 0x3d	; 61
    27c4:	fe b7       	in	r31, 0x3e	; 62
    27c6:	36 96       	adiw	r30, 0x06	; 6
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	fe bf       	out	0x3e, r31	; 62
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	ed bf       	out	0x3d, r30	; 61
    27d2:	ff 24       	eor	r15, r15
    27d4:	72 c0       	rjmp	.+228    	; 0x28ba <blink_morse_code_error+0x138>
    {
        switch( str[i])
    27d6:	80 0f       	add	r24, r16
    27d8:	91 1f       	adc	r25, r17
    27da:	dc 01       	movw	r26, r24
    27dc:	8c 91       	ld	r24, X
    27de:	84 33       	cpi	r24, 0x34	; 52
    27e0:	d1 f1       	breq	.+116    	; 0x2856 <blink_morse_code_error+0xd4>
    27e2:	85 33       	cpi	r24, 0x35	; 53
    27e4:	70 f4       	brcc	.+28     	; 0x2802 <blink_morse_code_error+0x80>
    27e6:	81 33       	cpi	r24, 0x31	; 49
    27e8:	f9 f0       	breq	.+62     	; 0x2828 <blink_morse_code_error+0xa6>
    27ea:	82 33       	cpi	r24, 0x32	; 50
    27ec:	20 f4       	brcc	.+8      	; 0x27f6 <blink_morse_code_error+0x74>
    27ee:	80 33       	cpi	r24, 0x30	; 48
    27f0:	09 f0       	breq	.+2      	; 0x27f4 <blink_morse_code_error+0x72>
    27f2:	5c c0       	rjmp	.+184    	; 0x28ac <blink_morse_code_error+0x12a>
    27f4:	16 c0       	rjmp	.+44     	; 0x2822 <blink_morse_code_error+0xa0>
    27f6:	82 33       	cpi	r24, 0x32	; 50
    27f8:	11 f1       	breq	.+68     	; 0x283e <blink_morse_code_error+0xbc>
    27fa:	83 33       	cpi	r24, 0x33	; 51
    27fc:	09 f0       	breq	.+2      	; 0x2800 <blink_morse_code_error+0x7e>
    27fe:	56 c0       	rjmp	.+172    	; 0x28ac <blink_morse_code_error+0x12a>
    2800:	23 c0       	rjmp	.+70     	; 0x2848 <blink_morse_code_error+0xc6>
    2802:	87 33       	cpi	r24, 0x37	; 55
    2804:	c9 f1       	breq	.+114    	; 0x2878 <blink_morse_code_error+0xf6>
    2806:	88 33       	cpi	r24, 0x38	; 56
    2808:	30 f4       	brcc	.+12     	; 0x2816 <blink_morse_code_error+0x94>
    280a:	85 33       	cpi	r24, 0x35	; 53
    280c:	69 f1       	breq	.+90     	; 0x2868 <blink_morse_code_error+0xe6>
    280e:	86 33       	cpi	r24, 0x36	; 54
    2810:	09 f0       	breq	.+2      	; 0x2814 <blink_morse_code_error+0x92>
    2812:	4c c0       	rjmp	.+152    	; 0x28ac <blink_morse_code_error+0x12a>
    2814:	2c c0       	rjmp	.+88     	; 0x286e <blink_morse_code_error+0xec>
    2816:	88 33       	cpi	r24, 0x38	; 56
    2818:	b1 f1       	breq	.+108    	; 0x2886 <blink_morse_code_error+0x104>
    281a:	89 33       	cpi	r24, 0x39	; 57
    281c:	09 f0       	breq	.+2      	; 0x2820 <blink_morse_code_error+0x9e>
    281e:	46 c0       	rjmp	.+140    	; 0x28ac <blink_morse_code_error+0x12a>
    2820:	3b c0       	rjmp	.+118    	; 0x2898 <blink_morse_code_error+0x116>
        {
        case '0':
            blink_dash();
    2822:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
    2826:	02 c0       	rjmp	.+4      	; 0x282c <blink_morse_code_error+0xaa>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    2828:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
            blink_dash();
    282c:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dash();
    2830:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dash();
    2834:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dash();
    2838:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            break;
    283c:	37 c0       	rjmp	.+110    	; 0x28ac <blink_morse_code_error+0x12a>
        case '2':
            blink_dot();
    283e:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
            blink_dot();
    2842:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
    2846:	f4 cf       	rjmp	.-24     	; 0x2830 <blink_morse_code_error+0xae>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    2848:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
            blink_dot();
    284c:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
            blink_dot();
    2850:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
    2854:	ef cf       	rjmp	.-34     	; 0x2834 <blink_morse_code_error+0xb2>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    2856:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
            blink_dot();
    285a:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
            blink_dot();
    285e:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
            blink_dot();
    2862:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
    2866:	e8 cf       	rjmp	.-48     	; 0x2838 <blink_morse_code_error+0xb6>
            blink_dash();
            break;
        case '5':
            blink_dot();
    2868:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <blink_morse_code_error+0xf0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    286e:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dot();
    2872:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
    2876:	04 c0       	rjmp	.+8      	; 0x2880 <blink_morse_code_error+0xfe>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    2878:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dash();
    287c:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dot();
    2880:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
    2884:	06 c0       	rjmp	.+12     	; 0x2892 <blink_morse_code_error+0x110>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    2886:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dash();
    288a:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dash();
    288e:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dot();
    2892:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
    2896:	08 c0       	rjmp	.+16     	; 0x28a8 <blink_morse_code_error+0x126>
            blink_dot();
            break;
        case '9':
            blink_dash();
    2898:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dash();
    289c:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dash();
    28a0:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dash();
    28a4:	0e 94 b0 13 	call	0x2760	; 0x2760 <blink_dash>
            blink_dot();
    28a8:	0e 94 a3 13 	call	0x2746	; 0x2746 <blink_dot>
            break;
        }
        pause();
    28ac:	0e 94 8e 13 	call	0x271c	; 0x271c <pause>
        pause();
    28b0:	0e 94 8e 13 	call	0x271c	; 0x271c <pause>
        pause();
    28b4:	0e 94 8e 13 	call	0x271c	; 0x271c <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    28b8:	f3 94       	inc	r15
    28ba:	f8 01       	movw	r30, r16
    28bc:	01 90       	ld	r0, Z+
    28be:	00 20       	and	r0, r0
    28c0:	e9 f7       	brne	.-6      	; 0x28bc <blink_morse_code_error+0x13a>
    28c2:	31 97       	sbiw	r30, 0x01	; 1
    28c4:	e0 1b       	sub	r30, r16
    28c6:	f1 0b       	sbc	r31, r17
    28c8:	8f 2d       	mov	r24, r15
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	8e 17       	cp	r24, r30
    28ce:	9f 07       	cpc	r25, r31
    28d0:	08 f4       	brcc	.+2      	; 0x28d4 <blink_morse_code_error+0x152>
    28d2:	81 cf       	rjmp	.-254    	; 0x27d6 <blink_morse_code_error+0x54>
        pause();
        pause();
        pause();
    }

}
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	1f 91       	pop	r17
    28e0:	0f 91       	pop	r16
    28e2:	ff 90       	pop	r15
    28e4:	08 95       	ret

000028e6 <nrk_error_print>:
    *task_id = error_task;
    return 1;
}

int8_t nrk_error_print ()
{
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    int8_t t=0,i=0;
    if (error_num == 0)
    28ea:	80 91 e1 06 	lds	r24, 0x06E1
    28ee:	88 23       	and	r24, r24
    28f0:	19 f4       	brne	.+6      	; 0x28f8 <nrk_error_print+0x12>
    }

#endif  /*  */
    error_num = 0;
    return t;
}
    28f2:	1f 91       	pop	r17
    28f4:	0f 91       	pop	r16
    28f6:	08 95       	ret
    int8_t t=0,i=0;
    if (error_num == 0)
        return 0;

#ifdef NRK_HALT_ON_ERROR
    nrk_int_disable ();
    28f8:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
#ifdef NRK_WATCHDOG
    nrk_watchdog_disable();
    28fc:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <nrk_watchdog_disable>
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    2900:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    2904:	82 ef       	ldi	r24, 0xF2	; 242
    2906:	94 e0       	ldi	r25, 0x04	; 4
    2908:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
        printf ("%d", error_task);
    290c:	00 d0       	rcall	.+0      	; 0x290e <nrk_error_print+0x28>
    290e:	00 d0       	rcall	.+0      	; 0x2910 <nrk_error_print+0x2a>
    2910:	ed b7       	in	r30, 0x3d	; 61
    2912:	fe b7       	in	r31, 0x3e	; 62
    2914:	31 96       	adiw	r30, 0x01	; 1
    2916:	80 e6       	ldi	r24, 0x60	; 96
    2918:	92 e0       	ldi	r25, 0x02	; 2
    291a:	ad b7       	in	r26, 0x3d	; 61
    291c:	be b7       	in	r27, 0x3e	; 62
    291e:	12 96       	adiw	r26, 0x02	; 2
    2920:	9c 93       	st	X, r25
    2922:	8e 93       	st	-X, r24
    2924:	11 97       	sbiw	r26, 0x01	; 1
    2926:	80 91 08 05 	lds	r24, 0x0508
    292a:	82 83       	std	Z+2, r24	; 0x02
    292c:	13 82       	std	Z+3, r1	; 0x03
    292e:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
        nrk_kprintf (PSTR ("): "));
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	8e ee       	ldi	r24, 0xEE	; 238
    293c:	94 e0       	ldi	r25, 0x04	; 4
    293e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    2942:	80 91 e1 06 	lds	r24, 0x06E1
    2946:	88 31       	cpi	r24, 0x18	; 24
    2948:	10 f0       	brcs	.+4      	; 0x294e <nrk_error_print+0x68>
            error_num = NRK_UNKOWN;
    294a:	10 92 e1 06 	sts	0x06E1, r1
        switch (error_num)
    294e:	80 91 e1 06 	lds	r24, 0x06E1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	86 31       	cpi	r24, 0x16	; 22
    2958:	91 05       	cpc	r25, r1
    295a:	08 f0       	brcs	.+2      	; 0x295e <nrk_error_print+0x78>
    295c:	4b c0       	rjmp	.+150    	; 0x29f4 <nrk_error_print+0x10e>
    295e:	80 57       	subi	r24, 0x70	; 112
    2960:	9f 4f       	sbci	r25, 0xFF	; 255
    2962:	fc 01       	movw	r30, r24
    2964:	ee 0f       	add	r30, r30
    2966:	ff 1f       	adc	r31, r31
    2968:	05 90       	lpm	r0, Z+
    296a:	f4 91       	lpm	r31, Z+
    296c:	e0 2d       	mov	r30, r0
    296e:	09 94       	ijmp
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    2970:	82 eb       	ldi	r24, 0xB2	; 178
    2972:	94 e0       	ldi	r25, 0x04	; 4
    2974:	41 c0       	rjmp	.+130    	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    2976:	8b e8       	ldi	r24, 0x8B	; 139
    2978:	94 e0       	ldi	r25, 0x04	; 4
    297a:	3e c0       	rjmp	.+124    	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    297c:	87 e7       	ldi	r24, 0x77	; 119
    297e:	94 e0       	ldi	r25, 0x04	; 4
    2980:	3b c0       	rjmp	.+118    	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    2982:	81 e6       	ldi	r24, 0x61	; 97
    2984:	94 e0       	ldi	r25, 0x04	; 4
    2986:	38 c0       	rjmp	.+112    	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    2988:	86 e4       	ldi	r24, 0x46	; 70
    298a:	94 e0       	ldi	r25, 0x04	; 4
    298c:	35 c0       	rjmp	.+106    	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    298e:	80 e3       	ldi	r24, 0x30	; 48
    2990:	94 e0       	ldi	r25, 0x04	; 4
    2992:	32 c0       	rjmp	.+100    	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2994:	88 e1       	ldi	r24, 0x18	; 24
    2996:	94 e0       	ldi	r25, 0x04	; 4
    2998:	2f c0       	rjmp	.+94     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    299a:	85 e0       	ldi	r24, 0x05	; 5
    299c:	94 e0       	ldi	r25, 0x04	; 4
    299e:	2c c0       	rjmp	.+88     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    29a0:	82 ef       	ldi	r24, 0xF2	; 242
    29a2:	93 e0       	ldi	r25, 0x03	; 3
    29a4:	29 c0       	rjmp	.+82     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    29a6:	84 ed       	ldi	r24, 0xD4	; 212
    29a8:	93 e0       	ldi	r25, 0x03	; 3
    29aa:	26 c0       	rjmp	.+76     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    29ac:	8f ea       	ldi	r24, 0xAF	; 175
    29ae:	93 e0       	ldi	r25, 0x03	; 3
    29b0:	23 c0       	rjmp	.+70     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    29b2:	83 ea       	ldi	r24, 0xA3	; 163
    29b4:	93 e0       	ldi	r25, 0x03	; 3
    29b6:	20 c0       	rjmp	.+64     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    29b8:	88 e8       	ldi	r24, 0x88	; 136
    29ba:	93 e0       	ldi	r25, 0x03	; 3
    29bc:	1d c0       	rjmp	.+58     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    29be:	89 e7       	ldi	r24, 0x79	; 121
    29c0:	93 e0       	ldi	r25, 0x03	; 3
    29c2:	1a c0       	rjmp	.+52     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    29c4:	85 e6       	ldi	r24, 0x65	; 101
    29c6:	93 e0       	ldi	r25, 0x03	; 3
    29c8:	17 c0       	rjmp	.+46     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    29ca:	84 e5       	ldi	r24, 0x54	; 84
    29cc:	93 e0       	ldi	r25, 0x03	; 3
    29ce:	14 c0       	rjmp	.+40     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    29d0:	80 e4       	ldi	r24, 0x40	; 64
    29d2:	93 e0       	ldi	r25, 0x03	; 3
    29d4:	11 c0       	rjmp	.+34     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    29d6:	80 e2       	ldi	r24, 0x20	; 32
    29d8:	93 e0       	ldi	r25, 0x03	; 3
    29da:	0e c0       	rjmp	.+28     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    29dc:	88 e0       	ldi	r24, 0x08	; 8
    29de:	93 e0       	ldi	r25, 0x03	; 3
    29e0:	0b c0       	rjmp	.+22     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    29e2:	8d ee       	ldi	r24, 0xED	; 237
    29e4:	92 e0       	ldi	r25, 0x02	; 2
    29e6:	08 c0       	rjmp	.+16     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    29e8:	8c ed       	ldi	r24, 0xDC	; 220
    29ea:	92 e0       	ldi	r25, 0x02	; 2
    29ec:	05 c0       	rjmp	.+10     	; 0x29f8 <nrk_error_print+0x112>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    29ee:	8d ec       	ldi	r24, 0xCD	; 205
    29f0:	92 e0       	ldi	r25, 0x02	; 2
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <nrk_error_print+0x112>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    29f4:	86 ec       	ldi	r24, 0xC6	; 198
    29f6:	92 e0       	ldi	r25, 0x02	; 2
    29f8:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>
        }
        putchar ('\r');
    29fc:	60 91 6c 08 	lds	r22, 0x086C
    2a00:	70 91 6d 08 	lds	r23, 0x086D
    2a04:	8d e0       	ldi	r24, 0x0D	; 13
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <fputc>
        putchar ('\n');
    2a0c:	60 91 6c 08 	lds	r22, 0x086C
    2a10:	70 91 6d 08 	lds	r23, 0x086D
    2a14:	8a e0       	ldi	r24, 0x0A	; 10
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <fputc>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    2a1c:	10 e0       	ldi	r17, 0x00	; 0
    2a1e:	1f c0       	rjmp	.+62     	; 0x2a5e <nrk_error_print+0x178>
        {
            nrk_led_set (2);
    2a20:	82 e0       	ldi	r24, 0x02	; 2
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 52 10 	call	0x20a4	; 0x20a4 <nrk_led_set>
            nrk_led_clr (3);
    2a28:	83 e0       	ldi	r24, 0x03	; 3
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
    2a30:	04 e6       	ldi	r16, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2a32:	88 ee       	ldi	r24, 0xE8	; 232
    2a34:	93 e0       	ldi	r25, 0x03	; 3
    2a36:	0e 94 42 22 	call	0x4484	; 0x4484 <nrk_spin_wait_us>
    2a3a:	01 50       	subi	r16, 0x01	; 1
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    2a3c:	d1 f7       	brne	.-12     	; 0x2a32 <nrk_error_print+0x14c>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    2a3e:	83 e0       	ldi	r24, 0x03	; 3
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 94 52 10 	call	0x20a4	; 0x20a4 <nrk_led_set>
            nrk_led_clr (2);
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
    2a4e:	04 e6       	ldi	r16, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2a50:	88 ee       	ldi	r24, 0xE8	; 232
    2a52:	93 e0       	ldi	r25, 0x03	; 3
    2a54:	0e 94 42 22 	call	0x4484	; 0x4484 <nrk_spin_wait_us>
    2a58:	01 50       	subi	r16, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    2a5a:	d1 f7       	brne	.-12     	; 0x2a50 <nrk_error_print+0x16a>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    2a5c:	1f 5f       	subi	r17, 0xFF	; 255
    2a5e:	14 31       	cpi	r17, 0x14	; 20
    2a60:	fc f2       	brlt	.-66     	; 0x2a20 <nrk_error_print+0x13a>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    2a62:	83 e0       	ldi	r24, 0x03	; 3
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
        nrk_led_clr (2);
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
        blink_morse_code_error( error_task );
    2a72:	80 91 08 05 	lds	r24, 0x0508
    2a76:	0e 94 c1 13 	call	0x2782	; 0x2782 <blink_morse_code_error>
        pause();
    2a7a:	0e 94 8e 13 	call	0x271c	; 0x271c <pause>
        nrk_led_set(2);
    2a7e:	82 e0       	ldi	r24, 0x02	; 2
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	0e 94 52 10 	call	0x20a4	; 0x20a4 <nrk_led_set>
        pause();
    2a86:	0e 94 8e 13 	call	0x271c	; 0x271c <pause>
        nrk_led_clr(2);
    2a8a:	82 e0       	ldi	r24, 0x02	; 2
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
        pause();
    2a92:	0e 94 8e 13 	call	0x271c	; 0x271c <pause>
        blink_morse_code_error( error_num);
    2a96:	80 91 e1 06 	lds	r24, 0x06E1
    2a9a:	0e 94 c1 13 	call	0x2782	; 0x2782 <blink_morse_code_error>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    2a9e:	10 e0       	ldi	r17, 0x00	; 0
    2aa0:	bf cf       	rjmp	.-130    	; 0x2a20 <nrk_error_print+0x13a>

00002aa2 <nrk_kernel_error_add>:
    nrk_error_print ();
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    2aa2:	ef 92       	push	r14
    2aa4:	ff 92       	push	r15
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
    2aaa:	18 2f       	mov	r17, r24
    2aac:	e6 2e       	mov	r14, r22
    error_num = n;
    2aae:	80 93 e1 06 	sts	0x06E1, r24
    error_task = task;
    2ab2:	60 93 08 05 	sts	0x0508, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2ab6:	0e 94 73 14 	call	0x28e6	; 0x28e6 <nrk_error_print>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    2aba:	00 e0       	ldi	r16, 0x00	; 0
    2abc:	21 c0       	rjmp	.+66     	; 0x2b00 <nrk_kernel_error_add+0x5e>
        {
            nrk_led_set (2);
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <nrk_led_set>
            nrk_led_clr (3);
    2ac6:	83 e0       	ldi	r24, 0x03	; 3
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
    2ace:	94 e6       	ldi	r25, 0x64	; 100
    2ad0:	f9 2e       	mov	r15, r25
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2ad2:	88 ee       	ldi	r24, 0xE8	; 232
    2ad4:	93 e0       	ldi	r25, 0x03	; 3
    2ad6:	0e 94 42 22 	call	0x4484	; 0x4484 <nrk_spin_wait_us>
    2ada:	fa 94       	dec	r15
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    2adc:	d1 f7       	brne	.-12     	; 0x2ad2 <nrk_kernel_error_add+0x30>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    2ade:	83 e0       	ldi	r24, 0x03	; 3
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <nrk_led_set>
            nrk_led_clr (2);
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
    2aee:	84 e6       	ldi	r24, 0x64	; 100
    2af0:	f8 2e       	mov	r15, r24
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2af2:	88 ee       	ldi	r24, 0xE8	; 232
    2af4:	93 e0       	ldi	r25, 0x03	; 3
    2af6:	0e 94 42 22 	call	0x4484	; 0x4484 <nrk_spin_wait_us>
    2afa:	fa 94       	dec	r15
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    2afc:	d1 f7       	brne	.-12     	; 0x2af2 <nrk_kernel_error_add+0x50>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    2afe:	0f 5f       	subi	r16, 0xFF	; 255
    2b00:	04 31       	cpi	r16, 0x14	; 20
    2b02:	e8 f2       	brcs	.-70     	; 0x2abe <nrk_kernel_error_add+0x1c>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    2b04:	83 e0       	ldi	r24, 0x03	; 3
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
        nrk_led_clr (2);
    2b0c:	82 e0       	ldi	r24, 0x02	; 2
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 3a 10 	call	0x2074	; 0x2074 <nrk_led_clr>
        blink_morse_code_error( task );
    2b14:	8e 2d       	mov	r24, r14
    2b16:	0e 94 c1 13 	call	0x2782	; 0x2782 <blink_morse_code_error>
        blink_morse_code_error( n );
    2b1a:	81 2f       	mov	r24, r17
    2b1c:	0e 94 c1 13 	call	0x2782	; 0x2782 <blink_morse_code_error>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    2b20:	00 e0       	ldi	r16, 0x00	; 0
    2b22:	cd cf       	rjmp	.-102    	; 0x2abe <nrk_kernel_error_add+0x1c>

00002b24 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    2b24:	80 93 e1 06 	sts	0x06E1, r24
    error_task = nrk_cur_task_TCB->task_ID;
    2b28:	e0 91 19 06 	lds	r30, 0x0619
    2b2c:	f0 91 1a 06 	lds	r31, 0x061A
    2b30:	80 85       	ldd	r24, Z+8	; 0x08
    2b32:	80 93 08 05 	sts	0x0508, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2b36:	0e 94 73 14 	call	0x28e6	; 0x28e6 <nrk_error_print>
#endif  /*  */
}
    2b3a:	08 95       	ret

00002b3c <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2b3c:	6f 92       	push	r6
    2b3e:	7f 92       	push	r7
    2b40:	8f 92       	push	r8
    2b42:	9f 92       	push	r9
    2b44:	af 92       	push	r10
    2b46:	bf 92       	push	r11
    2b48:	cf 92       	push	r12
    2b4a:	df 92       	push	r13
    2b4c:	ef 92       	push	r14
    2b4e:	ff 92       	push	r15
    2b50:	0f 93       	push	r16
    2b52:	1f 93       	push	r17
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2b58:	8e ef       	ldi	r24, 0xFE	; 254
    2b5a:	94 e0       	ldi	r25, 0x04	; 4
    2b5c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2b60:	00 d0       	rcall	.+0      	; 0x2b62 <dump_stack_info+0x26>
    2b62:	00 d0       	rcall	.+0      	; 0x2b64 <dump_stack_info+0x28>
    2b64:	83 e6       	ldi	r24, 0x63	; 99
    2b66:	92 e0       	ldi	r25, 0x02	; 2
    2b68:	ad b7       	in	r26, 0x3d	; 61
    2b6a:	be b7       	in	r27, 0x3e	; 62
    2b6c:	12 96       	adiw	r26, 0x02	; 2
    2b6e:	9c 93       	st	X, r25
    2b70:	8e 93       	st	-X, r24
    2b72:	11 97       	sbiw	r26, 0x01	; 1
    2b74:	e0 91 19 06 	lds	r30, 0x0619
    2b78:	f0 91 1a 06 	lds	r31, 0x061A
    2b7c:	80 85       	ldd	r24, Z+8	; 0x08
    2b7e:	99 27       	eor	r25, r25
    2b80:	87 fd       	sbrc	r24, 7
    2b82:	90 95       	com	r25
    2b84:	14 96       	adiw	r26, 0x04	; 4
    2b86:	9c 93       	st	X, r25
    2b88:	8e 93       	st	-X, r24
    2b8a:	13 97       	sbiw	r26, 0x03	; 3
    2b8c:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2b90:	e0 91 19 06 	lds	r30, 0x0619
    2b94:	f0 91 1a 06 	lds	r31, 0x061A
    2b98:	c2 81       	ldd	r28, Z+2	; 0x02
    2b9a:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    2b9c:	8c e6       	ldi	r24, 0x6C	; 108
    2b9e:	92 e0       	ldi	r25, 0x02	; 2
    2ba0:	ed b7       	in	r30, 0x3d	; 61
    2ba2:	fe b7       	in	r31, 0x3e	; 62
    2ba4:	92 83       	std	Z+2, r25	; 0x02
    2ba6:	81 83       	std	Z+1, r24	; 0x01
    2ba8:	d4 83       	std	Z+4, r29	; 0x04
    2baa:	c3 83       	std	Z+3, r28	; 0x03
    2bac:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
    printf( "canary = %x ",*stkc );
    2bb0:	ed b7       	in	r30, 0x3d	; 61
    2bb2:	fe b7       	in	r31, 0x3e	; 62
    2bb4:	31 96       	adiw	r30, 0x01	; 1
    2bb6:	69 e7       	ldi	r22, 0x79	; 121
    2bb8:	e6 2e       	mov	r14, r22
    2bba:	62 e0       	ldi	r22, 0x02	; 2
    2bbc:	f6 2e       	mov	r15, r22
    2bbe:	ad b7       	in	r26, 0x3d	; 61
    2bc0:	be b7       	in	r27, 0x3e	; 62
    2bc2:	12 96       	adiw	r26, 0x02	; 2
    2bc4:	fc 92       	st	X, r15
    2bc6:	ee 92       	st	-X, r14
    2bc8:	11 97       	sbiw	r26, 0x01	; 1
    2bca:	88 81       	ld	r24, Y
    2bcc:	82 83       	std	Z+2, r24	; 0x02
    2bce:	13 82       	std	Z+3, r1	; 0x03
    2bd0:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    2bd4:	56 e8       	ldi	r21, 0x86	; 134
    2bd6:	c5 2e       	mov	r12, r21
    2bd8:	52 e0       	ldi	r21, 0x02	; 2
    2bda:	d5 2e       	mov	r13, r21
    2bdc:	ed b7       	in	r30, 0x3d	; 61
    2bde:	fe b7       	in	r31, 0x3e	; 62
    2be0:	d2 82       	std	Z+2, r13	; 0x02
    2be2:	c1 82       	std	Z+1, r12	; 0x01
    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    printf( "canary = %x ",*stkc );
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    2be4:	e0 91 19 06 	lds	r30, 0x0619
    2be8:	f0 91 1a 06 	lds	r31, 0x061A
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    2bec:	80 81       	ld	r24, Z
    2bee:	91 81       	ldd	r25, Z+1	; 0x01
    2bf0:	ad b7       	in	r26, 0x3d	; 61
    2bf2:	be b7       	in	r27, 0x3e	; 62
    2bf4:	14 96       	adiw	r26, 0x04	; 4
    2bf6:	9c 93       	st	X, r25
    2bf8:	8e 93       	st	-X, r24
    2bfa:	13 97       	sbiw	r26, 0x03	; 3
    2bfc:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    2c00:	40 e9       	ldi	r20, 0x90	; 144
    2c02:	a4 2e       	mov	r10, r20
    2c04:	42 e0       	ldi	r20, 0x02	; 2
    2c06:	b4 2e       	mov	r11, r20
    2c08:	ed b7       	in	r30, 0x3d	; 61
    2c0a:	fe b7       	in	r31, 0x3e	; 62
    2c0c:	b2 82       	std	Z+2, r11	; 0x02
    2c0e:	a1 82       	std	Z+1, r10	; 0x01
    2c10:	80 91 19 06 	lds	r24, 0x0619
    2c14:	90 91 1a 06 	lds	r25, 0x061A
    2c18:	94 83       	std	Z+4, r25	; 0x04
    2c1a:	83 83       	std	Z+3, r24	; 0x03
    2c1c:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
    2c20:	0a e9       	ldi	r16, 0x9A	; 154
    2c22:	17 e0       	ldi	r17, 0x07	; 7
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	c0 e0       	ldi	r28, 0x00	; 0
    2c2e:	d0 e0       	ldi	r29, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2c30:	30 ea       	ldi	r19, 0xA0	; 160
    2c32:	63 2e       	mov	r6, r19
    2c34:	32 e0       	ldi	r19, 0x02	; 2
    2c36:	73 2e       	mov	r7, r19
        printf( "canary = %x ",*stkc );
    2c38:	47 01       	movw	r8, r14
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2c3a:	c6 01       	movw	r24, r12
    2c3c:	dc 2c       	mov	r13, r12
    2c3e:	c9 2e       	mov	r12, r25
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2c40:	c5 01       	movw	r24, r10
    2c42:	ba 2c       	mov	r11, r10
    2c44:	a9 2e       	mov	r10, r25
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2c46:	d8 01       	movw	r26, r16
    2c48:	12 96       	adiw	r26, 0x02	; 2
    2c4a:	ed 90       	ld	r14, X+
    2c4c:	fc 90       	ld	r15, X
    2c4e:	13 97       	sbiw	r26, 0x03	; 3
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2c50:	00 d0       	rcall	.+0      	; 0x2c52 <dump_stack_info+0x116>
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <dump_stack_info+0x118>
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <dump_stack_info+0x11a>
    2c56:	ed b7       	in	r30, 0x3d	; 61
    2c58:	fe b7       	in	r31, 0x3e	; 62
    2c5a:	31 96       	adiw	r30, 0x01	; 1
    2c5c:	ad b7       	in	r26, 0x3d	; 61
    2c5e:	be b7       	in	r27, 0x3e	; 62
    2c60:	12 96       	adiw	r26, 0x02	; 2
    2c62:	7c 92       	st	X, r7
    2c64:	6e 92       	st	-X, r6
    2c66:	11 97       	sbiw	r26, 0x01	; 1
    2c68:	d3 83       	std	Z+3, r29	; 0x03
    2c6a:	c2 83       	std	Z+2, r28	; 0x02
    2c6c:	f5 82       	std	Z+5, r15	; 0x05
    2c6e:	e4 82       	std	Z+4, r14	; 0x04
    2c70:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
        printf( "canary = %x ",*stkc );
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	ed b7       	in	r30, 0x3d	; 61
    2c7a:	fe b7       	in	r31, 0x3e	; 62
    2c7c:	31 96       	adiw	r30, 0x01	; 1
    2c7e:	ad b7       	in	r26, 0x3d	; 61
    2c80:	be b7       	in	r27, 0x3e	; 62
    2c82:	11 96       	adiw	r26, 0x01	; 1
    2c84:	8c 92       	st	X, r8
    2c86:	11 97       	sbiw	r26, 0x01	; 1
    2c88:	12 96       	adiw	r26, 0x02	; 2
    2c8a:	9c 92       	st	X, r9
    2c8c:	d7 01       	movw	r26, r14
    2c8e:	8c 91       	ld	r24, X
    2c90:	82 83       	std	Z+2, r24	; 0x02
    2c92:	13 82       	std	Z+3, r1	; 0x03
    2c94:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2c98:	ed b7       	in	r30, 0x3d	; 61
    2c9a:	fe b7       	in	r31, 0x3e	; 62
    2c9c:	d1 82       	std	Z+1, r13	; 0x01
    2c9e:	c2 82       	std	Z+2, r12	; 0x02
    2ca0:	d8 01       	movw	r26, r16
    2ca2:	8d 91       	ld	r24, X+
    2ca4:	9c 91       	ld	r25, X
    2ca6:	94 83       	std	Z+4, r25	; 0x04
    2ca8:	83 83       	std	Z+3, r24	; 0x03
    2caa:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2cae:	ed b7       	in	r30, 0x3d	; 61
    2cb0:	fe b7       	in	r31, 0x3e	; 62
    2cb2:	b1 82       	std	Z+1, r11	; 0x01
    2cb4:	a2 82       	std	Z+2, r10	; 0x02
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	25 e0       	ldi	r18, 0x05	; 5
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	2a 95       	dec	r18
    2cc0:	e1 f7       	brne	.-8      	; 0x2cba <dump_stack_info+0x17e>
    2cc2:	8c 0f       	add	r24, r28
    2cc4:	9d 1f       	adc	r25, r29
    2cc6:	86 56       	subi	r24, 0x66	; 102
    2cc8:	98 4f       	sbci	r25, 0xF8	; 248
    2cca:	94 83       	std	Z+4, r25	; 0x04
    2ccc:	83 83       	std	Z+3, r24	; 0x03
    2cce:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <printf>
    2cd2:	21 96       	adiw	r28, 0x01	; 1
    2cd4:	0f 5d       	subi	r16, 0xDF	; 223
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	c5 30       	cpi	r28, 0x05	; 5
    2ce2:	d1 05       	cpc	r29, r1
    2ce4:	09 f0       	breq	.+2      	; 0x2ce8 <dump_stack_info+0x1ac>
    2ce6:	af cf       	rjmp	.-162    	; 0x2c46 <dump_stack_info+0x10a>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	ff 90       	pop	r15
    2cf2:	ef 90       	pop	r14
    2cf4:	df 90       	pop	r13
    2cf6:	cf 90       	pop	r12
    2cf8:	bf 90       	pop	r11
    2cfa:	af 90       	pop	r10
    2cfc:	9f 90       	pop	r9
    2cfe:	8f 90       	pop	r8
    2d00:	7f 90       	pop	r7
    2d02:	6f 90       	pop	r6
    2d04:	08 95       	ret

00002d06 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    2d06:	cf 93       	push	r28
    2d08:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    2d0a:	e0 91 19 06 	lds	r30, 0x0619
    2d0e:	f0 91 1a 06 	lds	r31, 0x061A
    2d12:	c2 81       	ldd	r28, Z+2	; 0x02
    2d14:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2d16:	88 81       	ld	r24, Y
    2d18:	85 35       	cpi	r24, 0x55	; 85
    2d1a:	39 f0       	breq	.+14     	; 0x2d2a <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2d1c:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	0e 94 92 15 	call	0x2b24	; 0x2b24 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    2d26:	85 e5       	ldi	r24, 0x55	; 85
    2d28:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    2d2a:	e0 91 19 06 	lds	r30, 0x0619
    2d2e:	f0 91 1a 06 	lds	r31, 0x061A
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2d32:	80 81       	ld	r24, Z
    2d34:	91 81       	ldd	r25, Z+1	; 0x01
    2d36:	22 e4       	ldi	r18, 0x42	; 66
    2d38:	80 30       	cpi	r24, 0x00	; 0
    2d3a:	92 07       	cpc	r25, r18
    2d3c:	28 f0       	brcs	.+10     	; 0x2d48 <nrk_stack_check+0x42>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2d3e:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2d42:	82 e1       	ldi	r24, 0x12	; 18
    2d44:	0e 94 92 15 	call	0x2b24	; 0x2b24 <nrk_error_add>




#endif
}
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	08 95       	ret

00002d4e <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    2d4e:	99 27       	eor	r25, r25
    2d50:	87 fd       	sbrc	r24, 7
    2d52:	90 95       	com	r25
    2d54:	fc 01       	movw	r30, r24
    2d56:	75 e0       	ldi	r23, 0x05	; 5
    2d58:	ee 0f       	add	r30, r30
    2d5a:	ff 1f       	adc	r31, r31
    2d5c:	7a 95       	dec	r23
    2d5e:	e1 f7       	brne	.-8      	; 0x2d58 <nrk_stack_check_pid+0xa>
    2d60:	e8 0f       	add	r30, r24
    2d62:	f9 1f       	adc	r31, r25
    2d64:	e6 56       	subi	r30, 0x66	; 102
    2d66:	f8 4f       	sbci	r31, 0xF8	; 248
    2d68:	a2 81       	ldd	r26, Z+2	; 0x02
    2d6a:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2d6c:	8c 91       	ld	r24, X
    2d6e:	85 35       	cpi	r24, 0x55	; 85
    2d70:	19 f0       	breq	.+6      	; 0x2d78 <nrk_stack_check_pid+0x2a>
    {
        *stkc=STK_CANARY_VAL;
    2d72:	85 e5       	ldi	r24, 0x55	; 85
    2d74:	8c 93       	st	X, r24
    2d76:	09 c0       	rjmp	.+18     	; 0x2d8a <nrk_stack_check_pid+0x3c>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2d78:	80 81       	ld	r24, Z
    2d7a:	91 81       	ldd	r25, Z+1	; 0x01
    2d7c:	22 e4       	ldi	r18, 0x42	; 66
    2d7e:	80 30       	cpi	r24, 0x00	; 0
    2d80:	92 07       	cpc	r25, r18
    2d82:	28 f0       	brcs	.+10     	; 0x2d8e <nrk_stack_check_pid+0x40>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2d84:	82 e1       	ldi	r24, 0x12	; 18
    2d86:	0e 94 92 15 	call	0x2b24	; 0x2b24 <nrk_error_add>
        return NRK_ERROR;
    2d8a:	8f ef       	ldi	r24, 0xFF	; 255
    2d8c:	08 95       	ret
    }
#endif
    return NRK_OK;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
}
    2d90:	08 95       	ret

00002d92 <nrk_signal_create>:
int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    2d92:	60 91 9f 05 	lds	r22, 0x059F
    2d96:	70 91 a0 05 	lds	r23, 0x05A0
    2d9a:	80 91 a1 05 	lds	r24, 0x05A1
    2d9e:	90 91 a2 05 	lds	r25, 0x05A2
    2da2:	e0 e0       	ldi	r30, 0x00	; 0
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	9b 01       	movw	r18, r22
    2da8:	ac 01       	movw	r20, r24
    2daa:	0e 2e       	mov	r0, r30
    2dac:	04 c0       	rjmp	.+8      	; 0x2db6 <nrk_signal_create+0x24>
    2dae:	56 95       	lsr	r21
    2db0:	47 95       	ror	r20
    2db2:	37 95       	ror	r19
    2db4:	27 95       	ror	r18
    2db6:	0a 94       	dec	r0
    2db8:	d2 f7       	brpl	.-12     	; 0x2dae <nrk_signal_create+0x1c>
    2dba:	20 fd       	sbrc	r18, 0
    2dbc:	1a c0       	rjmp	.+52     	; 0x2df2 <nrk_signal_create+0x60>
		{    
			_nrk_signal_list|=SIG(i);
    2dbe:	21 e0       	ldi	r18, 0x01	; 1
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	40 e0       	ldi	r20, 0x00	; 0
    2dc4:	50 e0       	ldi	r21, 0x00	; 0
    2dc6:	0e 2e       	mov	r0, r30
    2dc8:	04 c0       	rjmp	.+8      	; 0x2dd2 <nrk_signal_create+0x40>
    2dca:	22 0f       	add	r18, r18
    2dcc:	33 1f       	adc	r19, r19
    2dce:	44 1f       	adc	r20, r20
    2dd0:	55 1f       	adc	r21, r21
    2dd2:	0a 94       	dec	r0
    2dd4:	d2 f7       	brpl	.-12     	; 0x2dca <nrk_signal_create+0x38>
    2dd6:	26 2b       	or	r18, r22
    2dd8:	37 2b       	or	r19, r23
    2dda:	48 2b       	or	r20, r24
    2ddc:	59 2b       	or	r21, r25
    2dde:	20 93 9f 05 	sts	0x059F, r18
    2de2:	30 93 a0 05 	sts	0x05A0, r19
    2de6:	40 93 a1 05 	sts	0x05A1, r20
    2dea:	50 93 a2 05 	sts	0x05A2, r21
			return i;
    2dee:	8e 2f       	mov	r24, r30
    2df0:	08 95       	ret
    2df2:	31 96       	adiw	r30, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    2df4:	e0 32       	cpi	r30, 0x20	; 32
    2df6:	f1 05       	cpc	r31, r1
    2df8:	b1 f6       	brne	.-84     	; 0x2da6 <nrk_signal_create+0x14>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    2dfa:	8f ef       	ldi	r24, 0xFF	; 255


}
    2dfc:	08 95       	ret

00002dfe <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    2dfe:	e0 91 19 06 	lds	r30, 0x0619
    2e02:	f0 91 1a 06 	lds	r31, 0x061A


}

uint32_t nrk_signal_get_registered_mask()
{
    2e06:	65 85       	ldd	r22, Z+13	; 0x0d
    2e08:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    2e0a:	87 85       	ldd	r24, Z+15	; 0x0f
    2e0c:	90 89       	ldd	r25, Z+16	; 0x10
    2e0e:	08 95       	ret

00002e10 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    2e10:	df 92       	push	r13
    2e12:	ef 92       	push	r14
    2e14:	ff 92       	push	r15
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	d8 2e       	mov	r13, r24
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	e8 2e       	mov	r14, r24
    2e20:	f1 2c       	mov	r15, r1
    2e22:	01 2d       	mov	r16, r1
    2e24:	11 2d       	mov	r17, r1
    2e26:	0d 2c       	mov	r0, r13
    2e28:	04 c0       	rjmp	.+8      	; 0x2e32 <nrk_signal_delete+0x22>
    2e2a:	ee 0c       	add	r14, r14
    2e2c:	ff 1c       	adc	r15, r15
    2e2e:	00 1f       	adc	r16, r16
    2e30:	11 1f       	adc	r17, r17
    2e32:	0a 94       	dec	r0
    2e34:	d2 f7       	brpl	.-12     	; 0x2e2a <nrk_signal_delete+0x1a>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2e36:	80 91 9f 05 	lds	r24, 0x059F
    2e3a:	90 91 a0 05 	lds	r25, 0x05A0
    2e3e:	a0 91 a1 05 	lds	r26, 0x05A1
    2e42:	b0 91 a2 05 	lds	r27, 0x05A2
    2e46:	8e 21       	and	r24, r14
    2e48:	9f 21       	and	r25, r15
    2e4a:	a0 23       	and	r26, r16
    2e4c:	b1 23       	and	r27, r17
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	a1 05       	cpc	r26, r1
    2e52:	b1 05       	cpc	r27, r1
    2e54:	09 f4       	brne	.+2      	; 0x2e58 <nrk_signal_delete+0x48>
    2e56:	5d c0       	rjmp	.+186    	; 0x2f12 <nrk_signal_delete+0x102>

	nrk_int_disable();
    2e58:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
    2e5c:	e1 ea       	ldi	r30, 0xA1	; 161
    2e5e:	f7 e0       	ldi	r31, 0x07	; 7
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2e60:	a8 01       	movw	r20, r16
    2e62:	97 01       	movw	r18, r14
    2e64:	20 95       	com	r18
    2e66:	30 95       	com	r19
    2e68:	40 95       	com	r20
    2e6a:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2e6c:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2e6e:	81 81       	ldd	r24, Z+1	; 0x01
    2e70:	8f 3f       	cpi	r24, 0xFF	; 255
    2e72:	39 f1       	breq	.+78     	; 0x2ec2 <nrk_signal_delete+0xb2>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2e74:	86 81       	ldd	r24, Z+6	; 0x06
    2e76:	97 81       	ldd	r25, Z+7	; 0x07
    2e78:	a0 85       	ldd	r26, Z+8	; 0x08
    2e7a:	b1 85       	ldd	r27, Z+9	; 0x09
    2e7c:	8e 15       	cp	r24, r14
    2e7e:	9f 05       	cpc	r25, r15
    2e80:	a0 07       	cpc	r26, r16
    2e82:	b1 07       	cpc	r27, r17
    2e84:	31 f4       	brne	.+12     	; 0x2e92 <nrk_signal_delete+0x82>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2e86:	12 86       	std	Z+10, r1	; 0x0a
    2e88:	13 86       	std	Z+11, r1	; 0x0b
    2e8a:	14 86       	std	Z+12, r1	; 0x0c
    2e8c:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    2e8e:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2e90:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2e92:	86 81       	ldd	r24, Z+6	; 0x06
    2e94:	97 81       	ldd	r25, Z+7	; 0x07
    2e96:	a0 85       	ldd	r26, Z+8	; 0x08
    2e98:	b1 85       	ldd	r27, Z+9	; 0x09
    2e9a:	82 23       	and	r24, r18
    2e9c:	93 23       	and	r25, r19
    2e9e:	a4 23       	and	r26, r20
    2ea0:	b5 23       	and	r27, r21
    2ea2:	86 83       	std	Z+6, r24	; 0x06
    2ea4:	97 83       	std	Z+7, r25	; 0x07
    2ea6:	a0 87       	std	Z+8, r26	; 0x08
    2ea8:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2eaa:	82 85       	ldd	r24, Z+10	; 0x0a
    2eac:	93 85       	ldd	r25, Z+11	; 0x0b
    2eae:	a4 85       	ldd	r26, Z+12	; 0x0c
    2eb0:	b5 85       	ldd	r27, Z+13	; 0x0d
    2eb2:	82 23       	and	r24, r18
    2eb4:	93 23       	and	r25, r19
    2eb6:	a4 23       	and	r26, r20
    2eb8:	b5 23       	and	r27, r21
    2eba:	82 87       	std	Z+10, r24	; 0x0a
    2ebc:	93 87       	std	Z+11, r25	; 0x0b
    2ebe:	a4 87       	std	Z+12, r26	; 0x0c
    2ec0:	b5 87       	std	Z+13, r27	; 0x0d
    2ec2:	b1 96       	adiw	r30, 0x21	; 33
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2ec4:	88 e0       	ldi	r24, 0x08	; 8
    2ec6:	e6 34       	cpi	r30, 0x46	; 70
    2ec8:	f8 07       	cpc	r31, r24
    2eca:	89 f6       	brne	.-94     	; 0x2e6e <nrk_signal_delete+0x5e>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    2ecc:	2e ef       	ldi	r18, 0xFE	; 254
    2ece:	3f ef       	ldi	r19, 0xFF	; 255
    2ed0:	4f ef       	ldi	r20, 0xFF	; 255
    2ed2:	5f ef       	ldi	r21, 0xFF	; 255
    2ed4:	04 c0       	rjmp	.+8      	; 0x2ede <nrk_signal_delete+0xce>
    2ed6:	22 0f       	add	r18, r18
    2ed8:	33 1f       	adc	r19, r19
    2eda:	44 1f       	adc	r20, r20
    2edc:	55 1f       	adc	r21, r21
    2ede:	da 94       	dec	r13
    2ee0:	d2 f7       	brpl	.-12     	; 0x2ed6 <nrk_signal_delete+0xc6>
    2ee2:	80 91 9f 05 	lds	r24, 0x059F
    2ee6:	90 91 a0 05 	lds	r25, 0x05A0
    2eea:	a0 91 a1 05 	lds	r26, 0x05A1
    2eee:	b0 91 a2 05 	lds	r27, 0x05A2
    2ef2:	82 23       	and	r24, r18
    2ef4:	93 23       	and	r25, r19
    2ef6:	a4 23       	and	r26, r20
    2ef8:	b5 23       	and	r27, r21
    2efa:	80 93 9f 05 	sts	0x059F, r24
    2efe:	90 93 a0 05 	sts	0x05A0, r25
    2f02:	a0 93 a1 05 	sts	0x05A1, r26
    2f06:	b0 93 a2 05 	sts	0x05A2, r27
	nrk_int_enable();
    2f0a:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>

	return NRK_OK;
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <nrk_signal_delete+0x104>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2f12:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	ff 90       	pop	r15
    2f1a:	ef 90       	pop	r14
    2f1c:	df 90       	pop	r13
    2f1e:	08 95       	ret

00002f20 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    2f20:	ef 92       	push	r14
    2f22:	ff 92       	push	r15
    2f24:	0f 93       	push	r16
    2f26:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    2f28:	21 e0       	ldi	r18, 0x01	; 1
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e0       	ldi	r20, 0x00	; 0
    2f2e:	50 e0       	ldi	r21, 0x00	; 0
    2f30:	04 c0       	rjmp	.+8      	; 0x2f3a <nrk_signal_unregister+0x1a>
    2f32:	22 0f       	add	r18, r18
    2f34:	33 1f       	adc	r19, r19
    2f36:	44 1f       	adc	r20, r20
    2f38:	55 1f       	adc	r21, r21
    2f3a:	8a 95       	dec	r24
    2f3c:	d2 f7       	brpl	.-12     	; 0x2f32 <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    2f3e:	e0 91 19 06 	lds	r30, 0x0619
    2f42:	f0 91 1a 06 	lds	r31, 0x061A
    2f46:	85 85       	ldd	r24, Z+13	; 0x0d
    2f48:	96 85       	ldd	r25, Z+14	; 0x0e
    2f4a:	a7 85       	ldd	r26, Z+15	; 0x0f
    2f4c:	b0 89       	ldd	r27, Z+16	; 0x10
    2f4e:	79 01       	movw	r14, r18
    2f50:	8a 01       	movw	r16, r20
    2f52:	e8 22       	and	r14, r24
    2f54:	f9 22       	and	r15, r25
    2f56:	0a 23       	and	r16, r26
    2f58:	1b 23       	and	r17, r27
    2f5a:	e1 14       	cp	r14, r1
    2f5c:	f1 04       	cpc	r15, r1
    2f5e:	01 05       	cpc	r16, r1
    2f60:	11 05       	cpc	r17, r1
    2f62:	d1 f0       	breq	.+52     	; 0x2f98 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    2f64:	20 95       	com	r18
    2f66:	30 95       	com	r19
    2f68:	40 95       	com	r20
    2f6a:	50 95       	com	r21
    2f6c:	82 23       	and	r24, r18
    2f6e:	93 23       	and	r25, r19
    2f70:	a4 23       	and	r26, r20
    2f72:	b5 23       	and	r27, r21
    2f74:	85 87       	std	Z+13, r24	; 0x0d
    2f76:	96 87       	std	Z+14, r25	; 0x0e
    2f78:	a7 87       	std	Z+15, r26	; 0x0f
    2f7a:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    2f7c:	81 89       	ldd	r24, Z+17	; 0x11
    2f7e:	92 89       	ldd	r25, Z+18	; 0x12
    2f80:	a3 89       	ldd	r26, Z+19	; 0x13
    2f82:	b4 89       	ldd	r27, Z+20	; 0x14
    2f84:	82 23       	and	r24, r18
    2f86:	93 23       	and	r25, r19
    2f88:	a4 23       	and	r26, r20
    2f8a:	b5 23       	and	r27, r21
    2f8c:	81 8b       	std	Z+17, r24	; 0x11
    2f8e:	92 8b       	std	Z+18, r25	; 0x12
    2f90:	a3 8b       	std	Z+19, r26	; 0x13
    2f92:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	01 c0       	rjmp	.+2      	; 0x2f9a <nrk_signal_unregister+0x7a>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    2f98:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    2f9a:	1f 91       	pop	r17
    2f9c:	0f 91       	pop	r16
    2f9e:	ff 90       	pop	r15
    2fa0:	ef 90       	pop	r14
    2fa2:	08 95       	ret

00002fa4 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    2fa4:	20 91 9f 05 	lds	r18, 0x059F
    2fa8:	30 91 a0 05 	lds	r19, 0x05A0
    2fac:	40 91 a1 05 	lds	r20, 0x05A1
    2fb0:	50 91 a2 05 	lds	r21, 0x05A2
    2fb4:	08 2e       	mov	r0, r24
    2fb6:	04 c0       	rjmp	.+8      	; 0x2fc0 <nrk_signal_register+0x1c>
    2fb8:	56 95       	lsr	r21
    2fba:	47 95       	ror	r20
    2fbc:	37 95       	ror	r19
    2fbe:	27 95       	ror	r18
    2fc0:	0a 94       	dec	r0
    2fc2:	d2 f7       	brpl	.-12     	; 0x2fb8 <nrk_signal_register+0x14>
    2fc4:	21 70       	andi	r18, 0x01	; 1
    2fc6:	30 70       	andi	r19, 0x00	; 0
    2fc8:	21 15       	cp	r18, r1
    2fca:	31 05       	cpc	r19, r1
    2fcc:	e9 f0       	breq	.+58     	; 0x3008 <nrk_signal_register+0x64>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    2fce:	e0 91 19 06 	lds	r30, 0x0619
    2fd2:	f0 91 1a 06 	lds	r31, 0x061A
    2fd6:	21 e0       	ldi	r18, 0x01	; 1
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e0       	ldi	r20, 0x00	; 0
    2fdc:	50 e0       	ldi	r21, 0x00	; 0
    2fde:	04 c0       	rjmp	.+8      	; 0x2fe8 <nrk_signal_register+0x44>
    2fe0:	22 0f       	add	r18, r18
    2fe2:	33 1f       	adc	r19, r19
    2fe4:	44 1f       	adc	r20, r20
    2fe6:	55 1f       	adc	r21, r21
    2fe8:	8a 95       	dec	r24
    2fea:	d2 f7       	brpl	.-12     	; 0x2fe0 <nrk_signal_register+0x3c>
    2fec:	85 85       	ldd	r24, Z+13	; 0x0d
    2fee:	96 85       	ldd	r25, Z+14	; 0x0e
    2ff0:	a7 85       	ldd	r26, Z+15	; 0x0f
    2ff2:	b0 89       	ldd	r27, Z+16	; 0x10
    2ff4:	82 2b       	or	r24, r18
    2ff6:	93 2b       	or	r25, r19
    2ff8:	a4 2b       	or	r26, r20
    2ffa:	b5 2b       	or	r27, r21
    2ffc:	85 87       	std	Z+13, r24	; 0x0d
    2ffe:	96 87       	std	Z+14, r25	; 0x0e
    3000:	a7 87       	std	Z+15, r26	; 0x0f
    3002:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	08 95       	ret
	}
            
	return NRK_ERROR;
    3008:	8f ef       	ldi	r24, 0xFF	; 255
}
    300a:	08 95       	ret

0000300c <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    300c:	ef 92       	push	r14
    300e:	ff 92       	push	r15
    3010:	0f 93       	push	r16
    3012:	1f 93       	push	r17
    3014:	df 93       	push	r29
    3016:	cf 93       	push	r28
    3018:	0f 92       	push	r0
    301a:	cd b7       	in	r28, 0x3d	; 61
    301c:	de b7       	in	r29, 0x3e	; 62

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    301e:	91 e0       	ldi	r25, 0x01	; 1
    3020:	e9 2e       	mov	r14, r25
    3022:	f1 2c       	mov	r15, r1
    3024:	01 2d       	mov	r16, r1
    3026:	11 2d       	mov	r17, r1
    3028:	04 c0       	rjmp	.+8      	; 0x3032 <nrk_event_signal+0x26>
    302a:	ee 0c       	add	r14, r14
    302c:	ff 1c       	adc	r15, r15
    302e:	00 1f       	adc	r16, r16
    3030:	11 1f       	adc	r17, r17
    3032:	8a 95       	dec	r24
    3034:	d2 f7       	brpl	.-12     	; 0x302a <nrk_event_signal+0x1e>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3036:	80 91 9f 05 	lds	r24, 0x059F
    303a:	90 91 a0 05 	lds	r25, 0x05A0
    303e:	a0 91 a1 05 	lds	r26, 0x05A1
    3042:	b0 91 a2 05 	lds	r27, 0x05A2
    3046:	8e 21       	and	r24, r14
    3048:	9f 21       	and	r25, r15
    304a:	a0 23       	and	r26, r16
    304c:	b1 23       	and	r27, r17
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	a1 05       	cpc	r26, r1
    3052:	b1 05       	cpc	r27, r1
    3054:	11 f4       	brne	.+4      	; 0x305a <nrk_event_signal+0x4e>
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	3f c0       	rjmp	.+126    	; 0x30d8 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    305a:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
    305e:	e1 ea       	ldi	r30, 0xA1	; 161
    3060:	f7 e0       	ldi	r31, 0x07	; 7

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3062:	20 e0       	ldi	r18, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3064:	33 e0       	ldi	r19, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    3066:	80 81       	ld	r24, Z
    3068:	81 30       	cpi	r24, 0x01	; 1
    306a:	a9 f4       	brne	.+42     	; 0x3096 <nrk_event_signal+0x8a>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    306c:	82 85       	ldd	r24, Z+10	; 0x0a
    306e:	93 85       	ldd	r25, Z+11	; 0x0b
    3070:	a4 85       	ldd	r26, Z+12	; 0x0c
    3072:	b5 85       	ldd	r27, Z+13	; 0x0d
    3074:	8e 21       	and	r24, r14
    3076:	9f 21       	and	r25, r15
    3078:	a0 23       	and	r26, r16
    307a:	b1 23       	and	r27, r17
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	a1 05       	cpc	r26, r1
    3080:	b1 05       	cpc	r27, r1
    3082:	49 f0       	breq	.+18     	; 0x3096 <nrk_event_signal+0x8a>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3084:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3086:	17 86       	std	Z+15, r1	; 0x0f
    3088:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    308a:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    308c:	e2 86       	std	Z+10, r14	; 0x0a
    308e:	f3 86       	std	Z+11, r15	; 0x0b
    3090:	04 87       	std	Z+12, r16	; 0x0c
    3092:	15 87       	std	Z+13, r17	; 0x0d
					event_occured=1;
    3094:	21 e0       	ldi	r18, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3096:	80 81       	ld	r24, Z
    3098:	82 30       	cpi	r24, 0x02	; 2
    309a:	91 f4       	brne	.+36     	; 0x30c0 <nrk_event_signal+0xb4>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    309c:	82 85       	ldd	r24, Z+10	; 0x0a
    309e:	93 85       	ldd	r25, Z+11	; 0x0b
    30a0:	a4 85       	ldd	r26, Z+12	; 0x0c
    30a2:	b5 85       	ldd	r27, Z+13	; 0x0d
    30a4:	8e 15       	cp	r24, r14
    30a6:	9f 05       	cpc	r25, r15
    30a8:	a0 07       	cpc	r26, r16
    30aa:	b1 07       	cpc	r27, r17
    30ac:	49 f4       	brne	.+18     	; 0x30c0 <nrk_event_signal+0xb4>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    30ae:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    30b0:	17 86       	std	Z+15, r1	; 0x0f
    30b2:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    30b4:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    30b6:	12 86       	std	Z+10, r1	; 0x0a
    30b8:	13 86       	std	Z+11, r1	; 0x0b
    30ba:	14 86       	std	Z+12, r1	; 0x0c
    30bc:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    30be:	21 e0       	ldi	r18, 0x01	; 1
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
					nrk_task_TCB[task_ID].next_wakeup=0;
					nrk_task_TCB[task_ID].event_suspend=0;
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    30c0:	b1 96       	adiw	r30, 0x21	; 33
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    30c2:	88 e0       	ldi	r24, 0x08	; 8
    30c4:	e6 34       	cpi	r30, 0x46	; 70
    30c6:	f8 07       	cpc	r31, r24
    30c8:	71 f6       	brne	.-100    	; 0x3066 <nrk_event_signal+0x5a>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    30ca:	29 83       	std	Y+1, r18	; 0x01
    30cc:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>
	if(event_occured)
    30d0:	29 81       	ldd	r18, Y+1	; 0x01
    30d2:	22 23       	and	r18, r18
    30d4:	29 f4       	brne	.+10     	; 0x30e0 <nrk_event_signal+0xd4>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    30d6:	82 e0       	ldi	r24, 0x02	; 2
    30d8:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_nrk_errno_set>
	return NRK_ERROR;
    30dc:	8f ef       	ldi	r24, 0xFF	; 255
    30de:	01 c0       	rjmp	.+2      	; 0x30e2 <nrk_event_signal+0xd6>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    30e0:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    30e2:	0f 90       	pop	r0
    30e4:	cf 91       	pop	r28
    30e6:	df 91       	pop	r29
    30e8:	1f 91       	pop	r17
    30ea:	0f 91       	pop	r16
    30ec:	ff 90       	pop	r15
    30ee:	ef 90       	pop	r14
    30f0:	08 95       	ret

000030f2 <nrk_event_wait>:

uint32_t nrk_event_wait(uint32_t event_mask)
{

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    30f2:	e0 91 19 06 	lds	r30, 0x0619
    30f6:	f0 91 1a 06 	lds	r31, 0x061A
    30fa:	25 85       	ldd	r18, Z+13	; 0x0d
    30fc:	36 85       	ldd	r19, Z+14	; 0x0e
    30fe:	47 85       	ldd	r20, Z+15	; 0x0f
    3100:	50 89       	ldd	r21, Z+16	; 0x10
    3102:	26 23       	and	r18, r22
    3104:	37 23       	and	r19, r23
    3106:	48 23       	and	r20, r24
    3108:	59 23       	and	r21, r25
    310a:	21 15       	cp	r18, r1
    310c:	31 05       	cpc	r19, r1
    310e:	41 05       	cpc	r20, r1
    3110:	51 05       	cpc	r21, r1
    3112:	21 f1       	breq	.+72     	; 0x315c <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    3114:	61 8b       	std	Z+17, r22	; 0x11
    3116:	72 8b       	std	Z+18, r23	; 0x12
    3118:	83 8b       	std	Z+19, r24	; 0x13
    311a:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    311c:	21 e0       	ldi	r18, 0x01	; 1
    311e:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    3120:	00 90 09 05 	lds	r0, 0x0509
    3124:	04 c0       	rjmp	.+8      	; 0x312e <nrk_event_wait+0x3c>
    3126:	96 95       	lsr	r25
    3128:	87 95       	ror	r24
    312a:	77 95       	ror	r23
    312c:	67 95       	ror	r22
    312e:	0a 94       	dec	r0
    3130:	d2 f7       	brpl	.-12     	; 0x3126 <nrk_event_wait+0x34>
    3132:	61 70       	andi	r22, 0x01	; 1
    3134:	70 70       	andi	r23, 0x00	; 0
    3136:	61 15       	cp	r22, r1
    3138:	71 05       	cpc	r23, r1
    313a:	19 f0       	breq	.+6      	; 0x3142 <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    313c:	0e 94 b1 1b 	call	0x3762	; 0x3762 <nrk_wait_until_nw>
    3140:	04 c0       	rjmp	.+8      	; 0x314a <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    314a:	e0 91 19 06 	lds	r30, 0x0619
    314e:	f0 91 1a 06 	lds	r31, 0x061A
    3152:	21 89       	ldd	r18, Z+17	; 0x11
    3154:	32 89       	ldd	r19, Z+18	; 0x12
    3156:	43 89       	ldd	r20, Z+19	; 0x13
    3158:	54 89       	ldd	r21, Z+20	; 0x14
    315a:	03 c0       	rjmp	.+6      	; 0x3162 <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	a9 01       	movw	r20, r18
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    3162:	b9 01       	movw	r22, r18
    3164:	ca 01       	movw	r24, r20
    3166:	08 95       	ret

00003168 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	08 95       	ret

0000316e <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    316e:	25 e0       	ldi	r18, 0x05	; 5
    3170:	82 30       	cpi	r24, 0x02	; 2
    3172:	92 07       	cpc	r25, r18
    3174:	11 f4       	brne	.+4      	; 0x317a <nrk_get_resource_index+0xc>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	08 95       	ret
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
    317a:	8f ef       	ldi	r24, 0xFF	; 255
}
    317c:	08 95       	ret

0000317e <nrk_sem_delete>:
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    317e:	0e 94 b7 18 	call	0x316e	; 0x316e <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3182:	8f 3f       	cpi	r24, 0xFF	; 255
    3184:	11 f4       	brne	.+4      	; 0x318a <nrk_sem_delete+0xc>
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	03 c0       	rjmp	.+6      	; 0x3190 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    318a:	81 30       	cpi	r24, 0x01	; 1
    318c:	29 f4       	brne	.+10     	; 0x3198 <nrk_sem_delete+0x1a>
    318e:	82 e0       	ldi	r24, 0x02	; 2
    3190:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_nrk_errno_set>
    3194:	8f ef       	ldi	r24, 0xFF	; 255
    3196:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3198:	99 27       	eor	r25, r25
    319a:	87 fd       	sbrc	r24, 7
    319c:	90 95       	com	r25
    319e:	fc 01       	movw	r30, r24
    31a0:	ee 0f       	add	r30, r30
    31a2:	ff 1f       	adc	r31, r31
    31a4:	e8 0f       	add	r30, r24
    31a6:	f9 1f       	adc	r31, r25
    31a8:	ee 5f       	subi	r30, 0xFE	; 254
    31aa:	fa 4f       	sbci	r31, 0xFA	; 250
    31ac:	8f ef       	ldi	r24, 0xFF	; 255
    31ae:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    31b0:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    31b2:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    31b4:	80 91 a3 05 	lds	r24, 0x05A3
    31b8:	81 50       	subi	r24, 0x01	; 1
    31ba:	80 93 a3 05 	sts	0x05A3, r24
return NRK_OK;
    31be:	81 e0       	ldi	r24, 0x01	; 1
}
    31c0:	08 95       	ret

000031c2 <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    31c2:	0f 93       	push	r16
    31c4:	1f 93       	push	r17
    31c6:	df 93       	push	r29
    31c8:	cf 93       	push	r28
    31ca:	0f 92       	push	r0
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    31d0:	0e 94 b7 18 	call	0x316e	; 0x316e <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    31d4:	8f 3f       	cpi	r24, 0xFF	; 255
    31d6:	11 f4       	brne	.+4      	; 0x31dc <nrk_sem_post+0x1a>
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	03 c0       	rjmp	.+6      	; 0x31e2 <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    31dc:	81 30       	cpi	r24, 0x01	; 1
    31de:	29 f4       	brne	.+10     	; 0x31ea <nrk_sem_post+0x28>
    31e0:	82 e0       	ldi	r24, 0x02	; 2
    31e2:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_nrk_errno_set>
    31e6:	8f ef       	ldi	r24, 0xFF	; 255
    31e8:	43 c0       	rjmp	.+134    	; 0x3270 <nrk_sem_post+0xae>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    31ea:	28 2f       	mov	r18, r24
    31ec:	33 27       	eor	r19, r19
    31ee:	27 fd       	sbrc	r18, 7
    31f0:	30 95       	com	r19
    31f2:	89 01       	movw	r16, r18
    31f4:	00 0f       	add	r16, r16
    31f6:	11 1f       	adc	r17, r17
    31f8:	02 0f       	add	r16, r18
    31fa:	13 1f       	adc	r17, r19
    31fc:	0e 5f       	subi	r16, 0xFE	; 254
    31fe:	1a 4f       	sbci	r17, 0xFA	; 250
    3200:	d8 01       	movw	r26, r16
    3202:	12 96       	adiw	r26, 0x02	; 2
    3204:	2c 91       	ld	r18, X
    3206:	12 97       	sbiw	r26, 0x02	; 2
    3208:	9c 91       	ld	r25, X
    320a:	29 17       	cp	r18, r25
    320c:	84 f5       	brge	.+96     	; 0x326e <nrk_sem_post+0xac>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    320e:	89 83       	std	Y+1, r24	; 0x01
    3210:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>

		nrk_sem_list[id].value++;
    3214:	f8 01       	movw	r30, r16
    3216:	92 81       	ldd	r25, Z+2	; 0x02
    3218:	9f 5f       	subi	r25, 0xFF	; 255
    321a:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    321c:	e0 91 19 06 	lds	r30, 0x0619
    3220:	f0 91 1a 06 	lds	r31, 0x061A
    3224:	14 82       	std	Z+4, r1	; 0x04
    3226:	e1 ea       	ldi	r30, 0xA1	; 161
    3228:	f7 e0       	ldi	r31, 0x07	; 7

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	99 27       	eor	r25, r25
    322e:	87 fd       	sbrc	r24, 7
    3230:	90 95       	com	r25
    3232:	a9 2f       	mov	r26, r25
    3234:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3236:	63 e0       	ldi	r22, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3238:	20 81       	ld	r18, Z
    323a:	22 30       	cpi	r18, 0x02	; 2
    323c:	89 f4       	brne	.+34     	; 0x3260 <nrk_sem_post+0x9e>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    323e:	22 85       	ldd	r18, Z+10	; 0x0a
    3240:	33 85       	ldd	r19, Z+11	; 0x0b
    3242:	44 85       	ldd	r20, Z+12	; 0x0c
    3244:	55 85       	ldd	r21, Z+13	; 0x0d
    3246:	28 17       	cp	r18, r24
    3248:	39 07       	cpc	r19, r25
    324a:	4a 07       	cpc	r20, r26
    324c:	5b 07       	cpc	r21, r27
    324e:	41 f4       	brne	.+16     	; 0x3260 <nrk_sem_post+0x9e>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3250:	62 83       	std	Z+2, r22	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3252:	17 86       	std	Z+15, r1	; 0x0f
    3254:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    3256:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3258:	12 86       	std	Z+10, r1	; 0x0a
    325a:	13 86       	std	Z+11, r1	; 0x0b
    325c:	14 86       	std	Z+12, r1	; 0x0c
    325e:	15 86       	std	Z+13, r1	; 0x0d
    3260:	b1 96       	adiw	r30, 0x21	; 33
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3262:	28 e0       	ldi	r18, 0x08	; 8
    3264:	e6 34       	cpi	r30, 0x46	; 70
    3266:	f2 07       	cpc	r31, r18
    3268:	39 f7       	brne	.-50     	; 0x3238 <nrk_sem_post+0x76>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    326a:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>
	}
		
return NRK_OK;
    326e:	81 e0       	ldi	r24, 0x01	; 1
}
    3270:	0f 90       	pop	r0
    3272:	cf 91       	pop	r28
    3274:	df 91       	pop	r29
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	08 95       	ret

0000327c <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    327c:	0f 93       	push	r16
    327e:	1f 93       	push	r17
    3280:	df 93       	push	r29
    3282:	cf 93       	push	r28
    3284:	0f 92       	push	r0
    3286:	cd b7       	in	r28, 0x3d	; 61
    3288:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    328a:	0e 94 b7 18 	call	0x316e	; 0x316e <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    328e:	8f 3f       	cpi	r24, 0xFF	; 255
    3290:	11 f4       	brne	.+4      	; 0x3296 <nrk_sem_pend+0x1a>
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	03 c0       	rjmp	.+6      	; 0x329c <nrk_sem_pend+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3296:	81 30       	cpi	r24, 0x01	; 1
    3298:	29 f4       	brne	.+10     	; 0x32a4 <nrk_sem_pend+0x28>
    329a:	82 e0       	ldi	r24, 0x02	; 2
    329c:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_nrk_errno_set>
    32a0:	8f ef       	ldi	r24, 0xFF	; 255
    32a2:	40 c0       	rjmp	.+128    	; 0x3324 <nrk_sem_pend+0xa8>
	
	nrk_int_disable();
    32a4:	89 83       	std	Y+1, r24	; 0x01
    32a6:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	08 2f       	mov	r16, r24
    32ae:	11 27       	eor	r17, r17
    32b0:	07 fd       	sbrc	r16, 7
    32b2:	10 95       	com	r17
    32b4:	f8 01       	movw	r30, r16
    32b6:	ee 0f       	add	r30, r30
    32b8:	ff 1f       	adc	r31, r31
    32ba:	e0 0f       	add	r30, r16
    32bc:	f1 1f       	adc	r31, r17
    32be:	ee 5f       	subi	r30, 0xFE	; 254
    32c0:	fa 4f       	sbci	r31, 0xFA	; 250
    32c2:	92 81       	ldd	r25, Z+2	; 0x02
    32c4:	99 23       	and	r25, r25
    32c6:	b1 f4       	brne	.+44     	; 0x32f4 <nrk_sem_pend+0x78>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    32c8:	e0 91 19 06 	lds	r30, 0x0619
    32cc:	f0 91 1a 06 	lds	r31, 0x061A
    32d0:	97 81       	ldd	r25, Z+7	; 0x07
    32d2:	92 60       	ori	r25, 0x02	; 2
    32d4:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    32d6:	99 27       	eor	r25, r25
    32d8:	87 fd       	sbrc	r24, 7
    32da:	90 95       	com	r25
    32dc:	a9 2f       	mov	r26, r25
    32de:	b9 2f       	mov	r27, r25
    32e0:	81 8b       	std	Z+17, r24	; 0x11
    32e2:	92 8b       	std	Z+18, r25	; 0x12
    32e4:	a3 8b       	std	Z+19, r26	; 0x13
    32e6:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    32e8:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    32f4:	f8 01       	movw	r30, r16
    32f6:	ee 0f       	add	r30, r30
    32f8:	ff 1f       	adc	r31, r31
    32fa:	e0 0f       	add	r30, r16
    32fc:	f1 1f       	adc	r31, r17
    32fe:	ee 5f       	subi	r30, 0xFE	; 254
    3300:	fa 4f       	sbci	r31, 0xFA	; 250
    3302:	82 81       	ldd	r24, Z+2	; 0x02
    3304:	81 50       	subi	r24, 0x01	; 1
    3306:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    3308:	a0 91 19 06 	lds	r26, 0x0619
    330c:	b0 91 1a 06 	lds	r27, 0x061A
    3310:	81 81       	ldd	r24, Z+1	; 0x01
    3312:	1b 96       	adiw	r26, 0x0b	; 11
    3314:	8c 93       	st	X, r24
    3316:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	14 96       	adiw	r26, 0x04	; 4
    331c:	8c 93       	st	X, r24
	nrk_int_enable();
    331e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>

	return NRK_OK;
    3322:	81 e0       	ldi	r24, 0x01	; 1
}
    3324:	0f 90       	pop	r0
    3326:	cf 91       	pop	r28
    3328:	df 91       	pop	r29
    332a:	1f 91       	pop	r17
    332c:	0f 91       	pop	r16
    332e:	08 95       	ret

00003330 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3330:	0e 94 b7 18 	call	0x316e	; 0x316e <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3334:	8f 3f       	cpi	r24, 0xFF	; 255
    3336:	11 f4       	brne	.+4      	; 0x333c <nrk_sem_query+0xc>
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	03 c0       	rjmp	.+6      	; 0x3342 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    333c:	81 30       	cpi	r24, 0x01	; 1
    333e:	29 f4       	brne	.+10     	; 0x334a <nrk_sem_query+0x1a>
    3340:	82 e0       	ldi	r24, 0x02	; 2
    3342:	0e 94 74 13 	call	0x26e8	; 0x26e8 <_nrk_errno_set>
    3346:	8f ef       	ldi	r24, 0xFF	; 255
    3348:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    334a:	99 27       	eor	r25, r25
    334c:	87 fd       	sbrc	r24, 7
    334e:	90 95       	com	r25
    3350:	fc 01       	movw	r30, r24
    3352:	ee 0f       	add	r30, r30
    3354:	ff 1f       	adc	r31, r31
    3356:	e8 0f       	add	r30, r24
    3358:	f9 1f       	adc	r31, r25
    335a:	ee 5f       	subi	r30, 0xFE	; 254
    335c:	fa 4f       	sbci	r31, 0xFA	; 250
    335e:	82 81       	ldd	r24, Z+2	; 0x02
}
    3360:	08 95       	ret

00003362 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    3362:	e0 91 95 05 	lds	r30, 0x0595
    3366:	f0 91 96 05 	lds	r31, 0x0596
}
    336a:	80 81       	ld	r24, Z
    336c:	08 95       	ret

0000336e <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    336e:	e0 91 95 05 	lds	r30, 0x0595
    3372:	f0 91 96 05 	lds	r31, 0x0596
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3376:	03 c0       	rjmp	.+6      	; 0x337e <nrk_print_readyQ+0x10>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    3378:	03 80       	ldd	r0, Z+3	; 0x03
    337a:	f4 81       	ldd	r31, Z+4	; 0x04
    337c:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    337e:	30 97       	sbiw	r30, 0x00	; 0
    3380:	d9 f7       	brne	.-10     	; 0x3378 <nrk_print_readyQ+0xa>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    3382:	08 95       	ret

00003384 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3384:	df 92       	push	r13
    3386:	ef 92       	push	r14
    3388:	ff 92       	push	r15
    338a:	0f 93       	push	r16
    338c:	1f 93       	push	r17
    338e:	cf 93       	push	r28
    3390:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    3392:	e0 91 7d 04 	lds	r30, 0x047D
    3396:	f0 91 7e 04 	lds	r31, 0x047E
    339a:	30 97       	sbiw	r30, 0x00	; 0
    339c:	09 f4       	brne	.+2      	; 0x33a0 <nrk_add_to_readyQ+0x1c>
    339e:	9b c0       	rjmp	.+310    	; 0x34d6 <nrk_add_to_readyQ+0x152>
    {
        return;
    }


    NextNode = _head_node;
    33a0:	40 91 95 05 	lds	r20, 0x0595
    33a4:	50 91 96 05 	lds	r21, 0x0596
    CurNode = _free_node;

    if (_head_node != NULL)
    33a8:	41 15       	cp	r20, r1
    33aa:	51 05       	cpc	r21, r1
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <nrk_add_to_readyQ+0x2c>
    33ae:	57 c0       	rjmp	.+174    	; 0x345e <nrk_add_to_readyQ+0xda>
    33b0:	da 01       	movw	r26, r20

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    33b2:	68 2f       	mov	r22, r24
    33b4:	77 27       	eor	r23, r23
    33b6:	67 fd       	sbrc	r22, 7
    33b8:	70 95       	com	r23
    33ba:	9b 01       	movw	r18, r22
    33bc:	15 e0       	ldi	r17, 0x05	; 5
    33be:	22 0f       	add	r18, r18
    33c0:	33 1f       	adc	r19, r19
    33c2:	1a 95       	dec	r17
    33c4:	e1 f7       	brne	.-8      	; 0x33be <nrk_add_to_readyQ+0x3a>
    33c6:	26 0f       	add	r18, r22
    33c8:	37 1f       	adc	r19, r23
    33ca:	26 56       	subi	r18, 0x66	; 102
    33cc:	38 4f       	sbci	r19, 0xF8	; 248
    33ce:	b9 01       	movw	r22, r18
    33d0:	66 5f       	subi	r22, 0xF6	; 246
    33d2:	7f 4f       	sbci	r23, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    33d4:	89 01       	movw	r16, r18
    33d6:	0c 5f       	subi	r16, 0xFC	; 252
    33d8:	1f 4f       	sbci	r17, 0xFF	; 255
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    33da:	9b e0       	ldi	r25, 0x0B	; 11
    33dc:	e9 2e       	mov	r14, r25
    33de:	f1 2c       	mov	r15, r1
    33e0:	e2 0e       	add	r14, r18
    33e2:	f3 1e       	adc	r15, r19
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    33e4:	2c 91       	ld	r18, X
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	e9 01       	movw	r28, r18
    33ea:	95 e0       	ldi	r25, 0x05	; 5
    33ec:	cc 0f       	add	r28, r28
    33ee:	dd 1f       	adc	r29, r29
    33f0:	9a 95       	dec	r25
    33f2:	e1 f7       	brne	.-8      	; 0x33ec <nrk_add_to_readyQ+0x68>
    33f4:	c2 0f       	add	r28, r18
    33f6:	d3 1f       	adc	r29, r19
    33f8:	c6 56       	subi	r28, 0x66	; 102
    33fa:	d8 4f       	sbci	r29, 0xF8	; 248
    33fc:	9c 81       	ldd	r25, Y+4	; 0x04
    33fe:	99 23       	and	r25, r25
    3400:	29 f0       	breq	.+10     	; 0x340c <nrk_add_to_readyQ+0x88>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    3402:	db 84       	ldd	r13, Y+11	; 0x0b
    3404:	eb 01       	movw	r28, r22
    3406:	98 81       	ld	r25, Y
    3408:	d9 16       	cp	r13, r25
    340a:	58 f1       	brcs	.+86     	; 0x3462 <nrk_add_to_readyQ+0xde>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    340c:	e8 01       	movw	r28, r16
    340e:	98 81       	ld	r25, Y
    3410:	99 23       	and	r25, r25
    3412:	79 f0       	breq	.+30     	; 0x3432 <nrk_add_to_readyQ+0xae>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3414:	e9 01       	movw	r28, r18
    3416:	95 e0       	ldi	r25, 0x05	; 5
    3418:	cc 0f       	add	r28, r28
    341a:	dd 1f       	adc	r29, r29
    341c:	9a 95       	dec	r25
    341e:	e1 f7       	brne	.-8      	; 0x3418 <nrk_add_to_readyQ+0x94>
    3420:	c2 0f       	add	r28, r18
    3422:	d3 1f       	adc	r29, r19
    3424:	c6 56       	subi	r28, 0x66	; 102
    3426:	d8 4f       	sbci	r29, 0xF8	; 248
    3428:	da 84       	ldd	r13, Y+10	; 0x0a
    342a:	e7 01       	movw	r28, r14
    342c:	98 81       	ld	r25, Y
    342e:	d9 16       	cp	r13, r25
    3430:	c0 f0       	brcs	.+48     	; 0x3462 <nrk_add_to_readyQ+0xde>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3432:	e9 01       	movw	r28, r18
    3434:	95 e0       	ldi	r25, 0x05	; 5
    3436:	cc 0f       	add	r28, r28
    3438:	dd 1f       	adc	r29, r29
    343a:	9a 95       	dec	r25
    343c:	e1 f7       	brne	.-8      	; 0x3436 <nrk_add_to_readyQ+0xb2>
    343e:	c2 0f       	add	r28, r18
    3440:	d3 1f       	adc	r29, r19
    3442:	c6 56       	subi	r28, 0x66	; 102
    3444:	d8 4f       	sbci	r29, 0xF8	; 248
    3446:	2a 85       	ldd	r18, Y+10	; 0x0a
    3448:	eb 01       	movw	r28, r22
    344a:	98 81       	ld	r25, Y
    344c:	29 17       	cp	r18, r25
    344e:	48 f0       	brcs	.+18     	; 0x3462 <nrk_add_to_readyQ+0xde>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    3450:	13 96       	adiw	r26, 0x03	; 3
    3452:	0d 90       	ld	r0, X+
    3454:	bc 91       	ld	r27, X
    3456:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    3458:	10 97       	sbiw	r26, 0x00	; 0
    345a:	21 f6       	brne	.-120    	; 0x33e4 <nrk_add_to_readyQ+0x60>
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <nrk_add_to_readyQ+0xde>


    NextNode = _head_node;
    CurNode = _free_node;

    if (_head_node != NULL)
    345e:	a0 e0       	ldi	r26, 0x00	; 0
    3460:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    3462:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    3464:	c3 81       	ldd	r28, Z+3	; 0x03
    3466:	d4 81       	ldd	r29, Z+4	; 0x04
    3468:	d0 93 7e 04 	sts	0x047E, r29
    346c:	c0 93 7d 04 	sts	0x047D, r28

    if (NextNode == _head_node)
    3470:	a4 17       	cp	r26, r20
    3472:	b5 07       	cpc	r27, r21
    3474:	b1 f4       	brne	.+44     	; 0x34a2 <nrk_add_to_readyQ+0x11e>
    {
        //at start
        if (_head_node != NULL)
    3476:	10 97       	sbiw	r26, 0x00	; 0
    3478:	49 f0       	breq	.+18     	; 0x348c <nrk_add_to_readyQ+0x108>
        {
            CurNode->Next = _head_node;
    347a:	b4 83       	std	Z+4, r27	; 0x04
    347c:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    347e:	12 82       	std	Z+2, r1	; 0x02
    3480:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    3482:	12 96       	adiw	r26, 0x02	; 2
    3484:	fc 93       	st	X, r31
    3486:	ee 93       	st	-X, r30
    3488:	11 97       	sbiw	r26, 0x01	; 1
    348a:	06 c0       	rjmp	.+12     	; 0x3498 <nrk_add_to_readyQ+0x114>
        }
        else
        {
            CurNode->Next = NULL;
    348c:	14 82       	std	Z+4, r1	; 0x04
    348e:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    3490:	12 82       	std	Z+2, r1	; 0x02
    3492:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3494:	fa 83       	std	Y+2, r31	; 0x02
    3496:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    3498:	f0 93 96 05 	sts	0x0596, r31
    349c:	e0 93 95 05 	sts	0x0595, r30
    34a0:	1a c0       	rjmp	.+52     	; 0x34d6 <nrk_add_to_readyQ+0x152>
    34a2:	11 96       	adiw	r26, 0x01	; 1
    34a4:	8d 91       	ld	r24, X+
    34a6:	9c 91       	ld	r25, X
    34a8:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    34aa:	ac 17       	cp	r26, r28
    34ac:	bd 07       	cpc	r27, r29
    34ae:	59 f0       	breq	.+22     	; 0x34c6 <nrk_add_to_readyQ+0x142>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    34b0:	92 83       	std	Z+2, r25	; 0x02
    34b2:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    34b4:	b4 83       	std	Z+4, r27	; 0x04
    34b6:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    34b8:	11 96       	adiw	r26, 0x01	; 1
    34ba:	cd 91       	ld	r28, X+
    34bc:	dc 91       	ld	r29, X
    34be:	12 97       	sbiw	r26, 0x02	; 2
    34c0:	fc 83       	std	Y+4, r31	; 0x04
    34c2:	eb 83       	std	Y+3, r30	; 0x03
    34c4:	04 c0       	rjmp	.+8      	; 0x34ce <nrk_add_to_readyQ+0x14a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    34c6:	14 82       	std	Z+4, r1	; 0x04
    34c8:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    34ca:	92 83       	std	Z+2, r25	; 0x02
    34cc:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    34ce:	12 96       	adiw	r26, 0x02	; 2
    34d0:	fc 93       	st	X, r31
    34d2:	ee 93       	st	-X, r30
    34d4:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	1f 91       	pop	r17
    34dc:	0f 91       	pop	r16
    34de:	ff 90       	pop	r15
    34e0:	ef 90       	pop	r14
    34e2:	df 90       	pop	r13
    34e4:	08 95       	ret

000034e6 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    34ea:	e0 91 95 05 	lds	r30, 0x0595
    34ee:	f0 91 96 05 	lds	r31, 0x0596
    34f2:	30 97       	sbiw	r30, 0x00	; 0
    34f4:	09 f4       	brne	.+2      	; 0x34f8 <nrk_rem_from_readyQ+0x12>
    34f6:	44 c0       	rjmp	.+136    	; 0x3580 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    34f8:	99 27       	eor	r25, r25
    34fa:	87 fd       	sbrc	r24, 7
    34fc:	90 95       	com	r25
    34fe:	20 81       	ld	r18, Z
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	28 17       	cp	r18, r24
    3504:	39 07       	cpc	r19, r25
    3506:	81 f4       	brne	.+32     	; 0x3528 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    3508:	a3 81       	ldd	r26, Z+3	; 0x03
    350a:	b4 81       	ldd	r27, Z+4	; 0x04
    350c:	b0 93 96 05 	sts	0x0596, r27
    3510:	a0 93 95 05 	sts	0x0595, r26
        _head_node->Prev = NULL;
    3514:	12 96       	adiw	r26, 0x02	; 2
    3516:	1c 92       	st	X, r1
    3518:	1e 92       	st	-X, r1
    351a:	11 97       	sbiw	r26, 0x01	; 1
    351c:	18 c0       	rjmp	.+48     	; 0x354e <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    351e:	03 80       	ldd	r0, Z+3	; 0x03
    3520:	f4 81       	ldd	r31, Z+4	; 0x04
    3522:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    3524:	30 97       	sbiw	r30, 0x00	; 0
    3526:	61 f1       	breq	.+88     	; 0x3580 <nrk_rem_from_readyQ+0x9a>
    3528:	20 81       	ld	r18, Z
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	28 17       	cp	r18, r24
    352e:	39 07       	cpc	r19, r25
    3530:	b1 f7       	brne	.-20     	; 0x351e <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    3532:	c1 81       	ldd	r28, Z+1	; 0x01
    3534:	d2 81       	ldd	r29, Z+2	; 0x02
    3536:	83 81       	ldd	r24, Z+3	; 0x03
    3538:	94 81       	ldd	r25, Z+4	; 0x04
    353a:	9c 83       	std	Y+4, r25	; 0x04
    353c:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    353e:	a3 81       	ldd	r26, Z+3	; 0x03
    3540:	b4 81       	ldd	r27, Z+4	; 0x04
    3542:	10 97       	sbiw	r26, 0x00	; 0
    3544:	21 f0       	breq	.+8      	; 0x354e <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    3546:	12 96       	adiw	r26, 0x02	; 2
    3548:	dc 93       	st	X, r29
    354a:	ce 93       	st	-X, r28
    354c:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    354e:	a0 91 7d 04 	lds	r26, 0x047D
    3552:	b0 91 7e 04 	lds	r27, 0x047E
    3556:	10 97       	sbiw	r26, 0x00	; 0
    3558:	39 f4       	brne	.+14     	; 0x3568 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    355a:	f0 93 7e 04 	sts	0x047E, r31
    355e:	e0 93 7d 04 	sts	0x047D, r30
        _free_node->Next = NULL;
    3562:	14 82       	std	Z+4, r1	; 0x04
    3564:	13 82       	std	Z+3, r1	; 0x03
    3566:	0a c0       	rjmp	.+20     	; 0x357c <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    3568:	b4 83       	std	Z+4, r27	; 0x04
    356a:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    356c:	12 96       	adiw	r26, 0x02	; 2
    356e:	fc 93       	st	X, r31
    3570:	ee 93       	st	-X, r30
    3572:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    3574:	f0 93 7e 04 	sts	0x047E, r31
    3578:	e0 93 7d 04 	sts	0x047D, r30
    }
    _free_node->Prev = NULL;
    357c:	12 82       	std	Z+2, r1	; 0x02
    357e:	11 82       	std	Z+1, r1	; 0x01
}
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	08 95       	ret

00003586 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3586:	ef 92       	push	r14
    3588:	ff 92       	push	r15
    358a:	0f 93       	push	r16
    358c:	1f 93       	push	r17
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
    3592:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    3594:	69 81       	ldd	r22, Y+1	; 0x01
    3596:	7a 81       	ldd	r23, Y+2	; 0x02
    3598:	4b 81       	ldd	r20, Y+3	; 0x03
    359a:	5c 81       	ldd	r21, Y+4	; 0x04
    359c:	8d 81       	ldd	r24, Y+5	; 0x05
    359e:	9e 81       	ldd	r25, Y+6	; 0x06
    35a0:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <nrk_task_stk_init>
    35a4:	bc 01       	movw	r22, r24
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    35a6:	8f 81       	ldd	r24, Y+7	; 0x07
    35a8:	88 23       	and	r24, r24
    35aa:	69 f0       	breq	.+26     	; 0x35c6 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    35ac:	4b 81       	ldd	r20, Y+3	; 0x03
    35ae:	5c 81       	ldd	r21, Y+4	; 0x04
    35b0:	ce 01       	movw	r24, r28
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	00 e0       	ldi	r16, 0x00	; 0
    35b8:	10 e0       	ldi	r17, 0x00	; 0
    35ba:	ee 24       	eor	r14, r14
    35bc:	ff 24       	eor	r15, r15
    35be:	0e 94 99 12 	call	0x2532	; 0x2532 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    35c2:	1f 82       	std	Y+7, r1	; 0x07
    35c4:	13 c0       	rjmp	.+38     	; 0x35ec <nrk_activate_task+0x66>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    35c6:	88 81       	ld	r24, Y
    35c8:	99 27       	eor	r25, r25
    35ca:	87 fd       	sbrc	r24, 7
    35cc:	90 95       	com	r25
    35ce:	fc 01       	movw	r30, r24
    35d0:	25 e0       	ldi	r18, 0x05	; 5
    35d2:	ee 0f       	add	r30, r30
    35d4:	ff 1f       	adc	r31, r31
    35d6:	2a 95       	dec	r18
    35d8:	e1 f7       	brne	.-8      	; 0x35d2 <nrk_activate_task+0x4c>
    35da:	e8 0f       	add	r30, r24
    35dc:	f9 1f       	adc	r31, r25
    35de:	e6 56       	subi	r30, 0x66	; 102
    35e0:	f8 4f       	sbci	r31, 0xF8	; 248
    35e2:	81 85       	ldd	r24, Z+9	; 0x09
    35e4:	83 30       	cpi	r24, 0x03	; 3
    35e6:	d1 f4       	brne	.+52     	; 0x361c <nrk_activate_task+0x96>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    35e8:	71 83       	std	Z+1, r23	; 0x01
    35ea:	60 83       	st	Z, r22
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    35ec:	88 81       	ld	r24, Y
    35ee:	99 27       	eor	r25, r25
    35f0:	87 fd       	sbrc	r24, 7
    35f2:	90 95       	com	r25
    35f4:	fc 01       	movw	r30, r24
    35f6:	05 e0       	ldi	r16, 0x05	; 5
    35f8:	ee 0f       	add	r30, r30
    35fa:	ff 1f       	adc	r31, r31
    35fc:	0a 95       	dec	r16
    35fe:	e1 f7       	brne	.-8      	; 0x35f8 <nrk_activate_task+0x72>
    3600:	e8 0f       	add	r30, r24
    3602:	f9 1f       	adc	r31, r25
    3604:	e6 56       	subi	r30, 0x66	; 102
    3606:	f8 4f       	sbci	r31, 0xF8	; 248
    3608:	85 89       	ldd	r24, Z+21	; 0x15
    360a:	96 89       	ldd	r25, Z+22	; 0x16
    360c:	00 97       	sbiw	r24, 0x00	; 0
    360e:	41 f4       	brne	.+16     	; 0x3620 <nrk_activate_task+0x9a>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    3610:	82 e0       	ldi	r24, 0x02	; 2
    3612:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    3614:	88 81       	ld	r24, Y
    3616:	0e 94 c2 19 	call	0x3384	; 0x3384 <nrk_add_to_readyQ>
    361a:	02 c0       	rjmp	.+4      	; 0x3620 <nrk_activate_task+0x9a>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    361c:	8f ef       	ldi	r24, 0xFF	; 255
    361e:	01 c0       	rjmp	.+2      	; 0x3622 <nrk_activate_task+0x9c>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    3620:	81 e0       	ldi	r24, 0x01	; 1
}
    3622:	df 91       	pop	r29
    3624:	cf 91       	pop	r28
    3626:	1f 91       	pop	r17
    3628:	0f 91       	pop	r16
    362a:	ff 90       	pop	r15
    362c:	ef 90       	pop	r14
    362e:	08 95       	ret

00003630 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    3630:	1f 93       	push	r17
    3632:	df 93       	push	r29
    3634:	cf 93       	push	r28
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
    363a:	28 97       	sbiw	r28, 0x08	; 8
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	cd bf       	out	0x3d, r28	; 61
    3646:	29 83       	std	Y+1, r18	; 0x01
    3648:	3a 83       	std	Y+2, r19	; 0x02
    364a:	4b 83       	std	Y+3, r20	; 0x03
    364c:	5c 83       	std	Y+4, r21	; 0x04
    364e:	6d 83       	std	Y+5, r22	; 0x05
    3650:	7e 83       	std	Y+6, r23	; 0x06
    3652:	8f 83       	std	Y+7, r24	; 0x07
    3654:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    3656:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    365a:	0e 94 8a 23 	call	0x4714	; 0x4714 <_nrk_os_timer_get>
    365e:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks (&t);
    3660:	ce 01       	movw	r24, r28
    3662:	01 96       	adiw	r24, 0x01	; 1
    3664:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_nrk_time_to_ticks>
    3668:	9c 01       	movw	r18, r24
    if (nw <= TIME_PAD)
    366a:	83 30       	cpi	r24, 0x03	; 3
    366c:	91 05       	cpc	r25, r1
    366e:	60 f0       	brcs	.+24     	; 0x3688 <nrk_set_next_wakeup+0x58>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3670:	e0 91 19 06 	lds	r30, 0x0619
    3674:	f0 91 1a 06 	lds	r31, 0x061A
    3678:	21 0f       	add	r18, r17
    367a:	31 1d       	adc	r19, r1
    367c:	36 8b       	std	Z+22, r19	; 0x16
    367e:	25 8b       	std	Z+21, r18	; 0x15
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    3680:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>

    return NRK_OK;
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	01 c0       	rjmp	.+2      	; 0x368a <nrk_set_next_wakeup+0x5a>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks (&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    3688:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    368a:	28 96       	adiw	r28, 0x08	; 8
    368c:	0f b6       	in	r0, 0x3f	; 63
    368e:	f8 94       	cli
    3690:	de bf       	out	0x3e, r29	; 62
    3692:	0f be       	out	0x3f, r0	; 63
    3694:	cd bf       	out	0x3d, r28	; 61
    3696:	cf 91       	pop	r28
    3698:	df 91       	pop	r29
    369a:	1f 91       	pop	r17
    369c:	08 95       	ret

0000369e <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    369e:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    36a2:	e0 91 19 06 	lds	r30, 0x0619
    36a6:	f0 91 1a 06 	lds	r31, 0x061A
    36aa:	85 81       	ldd	r24, Z+5	; 0x05
    36ac:	88 23       	and	r24, r24
    36ae:	b9 f7       	brne	.-18     	; 0x369e <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    36b0:	08 95       	ret

000036b2 <nrk_wait>:
    return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    36b2:	ff 92       	push	r15
    36b4:	0f 93       	push	r16
    36b6:	1f 93       	push	r17
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    36c0:	28 97       	sbiw	r28, 0x08	; 8
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
    36cc:	29 83       	std	Y+1, r18	; 0x01
    36ce:	3a 83       	std	Y+2, r19	; 0x02
    36d0:	4b 83       	std	Y+3, r20	; 0x03
    36d2:	5c 83       	std	Y+4, r21	; 0x04
    36d4:	6d 83       	std	Y+5, r22	; 0x05
    36d6:	7e 83       	std	Y+6, r23	; 0x06
    36d8:	8f 83       	std	Y+7, r24	; 0x07
    36da:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;

    nrk_stack_check ();
    36dc:	0e 94 83 16 	call	0x2d06	; 0x2d06 <nrk_stack_check>

    nrk_int_disable ();
    36e0:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    36e4:	e0 91 19 06 	lds	r30, 0x0619
    36e8:	f0 91 1a 06 	lds	r31, 0x061A
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	90 a3       	std	Z+32, r25	; 0x20
    36f6:	87 8f       	std	Z+31, r24	; 0x1f
    timer = _nrk_os_timer_get ();
    36f8:	0e 94 8a 23 	call	0x4714	; 0x4714 <_nrk_os_timer_get>
    36fc:	f8 2e       	mov	r15, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks (&t);
    36fe:	ce 01       	movw	r24, r28
    3700:	01 96       	adiw	r24, 0x01	; 1
    3702:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <_nrk_time_to_ticks>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3706:	e0 91 19 06 	lds	r30, 0x0619
    370a:	f0 91 1a 06 	lds	r31, 0x061A
    370e:	0f 2d       	mov	r16, r15
    3710:	10 e0       	ldi	r17, 0x00	; 0
    3712:	98 01       	movw	r18, r16
    3714:	28 0f       	add	r18, r24
    3716:	39 1f       	adc	r19, r25
    3718:	36 8b       	std	Z+22, r19	; 0x16
    371a:	25 8b       	std	Z+21, r18	; 0x15
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    371c:	8f 2d       	mov	r24, r15
    371e:	88 3f       	cpi	r24, 0xF8	; 248
    3720:	78 f4       	brcc	.+30     	; 0x3740 <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3722:	0e 94 21 23 	call	0x4642	; 0x4642 <_nrk_get_next_wakeup>
    3726:	0f 5f       	subi	r16, 0xFF	; 255
    3728:	1f 4f       	sbci	r17, 0xFF	; 255
    372a:	28 2f       	mov	r18, r24
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	02 17       	cp	r16, r18
    3730:	13 07       	cpc	r17, r19
    3732:	34 f4       	brge	.+12     	; 0x3740 <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    3734:	8f 2d       	mov	r24, r15
    3736:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3738:	80 93 67 07 	sts	0x0767, r24
            _nrk_set_next_wakeup (timer);
    373c:	0e 94 25 23 	call	0x464a	; 0x464a <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    3740:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    3744:	0e 94 4f 1b 	call	0x369e	; 0x369e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	28 96       	adiw	r28, 0x08	; 8
    374c:	0f b6       	in	r0, 0x3f	; 63
    374e:	f8 94       	cli
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	0f be       	out	0x3f, r0	; 63
    3754:	cd bf       	out	0x3d, r28	; 61
    3756:	cf 91       	pop	r28
    3758:	df 91       	pop	r29
    375a:	1f 91       	pop	r17
    375c:	0f 91       	pop	r16
    375e:	ff 90       	pop	r15
    3760:	08 95       	ret

00003762 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    3762:	1f 93       	push	r17
    uint8_t timer;
    nrk_int_disable ();
    3764:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3768:	e0 91 19 06 	lds	r30, 0x0619
    376c:	f0 91 1a 06 	lds	r31, 0x061A
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    3774:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    3776:	0e 94 8a 23 	call	0x4714	; 0x4714 <_nrk_os_timer_get>
    377a:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    377c:	88 3f       	cpi	r24, 0xF8	; 248
    377e:	88 f4       	brcc	.+34     	; 0x37a2 <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3780:	0e 94 21 23 	call	0x4642	; 0x4642 <_nrk_get_next_wakeup>
    3784:	21 2f       	mov	r18, r17
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	2f 5f       	subi	r18, 0xFF	; 255
    378a:	3f 4f       	sbci	r19, 0xFF	; 255
    378c:	48 2f       	mov	r20, r24
    378e:	50 e0       	ldi	r21, 0x00	; 0
    3790:	24 17       	cp	r18, r20
    3792:	35 07       	cpc	r19, r21
    3794:	34 f4       	brge	.+12     	; 0x37a2 <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    3796:	81 2f       	mov	r24, r17
    3798:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    379a:	80 93 67 07 	sts	0x0767, r24
            _nrk_set_next_wakeup (timer);
    379e:	0e 94 25 23 	call	0x464a	; 0x464a <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    37a2:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    37a6:	0e 94 4f 1b 	call	0x369e	; 0x369e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	1f 91       	pop	r17
    37ae:	08 95       	ret

000037b0 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    37b0:	1f 93       	push	r17
    37b2:	cf 93       	push	r28
    37b4:	df 93       	push	r29
    37b6:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    37b8:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    37bc:	e0 91 19 06 	lds	r30, 0x0619
    37c0:	f0 91 1a 06 	lds	r31, 0x061A
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    37c8:	d6 8b       	std	Z+22, r29	; 0x16
    37ca:	c5 8b       	std	Z+21, r28	; 0x15
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    37cc:	0e 94 8a 23 	call	0x4714	; 0x4714 <_nrk_os_timer_get>
    37d0:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    37d2:	88 3f       	cpi	r24, 0xF8	; 248
    37d4:	88 f4       	brcc	.+34     	; 0x37f8 <nrk_wait_until_ticks+0x48>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    37d6:	0e 94 21 23 	call	0x4642	; 0x4642 <_nrk_get_next_wakeup>
    37da:	21 2f       	mov	r18, r17
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	2f 5f       	subi	r18, 0xFF	; 255
    37e0:	3f 4f       	sbci	r19, 0xFF	; 255
    37e2:	48 2f       	mov	r20, r24
    37e4:	50 e0       	ldi	r21, 0x00	; 0
    37e6:	24 17       	cp	r18, r20
    37e8:	35 07       	cpc	r19, r21
    37ea:	34 f4       	brge	.+12     	; 0x37f8 <nrk_wait_until_ticks+0x48>
        {
            timer += TIME_PAD;
    37ec:	81 2f       	mov	r24, r17
    37ee:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    37f0:	80 93 67 07 	sts	0x0767, r24
            _nrk_set_next_wakeup (timer);
    37f4:	0e 94 25 23 	call	0x464a	; 0x464a <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    37f8:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    37fc:	0e 94 4f 1b 	call	0x369e	; 0x369e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	df 91       	pop	r29
    3804:	cf 91       	pop	r28
    3806:	1f 91       	pop	r17
    3808:	08 95       	ret

0000380a <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    380a:	ef 92       	push	r14
    380c:	ff 92       	push	r15
    380e:	0f 93       	push	r16
    3810:	1f 93       	push	r17
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	0f 92       	push	r0
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
    381c:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    381e:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3822:	e0 91 19 06 	lds	r30, 0x0619
    3826:	f0 91 1a 06 	lds	r31, 0x061A
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    382e:	0e 94 8a 23 	call	0x4714	; 0x4714 <_nrk_os_timer_get>
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    3832:	e0 91 19 06 	lds	r30, 0x0619
    3836:	f0 91 1a 06 	lds	r31, 0x061A
    383a:	e8 2e       	mov	r14, r24
    383c:	ff 24       	eor	r15, r15
    383e:	0e 0d       	add	r16, r14
    3840:	1f 1d       	adc	r17, r15
    3842:	16 8b       	std	Z+22, r17	; 0x16
    3844:	05 8b       	std	Z+21, r16	; 0x15

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3846:	88 3f       	cpi	r24, 0xF8	; 248
    3848:	90 f4       	brcc	.+36     	; 0x386e <nrk_wait_ticks+0x64>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    384a:	89 83       	std	Y+1, r24	; 0x01
    384c:	0e 94 21 23 	call	0x4642	; 0x4642 <_nrk_get_next_wakeup>
    3850:	08 94       	sec
    3852:	e1 1c       	adc	r14, r1
    3854:	f1 1c       	adc	r15, r1
    3856:	28 2f       	mov	r18, r24
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	99 81       	ldd	r25, Y+1	; 0x01
    385c:	e2 16       	cp	r14, r18
    385e:	f3 06       	cpc	r15, r19
    3860:	34 f4       	brge	.+12     	; 0x386e <nrk_wait_ticks+0x64>
        {
            timer += TIME_PAD;
    3862:	89 2f       	mov	r24, r25
    3864:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3866:	80 93 67 07 	sts	0x0767, r24
            _nrk_set_next_wakeup (timer);
    386a:	0e 94 25 23 	call	0x464a	; 0x464a <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    386e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3872:	0e 94 4f 1b 	call	0x369e	; 0x369e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	0f 90       	pop	r0
    387a:	cf 91       	pop	r28
    387c:	df 91       	pop	r29
    387e:	1f 91       	pop	r17
    3880:	0f 91       	pop	r16
    3882:	ff 90       	pop	r15
    3884:	ef 90       	pop	r14
    3886:	08 95       	ret

00003888 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    3888:	1f 93       	push	r17
    388a:	cf 93       	push	r28
    388c:	df 93       	push	r29
    388e:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    3890:	0e 94 83 16 	call	0x2d06	; 0x2d06 <nrk_stack_check>

    if (p == 0)
    3894:	20 97       	sbiw	r28, 0x00	; 0
    3896:	11 f4       	brne	.+4      	; 0x389c <nrk_wait_until_next_n_periods+0x14>
        p = 1;
    3898:	c1 e0       	ldi	r28, 0x01	; 1
    389a:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    389c:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    38a0:	e0 91 19 06 	lds	r30, 0x0619
    38a4:	f0 91 1a 06 	lds	r31, 0x061A
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    38ac:	d0 a3       	std	Z+32, r29	; 0x20
    38ae:	c7 8f       	std	Z+31, r28	; 0x1f
    timer = _nrk_os_timer_get ();
    38b0:	0e 94 8a 23 	call	0x4714	; 0x4714 <_nrk_os_timer_get>
    38b4:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    38b6:	88 3f       	cpi	r24, 0xF8	; 248
    38b8:	88 f4       	brcc	.+34     	; 0x38dc <nrk_wait_until_next_n_periods+0x54>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    38ba:	0e 94 21 23 	call	0x4642	; 0x4642 <_nrk_get_next_wakeup>
    38be:	21 2f       	mov	r18, r17
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	2f 5f       	subi	r18, 0xFF	; 255
    38c4:	3f 4f       	sbci	r19, 0xFF	; 255
    38c6:	48 2f       	mov	r20, r24
    38c8:	50 e0       	ldi	r21, 0x00	; 0
    38ca:	24 17       	cp	r18, r20
    38cc:	35 07       	cpc	r19, r21
    38ce:	34 f4       	brge	.+12     	; 0x38dc <nrk_wait_until_next_n_periods+0x54>
        {
            timer += TIME_PAD;
    38d0:	81 2f       	mov	r24, r17
    38d2:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    38d4:	80 93 67 07 	sts	0x0767, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    38d8:	0e 94 25 23 	call	0x464a	; 0x464a <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    38dc:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    38e0:	0e 94 4f 1b 	call	0x369e	; 0x369e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	df 91       	pop	r29
    38e8:	cf 91       	pop	r28
    38ea:	1f 91       	pop	r17
    38ec:	08 95       	ret

000038ee <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    38ee:	1f 93       	push	r17
    uint8_t timer;

    nrk_stack_check ();
    38f0:	0e 94 83 16 	call	0x2d06	; 0x2d06 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    38f4:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    38f8:	e0 91 19 06 	lds	r30, 0x0619
    38fc:	f0 91 1a 06 	lds	r31, 0x061A
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	90 a3       	std	Z+32, r25	; 0x20
    3906:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_cur_task_TCB->suspend_flag = 1;
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    390c:	0e 94 8a 23 	call	0x4714	; 0x4714 <_nrk_os_timer_get>
    3910:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3912:	88 3f       	cpi	r24, 0xF8	; 248
    3914:	88 f4       	brcc	.+34     	; 0x3938 <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3916:	0e 94 21 23 	call	0x4642	; 0x4642 <_nrk_get_next_wakeup>
    391a:	21 2f       	mov	r18, r17
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	2f 5f       	subi	r18, 0xFF	; 255
    3920:	3f 4f       	sbci	r19, 0xFF	; 255
    3922:	48 2f       	mov	r20, r24
    3924:	50 e0       	ldi	r21, 0x00	; 0
    3926:	24 17       	cp	r18, r20
    3928:	35 07       	cpc	r19, r21
    392a:	34 f4       	brge	.+12     	; 0x3938 <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    392c:	81 2f       	mov	r24, r17
    392e:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    3930:	80 93 67 07 	sts	0x0767, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3934:	0e 94 25 23 	call	0x464a	; 0x464a <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3938:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    393c:	0e 94 4f 1b 	call	0x369e	; 0x369e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	1f 91       	pop	r17
    3944:	08 95       	ret

00003946 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    3946:	e0 91 19 06 	lds	r30, 0x0619
    394a:	f0 91 1a 06 	lds	r31, 0x061A
    394e:	80 85       	ldd	r24, Z+8	; 0x08
    3950:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    3954:	e0 91 19 06 	lds	r30, 0x0619
    3958:	f0 91 1a 06 	lds	r31, 0x061A
    395c:	84 e0       	ldi	r24, 0x04	; 4
    395e:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    3960:	0e 94 77 1c 	call	0x38ee	; 0x38ee <nrk_wait_until_next_period>
    return NRK_OK;
}
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	08 95       	ret

00003968 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    3968:	8f 92       	push	r8
    396a:	9f 92       	push	r9
    396c:	af 92       	push	r10
    396e:	bf 92       	push	r11
    3970:	cf 92       	push	r12
    3972:	df 92       	push	r13
    3974:	ef 92       	push	r14
    3976:	ff 92       	push	r15
    3978:	0f 93       	push	r16
    397a:	1f 93       	push	r17
    397c:	df 93       	push	r29
    397e:	cf 93       	push	r28
    3980:	cd b7       	in	r28, 0x3d	; 61
    3982:	de b7       	in	r29, 0x3e	; 62
    3984:	60 97       	sbiw	r28, 0x10	; 16
    3986:	0f b6       	in	r0, 0x3f	; 63
    3988:	f8 94       	cli
    398a:	de bf       	out	0x3e, r29	; 62
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	cd bf       	out	0x3d, r28	; 61
    3990:	29 87       	std	Y+9, r18	; 0x09
    3992:	3a 87       	std	Y+10, r19	; 0x0a
    3994:	4b 87       	std	Y+11, r20	; 0x0b
    3996:	5c 87       	std	Y+12, r21	; 0x0c
    3998:	6d 87       	std	Y+13, r22	; 0x0d
    399a:	7e 87       	std	Y+14, r23	; 0x0e
    399c:	8f 87       	std	Y+15, r24	; 0x0f
    399e:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    39a0:	ce 01       	movw	r24, r28
    39a2:	01 96       	adiw	r24, 0x01	; 1
    39a4:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    39a8:	ce 01       	movw	r24, r28
    39aa:	09 96       	adiw	r24, 0x09	; 9
    39ac:	09 85       	ldd	r16, Y+9	; 0x09
    39ae:	1a 85       	ldd	r17, Y+10	; 0x0a
    39b0:	2b 85       	ldd	r18, Y+11	; 0x0b
    39b2:	3c 85       	ldd	r19, Y+12	; 0x0c
    39b4:	4d 85       	ldd	r20, Y+13	; 0x0d
    39b6:	5e 85       	ldd	r21, Y+14	; 0x0e
    39b8:	6f 85       	ldd	r22, Y+15	; 0x0f
    39ba:	78 89       	ldd	r23, Y+16	; 0x10
    39bc:	89 80       	ldd	r8, Y+1	; 0x01
    39be:	9a 80       	ldd	r9, Y+2	; 0x02
    39c0:	ab 80       	ldd	r10, Y+3	; 0x03
    39c2:	bc 80       	ldd	r11, Y+4	; 0x04
    39c4:	cd 80       	ldd	r12, Y+5	; 0x05
    39c6:	de 80       	ldd	r13, Y+6	; 0x06
    39c8:	ef 80       	ldd	r14, Y+7	; 0x07
    39ca:	f8 84       	ldd	r15, Y+8	; 0x08
    39cc:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    39d0:	8f 3f       	cpi	r24, 0xFF	; 255
    39d2:	61 f0       	breq	.+24     	; 0x39ec <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    39d4:	29 85       	ldd	r18, Y+9	; 0x09
    39d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    39d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    39da:	5c 85       	ldd	r21, Y+12	; 0x0c
    39dc:	6d 85       	ldd	r22, Y+13	; 0x0d
    39de:	7e 85       	ldd	r23, Y+14	; 0x0e
    39e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    39e2:	98 89       	ldd	r25, Y+16	; 0x10
    39e4:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <nrk_wait>

    return NRK_OK;
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	01 c0       	rjmp	.+2      	; 0x39ee <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    39ec:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    39ee:	60 96       	adiw	r28, 0x10	; 16
    39f0:	0f b6       	in	r0, 0x3f	; 63
    39f2:	f8 94       	cli
    39f4:	de bf       	out	0x3e, r29	; 62
    39f6:	0f be       	out	0x3f, r0	; 63
    39f8:	cd bf       	out	0x3d, r28	; 61
    39fa:	cf 91       	pop	r28
    39fc:	df 91       	pop	r29
    39fe:	1f 91       	pop	r17
    3a00:	0f 91       	pop	r16
    3a02:	ff 90       	pop	r15
    3a04:	ef 90       	pop	r14
    3a06:	df 90       	pop	r13
    3a08:	cf 90       	pop	r12
    3a0a:	bf 90       	pop	r11
    3a0c:	af 90       	pop	r10
    3a0e:	9f 90       	pop	r9
    3a10:	8f 90       	pop	r8
    3a12:	08 95       	ret

00003a14 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    3a14:	e0 91 19 06 	lds	r30, 0x0619
    3a18:	f0 91 1a 06 	lds	r31, 0x061A
}
    3a1c:	80 85       	ldd	r24, Z+8	; 0x08
    3a1e:	08 95       	ret

00003a20 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    3a20:	ef 92       	push	r14
    3a22:	ff 92       	push	r15
    3a24:	0f 93       	push	r16
    3a26:	1f 93       	push	r17
    3a28:	cf 93       	push	r28
    3a2a:	df 93       	push	r29
    3a2c:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    3a2e:	1c 82       	std	Y+4, r1	; 0x04
    3a30:	1d 82       	std	Y+5, r1	; 0x05
    3a32:	1e 82       	std	Y+6, r1	; 0x06
    3a34:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    3a36:	80 91 97 05 	lds	r24, 0x0597
    3a3a:	90 91 98 05 	lds	r25, 0x0598
    3a3e:	a0 91 99 05 	lds	r26, 0x0599
    3a42:	b0 91 9a 05 	lds	r27, 0x059A
    3a46:	88 83       	st	Y, r24
    3a48:	99 83       	std	Y+1, r25	; 0x01
    3a4a:	aa 83       	std	Y+2, r26	; 0x02
    3a4c:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    3a4e:	e0 90 9b 05 	lds	r14, 0x059B
    3a52:	f0 90 9c 05 	lds	r15, 0x059C
    3a56:	00 91 9d 05 	lds	r16, 0x059D
    3a5a:	10 91 9e 05 	lds	r17, 0x059E
    3a5e:	ec 82       	std	Y+4, r14	; 0x04
    3a60:	fd 82       	std	Y+5, r15	; 0x05
    3a62:	0e 83       	std	Y+6, r16	; 0x06
    3a64:	1f 83       	std	Y+7, r17	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    3a66:	0e 94 8a 23 	call	0x4714	; 0x4714 <_nrk_os_timer_get>
    3a6a:	68 2f       	mov	r22, r24
    3a6c:	70 e0       	ldi	r23, 0x00	; 0
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	23 eb       	ldi	r18, 0xB3	; 179
    3a74:	36 ee       	ldi	r19, 0xE6	; 230
    3a76:	4e e0       	ldi	r20, 0x0E	; 14
    3a78:	50 e0       	ldi	r21, 0x00	; 0
    3a7a:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    3a7e:	6e 0d       	add	r22, r14
    3a80:	7f 1d       	adc	r23, r15
    3a82:	80 1f       	adc	r24, r16
    3a84:	91 1f       	adc	r25, r17
    3a86:	6c 83       	std	Y+4, r22	; 0x04
    3a88:	7d 83       	std	Y+5, r23	; 0x05
    3a8a:	8e 83       	std	Y+6, r24	; 0x06
    3a8c:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3a8e:	13 c0       	rjmp	.+38     	; 0x3ab6 <nrk_time_get+0x96>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    3a90:	80 50       	subi	r24, 0x00	; 0
    3a92:	9a 4c       	sbci	r25, 0xCA	; 202
    3a94:	aa 49       	sbci	r26, 0x9A	; 154
    3a96:	bb 43       	sbci	r27, 0x3B	; 59
    3a98:	8c 83       	std	Y+4, r24	; 0x04
    3a9a:	9d 83       	std	Y+5, r25	; 0x05
    3a9c:	ae 83       	std	Y+6, r26	; 0x06
    3a9e:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    3aa0:	88 81       	ld	r24, Y
    3aa2:	99 81       	ldd	r25, Y+1	; 0x01
    3aa4:	aa 81       	ldd	r26, Y+2	; 0x02
    3aa6:	bb 81       	ldd	r27, Y+3	; 0x03
    3aa8:	01 96       	adiw	r24, 0x01	; 1
    3aaa:	a1 1d       	adc	r26, r1
    3aac:	b1 1d       	adc	r27, r1
    3aae:	88 83       	st	Y, r24
    3ab0:	99 83       	std	Y+1, r25	; 0x01
    3ab2:	aa 83       	std	Y+2, r26	; 0x02
    3ab4:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    3aba:	ae 81       	ldd	r26, Y+6	; 0x06
    3abc:	bf 81       	ldd	r27, Y+7	; 0x07
    3abe:	80 30       	cpi	r24, 0x00	; 0
    3ac0:	2a ec       	ldi	r18, 0xCA	; 202
    3ac2:	92 07       	cpc	r25, r18
    3ac4:	2a e9       	ldi	r18, 0x9A	; 154
    3ac6:	a2 07       	cpc	r26, r18
    3ac8:	2b e3       	ldi	r18, 0x3B	; 59
    3aca:	b2 07       	cpc	r27, r18
    3acc:	08 f7       	brcc	.-62     	; 0x3a90 <nrk_time_get+0x70>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }

}
    3ace:	df 91       	pop	r29
    3ad0:	cf 91       	pop	r28
    3ad2:	1f 91       	pop	r17
    3ad4:	0f 91       	pop	r16
    3ad6:	ff 90       	pop	r15
    3ad8:	ef 90       	pop	r14
    3ada:	08 95       	ret

00003adc <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    3adc:	8f 92       	push	r8
    3ade:	9f 92       	push	r9
    3ae0:	af 92       	push	r10
    3ae2:	bf 92       	push	r11
    3ae4:	cf 92       	push	r12
    3ae6:	df 92       	push	r13
    3ae8:	ef 92       	push	r14
    3aea:	ff 92       	push	r15
    3aec:	0f 93       	push	r16
    3aee:	1f 93       	push	r17
    3af0:	df 93       	push	r29
    3af2:	cf 93       	push	r28
    3af4:	cd b7       	in	r28, 0x3d	; 61
    3af6:	de b7       	in	r29, 0x3e	; 62
    3af8:	60 97       	sbiw	r28, 0x10	; 16
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	cd bf       	out	0x3d, r28	; 61
    3b04:	fc 01       	movw	r30, r24
    3b06:	09 83       	std	Y+1, r16	; 0x01
    3b08:	1a 83       	std	Y+2, r17	; 0x02
    3b0a:	2b 83       	std	Y+3, r18	; 0x03
    3b0c:	3c 83       	std	Y+4, r19	; 0x04
    3b0e:	4d 83       	std	Y+5, r20	; 0x05
    3b10:	5e 83       	std	Y+6, r21	; 0x06
    3b12:	6f 83       	std	Y+7, r22	; 0x07
    3b14:	78 87       	std	Y+8, r23	; 0x08
    3b16:	89 86       	std	Y+9, r8	; 0x09
    3b18:	9a 86       	std	Y+10, r9	; 0x0a
    3b1a:	ab 86       	std	Y+11, r10	; 0x0b
    3b1c:	bc 86       	std	Y+12, r11	; 0x0c
    3b1e:	cd 86       	std	Y+13, r12	; 0x0d
    3b20:	de 86       	std	Y+14, r13	; 0x0e
    3b22:	ef 86       	std	Y+15, r14	; 0x0f
    3b24:	f8 8a       	std	Y+16, r15	; 0x10
	return NRK_OK;
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
    3b26:	e9 80       	ldd	r14, Y+1	; 0x01
    3b28:	fa 80       	ldd	r15, Y+2	; 0x02
    3b2a:	0b 81       	ldd	r16, Y+3	; 0x03
    3b2c:	1c 81       	ldd	r17, Y+4	; 0x04
    3b2e:	2d 81       	ldd	r18, Y+5	; 0x05
    3b30:	3e 81       	ldd	r19, Y+6	; 0x06
    3b32:	4f 81       	ldd	r20, Y+7	; 0x07
    3b34:	58 85       	ldd	r21, Y+8	; 0x08
    3b36:	a9 84       	ldd	r10, Y+9	; 0x09
    3b38:	ba 84       	ldd	r11, Y+10	; 0x0a
    3b3a:	cb 84       	ldd	r12, Y+11	; 0x0b
    3b3c:	dc 84       	ldd	r13, Y+12	; 0x0c
    3b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b42:	af 85       	ldd	r26, Y+15	; 0x0f
    3b44:	b8 89       	ldd	r27, Y+16	; 0x10
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    3b46:	ea 14       	cp	r14, r10
    3b48:	fb 04       	cpc	r15, r11
    3b4a:	0c 05       	cpc	r16, r12
    3b4c:	1d 05       	cpc	r17, r13
    3b4e:	08 f4       	brcc	.+2      	; 0x3b52 <nrk_time_sub+0x76>
    3b50:	40 c0       	rjmp	.+128    	; 0x3bd2 <nrk_time_sub+0xf6>
if(low.secs==high.secs)
    3b52:	ae 14       	cp	r10, r14
    3b54:	bf 04       	cpc	r11, r15
    3b56:	c0 06       	cpc	r12, r16
    3b58:	d1 06       	cpc	r13, r17
    3b5a:	91 f4       	brne	.+36     	; 0x3b80 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3b5c:	28 17       	cp	r18, r24
    3b5e:	39 07       	cpc	r19, r25
    3b60:	4a 07       	cpc	r20, r26
    3b62:	5b 07       	cpc	r21, r27
    3b64:	b0 f1       	brcs	.+108    	; 0x3bd2 <nrk_time_sub+0xf6>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3b66:	28 1b       	sub	r18, r24
    3b68:	39 0b       	sbc	r19, r25
    3b6a:	4a 0b       	sbc	r20, r26
    3b6c:	5b 0b       	sbc	r21, r27
    3b6e:	24 83       	std	Z+4, r18	; 0x04
    3b70:	35 83       	std	Z+5, r19	; 0x05
    3b72:	46 83       	std	Z+6, r20	; 0x06
    3b74:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    3b76:	10 82       	st	Z, r1
    3b78:	11 82       	std	Z+1, r1	; 0x01
    3b7a:	12 82       	std	Z+2, r1	; 0x02
    3b7c:	13 82       	std	Z+3, r1	; 0x03
    3b7e:	27 c0       	rjmp	.+78     	; 0x3bce <nrk_time_sub+0xf2>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3b80:	28 17       	cp	r18, r24
    3b82:	39 07       	cpc	r19, r25
    3b84:	4a 07       	cpc	r20, r26
    3b86:	5b 07       	cpc	r21, r27
    3b88:	90 f4       	brcc	.+36     	; 0x3bae <nrk_time_sub+0xd2>
{
	high.secs--;
    3b8a:	08 94       	sec
    3b8c:	e1 08       	sbc	r14, r1
    3b8e:	f1 08       	sbc	r15, r1
    3b90:	01 09       	sbc	r16, r1
    3b92:	11 09       	sbc	r17, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3b94:	ea 18       	sub	r14, r10
    3b96:	fb 08       	sbc	r15, r11
    3b98:	0c 09       	sbc	r16, r12
    3b9a:	1d 09       	sbc	r17, r13
    3b9c:	e0 82       	st	Z, r14
    3b9e:	f1 82       	std	Z+1, r15	; 0x01
    3ba0:	02 83       	std	Z+2, r16	; 0x02
    3ba2:	13 83       	std	Z+3, r17	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    3ba4:	20 50       	subi	r18, 0x00	; 0
    3ba6:	36 43       	sbci	r19, 0x36	; 54
    3ba8:	45 46       	sbci	r20, 0x65	; 101
    3baa:	54 4c       	sbci	r21, 0xC4	; 196
    3bac:	08 c0       	rjmp	.+16     	; 0x3bbe <nrk_time_sub+0xe2>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3bae:	ea 18       	sub	r14, r10
    3bb0:	fb 08       	sbc	r15, r11
    3bb2:	0c 09       	sbc	r16, r12
    3bb4:	1d 09       	sbc	r17, r13
    3bb6:	e0 82       	st	Z, r14
    3bb8:	f1 82       	std	Z+1, r15	; 0x01
    3bba:	02 83       	std	Z+2, r16	; 0x02
    3bbc:	13 83       	std	Z+3, r17	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3bbe:	28 1b       	sub	r18, r24
    3bc0:	39 0b       	sbc	r19, r25
    3bc2:	4a 0b       	sbc	r20, r26
    3bc4:	5b 0b       	sbc	r21, r27
    3bc6:	24 83       	std	Z+4, r18	; 0x04
    3bc8:	35 83       	std	Z+5, r19	; 0x05
    3bca:	46 83       	std	Z+6, r20	; 0x06
    3bcc:	57 83       	std	Z+7, r21	; 0x07
return NRK_OK;
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	01 c0       	rjmp	.+2      	; 0x3bd4 <nrk_time_sub+0xf8>
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
if(low.secs==high.secs)
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3bd2:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    3bd4:	60 96       	adiw	r28, 0x10	; 16
    3bd6:	0f b6       	in	r0, 0x3f	; 63
    3bd8:	f8 94       	cli
    3bda:	de bf       	out	0x3e, r29	; 62
    3bdc:	0f be       	out	0x3f, r0	; 63
    3bde:	cd bf       	out	0x3d, r28	; 61
    3be0:	cf 91       	pop	r28
    3be2:	df 91       	pop	r29
    3be4:	1f 91       	pop	r17
    3be6:	0f 91       	pop	r16
    3be8:	ff 90       	pop	r15
    3bea:	ef 90       	pop	r14
    3bec:	df 90       	pop	r13
    3bee:	cf 90       	pop	r12
    3bf0:	bf 90       	pop	r11
    3bf2:	af 90       	pop	r10
    3bf4:	9f 90       	pop	r9
    3bf6:	8f 90       	pop	r8
    3bf8:	08 95       	ret

00003bfa <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    3bfa:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    3bfc:	14 c0       	rjmp	.+40     	; 0x3c26 <nrk_time_compact_nanos+0x2c>
    {
    t->nano_secs-=NANOS_PER_SEC;
    3bfe:	20 50       	subi	r18, 0x00	; 0
    3c00:	3a 4c       	sbci	r19, 0xCA	; 202
    3c02:	4a 49       	sbci	r20, 0x9A	; 154
    3c04:	5b 43       	sbci	r21, 0x3B	; 59
    3c06:	24 83       	std	Z+4, r18	; 0x04
    3c08:	35 83       	std	Z+5, r19	; 0x05
    3c0a:	46 83       	std	Z+6, r20	; 0x06
    3c0c:	57 83       	std	Z+7, r21	; 0x07
    t->secs++;
    3c0e:	20 81       	ld	r18, Z
    3c10:	31 81       	ldd	r19, Z+1	; 0x01
    3c12:	42 81       	ldd	r20, Z+2	; 0x02
    3c14:	53 81       	ldd	r21, Z+3	; 0x03
    3c16:	2f 5f       	subi	r18, 0xFF	; 255
    3c18:	3f 4f       	sbci	r19, 0xFF	; 255
    3c1a:	4f 4f       	sbci	r20, 0xFF	; 255
    3c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c1e:	20 83       	st	Z, r18
    3c20:	31 83       	std	Z+1, r19	; 0x01
    3c22:	42 83       	std	Z+2, r20	; 0x02
    3c24:	53 83       	std	Z+3, r21	; 0x03
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    3c26:	24 81       	ldd	r18, Z+4	; 0x04
    3c28:	35 81       	ldd	r19, Z+5	; 0x05
    3c2a:	46 81       	ldd	r20, Z+6	; 0x06
    3c2c:	57 81       	ldd	r21, Z+7	; 0x07
    3c2e:	20 30       	cpi	r18, 0x00	; 0
    3c30:	8a ec       	ldi	r24, 0xCA	; 202
    3c32:	38 07       	cpc	r19, r24
    3c34:	8a e9       	ldi	r24, 0x9A	; 154
    3c36:	48 07       	cpc	r20, r24
    3c38:	8b e3       	ldi	r24, 0x3B	; 59
    3c3a:	58 07       	cpc	r21, r24
    3c3c:	00 f7       	brcc	.-64     	; 0x3bfe <nrk_time_compact_nanos+0x4>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    3c3e:	08 95       	ret

00003c40 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3c40:	8f 92       	push	r8
    3c42:	9f 92       	push	r9
    3c44:	af 92       	push	r10
    3c46:	bf 92       	push	r11
    3c48:	cf 92       	push	r12
    3c4a:	df 92       	push	r13
    3c4c:	ef 92       	push	r14
    3c4e:	ff 92       	push	r15
    3c50:	0f 93       	push	r16
    3c52:	1f 93       	push	r17
    3c54:	df 93       	push	r29
    3c56:	cf 93       	push	r28
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
    3c5c:	60 97       	sbiw	r28, 0x10	; 16
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	f8 94       	cli
    3c62:	de bf       	out	0x3e, r29	; 62
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	cd bf       	out	0x3d, r28	; 61
    3c68:	09 83       	std	Y+1, r16	; 0x01
    3c6a:	1a 83       	std	Y+2, r17	; 0x02
    3c6c:	2b 83       	std	Y+3, r18	; 0x03
    3c6e:	3c 83       	std	Y+4, r19	; 0x04
    3c70:	4d 83       	std	Y+5, r20	; 0x05
    3c72:	5e 83       	std	Y+6, r21	; 0x06
    3c74:	6f 83       	std	Y+7, r22	; 0x07
    3c76:	78 87       	std	Y+8, r23	; 0x08
    3c78:	89 86       	std	Y+9, r8	; 0x09
    3c7a:	9a 86       	std	Y+10, r9	; 0x0a
    3c7c:	ab 86       	std	Y+11, r10	; 0x0b
    3c7e:	bc 86       	std	Y+12, r11	; 0x0c
    3c80:	cd 86       	std	Y+13, r12	; 0x0d
    3c82:	de 86       	std	Y+14, r13	; 0x0e
    3c84:	ef 86       	std	Y+15, r14	; 0x0f
    3c86:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3c88:	29 85       	ldd	r18, Y+9	; 0x09
    3c8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c8c:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c8e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c90:	e9 80       	ldd	r14, Y+1	; 0x01
    3c92:	fa 80       	ldd	r15, Y+2	; 0x02
    3c94:	0b 81       	ldd	r16, Y+3	; 0x03
    3c96:	1c 81       	ldd	r17, Y+4	; 0x04
    3c98:	2e 0d       	add	r18, r14
    3c9a:	3f 1d       	adc	r19, r15
    3c9c:	40 1f       	adc	r20, r16
    3c9e:	51 1f       	adc	r21, r17
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	20 83       	st	Z, r18
    3ca4:	31 83       	std	Z+1, r19	; 0x01
    3ca6:	42 83       	std	Z+2, r20	; 0x02
    3ca8:	53 83       	std	Z+3, r21	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3caa:	2d 85       	ldd	r18, Y+13	; 0x0d
    3cac:	3e 85       	ldd	r19, Y+14	; 0x0e
    3cae:	4f 85       	ldd	r20, Y+15	; 0x0f
    3cb0:	58 89       	ldd	r21, Y+16	; 0x10
    3cb2:	ed 80       	ldd	r14, Y+5	; 0x05
    3cb4:	fe 80       	ldd	r15, Y+6	; 0x06
    3cb6:	0f 81       	ldd	r16, Y+7	; 0x07
    3cb8:	18 85       	ldd	r17, Y+8	; 0x08
    3cba:	2e 0d       	add	r18, r14
    3cbc:	3f 1d       	adc	r19, r15
    3cbe:	40 1f       	adc	r20, r16
    3cc0:	51 1f       	adc	r21, r17
    3cc2:	24 83       	std	Z+4, r18	; 0x04
    3cc4:	35 83       	std	Z+5, r19	; 0x05
    3cc6:	46 83       	std	Z+6, r20	; 0x06
    3cc8:	57 83       	std	Z+7, r21	; 0x07
nrk_time_compact_nanos(result);
    3cca:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <nrk_time_compact_nanos>
return NRK_OK;
}
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	60 96       	adiw	r28, 0x10	; 16
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	f8 94       	cli
    3cd6:	de bf       	out	0x3e, r29	; 62
    3cd8:	0f be       	out	0x3f, r0	; 63
    3cda:	cd bf       	out	0x3d, r28	; 61
    3cdc:	cf 91       	pop	r28
    3cde:	df 91       	pop	r29
    3ce0:	1f 91       	pop	r17
    3ce2:	0f 91       	pop	r16
    3ce4:	ff 90       	pop	r15
    3ce6:	ef 90       	pop	r14
    3ce8:	df 90       	pop	r13
    3cea:	cf 90       	pop	r12
    3cec:	bf 90       	pop	r11
    3cee:	af 90       	pop	r10
    3cf0:	9f 90       	pop	r9
    3cf2:	8f 90       	pop	r8
    3cf4:	08 95       	ret

00003cf6 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    3cf6:	60 93 97 05 	sts	0x0597, r22
    3cfa:	70 93 98 05 	sts	0x0598, r23
    3cfe:	80 93 99 05 	sts	0x0599, r24
    3d02:	90 93 9a 05 	sts	0x059A, r25
  nrk_system_time.nano_secs=nano_secs;
    3d06:	20 93 9b 05 	sts	0x059B, r18
    3d0a:	30 93 9c 05 	sts	0x059C, r19
    3d0e:	40 93 9d 05 	sts	0x059D, r20
    3d12:	50 93 9e 05 	sts	0x059E, r21
}
    3d16:	08 95       	ret

00003d18 <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    3d18:	8f 92       	push	r8
    3d1a:	9f 92       	push	r9
    3d1c:	af 92       	push	r10
    3d1e:	bf 92       	push	r11
    3d20:	cf 92       	push	r12
    3d22:	df 92       	push	r13
    3d24:	ef 92       	push	r14
    3d26:	ff 92       	push	r15
    3d28:	0f 93       	push	r16
    3d2a:	1f 93       	push	r17
    3d2c:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3d2e:	20 81       	ld	r18, Z
    3d30:	31 81       	ldd	r19, Z+1	; 0x01
    3d32:	42 81       	ldd	r20, Z+2	; 0x02
    3d34:	53 81       	ldd	r21, Z+3	; 0x03
    3d36:	64 81       	ldd	r22, Z+4	; 0x04
    3d38:	75 81       	ldd	r23, Z+5	; 0x05
    3d3a:	86 81       	ldd	r24, Z+6	; 0x06
    3d3c:	97 81       	ldd	r25, Z+7	; 0x07
    3d3e:	21 15       	cp	r18, r1
    3d40:	31 05       	cpc	r19, r1
    3d42:	41 05       	cpc	r20, r1
    3d44:	51 05       	cpc	r21, r1
    3d46:	09 f4       	brne	.+2      	; 0x3d4a <_nrk_time_to_ticks+0x32>
    3d48:	61 c0       	rjmp	.+194    	; 0x3e0c <_nrk_time_to_ticks+0xf4>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3d4a:	22 34       	cpi	r18, 0x42	; 66
    3d4c:	31 05       	cpc	r19, r1
    3d4e:	41 05       	cpc	r20, r1
    3d50:	51 05       	cpc	r21, r1
    3d52:	08 f0       	brcs	.+2      	; 0x3d56 <_nrk_time_to_ticks+0x3e>
    3d54:	62 c0       	rjmp	.+196    	; 0x3e1a <_nrk_time_to_ticks+0x102>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    3d56:	5b 01       	movw	r10, r22
    3d58:	6c 01       	movw	r12, r24
    3d5a:	ee 24       	eor	r14, r14
    3d5c:	ff 24       	eor	r15, r15
    3d5e:	87 01       	movw	r16, r14
    3d60:	60 e0       	ldi	r22, 0x00	; 0
    3d62:	38 c0       	rjmp	.+112    	; 0x3dd4 <_nrk_time_to_ticks+0xbc>
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3d64:	8a 2c       	mov	r8, r10
    3d66:	ab 2d       	mov	r26, r11
    3d68:	a6 53       	subi	r26, 0x36	; 54
    3d6a:	f1 e0       	ldi	r31, 0x01	; 1
    3d6c:	ab 15       	cp	r26, r11
    3d6e:	08 f0       	brcs	.+2      	; 0x3d72 <_nrk_time_to_ticks+0x5a>
    3d70:	f0 e0       	ldi	r31, 0x00	; 0
    3d72:	8c 2d       	mov	r24, r12
    3d74:	86 56       	subi	r24, 0x66	; 102
    3d76:	91 e0       	ldi	r25, 0x01	; 1
    3d78:	8c 15       	cp	r24, r12
    3d7a:	08 f0       	brcs	.+2      	; 0x3d7e <_nrk_time_to_ticks+0x66>
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	f8 0f       	add	r31, r24
    3d80:	71 e0       	ldi	r23, 0x01	; 1
    3d82:	f8 17       	cp	r31, r24
    3d84:	08 f0       	brcs	.+2      	; 0x3d88 <_nrk_time_to_ticks+0x70>
    3d86:	70 e0       	ldi	r23, 0x00	; 0
    3d88:	97 2b       	or	r25, r23
    3d8a:	7d 2d       	mov	r23, r13
    3d8c:	75 5c       	subi	r23, 0xC5	; 197
    3d8e:	e1 e0       	ldi	r30, 0x01	; 1
    3d90:	7d 15       	cp	r23, r13
    3d92:	08 f0       	brcs	.+2      	; 0x3d96 <_nrk_time_to_ticks+0x7e>
    3d94:	e0 e0       	ldi	r30, 0x00	; 0
    3d96:	97 0f       	add	r25, r23
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	97 17       	cp	r25, r23
    3d9c:	08 f0       	brcs	.+2      	; 0x3da0 <_nrk_time_to_ticks+0x88>
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	8e 2b       	or	r24, r30
    3da2:	8e 0d       	add	r24, r14
    3da4:	e1 e0       	ldi	r30, 0x01	; 1
    3da6:	8e 15       	cp	r24, r14
    3da8:	08 f0       	brcs	.+2      	; 0x3dac <_nrk_time_to_ticks+0x94>
    3daa:	e0 e0       	ldi	r30, 0x00	; 0
    3dac:	ef 0d       	add	r30, r15
    3dae:	71 e0       	ldi	r23, 0x01	; 1
    3db0:	ef 15       	cp	r30, r15
    3db2:	08 f0       	brcs	.+2      	; 0x3db6 <_nrk_time_to_ticks+0x9e>
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	70 0f       	add	r23, r16
    3db8:	b1 e0       	ldi	r27, 0x01	; 1
    3dba:	70 17       	cp	r23, r16
    3dbc:	08 f0       	brcs	.+2      	; 0x3dc0 <_nrk_time_to_ticks+0xa8>
    3dbe:	b0 e0       	ldi	r27, 0x00	; 0
    3dc0:	b1 0f       	add	r27, r17
    3dc2:	a8 2c       	mov	r10, r8
    3dc4:	ba 2e       	mov	r11, r26
    3dc6:	cf 2e       	mov	r12, r31
    3dc8:	d9 2e       	mov	r13, r25
    3dca:	e8 2e       	mov	r14, r24
    3dcc:	fe 2e       	mov	r15, r30
    3dce:	07 2f       	mov	r16, r23
    3dd0:	1b 2f       	mov	r17, r27
    3dd2:	6f 5f       	subi	r22, 0xFF	; 255
    3dd4:	86 2f       	mov	r24, r22
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	a0 e0       	ldi	r26, 0x00	; 0
    3dda:	b0 e0       	ldi	r27, 0x00	; 0
    3ddc:	82 17       	cp	r24, r18
    3dde:	93 07       	cpc	r25, r19
    3de0:	a4 07       	cpc	r26, r20
    3de2:	b5 07       	cpc	r27, r21
    3de4:	08 f4       	brcc	.+2      	; 0x3de8 <_nrk_time_to_ticks+0xd0>
    3de6:	be cf       	rjmp	.-132    	; 0x3d64 <_nrk_time_to_ticks+0x4c>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3de8:	95 01       	movw	r18, r10
    3dea:	a6 01       	movw	r20, r12
    3dec:	b7 01       	movw	r22, r14
    3dee:	c8 01       	movw	r24, r16
    3df0:	a3 eb       	ldi	r26, 0xB3	; 179
    3df2:	aa 2e       	mov	r10, r26
    3df4:	f6 ee       	ldi	r31, 0xE6	; 230
    3df6:	bf 2e       	mov	r11, r31
    3df8:	ee e0       	ldi	r30, 0x0E	; 14
    3dfa:	ce 2e       	mov	r12, r30
    3dfc:	dd 24       	eor	r13, r13
    3dfe:	ee 24       	eor	r14, r14
    3e00:	ff 24       	eor	r15, r15
    3e02:	00 e0       	ldi	r16, 0x00	; 0
    3e04:	10 e0       	ldi	r17, 0x00	; 0
    3e06:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <__udivdi3>
    3e0a:	09 c0       	rjmp	.+18     	; 0x3e1e <_nrk_time_to_ticks+0x106>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3e0c:	23 eb       	ldi	r18, 0xB3	; 179
    3e0e:	36 ee       	ldi	r19, 0xE6	; 230
    3e10:	4e e0       	ldi	r20, 0x0E	; 14
    3e12:	50 e0       	ldi	r21, 0x00	; 0
    3e14:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    3e18:	02 c0       	rjmp	.+4      	; 0x3e1e <_nrk_time_to_ticks+0x106>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3e1e:	c9 01       	movw	r24, r18
    3e20:	1f 91       	pop	r17
    3e22:	0f 91       	pop	r16
    3e24:	ff 90       	pop	r15
    3e26:	ef 90       	pop	r14
    3e28:	df 90       	pop	r13
    3e2a:	cf 90       	pop	r12
    3e2c:	bf 90       	pop	r11
    3e2e:	af 90       	pop	r10
    3e30:	9f 90       	pop	r9
    3e32:	8f 90       	pop	r8
    3e34:	08 95       	ret

00003e36 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3e36:	ef 92       	push	r14
    3e38:	ff 92       	push	r15
    3e3a:	0f 93       	push	r16
    3e3c:	1f 93       	push	r17
    3e3e:	df 93       	push	r29
    3e40:	cf 93       	push	r28
    3e42:	cd b7       	in	r28, 0x3d	; 61
    3e44:	de b7       	in	r29, 0x3e	; 62
    3e46:	28 97       	sbiw	r28, 0x08	; 8
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	f8 94       	cli
    3e4c:	de bf       	out	0x3e, r29	; 62
    3e4e:	0f be       	out	0x3f, r0	; 63
    3e50:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    3e52:	7b 01       	movw	r14, r22
    3e54:	8c 01       	movw	r16, r24
    3e56:	ba e0       	ldi	r27, 0x0A	; 10
    3e58:	16 95       	lsr	r17
    3e5a:	07 95       	ror	r16
    3e5c:	f7 94       	ror	r15
    3e5e:	e7 94       	ror	r14
    3e60:	ba 95       	dec	r27
    3e62:	d1 f7       	brne	.-12     	; 0x3e58 <_nrk_ticks_to_time+0x22>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3e64:	e9 82       	std	Y+1, r14	; 0x01
    3e66:	fa 82       	std	Y+2, r15	; 0x02
    3e68:	0b 83       	std	Y+3, r16	; 0x03
    3e6a:	1c 83       	std	Y+4, r17	; 0x04
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    3e6c:	73 70       	andi	r23, 0x03	; 3
    3e6e:	80 70       	andi	r24, 0x00	; 0
    3e70:	90 70       	andi	r25, 0x00	; 0
    3e72:	23 eb       	ldi	r18, 0xB3	; 179
    3e74:	36 ee       	ldi	r19, 0xE6	; 230
    3e76:	4e e0       	ldi	r20, 0x0E	; 14
    3e78:	50 e0       	ldi	r21, 0x00	; 0
    3e7a:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3e7e:	6d 83       	std	Y+5, r22	; 0x05
    3e80:	7e 83       	std	Y+6, r23	; 0x06
    3e82:	8f 83       	std	Y+7, r24	; 0x07
    3e84:	98 87       	std	Y+8, r25	; 0x08
    3e86:	2e 2d       	mov	r18, r14
    3e88:	3a 81       	ldd	r19, Y+2	; 0x02
    3e8a:	4b 81       	ldd	r20, Y+3	; 0x03
    3e8c:	5c 81       	ldd	r21, Y+4	; 0x04

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
}
    3e8e:	28 96       	adiw	r28, 0x08	; 8
    3e90:	0f b6       	in	r0, 0x3f	; 63
    3e92:	f8 94       	cli
    3e94:	de bf       	out	0x3e, r29	; 62
    3e96:	0f be       	out	0x3f, r0	; 63
    3e98:	cd bf       	out	0x3d, r28	; 61
    3e9a:	cf 91       	pop	r28
    3e9c:	df 91       	pop	r29
    3e9e:	1f 91       	pop	r17
    3ea0:	0f 91       	pop	r16
    3ea2:	ff 90       	pop	r15
    3ea4:	ef 90       	pop	r14
    3ea6:	08 95       	ret

00003ea8 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    3ea8:	8f 92       	push	r8
    3eaa:	9f 92       	push	r9
    3eac:	af 92       	push	r10
    3eae:	bf 92       	push	r11
    3eb0:	cf 92       	push	r12
    3eb2:	df 92       	push	r13
    3eb4:	ef 92       	push	r14
    3eb6:	ff 92       	push	r15
    3eb8:	0f 93       	push	r16
    3eba:	1f 93       	push	r17
    3ebc:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3ebe:	20 81       	ld	r18, Z
    3ec0:	31 81       	ldd	r19, Z+1	; 0x01
    3ec2:	42 81       	ldd	r20, Z+2	; 0x02
    3ec4:	53 81       	ldd	r21, Z+3	; 0x03
    3ec6:	64 81       	ldd	r22, Z+4	; 0x04
    3ec8:	75 81       	ldd	r23, Z+5	; 0x05
    3eca:	86 81       	ldd	r24, Z+6	; 0x06
    3ecc:	97 81       	ldd	r25, Z+7	; 0x07
    3ece:	21 15       	cp	r18, r1
    3ed0:	31 05       	cpc	r19, r1
    3ed2:	41 05       	cpc	r20, r1
    3ed4:	51 05       	cpc	r21, r1
    3ed6:	09 f4       	brne	.+2      	; 0x3eda <_nrk_time_to_ticks_long+0x32>
    3ed8:	5b c0       	rjmp	.+182    	; 0x3f90 <_nrk_time_to_ticks_long+0xe8>
{
   tmp=t->nano_secs;
    3eda:	5b 01       	movw	r10, r22
    3edc:	6c 01       	movw	r12, r24
    3ede:	ee 24       	eor	r14, r14
    3ee0:	ff 24       	eor	r15, r15
    3ee2:	87 01       	movw	r16, r14
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3ee4:	60 e0       	ldi	r22, 0x00	; 0
    3ee6:	38 c0       	rjmp	.+112    	; 0x3f58 <_nrk_time_to_ticks_long+0xb0>
    3ee8:	8a 2c       	mov	r8, r10
    3eea:	ab 2d       	mov	r26, r11
    3eec:	a6 53       	subi	r26, 0x36	; 54
    3eee:	f1 e0       	ldi	r31, 0x01	; 1
    3ef0:	ab 15       	cp	r26, r11
    3ef2:	08 f0       	brcs	.+2      	; 0x3ef6 <_nrk_time_to_ticks_long+0x4e>
    3ef4:	f0 e0       	ldi	r31, 0x00	; 0
    3ef6:	8c 2d       	mov	r24, r12
    3ef8:	86 56       	subi	r24, 0x66	; 102
    3efa:	91 e0       	ldi	r25, 0x01	; 1
    3efc:	8c 15       	cp	r24, r12
    3efe:	08 f0       	brcs	.+2      	; 0x3f02 <_nrk_time_to_ticks_long+0x5a>
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	f8 0f       	add	r31, r24
    3f04:	71 e0       	ldi	r23, 0x01	; 1
    3f06:	f8 17       	cp	r31, r24
    3f08:	08 f0       	brcs	.+2      	; 0x3f0c <_nrk_time_to_ticks_long+0x64>
    3f0a:	70 e0       	ldi	r23, 0x00	; 0
    3f0c:	97 2b       	or	r25, r23
    3f0e:	7d 2d       	mov	r23, r13
    3f10:	75 5c       	subi	r23, 0xC5	; 197
    3f12:	e1 e0       	ldi	r30, 0x01	; 1
    3f14:	7d 15       	cp	r23, r13
    3f16:	08 f0       	brcs	.+2      	; 0x3f1a <_nrk_time_to_ticks_long+0x72>
    3f18:	e0 e0       	ldi	r30, 0x00	; 0
    3f1a:	97 0f       	add	r25, r23
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	97 17       	cp	r25, r23
    3f20:	08 f0       	brcs	.+2      	; 0x3f24 <_nrk_time_to_ticks_long+0x7c>
    3f22:	80 e0       	ldi	r24, 0x00	; 0
    3f24:	8e 2b       	or	r24, r30
    3f26:	8e 0d       	add	r24, r14
    3f28:	e1 e0       	ldi	r30, 0x01	; 1
    3f2a:	8e 15       	cp	r24, r14
    3f2c:	08 f0       	brcs	.+2      	; 0x3f30 <_nrk_time_to_ticks_long+0x88>
    3f2e:	e0 e0       	ldi	r30, 0x00	; 0
    3f30:	ef 0d       	add	r30, r15
    3f32:	71 e0       	ldi	r23, 0x01	; 1
    3f34:	ef 15       	cp	r30, r15
    3f36:	08 f0       	brcs	.+2      	; 0x3f3a <_nrk_time_to_ticks_long+0x92>
    3f38:	70 e0       	ldi	r23, 0x00	; 0
    3f3a:	70 0f       	add	r23, r16
    3f3c:	b1 e0       	ldi	r27, 0x01	; 1
    3f3e:	70 17       	cp	r23, r16
    3f40:	08 f0       	brcs	.+2      	; 0x3f44 <_nrk_time_to_ticks_long+0x9c>
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	b1 0f       	add	r27, r17
    3f46:	a8 2c       	mov	r10, r8
    3f48:	ba 2e       	mov	r11, r26
    3f4a:	cf 2e       	mov	r12, r31
    3f4c:	d9 2e       	mov	r13, r25
    3f4e:	e8 2e       	mov	r14, r24
    3f50:	fe 2e       	mov	r15, r30
    3f52:	07 2f       	mov	r16, r23
    3f54:	1b 2f       	mov	r17, r27
    3f56:	6f 5f       	subi	r22, 0xFF	; 255
    3f58:	86 2f       	mov	r24, r22
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	a0 e0       	ldi	r26, 0x00	; 0
    3f5e:	b0 e0       	ldi	r27, 0x00	; 0
    3f60:	82 17       	cp	r24, r18
    3f62:	93 07       	cpc	r25, r19
    3f64:	a4 07       	cpc	r26, r20
    3f66:	b5 07       	cpc	r27, r21
    3f68:	08 f4       	brcc	.+2      	; 0x3f6c <_nrk_time_to_ticks_long+0xc4>
    3f6a:	be cf       	rjmp	.-132    	; 0x3ee8 <_nrk_time_to_ticks_long+0x40>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3f6c:	95 01       	movw	r18, r10
    3f6e:	a6 01       	movw	r20, r12
    3f70:	b7 01       	movw	r22, r14
    3f72:	c8 01       	movw	r24, r16
    3f74:	e3 eb       	ldi	r30, 0xB3	; 179
    3f76:	ae 2e       	mov	r10, r30
    3f78:	06 ee       	ldi	r16, 0xE6	; 230
    3f7a:	b0 2e       	mov	r11, r16
    3f7c:	1e e0       	ldi	r17, 0x0E	; 14
    3f7e:	c1 2e       	mov	r12, r17
    3f80:	dd 24       	eor	r13, r13
    3f82:	ee 24       	eor	r14, r14
    3f84:	ff 24       	eor	r15, r15
    3f86:	00 e0       	ldi	r16, 0x00	; 0
    3f88:	10 e0       	ldi	r17, 0x00	; 0
    3f8a:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <__udivdi3>
    3f8e:	06 c0       	rjmp	.+12     	; 0x3f9c <_nrk_time_to_ticks_long+0xf4>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3f90:	23 eb       	ldi	r18, 0xB3	; 179
    3f92:	36 ee       	ldi	r19, 0xE6	; 230
    3f94:	4e e0       	ldi	r20, 0x0E	; 14
    3f96:	50 e0       	ldi	r21, 0x00	; 0
    3f98:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    3f9c:	b9 01       	movw	r22, r18
    3f9e:	ca 01       	movw	r24, r20
}
return ticks;
}
    3fa0:	1f 91       	pop	r17
    3fa2:	0f 91       	pop	r16
    3fa4:	ff 90       	pop	r15
    3fa6:	ef 90       	pop	r14
    3fa8:	df 90       	pop	r13
    3faa:	cf 90       	pop	r12
    3fac:	bf 90       	pop	r11
    3fae:	af 90       	pop	r10
    3fb0:	9f 90       	pop	r9
    3fb2:	8f 90       	pop	r8
    3fb4:	08 95       	ret

00003fb6 <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    3fb6:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    3fb8:	11 e0       	ldi	r17, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    3fba:	0e 94 83 16 	call	0x2d06	; 0x2d06 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    3fbe:	0e 94 21 23 	call	0x4642	; 0x4642 <_nrk_get_next_wakeup>
    3fc2:	84 30       	cpi	r24, 0x04	; 4
    3fc4:	10 f4       	brcc	.+4      	; 0x3fca <nrk_idle_task+0x14>
    {
	    _nrk_cpu_state=CPU_IDLE;
    3fc6:	10 93 42 08 	sts	0x0842, r17
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
	    nrk_sleep();
	#else
	    nrk_idle();
    3fca:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3fce:	80 91 e2 06 	lds	r24, 0x06E2
    3fd2:	85 35       	cpi	r24, 0x55	; 85
    3fd4:	19 f0       	breq	.+6      	; 0x3fdc <nrk_idle_task+0x26>
    3fd6:	88 e0       	ldi	r24, 0x08	; 8
    3fd8:	0e 94 92 15 	call	0x2b24	; 0x2b24 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3fdc:	80 91 7e 41 	lds	r24, 0x417E
    3fe0:	85 35       	cpi	r24, 0x55	; 85
    3fe2:	59 f3       	breq	.-42     	; 0x3fba <nrk_idle_task+0x4>
    3fe4:	88 e0       	ldi	r24, 0x08	; 8
    3fe6:	0e 94 92 15 	call	0x2b24	; 0x2b24 <nrk_error_add>
    3fea:	e7 cf       	rjmp	.-50     	; 0x3fba <nrk_idle_task+0x4>

00003fec <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    3fec:	2f 92       	push	r2
    3fee:	3f 92       	push	r3
    3ff0:	4f 92       	push	r4
    3ff2:	5f 92       	push	r5
    3ff4:	6f 92       	push	r6
    3ff6:	7f 92       	push	r7
    3ff8:	8f 92       	push	r8
    3ffa:	9f 92       	push	r9
    3ffc:	af 92       	push	r10
    3ffe:	bf 92       	push	r11
    4000:	cf 92       	push	r12
    4002:	df 92       	push	r13
    4004:	ef 92       	push	r14
    4006:	ff 92       	push	r15
    4008:	0f 93       	push	r16
    400a:	1f 93       	push	r17
    400c:	df 93       	push	r29
    400e:	cf 93       	push	r28
    4010:	0f 92       	push	r0
    4012:	cd b7       	in	r28, 0x3d	; 61
    4014:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    4016:	0e 94 3d 22 	call	0x447a	; 0x447a <_nrk_precision_os_timer_reset>
    nrk_int_disable();   // this should be removed...  Not needed
    401a:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    401e:	0e 94 6e 22 	call	0x44dc	; 0x44dc <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    4022:	0e 94 76 22 	call	0x44ec	; 0x44ec <_nrk_high_speed_timer_get>
    4026:	2c 01       	movw	r4, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    4028:	8a ef       	ldi	r24, 0xFA	; 250
    402a:	0e 94 25 23 	call	0x464a	; 0x464a <_nrk_set_next_wakeup>
    next_wake=60000;
    // Safety zone starts here....


#ifdef NRK_WATCHDOG
    nrk_watchdog_reset();
    402e:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <nrk_watchdog_reset>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    4032:	60 91 67 07 	lds	r22, 0x0767
    4036:	70 e0       	ldi	r23, 0x00	; 0
    4038:	80 e0       	ldi	r24, 0x00	; 0
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	23 eb       	ldi	r18, 0xB3	; 179
    403e:	36 ee       	ldi	r19, 0xE6	; 230
    4040:	4e e0       	ldi	r20, 0x0E	; 14
    4042:	50 e0       	ldi	r21, 0x00	; 0
    4044:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    4048:	7b 01       	movw	r14, r22
    404a:	8c 01       	movw	r16, r24
    404c:	80 91 9b 05 	lds	r24, 0x059B
    4050:	90 91 9c 05 	lds	r25, 0x059C
    4054:	a0 91 9d 05 	lds	r26, 0x059D
    4058:	b0 91 9e 05 	lds	r27, 0x059E
    405c:	e8 0e       	add	r14, r24
    405e:	f9 1e       	adc	r15, r25
    4060:	0a 1f       	adc	r16, r26
    4062:	1b 1f       	adc	r17, r27
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4064:	c8 01       	movw	r24, r16
    4066:	b7 01       	movw	r22, r14
    4068:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    406c:	e6 1a       	sub	r14, r22
    406e:	f7 0a       	sbc	r15, r23
    4070:	08 0b       	sbc	r16, r24
    4072:	19 0b       	sbc	r17, r25
    4074:	80 91 97 05 	lds	r24, 0x0597
    4078:	90 91 98 05 	lds	r25, 0x0598
    407c:	a0 91 99 05 	lds	r26, 0x0599
    4080:	b0 91 9a 05 	lds	r27, 0x059A

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4084:	73 eb       	ldi	r23, 0xB3	; 179
    4086:	a7 2e       	mov	r10, r23
    4088:	76 ee       	ldi	r23, 0xE6	; 230
    408a:	b7 2e       	mov	r11, r23
    408c:	7e e0       	ldi	r23, 0x0E	; 14
    408e:	c7 2e       	mov	r12, r23
    4090:	d1 2c       	mov	r13, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4092:	14 c0       	rjmp	.+40     	; 0x40bc <_nrk_scheduler+0xd0>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4094:	80 e0       	ldi	r24, 0x00	; 0
    4096:	96 e3       	ldi	r25, 0x36	; 54
    4098:	a5 e6       	ldi	r26, 0x65	; 101
    409a:	b4 ec       	ldi	r27, 0xC4	; 196
    409c:	e8 0e       	add	r14, r24
    409e:	f9 1e       	adc	r15, r25
    40a0:	0a 1f       	adc	r16, r26
    40a2:	1b 1f       	adc	r17, r27
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    40a4:	c8 01       	movw	r24, r16
    40a6:	b7 01       	movw	r22, r14
    40a8:	a6 01       	movw	r20, r12
    40aa:	95 01       	movw	r18, r10
    40ac:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    40b0:	e6 1a       	sub	r14, r22
    40b2:	f7 0a       	sbc	r15, r23
    40b4:	08 0b       	sbc	r16, r24
    40b6:	19 0b       	sbc	r17, r25
    40b8:	d4 01       	movw	r26, r8
    40ba:	c3 01       	movw	r24, r6
    40bc:	3c 01       	movw	r6, r24
    40be:	4d 01       	movw	r8, r26
    40c0:	08 94       	sec
    40c2:	61 1c       	adc	r6, r1
    40c4:	71 1c       	adc	r7, r1
    40c6:	81 1c       	adc	r8, r1
    40c8:	91 1c       	adc	r9, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    40ca:	e0 e0       	ldi	r30, 0x00	; 0
    40cc:	ee 16       	cp	r14, r30
    40ce:	ea ec       	ldi	r30, 0xCA	; 202
    40d0:	fe 06       	cpc	r15, r30
    40d2:	ea e9       	ldi	r30, 0x9A	; 154
    40d4:	0e 07       	cpc	r16, r30
    40d6:	eb e3       	ldi	r30, 0x3B	; 59
    40d8:	1e 07       	cpc	r17, r30
    40da:	e0 f6       	brcc	.-72     	; 0x4094 <_nrk_scheduler+0xa8>
    40dc:	80 93 97 05 	sts	0x0597, r24
    40e0:	90 93 98 05 	sts	0x0598, r25
    40e4:	a0 93 99 05 	sts	0x0599, r26
    40e8:	b0 93 9a 05 	sts	0x059A, r27
    40ec:	e0 92 9b 05 	sts	0x059B, r14
    40f0:	f0 92 9c 05 	sts	0x059C, r15
    40f4:	00 93 9d 05 	sts	0x059D, r16
    40f8:	10 93 9e 05 	sts	0x059E, r17
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    40fc:	e0 91 19 06 	lds	r30, 0x0619
    4100:	f0 91 1a 06 	lds	r31, 0x061A
    4104:	85 81       	ldd	r24, Z+5	; 0x05
    4106:	88 23       	and	r24, r24
    4108:	b9 f0       	breq	.+46     	; 0x4138 <_nrk_scheduler+0x14c>
    410a:	81 85       	ldd	r24, Z+9	; 0x09
    410c:	84 30       	cpi	r24, 0x04	; 4
    410e:	a1 f0       	breq	.+40     	; 0x4138 <_nrk_scheduler+0x14c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    4110:	87 81       	ldd	r24, Z+7	; 0x07
    4112:	82 30       	cpi	r24, 0x02	; 2
    4114:	29 f0       	breq	.+10     	; 0x4120 <_nrk_scheduler+0x134>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    4116:	88 23       	and	r24, r24
    4118:	41 f0       	breq	.+16     	; 0x412a <_nrk_scheduler+0x13e>
    411a:	86 81       	ldd	r24, Z+6	; 0x06
    411c:	88 23       	and	r24, r24
    411e:	11 f4       	brne	.+4      	; 0x4124 <_nrk_scheduler+0x138>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    4120:	85 e0       	ldi	r24, 0x05	; 5
    4122:	01 c0       	rjmp	.+2      	; 0x4126 <_nrk_scheduler+0x13a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4124:	83 e0       	ldi	r24, 0x03	; 3
    4126:	81 87       	std	Z+9, r24	; 0x09
    4128:	04 c0       	rjmp	.+8      	; 0x4132 <_nrk_scheduler+0x146>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    412a:	83 e0       	ldi	r24, 0x03	; 3
    412c:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    412e:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    4130:	16 82       	std	Z+6, r1	; 0x06
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    4132:	80 85       	ldd	r24, Z+8	; 0x08
    4134:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    4138:	e0 91 19 06 	lds	r30, 0x0619
    413c:	f0 91 1a 06 	lds	r31, 0x061A
    4140:	85 8d       	ldd	r24, Z+29	; 0x1d
    4142:	96 8d       	ldd	r25, Z+30	; 0x1e
    4144:	00 97       	sbiw	r24, 0x00	; 0
    4146:	99 f1       	breq	.+102    	; 0x41ae <_nrk_scheduler+0x1c2>
    4148:	60 85       	ldd	r22, Z+8	; 0x08
    414a:	66 23       	and	r22, r22
    414c:	81 f1       	breq	.+96     	; 0x41ae <_nrk_scheduler+0x1c2>
    414e:	81 85       	ldd	r24, Z+9	; 0x09
    4150:	84 30       	cpi	r24, 0x04	; 4
    4152:	69 f1       	breq	.+90     	; 0x41ae <_nrk_scheduler+0x1c2>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    4154:	21 8d       	ldd	r18, Z+25	; 0x19
    4156:	32 8d       	ldd	r19, Z+26	; 0x1a
    4158:	80 91 67 07 	lds	r24, 0x0767
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	28 17       	cp	r18, r24
    4160:	39 07       	cpc	r19, r25
    4162:	50 f4       	brcc	.+20     	; 0x4178 <_nrk_scheduler+0x18c>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    4164:	82 e0       	ldi	r24, 0x02	; 2
    4166:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    416a:	e0 91 19 06 	lds	r30, 0x0619
    416e:	f0 91 1a 06 	lds	r31, 0x061A
    4172:	12 8e       	std	Z+26, r1	; 0x1a
    4174:	11 8e       	std	Z+25, r1	; 0x19
    4176:	04 c0       	rjmp	.+8      	; 0x4180 <_nrk_scheduler+0x194>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    4178:	28 1b       	sub	r18, r24
    417a:	39 0b       	sbc	r19, r25
    417c:	32 8f       	std	Z+26, r19	; 0x1a
    417e:	21 8f       	std	Z+25, r18	; 0x19

        task_ID= nrk_cur_task_TCB->task_ID;
    4180:	e0 91 19 06 	lds	r30, 0x0619
    4184:	f0 91 1a 06 	lds	r31, 0x061A
    4188:	00 85       	ldd	r16, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    418a:	21 8d       	ldd	r18, Z+25	; 0x19
    418c:	32 8d       	ldd	r19, Z+26	; 0x1a
    418e:	21 15       	cp	r18, r1
    4190:	31 05       	cpc	r19, r1
    4192:	69 f4       	brne	.+26     	; 0x41ae <_nrk_scheduler+0x1c2>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    4194:	83 e0       	ldi	r24, 0x03	; 3
    4196:	60 2f       	mov	r22, r16
    4198:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    419c:	e0 91 19 06 	lds	r30, 0x0619
    41a0:	f0 91 1a 06 	lds	r31, 0x061A
    41a4:	83 e0       	ldi	r24, 0x03	; 3
    41a6:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    41a8:	80 2f       	mov	r24, r16
    41aa:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <nrk_rem_from_readyQ>
    41ae:	6f e9       	ldi	r22, 0x9F	; 159
    41b0:	26 2e       	mov	r2, r22
    41b2:	67 e0       	ldi	r22, 0x07	; 7
    41b4:	36 2e       	mov	r3, r22

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    41b6:	00 e6       	ldi	r16, 0x60	; 96
    41b8:	1a ee       	ldi	r17, 0xEA	; 234
    41ba:	20 e0       	ldi	r18, 0x00	; 0
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
                    nrk_task_TCB[task_ID].num_periods=1;
    41bc:	51 e0       	ldi	r21, 0x01	; 1
    41be:	65 2e       	mov	r6, r21
    41c0:	71 2c       	mov	r7, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    41c2:	4a ef       	ldi	r20, 0xFA	; 250
    41c4:	e4 2e       	mov	r14, r20
    41c6:	f1 2c       	mov	r15, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    41c8:	32 e0       	ldi	r19, 0x02	; 2
    41ca:	93 2e       	mov	r9, r19
            // printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    41cc:	91 e0       	ldi	r25, 0x01	; 1
    41ce:	a9 2e       	mov	r10, r25
    41d0:	b1 2c       	mov	r11, r1
    41d2:	c1 2c       	mov	r12, r1
    41d4:	d1 2c       	mov	r13, r1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    41d6:	d1 01       	movw	r26, r2
    41d8:	13 96       	adiw	r26, 0x03	; 3
    41da:	8c 91       	ld	r24, X
    41dc:	13 97       	sbiw	r26, 0x03	; 3
    41de:	8f 3f       	cpi	r24, 0xFF	; 255
    41e0:	09 f4       	brne	.+2      	; 0x41e4 <_nrk_scheduler+0x1f8>
    41e2:	c4 c0       	rjmp	.+392    	; 0x436c <__stack+0x16d>
        nrk_task_TCB[task_ID].suspend_flag=0;
    41e4:	1c 92       	st	X, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    41e6:	88 23       	and	r24, r24
    41e8:	09 f4       	brne	.+2      	; 0x41ec <_nrk_scheduler+0x200>
    41ea:	43 c0       	rjmp	.+134    	; 0x4272 <__stack+0x73>
    41ec:	14 96       	adiw	r26, 0x04	; 4
    41ee:	8c 91       	ld	r24, X
    41f0:	14 97       	sbiw	r26, 0x04	; 4
    41f2:	84 30       	cpi	r24, 0x04	; 4
    41f4:	f1 f1       	breq	.+124    	; 0x4272 <__stack+0x73>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    41f6:	50 96       	adiw	r26, 0x10	; 16
    41f8:	4d 91       	ld	r20, X+
    41fa:	5c 91       	ld	r21, X
    41fc:	51 97       	sbiw	r26, 0x11	; 17
    41fe:	80 91 67 07 	lds	r24, 0x0767
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	48 17       	cp	r20, r24
    4206:	59 07       	cpc	r21, r25
    4208:	38 f0       	brcs	.+14     	; 0x4218 <__stack+0x19>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    420a:	48 1b       	sub	r20, r24
    420c:	59 0b       	sbc	r21, r25
    420e:	51 96       	adiw	r26, 0x11	; 17
    4210:	5c 93       	st	X, r21
    4212:	4e 93       	st	-X, r20
    4214:	50 97       	sbiw	r26, 0x10	; 16
    4216:	03 c0       	rjmp	.+6      	; 0x421e <__stack+0x1f>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    4218:	f1 01       	movw	r30, r2
    421a:	11 8a       	std	Z+17, r1	; 0x11
    421c:	10 8a       	std	Z+16, r1	; 0x10
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    421e:	d1 01       	movw	r26, r2
    4220:	52 96       	adiw	r26, 0x12	; 18
    4222:	4d 91       	ld	r20, X+
    4224:	5c 91       	ld	r21, X
    4226:	53 97       	sbiw	r26, 0x13	; 19
    4228:	48 17       	cp	r20, r24
    422a:	59 07       	cpc	r21, r25
    422c:	38 f0       	brcs	.+14     	; 0x423c <__stack+0x3d>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    422e:	48 1b       	sub	r20, r24
    4230:	59 0b       	sbc	r21, r25
    4232:	53 96       	adiw	r26, 0x13	; 19
    4234:	5c 93       	st	X, r21
    4236:	4e 93       	st	-X, r20
    4238:	52 97       	sbiw	r26, 0x12	; 18
    423a:	12 c0       	rjmp	.+36     	; 0x4260 <__stack+0x61>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    423c:	f1 01       	movw	r30, r2
    423e:	66 89       	ldd	r22, Z+22	; 0x16
    4240:	77 89       	ldd	r23, Z+23	; 0x17
    4242:	86 17       	cp	r24, r22
    4244:	97 07       	cpc	r25, r23
    4246:	28 f4       	brcc	.+10     	; 0x4252 <__stack+0x53>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    4248:	68 1b       	sub	r22, r24
    424a:	79 0b       	sbc	r23, r25
    424c:	73 8b       	std	Z+19, r23	; 0x13
    424e:	62 8b       	std	Z+18, r22	; 0x12
    4250:	07 c0       	rjmp	.+14     	; 0x4260 <__stack+0x61>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    4252:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <__udivmodhi4>
    4256:	d1 01       	movw	r26, r2
    4258:	53 96       	adiw	r26, 0x13	; 19
    425a:	9c 93       	st	X, r25
    425c:	8e 93       	st	-X, r24
    425e:	52 97       	sbiw	r26, 0x12	; 18
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    4260:	f1 01       	movw	r30, r2
    4262:	82 89       	ldd	r24, Z+18	; 0x12
    4264:	93 89       	ldd	r25, Z+19	; 0x13
    4266:	00 97       	sbiw	r24, 0x00	; 0
    4268:	21 f4       	brne	.+8      	; 0x4272 <__stack+0x73>
    426a:	86 89       	ldd	r24, Z+22	; 0x16
    426c:	97 89       	ldd	r25, Z+23	; 0x17
    426e:	93 8b       	std	Z+19, r25	; 0x13
    4270:	82 8b       	std	Z+18, r24	; 0x12

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    4272:	d1 01       	movw	r26, r2
    4274:	14 96       	adiw	r26, 0x04	; 4
    4276:	8c 91       	ld	r24, X
    4278:	14 97       	sbiw	r26, 0x04	; 4
    427a:	83 30       	cpi	r24, 0x03	; 3
    427c:	09 f0       	breq	.+2      	; 0x4280 <__stack+0x81>
    427e:	76 c0       	rjmp	.+236    	; 0x436c <__stack+0x16d>
        {
            // printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    4280:	50 96       	adiw	r26, 0x10	; 16
    4282:	8d 91       	ld	r24, X+
    4284:	9c 91       	ld	r25, X
    4286:	51 97       	sbiw	r26, 0x11	; 17
    4288:	00 97       	sbiw	r24, 0x00	; 0
    428a:	09 f0       	breq	.+2      	; 0x428e <__stack+0x8f>
    428c:	66 c0       	rjmp	.+204    	; 0x435a <__stack+0x15b>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    428e:	12 96       	adiw	r26, 0x02	; 2
    4290:	8c 91       	ld	r24, X
    4292:	12 97       	sbiw	r26, 0x02	; 2
    4294:	88 23       	and	r24, r24
    4296:	a9 f0       	breq	.+42     	; 0x42c2 <__stack+0xc3>
    4298:	11 96       	adiw	r26, 0x01	; 1
    429a:	8c 91       	ld	r24, X
    429c:	11 97       	sbiw	r26, 0x01	; 1
    429e:	88 23       	and	r24, r24
    42a0:	81 f0       	breq	.+32     	; 0x42c2 <__stack+0xc3>
    42a2:	d6 01       	movw	r26, r12
    42a4:	c5 01       	movw	r24, r10
    42a6:	00 90 09 05 	lds	r0, 0x0509
    42aa:	04 c0       	rjmp	.+8      	; 0x42b4 <__stack+0xb5>
    42ac:	88 0f       	add	r24, r24
    42ae:	99 1f       	adc	r25, r25
    42b0:	aa 1f       	adc	r26, r26
    42b2:	bb 1f       	adc	r27, r27
    42b4:	0a 94       	dec	r0
    42b6:	d2 f7       	brpl	.-12     	; 0x42ac <__stack+0xad>
    42b8:	f1 01       	movw	r30, r2
    42ba:	84 87       	std	Z+12, r24	; 0x0c
    42bc:	95 87       	std	Z+13, r25	; 0x0d
    42be:	a6 87       	std	Z+14, r26	; 0x0e
    42c0:	b7 87       	std	Z+15, r27	; 0x0f
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    42c2:	d1 01       	movw	r26, r2
    42c4:	12 96       	adiw	r26, 0x02	; 2
    42c6:	1c 92       	st	X, r1
    42c8:	12 97       	sbiw	r26, 0x02	; 2
                nrk_task_TCB[task_ID].nw_flag=0;
    42ca:	11 96       	adiw	r26, 0x01	; 1
    42cc:	1c 92       	st	X, r1
    42ce:	11 97       	sbiw	r26, 0x01	; 1
                nrk_task_TCB[task_ID].suspend_flag=0;
    42d0:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    42d2:	5a 96       	adiw	r26, 0x1a	; 26
    42d4:	4d 91       	ld	r20, X+
    42d6:	5c 91       	ld	r21, X
    42d8:	5b 97       	sbiw	r26, 0x1b	; 27
    42da:	56 96       	adiw	r26, 0x16	; 22
    42dc:	8d 91       	ld	r24, X+
    42de:	9c 91       	ld	r25, X
    42e0:	57 97       	sbiw	r26, 0x17	; 23
    42e2:	58 96       	adiw	r26, 0x18	; 24
    42e4:	6d 91       	ld	r22, X+
    42e6:	7c 91       	ld	r23, X
    42e8:	59 97       	sbiw	r26, 0x19	; 25
    42ea:	41 30       	cpi	r20, 0x01	; 1
    42ec:	51 05       	cpc	r21, r1
    42ee:	d9 f4       	brne	.+54     	; 0x4326 <__stack+0x127>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    42f0:	55 96       	adiw	r26, 0x15	; 21
    42f2:	7c 93       	st	X, r23
    42f4:	6e 93       	st	-X, r22
    42f6:	54 97       	sbiw	r26, 0x14	; 20
                    nrk_task_TCB[task_ID].task_state = READY;
    42f8:	14 96       	adiw	r26, 0x04	; 4
    42fa:	9c 92       	st	X, r9
    42fc:	14 97       	sbiw	r26, 0x04	; 4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    42fe:	52 96       	adiw	r26, 0x12	; 18
    4300:	4d 91       	ld	r20, X+
    4302:	5c 91       	ld	r21, X
    4304:	53 97       	sbiw	r26, 0x13	; 19
    4306:	51 96       	adiw	r26, 0x11	; 17
    4308:	5c 93       	st	X, r21
    430a:	4e 93       	st	-X, r20
    430c:	50 97       	sbiw	r26, 0x10	; 16
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    430e:	00 97       	sbiw	r24, 0x00	; 0
    4310:	21 f4       	brne	.+8      	; 0x431a <__stack+0x11b>
    4312:	51 96       	adiw	r26, 0x11	; 17
    4314:	fc 92       	st	X, r15
    4316:	ee 92       	st	-X, r14
    4318:	50 97       	sbiw	r26, 0x10	; 16
                    nrk_add_to_readyQ(task_ID);
    431a:	82 2f       	mov	r24, r18
    431c:	29 83       	std	Y+1, r18	; 0x01
    431e:	0e 94 c2 19 	call	0x3384	; 0x3384 <nrk_add_to_readyQ>
    4322:	29 81       	ldd	r18, Y+1	; 0x01
    4324:	1a c0       	rjmp	.+52     	; 0x435a <__stack+0x15b>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4326:	f1 01       	movw	r30, r2
    4328:	75 8b       	std	Z+21, r23	; 0x15
    432a:	64 8b       	std	Z+20, r22	; 0x14
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    432c:	ba 01       	movw	r22, r20
    432e:	61 50       	subi	r22, 0x01	; 1
    4330:	70 40       	sbci	r23, 0x00	; 0
    4332:	68 9f       	mul	r22, r24
    4334:	a0 01       	movw	r20, r0
    4336:	69 9f       	mul	r22, r25
    4338:	50 0d       	add	r21, r0
    433a:	78 9f       	mul	r23, r24
    433c:	50 0d       	add	r21, r0
    433e:	11 24       	eor	r1, r1
    4340:	51 8b       	std	Z+17, r21	; 0x11
    4342:	40 8b       	std	Z+16, r20	; 0x10
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4344:	53 8b       	std	Z+19, r21	; 0x13
    4346:	42 8b       	std	Z+18, r20	; 0x12
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4348:	00 97       	sbiw	r24, 0x00	; 0
    434a:	11 f4       	brne	.+4      	; 0x4350 <__stack+0x151>
    434c:	f1 8a       	std	Z+17, r15	; 0x11
    434e:	e0 8a       	std	Z+16, r14	; 0x10
                    nrk_task_TCB[task_ID].num_periods=1;
    4350:	d1 01       	movw	r26, r2
    4352:	5b 96       	adiw	r26, 0x1b	; 27
    4354:	7c 92       	st	X, r7
    4356:	6e 92       	st	-X, r6
    4358:	5a 97       	sbiw	r26, 0x1a	; 26
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    435a:	f1 01       	movw	r30, r2
    435c:	80 89       	ldd	r24, Z+16	; 0x10
    435e:	91 89       	ldd	r25, Z+17	; 0x11
    4360:	00 97       	sbiw	r24, 0x00	; 0
    4362:	21 f0       	breq	.+8      	; 0x436c <__stack+0x16d>
    4364:	80 17       	cp	r24, r16
    4366:	91 07       	cpc	r25, r17
    4368:	08 f4       	brcc	.+2      	; 0x436c <__stack+0x16d>
    436a:	8c 01       	movw	r16, r24

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    436c:	2f 5f       	subi	r18, 0xFF	; 255
    436e:	81 e2       	ldi	r24, 0x21	; 33
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	28 0e       	add	r2, r24
    4374:	39 1e       	adc	r3, r25
    4376:	25 30       	cpi	r18, 0x05	; 5
    4378:	09 f0       	breq	.+2      	; 0x437c <__stack+0x17d>
    437a:	2d cf       	rjmp	.-422    	; 0x41d6 <_nrk_scheduler+0x1ea>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    437c:	0e 94 b1 19 	call	0x3362	; 0x3362 <nrk_get_high_ready_task_ID>
    4380:	e8 2e       	mov	r14, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4382:	28 2f       	mov	r18, r24
    4384:	33 27       	eor	r19, r19
    4386:	27 fd       	sbrc	r18, 7
    4388:	30 95       	com	r19
    438a:	f9 01       	movw	r30, r18
    438c:	85 e0       	ldi	r24, 0x05	; 5
    438e:	ee 0f       	add	r30, r30
    4390:	ff 1f       	adc	r31, r31
    4392:	8a 95       	dec	r24
    4394:	e1 f7       	brne	.-8      	; 0x438e <__stack+0x18f>
    4396:	e2 0f       	add	r30, r18
    4398:	f3 1f       	adc	r31, r19
    439a:	e6 56       	subi	r30, 0x66	; 102
    439c:	f8 4f       	sbci	r31, 0xF8	; 248
    439e:	82 85       	ldd	r24, Z+10	; 0x0a
    43a0:	80 93 d7 06 	sts	0x06D7, r24
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    43a4:	f0 93 0b 05 	sts	0x050B, r31
    43a8:	e0 93 0a 05 	sts	0x050A, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    43ac:	ee 20       	and	r14, r14
    43ae:	b9 f0       	breq	.+46     	; 0x43de <__stack+0x1df>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    43b0:	25 8d       	ldd	r18, Z+29	; 0x1d
    43b2:	36 8d       	ldd	r19, Z+30	; 0x1e
    43b4:	21 15       	cp	r18, r1
    43b6:	31 05       	cpc	r19, r1
    43b8:	51 f0       	breq	.+20     	; 0x43ce <__stack+0x1cf>
    43ba:	21 8d       	ldd	r18, Z+25	; 0x19
    43bc:	32 8d       	ldd	r19, Z+26	; 0x1a
    43be:	2a 3f       	cpi	r18, 0xFA	; 250
    43c0:	31 05       	cpc	r19, r1
    43c2:	28 f4       	brcc	.+10     	; 0x43ce <__stack+0x1cf>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    43c4:	20 17       	cp	r18, r16
    43c6:	31 07       	cpc	r19, r17
    43c8:	08 f4       	brcc	.+2      	; 0x43cc <__stack+0x1cd>
    43ca:	4b c0       	rjmp	.+150    	; 0x4462 <__stack+0x263>
    43cc:	0d c0       	rjmp	.+26     	; 0x43e8 <__stack+0x1e9>
    43ce:	98 01       	movw	r18, r16
    43d0:	0b 3f       	cpi	r16, 0xFB	; 251
    43d2:	11 05       	cpc	r17, r1
    43d4:	08 f4       	brcc	.+2      	; 0x43d8 <__stack+0x1d9>
    43d6:	45 c0       	rjmp	.+138    	; 0x4462 <__stack+0x263>
    43d8:	2a ef       	ldi	r18, 0xFA	; 250
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	42 c0       	rjmp	.+132    	; 0x4462 <__stack+0x263>
    }*/


    //  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
    43de:	0b 3f       	cpi	r16, 0xFB	; 251
    43e0:	11 05       	cpc	r17, r1
    43e2:	10 f0       	brcs	.+4      	; 0x43e8 <__stack+0x1e9>
    43e4:	0a ef       	ldi	r16, 0xFA	; 250
    43e6:	10 e0       	ldi	r17, 0x00	; 0
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    43e8:	80 93 0c 05 	sts	0x050C, r24
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    43ec:	f0 93 1a 06 	sts	0x061A, r31
    43f0:	e0 93 19 06 	sts	0x0619, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    43f4:	00 93 67 07 	sts	0x0767, r16


    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    43f8:	0e 94 8a 23 	call	0x4714	; 0x4714 <_nrk_os_timer_get>
    43fc:	28 2f       	mov	r18, r24
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	2f 5f       	subi	r18, 0xFF	; 255
    4402:	3f 4f       	sbci	r19, 0xFF	; 255
    4404:	20 17       	cp	r18, r16
    4406:	31 07       	cpc	r19, r17
    4408:	40 f0       	brcs	.+16     	; 0x441a <__stack+0x21b>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    440a:	0e 94 8a 23 	call	0x4714	; 0x4714 <_nrk_os_timer_get>
    440e:	08 2f       	mov	r16, r24
    4410:	10 e0       	ldi	r17, 0x00	; 0
    4412:	0e 5f       	subi	r16, 0xFE	; 254
    4414:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    4416:	00 93 67 07 	sts	0x0767, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    441a:	ee 20       	and	r14, r14
    441c:	11 f0       	breq	.+4      	; 0x4422 <__stack+0x223>
    441e:	10 92 42 08 	sts	0x0842, r1

    _nrk_set_next_wakeup(next_wake);
    4422:	80 2f       	mov	r24, r16
    4424:	0e 94 25 23 	call	0x464a	; 0x464a <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    4428:	c2 01       	movw	r24, r4
    442a:	6c ed       	ldi	r22, 0xDC	; 220
    442c:	75 e0       	ldi	r23, 0x05	; 5
    442e:	0e 94 89 22 	call	0x4512	; 0x4512 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    4432:	0e 94 48 26 	call	0x4c90	; 0x4c90 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();
    4436:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <nrk_start_high_ready_task>

}
    443a:	0f 90       	pop	r0
    443c:	cf 91       	pop	r28
    443e:	df 91       	pop	r29
    4440:	1f 91       	pop	r17
    4442:	0f 91       	pop	r16
    4444:	ff 90       	pop	r15
    4446:	ef 90       	pop	r14
    4448:	df 90       	pop	r13
    444a:	cf 90       	pop	r12
    444c:	bf 90       	pop	r11
    444e:	af 90       	pop	r10
    4450:	9f 90       	pop	r9
    4452:	8f 90       	pop	r8
    4454:	7f 90       	pop	r7
    4456:	6f 90       	pop	r6
    4458:	5f 90       	pop	r5
    445a:	4f 90       	pop	r4
    445c:	3f 90       	pop	r3
    445e:	2f 90       	pop	r2
    4460:	08 95       	ret

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    4462:	89 01       	movw	r16, r18
    4464:	c1 cf       	rjmp	.-126    	; 0x43e8 <__stack+0x1e9>

00004466 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    4466:	89 e0       	ldi	r24, 0x09	; 9
    4468:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    446c:	8d e8       	ldi	r24, 0x8D	; 141
    446e:	9c e3       	ldi	r25, 0x3C	; 60
    4470:	90 93 29 01 	sts	0x0129, r25
    4474:	80 93 28 01 	sts	0x0128, r24
}
    4478:	08 95       	ret

0000447a <_nrk_precision_os_timer_reset>:

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    447a:	10 92 25 01 	sts	0x0125, r1
    447e:	10 92 24 01 	sts	0x0124, r1
}
    4482:	08 95       	ret

00004484 <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    449c:	01 97       	sbiw	r24, 0x01	; 1
    449e:	91 f7       	brne	.-28     	; 0x4484 <nrk_spin_wait_us>

}
    44a0:	08 95       	ret

000044a2 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    44a2:	10 92 21 01 	sts	0x0121, r1
}
    44a6:	08 95       	ret

000044a8 <_nrk_precision_os_timer_get>:
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
}

inline uint16_t _nrk_precision_os_timer_get()
{
    44a8:	df 93       	push	r29
    44aa:	cf 93       	push	r28
    44ac:	00 d0       	rcall	.+0      	; 0x44ae <_nrk_precision_os_timer_get+0x6>
    44ae:	cd b7       	in	r28, 0x3d	; 61
    44b0:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    44b2:	80 91 24 01 	lds	r24, 0x0124
    44b6:	90 91 25 01 	lds	r25, 0x0125
    44ba:	9a 83       	std	Y+2, r25	; 0x02
    44bc:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    44be:	29 81       	ldd	r18, Y+1	; 0x01
    44c0:	3a 81       	ldd	r19, Y+2	; 0x02
}
    44c2:	c9 01       	movw	r24, r18
    44c4:	0f 90       	pop	r0
    44c6:	0f 90       	pop	r0
    44c8:	cf 91       	pop	r28
    44ca:	df 91       	pop	r29
    44cc:	08 95       	ret

000044ce <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    44ce:	10 92 81 00 	sts	0x0081, r1
}
    44d2:	08 95       	ret

000044d4 <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    44d4:	81 e0       	ldi	r24, 0x01	; 1
    44d6:	80 93 81 00 	sts	0x0081, r24
}
    44da:	08 95       	ret

000044dc <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    44dc:	83 b5       	in	r24, 0x23	; 35
    44de:	81 60       	ori	r24, 0x01	; 1
    44e0:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    44e2:	10 92 85 00 	sts	0x0085, r1
    44e6:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    44ea:	08 95       	ret

000044ec <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    44ec:	df 93       	push	r29
    44ee:	cf 93       	push	r28
    44f0:	00 d0       	rcall	.+0      	; 0x44f2 <_nrk_high_speed_timer_get+0x6>
    44f2:	cd b7       	in	r28, 0x3d	; 61
    44f4:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    44f6:	80 91 84 00 	lds	r24, 0x0084
    44fa:	90 91 85 00 	lds	r25, 0x0085
    44fe:	9a 83       	std	Y+2, r25	; 0x02
    4500:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    4502:	29 81       	ldd	r18, Y+1	; 0x01
    4504:	3a 81       	ldd	r19, Y+2	; 0x02
}
    4506:	c9 01       	movw	r24, r18
    4508:	0f 90       	pop	r0
    450a:	0f 90       	pop	r0
    450c:	cf 91       	pop	r28
    450e:	df 91       	pop	r29
    4510:	08 95       	ret

00004512 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    4512:	ef 92       	push	r14
    4514:	ff 92       	push	r15
    4516:	0f 93       	push	r16
    4518:	1f 93       	push	r17
    451a:	cf 93       	push	r28
    451c:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    451e:	ec 01       	movw	r28, r24
    4520:	cc 0f       	add	r28, r28
    4522:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    4524:	8f ef       	ldi	r24, 0xFF	; 255
    4526:	c9 37       	cpi	r28, 0x79	; 121
    4528:	d8 07       	cpc	r29, r24
    452a:	10 f0       	brcs	.+4      	; 0x4530 <nrk_high_speed_timer_wait+0x1e>
    452c:	c0 e0       	ldi	r28, 0x00	; 0
    452e:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    4530:	7e 01       	movw	r14, r28
    4532:	00 e0       	ldi	r16, 0x00	; 0
    4534:	10 e0       	ldi	r17, 0x00	; 0
    4536:	80 e0       	ldi	r24, 0x00	; 0
    4538:	90 e0       	ldi	r25, 0x00	; 0
    453a:	e6 0e       	add	r14, r22
    453c:	f7 1e       	adc	r15, r23
    453e:	08 1f       	adc	r16, r24
    4540:	19 1f       	adc	r17, r25
if(tmp>65536) 
    4542:	91 e0       	ldi	r25, 0x01	; 1
    4544:	e9 16       	cp	r14, r25
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	f9 06       	cpc	r15, r25
    454a:	91 e0       	ldi	r25, 0x01	; 1
    454c:	09 07       	cpc	r16, r25
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	19 07       	cpc	r17, r25
    4552:	68 f0       	brcs	.+26     	; 0x456e <nrk_high_speed_timer_wait+0x5c>
	{
	tmp-=65536;
    4554:	80 e0       	ldi	r24, 0x00	; 0
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	af ef       	ldi	r26, 0xFF	; 255
    455a:	bf ef       	ldi	r27, 0xFF	; 255
    455c:	e8 0e       	add	r14, r24
    455e:	f9 1e       	adc	r15, r25
    4560:	0a 1f       	adc	r16, r26
    4562:	1b 1f       	adc	r17, r27
	do{}while(_nrk_high_speed_timer_get()>start);
    4564:	0e 94 76 22 	call	0x44ec	; 0x44ec <_nrk_high_speed_timer_get>
    4568:	c8 17       	cp	r28, r24
    456a:	d9 07       	cpc	r29, r25
    456c:	d8 f3       	brcs	.-10     	; 0x4564 <nrk_high_speed_timer_wait+0x52>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    456e:	0e 94 76 22 	call	0x44ec	; 0x44ec <_nrk_high_speed_timer_get>
    4572:	8e 15       	cp	r24, r14
    4574:	9f 05       	cpc	r25, r15
    4576:	d8 f3       	brcs	.-10     	; 0x456e <nrk_high_speed_timer_wait+0x5c>
}
    4578:	df 91       	pop	r29
    457a:	cf 91       	pop	r28
    457c:	1f 91       	pop	r17
    457e:	0f 91       	pop	r16
    4580:	ff 90       	pop	r15
    4582:	ef 90       	pop	r14
    4584:	08 95       	ret

00004586 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    4586:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    458a:	e0 e7       	ldi	r30, 0x70	; 112
    458c:	f0 e0       	ldi	r31, 0x00	; 0
    458e:	80 81       	ld	r24, Z
    4590:	8d 7f       	andi	r24, 0xFD	; 253
    4592:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    4594:	80 81       	ld	r24, Z
    4596:	8e 7f       	andi	r24, 0xFE	; 254
    4598:	80 83       	st	Z, r24
}
    459a:	08 95       	ret

0000459c <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    459c:	80 93 b2 00 	sts	0x00B2, r24
}
    45a0:	08 95       	ret

000045a2 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    45a2:	e0 e7       	ldi	r30, 0x70	; 112
    45a4:	f0 e0       	ldi	r31, 0x00	; 0
    45a6:	80 81       	ld	r24, Z
    45a8:	83 60       	ori	r24, 0x03	; 3
    45aa:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    45ac:	83 e0       	ldi	r24, 0x03	; 3
    45ae:	80 93 b1 00 	sts	0x00B1, r24
}
    45b2:	08 95       	ret

000045b4 <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    45b4:	83 b5       	in	r24, 0x23	; 35
    45b6:	82 60       	ori	r24, 0x02	; 2
    45b8:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    45ba:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    45be:	10 92 65 07 	sts	0x0765, r1
    _nrk_prev_timer_val=0;
    45c2:	10 92 67 07 	sts	0x0767, r1
}
    45c6:	08 95       	ret

000045c8 <_nrk_setup_timer>:

}


void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
    45c8:	8e ef       	ldi	r24, 0xFE	; 254
    45ca:	80 93 67 07 	sts	0x0767, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    45ce:	90 e2       	ldi	r25, 0x20	; 32
    45d0:	90 93 b6 00 	sts	0x00B6, r25
  OCR2A = _nrk_prev_timer_val;
    45d4:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    45d8:	83 e0       	ldi	r24, 0x03	; 3
    45da:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    45dc:	92 e0       	ldi	r25, 0x02	; 2
    45de:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    45e2:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    45e6:	93 b5       	in	r25, 0x23	; 35
    45e8:	92 60       	ori	r25, 0x02	; 2
    45ea:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    45ec:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    45ee:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    45f0:	83 b5       	in	r24, 0x23	; 35
    45f2:	82 60       	ori	r24, 0x02	; 2
    45f4:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    45f6:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    4600:	10 92 85 00 	sts	0x0085, r1
    4604:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4608:	83 b5       	in	r24, 0x23	; 35
    460a:	82 60       	ori	r24, 0x02	; 2
    460c:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    460e:	83 b5       	in	r24, 0x23	; 35
    4610:	81 60       	ori	r24, 0x01	; 1
    4612:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    4614:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    4618:	10 92 25 01 	sts	0x0125, r1
    461c:	10 92 24 01 	sts	0x0124, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4620:	83 b5       	in	r24, 0x23	; 35
    4622:	82 60       	ori	r24, 0x02	; 2
    4624:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4626:	83 b5       	in	r24, 0x23	; 35
    4628:	81 60       	ori	r24, 0x01	; 1
    462a:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    462c:	0e 94 da 22 	call	0x45b4	; 0x45b4 <_nrk_os_timer_reset>
  _nrk_precision_os_timer_reset();
    4630:	0e 94 3d 22 	call	0x447a	; 0x447a <_nrk_precision_os_timer_reset>
  _nrk_os_timer_start();
    4634:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    4638:	0e 94 33 22 	call	0x4466	; 0x4466 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    463c:	10 92 65 07 	sts	0x0765, r1
}
    4640:	08 95       	ret

00004642 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    4642:	80 91 b3 00 	lds	r24, 0x00B3
}
    4646:	8f 5f       	subi	r24, 0xFF	; 255
    4648:	08 95       	ret

0000464a <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    464a:	81 50       	subi	r24, 0x01	; 1
    464c:	80 93 b3 00 	sts	0x00B3, r24
}
    4650:	08 95       	ret

00004652 <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4652:	88 23       	and	r24, r24
    4654:	11 f4       	brne	.+4      	; 0x465a <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    4656:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    465a:	8f ef       	ldi	r24, 0xFF	; 255
    465c:	08 95       	ret

0000465e <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    465e:	88 23       	and	r24, r24
    4660:	31 f4       	brne	.+12     	; 0x466e <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    4662:	10 92 95 00 	sts	0x0095, r1
    4666:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	08 95       	ret
	}
return NRK_ERROR;
    466e:	8f ef       	ldi	r24, 0xFF	; 255
}
    4670:	08 95       	ret

00004672 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4672:	88 23       	and	r24, r24
    4674:	29 f4       	brne	.+10     	; 0x4680 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    4676:	20 91 94 00 	lds	r18, 0x0094
    467a:	30 91 95 00 	lds	r19, 0x0095
    467e:	02 c0       	rjmp	.+4      	; 0x4684 <nrk_timer_int_read+0x12>
	}
return 0;
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0

}
    4684:	c9 01       	movw	r24, r18
    4686:	08 95       	ret

00004688 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    4688:	88 23       	and	r24, r24
    468a:	29 f4       	brne	.+10     	; 0x4696 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    468c:	82 e0       	ldi	r24, 0x02	; 2
    468e:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    4692:	81 e0       	ldi	r24, 0x01	; 1
    4694:	08 95       	ret
	}
return NRK_ERROR;
    4696:	8f ef       	ldi	r24, 0xFF	; 255
}
    4698:	08 95       	ret

0000469a <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    469a:	88 23       	and	r24, r24
    469c:	b9 f5       	brne	.+110    	; 0x470c <nrk_timer_int_configure+0x72>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    469e:	cb 01       	movw	r24, r22
    46a0:	01 97       	sbiw	r24, 0x01	; 1
    46a2:	85 30       	cpi	r24, 0x05	; 5
    46a4:	91 05       	cpc	r25, r1
    46a6:	10 f4       	brcc	.+4      	; 0x46ac <nrk_timer_int_configure+0x12>
    46a8:	60 93 66 07 	sts	0x0766, r22
	TCCR3A = 0;  
    46ac:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    46b0:	88 e0       	ldi	r24, 0x08	; 8
    46b2:	80 93 91 00 	sts	0x0091, r24
  	OCR3AH = (compare_value >> 8) & 0xFF;	
    46b6:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    46ba:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    46be:	30 93 64 07 	sts	0x0764, r19
    46c2:	20 93 63 07 	sts	0x0763, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    46c6:	80 91 66 07 	lds	r24, 0x0766
    46ca:	81 30       	cpi	r24, 0x01	; 1
    46cc:	21 f4       	brne	.+8      	; 0x46d6 <nrk_timer_int_configure+0x3c>
    46ce:	80 91 91 00 	lds	r24, 0x0091
    46d2:	81 60       	ori	r24, 0x01	; 1
    46d4:	0b c0       	rjmp	.+22     	; 0x46ec <nrk_timer_int_configure+0x52>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    46d6:	82 30       	cpi	r24, 0x02	; 2
    46d8:	21 f4       	brne	.+8      	; 0x46e2 <nrk_timer_int_configure+0x48>
    46da:	80 91 91 00 	lds	r24, 0x0091
    46de:	82 60       	ori	r24, 0x02	; 2
    46e0:	05 c0       	rjmp	.+10     	; 0x46ec <nrk_timer_int_configure+0x52>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    46e2:	83 30       	cpi	r24, 0x03	; 3
    46e4:	39 f4       	brne	.+14     	; 0x46f4 <nrk_timer_int_configure+0x5a>
    46e6:	80 91 91 00 	lds	r24, 0x0091
    46ea:	83 60       	ori	r24, 0x03	; 3
    46ec:	80 93 91 00 	sts	0x0091, r24
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	08 95       	ret
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    46f4:	84 30       	cpi	r24, 0x04	; 4
    46f6:	21 f4       	brne	.+8      	; 0x4700 <nrk_timer_int_configure+0x66>
    46f8:	80 91 91 00 	lds	r24, 0x0091
    46fc:	84 60       	ori	r24, 0x04	; 4
    46fe:	f6 cf       	rjmp	.-20     	; 0x46ec <nrk_timer_int_configure+0x52>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    4700:	85 30       	cpi	r24, 0x05	; 5
    4702:	31 f4       	brne	.+12     	; 0x4710 <nrk_timer_int_configure+0x76>
    4704:	80 91 91 00 	lds	r24, 0x0091
    4708:	85 60       	ori	r24, 0x05	; 5
    470a:	f0 cf       	rjmp	.-32     	; 0x46ec <nrk_timer_int_configure+0x52>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    470c:	8f ef       	ldi	r24, 0xFF	; 255
    470e:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4710:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    4712:	08 95       	ret

00004714 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    4714:	80 91 b2 00 	lds	r24, 0x00B2
}
    4718:	08 95       	ret

0000471a <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    471a:	1f 92       	push	r1
    471c:	0f 92       	push	r0
    471e:	0f b6       	in	r0, 0x3f	; 63
    4720:	0f 92       	push	r0
    4722:	0b b6       	in	r0, 0x3b	; 59
    4724:	0f 92       	push	r0
    4726:	11 24       	eor	r1, r1
    4728:	2f 93       	push	r18
    472a:	3f 93       	push	r19
    472c:	4f 93       	push	r20
    472e:	5f 93       	push	r21
    4730:	6f 93       	push	r22
    4732:	7f 93       	push	r23
    4734:	8f 93       	push	r24
    4736:	9f 93       	push	r25
    4738:	af 93       	push	r26
    473a:	bf 93       	push	r27
    473c:	ef 93       	push	r30
    473e:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4740:	8a e0       	ldi	r24, 0x0A	; 10
    4742:	60 e0       	ldi	r22, 0x00	; 0
    4744:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
    4748:	ff cf       	rjmp	.-2      	; 0x4748 <__vector_default+0x2e>

0000474a <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    474a:	0f 92       	push	r0
    474c:	0f b6       	in	r0, 0x3f	; 63
    474e:	0f 92       	push	r0
    4750:	1f 92       	push	r1
    4752:	2f 92       	push	r2
    4754:	3f 92       	push	r3
    4756:	4f 92       	push	r4
    4758:	5f 92       	push	r5
    475a:	6f 92       	push	r6
    475c:	7f 92       	push	r7
    475e:	8f 92       	push	r8
    4760:	9f 92       	push	r9
    4762:	af 92       	push	r10
    4764:	bf 92       	push	r11
    4766:	cf 92       	push	r12
    4768:	df 92       	push	r13
    476a:	ef 92       	push	r14
    476c:	ff 92       	push	r15
    476e:	0f 93       	push	r16
    4770:	1f 93       	push	r17
    4772:	2f 93       	push	r18
    4774:	3f 93       	push	r19
    4776:	4f 93       	push	r20
    4778:	5f 93       	push	r21
    477a:	6f 93       	push	r22
    477c:	7f 93       	push	r23
    477e:	8f 93       	push	r24
    4780:	9f 93       	push	r25
    4782:	af 93       	push	r26
    4784:	bf 93       	push	r27
    4786:	cf 93       	push	r28
    4788:	df 93       	push	r29
    478a:	ef 93       	push	r30
    478c:	ff 93       	push	r31
    478e:	a0 91 19 06 	lds	r26, 0x0619
    4792:	b0 91 1a 06 	lds	r27, 0x061A
    4796:	0d b6       	in	r0, 0x3d	; 61
    4798:	0d 92       	st	X+, r0
    479a:	0e b6       	in	r0, 0x3e	; 62
    479c:	0d 92       	st	X+, r0
    479e:	1f 92       	push	r1
    47a0:	a0 91 1b 06 	lds	r26, 0x061B
    47a4:	b0 91 1c 06 	lds	r27, 0x061C
    47a8:	1e 90       	ld	r1, -X
    47aa:	be bf       	out	0x3e, r27	; 62
    47ac:	ad bf       	out	0x3d, r26	; 61
    47ae:	08 95       	ret

000047b0 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    47b0:	1f 92       	push	r1
    47b2:	0f 92       	push	r0
    47b4:	0f b6       	in	r0, 0x3f	; 63
    47b6:	0f 92       	push	r0
    47b8:	0b b6       	in	r0, 0x3b	; 59
    47ba:	0f 92       	push	r0
    47bc:	11 24       	eor	r1, r1
    47be:	2f 93       	push	r18
    47c0:	3f 93       	push	r19
    47c2:	4f 93       	push	r20
    47c4:	5f 93       	push	r21
    47c6:	6f 93       	push	r22
    47c8:	7f 93       	push	r23
    47ca:	8f 93       	push	r24
    47cc:	9f 93       	push	r25
    47ce:	af 93       	push	r26
    47d0:	bf 93       	push	r27
    47d2:	ef 93       	push	r30
    47d4:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    47d6:	e0 91 63 07 	lds	r30, 0x0763
    47da:	f0 91 64 07 	lds	r31, 0x0764
    47de:	30 97       	sbiw	r30, 0x00	; 0
    47e0:	11 f0       	breq	.+4      	; 0x47e6 <__vector_32+0x36>
    47e2:	09 95       	icall
    47e4:	04 c0       	rjmp	.+8      	; 0x47ee <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    47e6:	8a e0       	ldi	r24, 0x0A	; 10
    47e8:	60 e0       	ldi	r22, 0x00	; 0
    47ea:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
	return;  	
}
    47ee:	ff 91       	pop	r31
    47f0:	ef 91       	pop	r30
    47f2:	bf 91       	pop	r27
    47f4:	af 91       	pop	r26
    47f6:	9f 91       	pop	r25
    47f8:	8f 91       	pop	r24
    47fa:	7f 91       	pop	r23
    47fc:	6f 91       	pop	r22
    47fe:	5f 91       	pop	r21
    4800:	4f 91       	pop	r20
    4802:	3f 91       	pop	r19
    4804:	2f 91       	pop	r18
    4806:	0f 90       	pop	r0
    4808:	0b be       	out	0x3b, r0	; 59
    480a:	0f 90       	pop	r0
    480c:	0f be       	out	0x3f, r0	; 63
    480e:	0f 90       	pop	r0
    4810:	1f 90       	pop	r1
    4812:	18 95       	reti

00004814 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    4814:	1f 92       	push	r1
    4816:	0f 92       	push	r0
    4818:	0f b6       	in	r0, 0x3f	; 63
    481a:	0f 92       	push	r0
    481c:	11 24       	eor	r1, r1

	return;  	
} 
    481e:	0f 90       	pop	r0
    4820:	0f be       	out	0x3f, r0	; 63
    4822:	0f 90       	pop	r0
    4824:	1f 90       	pop	r1
    4826:	18 95       	reti

00004828 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    4828:	04 b6       	in	r0, 0x34	; 52
    482a:	03 fc       	sbrc	r0, 3
    482c:	02 c0       	rjmp	.+4      	; 0x4832 <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    482e:	80 e0       	ldi	r24, 0x00	; 0
    4830:	01 c0       	rjmp	.+2      	; 0x4834 <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    4832:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    4834:	04 b6       	in	r0, 0x34	; 52
    4836:	02 fe       	sbrs	r0, 2
    4838:	06 c0       	rjmp	.+12     	; 0x4846 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    483a:	94 b7       	in	r25, 0x34	; 52
    483c:	9b 7f       	andi	r25, 0xFB	; 251
    483e:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    4840:	04 b6       	in	r0, 0x34	; 52
    4842:	00 fe       	sbrs	r0, 0
		error|=0x04;
    4844:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    4846:	04 b6       	in	r0, 0x34	; 52
    4848:	01 fe       	sbrs	r0, 1
    484a:	05 c0       	rjmp	.+10     	; 0x4856 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    484c:	94 b7       	in	r25, 0x34	; 52
    484e:	9d 7f       	andi	r25, 0xFD	; 253
    4850:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    4852:	82 60       	ori	r24, 0x02	; 2
    4854:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    4856:	88 23       	and	r24, r24
    4858:	61 f4       	brne	.+24     	; 0x4872 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    485a:	04 b6       	in	r0, 0x34	; 52
    485c:	00 fe       	sbrs	r0, 0
    485e:	04 c0       	rjmp	.+8      	; 0x4868 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    4860:	94 b7       	in	r25, 0x34	; 52
    4862:	9e 7f       	andi	r25, 0xFE	; 254
    4864:	94 bf       	out	0x34, r25	; 52
    4866:	01 c0       	rjmp	.+2      	; 0x486a <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    4868:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    486a:	90 91 b0 00 	lds	r25, 0x00B0
    486e:	91 11       	cpse	r25, r1
    4870:	81 60       	ori	r24, 0x01	; 1

return error;
}
    4872:	08 95       	ret

00004874 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    4874:	88 23       	and	r24, r24
    4876:	11 f4       	brne	.+4      	; 0x487c <nrk_ext_int_enable+0x8>
    4878:	e8 9a       	sbi	0x1d, 0	; 29
    487a:	39 c0       	rjmp	.+114    	; 0x48ee <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    487c:	81 30       	cpi	r24, 0x01	; 1
    487e:	11 f4       	brne	.+4      	; 0x4884 <nrk_ext_int_enable+0x10>
    4880:	e9 9a       	sbi	0x1d, 1	; 29
    4882:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    4884:	82 30       	cpi	r24, 0x02	; 2
    4886:	11 f4       	brne	.+4      	; 0x488c <nrk_ext_int_enable+0x18>
    4888:	ea 9a       	sbi	0x1d, 2	; 29
    488a:	31 c0       	rjmp	.+98     	; 0x48ee <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    488c:	83 30       	cpi	r24, 0x03	; 3
    488e:	21 f4       	brne	.+8      	; 0x4898 <nrk_ext_int_enable+0x24>
    4890:	80 91 6b 00 	lds	r24, 0x006B
    4894:	81 60       	ori	r24, 0x01	; 1
    4896:	29 c0       	rjmp	.+82     	; 0x48ea <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4898:	84 30       	cpi	r24, 0x04	; 4
    489a:	21 f4       	brne	.+8      	; 0x48a4 <nrk_ext_int_enable+0x30>
    489c:	80 91 6b 00 	lds	r24, 0x006B
    48a0:	82 60       	ori	r24, 0x02	; 2
    48a2:	23 c0       	rjmp	.+70     	; 0x48ea <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    48a4:	85 30       	cpi	r24, 0x05	; 5
    48a6:	21 f4       	brne	.+8      	; 0x48b0 <nrk_ext_int_enable+0x3c>
    48a8:	80 91 6b 00 	lds	r24, 0x006B
    48ac:	84 60       	ori	r24, 0x04	; 4
    48ae:	1d c0       	rjmp	.+58     	; 0x48ea <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    48b0:	86 30       	cpi	r24, 0x06	; 6
    48b2:	21 f4       	brne	.+8      	; 0x48bc <nrk_ext_int_enable+0x48>
    48b4:	80 91 6b 00 	lds	r24, 0x006B
    48b8:	88 60       	ori	r24, 0x08	; 8
    48ba:	17 c0       	rjmp	.+46     	; 0x48ea <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    48bc:	87 30       	cpi	r24, 0x07	; 7
    48be:	21 f4       	brne	.+8      	; 0x48c8 <nrk_ext_int_enable+0x54>
    48c0:	80 91 6b 00 	lds	r24, 0x006B
    48c4:	80 61       	ori	r24, 0x10	; 16
    48c6:	11 c0       	rjmp	.+34     	; 0x48ea <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    48c8:	88 30       	cpi	r24, 0x08	; 8
    48ca:	21 f4       	brne	.+8      	; 0x48d4 <nrk_ext_int_enable+0x60>
    48cc:	80 91 6b 00 	lds	r24, 0x006B
    48d0:	80 62       	ori	r24, 0x20	; 32
    48d2:	0b c0       	rjmp	.+22     	; 0x48ea <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    48d4:	89 30       	cpi	r24, 0x09	; 9
    48d6:	21 f4       	brne	.+8      	; 0x48e0 <nrk_ext_int_enable+0x6c>
    48d8:	80 91 6b 00 	lds	r24, 0x006B
    48dc:	80 64       	ori	r24, 0x40	; 64
    48de:	05 c0       	rjmp	.+10     	; 0x48ea <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    48e0:	8a 30       	cpi	r24, 0x0A	; 10
    48e2:	39 f4       	brne	.+14     	; 0x48f2 <nrk_ext_int_enable+0x7e>
    48e4:	80 91 6b 00 	lds	r24, 0x006B
    48e8:	80 68       	ori	r24, 0x80	; 128
    48ea:	80 93 6b 00 	sts	0x006B, r24
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	08 95       	ret
return NRK_ERROR;
    48f2:	8f ef       	ldi	r24, 0xFF	; 255
}
    48f4:	08 95       	ret

000048f6 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    48f6:	88 23       	and	r24, r24
    48f8:	11 f4       	brne	.+4      	; 0x48fe <nrk_ext_int_disable+0x8>
    48fa:	e8 98       	cbi	0x1d, 0	; 29
    48fc:	39 c0       	rjmp	.+114    	; 0x4970 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    48fe:	81 30       	cpi	r24, 0x01	; 1
    4900:	11 f4       	brne	.+4      	; 0x4906 <nrk_ext_int_disable+0x10>
    4902:	e9 98       	cbi	0x1d, 1	; 29
    4904:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4906:	82 30       	cpi	r24, 0x02	; 2
    4908:	11 f4       	brne	.+4      	; 0x490e <nrk_ext_int_disable+0x18>
    490a:	e9 98       	cbi	0x1d, 1	; 29
    490c:	31 c0       	rjmp	.+98     	; 0x4970 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    490e:	83 30       	cpi	r24, 0x03	; 3
    4910:	21 f4       	brne	.+8      	; 0x491a <nrk_ext_int_disable+0x24>
    4912:	80 91 6b 00 	lds	r24, 0x006B
    4916:	8e 7f       	andi	r24, 0xFE	; 254
    4918:	29 c0       	rjmp	.+82     	; 0x496c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    491a:	84 30       	cpi	r24, 0x04	; 4
    491c:	21 f4       	brne	.+8      	; 0x4926 <nrk_ext_int_disable+0x30>
    491e:	80 91 6b 00 	lds	r24, 0x006B
    4922:	8d 7f       	andi	r24, 0xFD	; 253
    4924:	23 c0       	rjmp	.+70     	; 0x496c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    4926:	85 30       	cpi	r24, 0x05	; 5
    4928:	21 f4       	brne	.+8      	; 0x4932 <nrk_ext_int_disable+0x3c>
    492a:	80 91 6b 00 	lds	r24, 0x006B
    492e:	8b 7f       	andi	r24, 0xFB	; 251
    4930:	1d c0       	rjmp	.+58     	; 0x496c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4932:	86 30       	cpi	r24, 0x06	; 6
    4934:	21 f4       	brne	.+8      	; 0x493e <nrk_ext_int_disable+0x48>
    4936:	80 91 6b 00 	lds	r24, 0x006B
    493a:	87 7f       	andi	r24, 0xF7	; 247
    493c:	17 c0       	rjmp	.+46     	; 0x496c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    493e:	87 30       	cpi	r24, 0x07	; 7
    4940:	21 f4       	brne	.+8      	; 0x494a <nrk_ext_int_disable+0x54>
    4942:	80 91 6b 00 	lds	r24, 0x006B
    4946:	8f 7e       	andi	r24, 0xEF	; 239
    4948:	11 c0       	rjmp	.+34     	; 0x496c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    494a:	88 30       	cpi	r24, 0x08	; 8
    494c:	21 f4       	brne	.+8      	; 0x4956 <nrk_ext_int_disable+0x60>
    494e:	80 91 6b 00 	lds	r24, 0x006B
    4952:	8f 7d       	andi	r24, 0xDF	; 223
    4954:	0b c0       	rjmp	.+22     	; 0x496c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4956:	89 30       	cpi	r24, 0x09	; 9
    4958:	21 f4       	brne	.+8      	; 0x4962 <nrk_ext_int_disable+0x6c>
    495a:	80 91 6b 00 	lds	r24, 0x006B
    495e:	8f 7b       	andi	r24, 0xBF	; 191
    4960:	05 c0       	rjmp	.+10     	; 0x496c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4962:	8a 30       	cpi	r24, 0x0A	; 10
    4964:	39 f4       	brne	.+14     	; 0x4974 <nrk_ext_int_disable+0x7e>
    4966:	80 91 6b 00 	lds	r24, 0x006B
    496a:	8f 77       	andi	r24, 0x7F	; 127
    496c:	80 93 6b 00 	sts	0x006B, r24
    4970:	81 e0       	ldi	r24, 0x01	; 1
    4972:	08 95       	ret
return NRK_ERROR;
    4974:	8f ef       	ldi	r24, 0xFF	; 255
}
    4976:	08 95       	ret

00004978 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    4978:	88 23       	and	r24, r24
    497a:	39 f5       	brne	.+78     	; 0x49ca <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    497c:	50 93 65 08 	sts	0x0865, r21
    4980:	40 93 64 08 	sts	0x0864, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4984:	66 23       	and	r22, r22
    4986:	21 f4       	brne	.+8      	; 0x4990 <nrk_ext_int_configure+0x18>
    4988:	80 91 69 00 	lds	r24, 0x0069
    498c:	8c 7f       	andi	r24, 0xFC	; 252
    498e:	66 c0       	rjmp	.+204    	; 0x4a5c <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    4990:	61 30       	cpi	r22, 0x01	; 1
    4992:	49 f4       	brne	.+18     	; 0x49a6 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    4994:	80 91 69 00 	lds	r24, 0x0069
    4998:	8d 7f       	andi	r24, 0xFD	; 253
    499a:	80 93 69 00 	sts	0x0069, r24
    499e:	80 91 69 00 	lds	r24, 0x0069
    49a2:	81 60       	ori	r24, 0x01	; 1
    49a4:	5b c0       	rjmp	.+182    	; 0x4a5c <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    49a6:	62 30       	cpi	r22, 0x02	; 2
    49a8:	49 f4       	brne	.+18     	; 0x49bc <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    49aa:	80 91 69 00 	lds	r24, 0x0069
    49ae:	82 60       	ori	r24, 0x02	; 2
    49b0:	80 93 69 00 	sts	0x0069, r24
    49b4:	80 91 69 00 	lds	r24, 0x0069
    49b8:	8e 7f       	andi	r24, 0xFE	; 254
    49ba:	50 c0       	rjmp	.+160    	; 0x4a5c <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    49bc:	63 30       	cpi	r22, 0x03	; 3
    49be:	09 f0       	breq	.+2      	; 0x49c2 <nrk_ext_int_configure+0x4a>
    49c0:	62 c0       	rjmp	.+196    	; 0x4a86 <nrk_ext_int_configure+0x10e>
    49c2:	80 91 69 00 	lds	r24, 0x0069
    49c6:	83 60       	ori	r24, 0x03	; 3
    49c8:	49 c0       	rjmp	.+146    	; 0x4a5c <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    49ca:	81 30       	cpi	r24, 0x01	; 1
    49cc:	31 f5       	brne	.+76     	; 0x4a1a <nrk_ext_int_configure+0xa2>
	{
	ext_int1_callback=callback_func;
    49ce:	50 93 63 08 	sts	0x0863, r21
    49d2:	40 93 62 08 	sts	0x0862, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    49d6:	66 23       	and	r22, r22
    49d8:	21 f4       	brne	.+8      	; 0x49e2 <nrk_ext_int_configure+0x6a>
    49da:	80 91 69 00 	lds	r24, 0x0069
    49de:	83 7f       	andi	r24, 0xF3	; 243
    49e0:	3d c0       	rjmp	.+122    	; 0x4a5c <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    49e2:	61 30       	cpi	r22, 0x01	; 1
    49e4:	49 f4       	brne	.+18     	; 0x49f8 <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    49e6:	80 91 69 00 	lds	r24, 0x0069
    49ea:	87 7f       	andi	r24, 0xF7	; 247
    49ec:	80 93 69 00 	sts	0x0069, r24
    49f0:	80 91 69 00 	lds	r24, 0x0069
    49f4:	84 60       	ori	r24, 0x04	; 4
    49f6:	32 c0       	rjmp	.+100    	; 0x4a5c <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    49f8:	62 30       	cpi	r22, 0x02	; 2
    49fa:	49 f4       	brne	.+18     	; 0x4a0e <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    49fc:	80 91 69 00 	lds	r24, 0x0069
    4a00:	88 60       	ori	r24, 0x08	; 8
    4a02:	80 93 69 00 	sts	0x0069, r24
    4a06:	80 91 69 00 	lds	r24, 0x0069
    4a0a:	8b 7f       	andi	r24, 0xFB	; 251
    4a0c:	27 c0       	rjmp	.+78     	; 0x4a5c <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    4a0e:	63 30       	cpi	r22, 0x03	; 3
    4a10:	d1 f5       	brne	.+116    	; 0x4a86 <nrk_ext_int_configure+0x10e>
    4a12:	80 91 69 00 	lds	r24, 0x0069
    4a16:	8c 60       	ori	r24, 0x0C	; 12
    4a18:	21 c0       	rjmp	.+66     	; 0x4a5c <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    4a1a:	82 30       	cpi	r24, 0x02	; 2
    4a1c:	41 f5       	brne	.+80     	; 0x4a6e <nrk_ext_int_configure+0xf6>
	{
	ext_int1_callback=callback_func;
    4a1e:	50 93 63 08 	sts	0x0863, r21
    4a22:	40 93 62 08 	sts	0x0862, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    4a26:	66 23       	and	r22, r22
    4a28:	21 f4       	brne	.+8      	; 0x4a32 <nrk_ext_int_configure+0xba>
    4a2a:	80 91 69 00 	lds	r24, 0x0069
    4a2e:	8f 7c       	andi	r24, 0xCF	; 207
    4a30:	15 c0       	rjmp	.+42     	; 0x4a5c <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    4a32:	61 30       	cpi	r22, 0x01	; 1
    4a34:	49 f4       	brne	.+18     	; 0x4a48 <nrk_ext_int_configure+0xd0>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    4a36:	80 91 69 00 	lds	r24, 0x0069
    4a3a:	8f 7d       	andi	r24, 0xDF	; 223
    4a3c:	80 93 69 00 	sts	0x0069, r24
    4a40:	80 91 69 00 	lds	r24, 0x0069
    4a44:	80 61       	ori	r24, 0x10	; 16
    4a46:	0a c0       	rjmp	.+20     	; 0x4a5c <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    4a48:	62 30       	cpi	r22, 0x02	; 2
    4a4a:	59 f4       	brne	.+22     	; 0x4a62 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    4a4c:	80 91 69 00 	lds	r24, 0x0069
    4a50:	80 62       	ori	r24, 0x20	; 32
    4a52:	80 93 69 00 	sts	0x0069, r24
    4a56:	80 91 69 00 	lds	r24, 0x0069
    4a5a:	8f 7e       	andi	r24, 0xEF	; 239
    4a5c:	80 93 69 00 	sts	0x0069, r24
    4a60:	12 c0       	rjmp	.+36     	; 0x4a86 <nrk_ext_int_configure+0x10e>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    4a62:	63 30       	cpi	r22, 0x03	; 3
    4a64:	81 f4       	brne	.+32     	; 0x4a86 <nrk_ext_int_configure+0x10e>
    4a66:	80 91 69 00 	lds	r24, 0x0069
    4a6a:	80 63       	ori	r24, 0x30	; 48
    4a6c:	f7 cf       	rjmp	.-18     	; 0x4a5c <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4a6e:	83 50       	subi	r24, 0x03	; 3
    4a70:	88 30       	cpi	r24, 0x08	; 8
    4a72:	58 f4       	brcc	.+22     	; 0x4a8a <nrk_ext_int_configure+0x112>
	PCICR |= BM(PCIE0);	
    4a74:	80 91 68 00 	lds	r24, 0x0068
    4a78:	81 60       	ori	r24, 0x01	; 1
    4a7a:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4a7e:	50 93 69 08 	sts	0x0869, r21
    4a82:	40 93 68 08 	sts	0x0868, r20
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
	return NRK_OK;
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	08 95       	ret
if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
	PCICR |= BM(PCIE0);	
	pc_int0_callback=callback_func;
	return NRK_OK;
	}
return NRK_ERROR;
    4a8a:	8f ef       	ldi	r24, 0xFF	; 255
}
    4a8c:	08 95       	ret

00004a8e <__vector_9>:


SIGNAL(PCINT0_vect) {
    4a8e:	1f 92       	push	r1
    4a90:	0f 92       	push	r0
    4a92:	0f b6       	in	r0, 0x3f	; 63
    4a94:	0f 92       	push	r0
    4a96:	0b b6       	in	r0, 0x3b	; 59
    4a98:	0f 92       	push	r0
    4a9a:	11 24       	eor	r1, r1
    4a9c:	2f 93       	push	r18
    4a9e:	3f 93       	push	r19
    4aa0:	4f 93       	push	r20
    4aa2:	5f 93       	push	r21
    4aa4:	6f 93       	push	r22
    4aa6:	7f 93       	push	r23
    4aa8:	8f 93       	push	r24
    4aaa:	9f 93       	push	r25
    4aac:	af 93       	push	r26
    4aae:	bf 93       	push	r27
    4ab0:	ef 93       	push	r30
    4ab2:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    4ab4:	e0 91 68 08 	lds	r30, 0x0868
    4ab8:	f0 91 69 08 	lds	r31, 0x0869
    4abc:	30 97       	sbiw	r30, 0x00	; 0
    4abe:	11 f0       	breq	.+4      	; 0x4ac4 <__vector_9+0x36>
    4ac0:	09 95       	icall
    4ac2:	04 c0       	rjmp	.+8      	; 0x4acc <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4ac4:	8a e0       	ldi	r24, 0x0A	; 10
    4ac6:	60 e0       	ldi	r22, 0x00	; 0
    4ac8:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
	return;  	
}
    4acc:	ff 91       	pop	r31
    4ace:	ef 91       	pop	r30
    4ad0:	bf 91       	pop	r27
    4ad2:	af 91       	pop	r26
    4ad4:	9f 91       	pop	r25
    4ad6:	8f 91       	pop	r24
    4ad8:	7f 91       	pop	r23
    4ada:	6f 91       	pop	r22
    4adc:	5f 91       	pop	r21
    4ade:	4f 91       	pop	r20
    4ae0:	3f 91       	pop	r19
    4ae2:	2f 91       	pop	r18
    4ae4:	0f 90       	pop	r0
    4ae6:	0b be       	out	0x3b, r0	; 59
    4ae8:	0f 90       	pop	r0
    4aea:	0f be       	out	0x3f, r0	; 63
    4aec:	0f 90       	pop	r0
    4aee:	1f 90       	pop	r1
    4af0:	18 95       	reti

00004af2 <__vector_1>:


SIGNAL(INT0_vect) {
    4af2:	1f 92       	push	r1
    4af4:	0f 92       	push	r0
    4af6:	0f b6       	in	r0, 0x3f	; 63
    4af8:	0f 92       	push	r0
    4afa:	0b b6       	in	r0, 0x3b	; 59
    4afc:	0f 92       	push	r0
    4afe:	11 24       	eor	r1, r1
    4b00:	2f 93       	push	r18
    4b02:	3f 93       	push	r19
    4b04:	4f 93       	push	r20
    4b06:	5f 93       	push	r21
    4b08:	6f 93       	push	r22
    4b0a:	7f 93       	push	r23
    4b0c:	8f 93       	push	r24
    4b0e:	9f 93       	push	r25
    4b10:	af 93       	push	r26
    4b12:	bf 93       	push	r27
    4b14:	ef 93       	push	r30
    4b16:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    4b18:	e0 91 64 08 	lds	r30, 0x0864
    4b1c:	f0 91 65 08 	lds	r31, 0x0865
    4b20:	30 97       	sbiw	r30, 0x00	; 0
    4b22:	11 f0       	breq	.+4      	; 0x4b28 <__vector_1+0x36>
    4b24:	09 95       	icall
    4b26:	04 c0       	rjmp	.+8      	; 0x4b30 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4b28:	8a e0       	ldi	r24, 0x0A	; 10
    4b2a:	60 e0       	ldi	r22, 0x00	; 0
    4b2c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <nrk_kernel_error_add>
	return;  	
}
    4b30:	ff 91       	pop	r31
    4b32:	ef 91       	pop	r30
    4b34:	bf 91       	pop	r27
    4b36:	af 91       	pop	r26
    4b38:	9f 91       	pop	r25
    4b3a:	8f 91       	pop	r24
    4b3c:	7f 91       	pop	r23
    4b3e:	6f 91       	pop	r22
    4b40:	5f 91       	pop	r21
    4b42:	4f 91       	pop	r20
    4b44:	3f 91       	pop	r19
    4b46:	2f 91       	pop	r18
    4b48:	0f 90       	pop	r0
    4b4a:	0b be       	out	0x3b, r0	; 59
    4b4c:	0f 90       	pop	r0
    4b4e:	0f be       	out	0x3f, r0	; 63
    4b50:	0f 90       	pop	r0
    4b52:	1f 90       	pop	r1
    4b54:	18 95       	reti

00004b56 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    4b56:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4b5a:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4b5c:	84 b7       	in	r24, 0x34	; 52
    4b5e:	87 7f       	andi	r24, 0xF7	; 247
    4b60:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4b62:	e0 e6       	ldi	r30, 0x60	; 96
    4b64:	f0 e0       	ldi	r31, 0x00	; 0
    4b66:	80 81       	ld	r24, Z
    4b68:	88 61       	ori	r24, 0x18	; 24
    4b6a:	80 83       	st	Z, r24
WDTCSR = 0;
    4b6c:	10 82       	st	Z, r1
nrk_int_enable();
    4b6e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>
}
    4b72:	08 95       	ret

00004b74 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    4b74:	0e 94 77 11 	call	0x22ee	; 0x22ee <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4b78:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4b7a:	84 b7       	in	r24, 0x34	; 52
    4b7c:	87 7f       	andi	r24, 0xF7	; 247
    4b7e:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4b80:	e0 e6       	ldi	r30, 0x60	; 96
    4b82:	f0 e0       	ldi	r31, 0x00	; 0
    4b84:	80 81       	ld	r24, Z
    4b86:	88 61       	ori	r24, 0x18	; 24
    4b88:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4b8a:	8d e0       	ldi	r24, 0x0D	; 13
    4b8c:	80 83       	st	Z, r24
nrk_int_enable();
    4b8e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>
}
    4b92:	08 95       	ret

00004b94 <nrk_watchdog_check>:

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4b94:	04 b6       	in	r0, 0x34	; 52
    4b96:	03 fc       	sbrc	r0, 3
    4b98:	02 c0       	rjmp	.+4      	; 0x4b9e <nrk_watchdog_check+0xa>
    4b9a:	81 e0       	ldi	r24, 0x01	; 1
    4b9c:	08 95       	ret
return NRK_ERROR;
    4b9e:	8f ef       	ldi	r24, 0xFF	; 255
}
    4ba0:	08 95       	ret

00004ba2 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    4ba2:	a8 95       	wdr

}
    4ba4:	08 95       	ret

00004ba6 <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    4ba6:	08 95       	ret

00004ba8 <nrk_sleep>:

void nrk_sleep()
{

    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4ba8:	83 b7       	in	r24, 0x33	; 51
    4baa:	81 7f       	andi	r24, 0xF1	; 241
    4bac:	86 60       	ori	r24, 0x06	; 6
    4bae:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4bb0:	83 b7       	in	r24, 0x33	; 51
    4bb2:	81 60       	ori	r24, 0x01	; 1
    4bb4:	83 bf       	out	0x33, r24	; 51
    4bb6:	88 95       	sleep
    4bb8:	83 b7       	in	r24, 0x33	; 51
    4bba:	8e 7f       	andi	r24, 0xFE	; 254
    4bbc:	83 bf       	out	0x33, r24	; 51

}
    4bbe:	08 95       	ret

00004bc0 <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4bc0:	83 b7       	in	r24, 0x33	; 51
    4bc2:	81 7f       	andi	r24, 0xF1	; 241
    4bc4:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4bc6:	83 b7       	in	r24, 0x33	; 51
    4bc8:	81 60       	ori	r24, 0x01	; 1
    4bca:	83 bf       	out	0x33, r24	; 51
    4bcc:	88 95       	sleep
    4bce:	83 b7       	in	r24, 0x33	; 51
    4bd0:	8e 7f       	andi	r24, 0xFE	; 254
    4bd2:	83 bf       	out	0x33, r24	; 51

}
    4bd4:	08 95       	ret

00004bd6 <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    4bd6:	fc 01       	movw	r30, r24
    4bd8:	76 83       	std	Z+6, r23	; 0x06
    4bda:	65 83       	std	Z+5, r22	; 0x05
}
    4bdc:	08 95       	ret

00004bde <nrk_task_set_stk>:

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4bde:	ef 92       	push	r14
    4be0:	ff 92       	push	r15
    4be2:	0f 93       	push	r16
    4be4:	1f 93       	push	r17
    4be6:	cf 93       	push	r28
    4be8:	df 93       	push	r29
    4bea:	ec 01       	movw	r28, r24
    4bec:	8b 01       	movw	r16, r22
    4bee:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4bf0:	40 32       	cpi	r20, 0x20	; 32
    4bf2:	51 05       	cpc	r21, r1
    4bf4:	18 f4       	brcc	.+6      	; 0x4bfc <nrk_task_set_stk+0x1e>
    4bf6:	81 e1       	ldi	r24, 0x11	; 17
    4bf8:	0e 94 92 15 	call	0x2b24	; 0x2b24 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4bfc:	08 94       	sec
    4bfe:	e1 08       	sbc	r14, r1
    4c00:	f1 08       	sbc	r15, r1
    4c02:	e0 0e       	add	r14, r16
    4c04:	f1 1e       	adc	r15, r17
    4c06:	fa 82       	std	Y+2, r15	; 0x02
    4c08:	e9 82       	std	Y+1, r14	; 0x01
task->Pbos = (void *) &stk_base[0];
    4c0a:	1c 83       	std	Y+4, r17	; 0x04
    4c0c:	0b 83       	std	Y+3, r16	; 0x03

}
    4c0e:	df 91       	pop	r29
    4c10:	cf 91       	pop	r28
    4c12:	1f 91       	pop	r17
    4c14:	0f 91       	pop	r16
    4c16:	ff 90       	pop	r15
    4c18:	ef 90       	pop	r14
    4c1a:	08 95       	ret

00004c1c <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    4c1c:	25 e5       	ldi	r18, 0x55	; 85
    4c1e:	fa 01       	movw	r30, r20
    4c20:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    4c22:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    4c24:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4c26:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    4c28:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    4c2a:	12 92       	st	-Z, r1
    4c2c:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    4c2e:	12 92       	st	-Z, r1
    4c30:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4c32:	12 92       	st	-Z, r1
    4c34:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4c36:	12 92       	st	-Z, r1
    4c38:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    4c3a:	12 92       	st	-Z, r1
    4c3c:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    4c3e:	12 92       	st	-Z, r1
    4c40:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4c42:	12 92       	st	-Z, r1
    4c44:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4c46:	12 92       	st	-Z, r1
    4c48:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    4c4a:	12 92       	st	-Z, r1
    4c4c:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4c4e:	12 92       	st	-Z, r1
    4c50:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4c52:	12 92       	st	-Z, r1
    4c54:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4c56:	12 92       	st	-Z, r1
    4c58:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4c5a:	12 92       	st	-Z, r1
    4c5c:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4c5e:	12 92       	st	-Z, r1
    4c60:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4c62:	12 92       	st	-Z, r1
    4c64:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4c66:	12 92       	st	-Z, r1
    4c68:	12 92       	st	-Z, r1
    *(--stk) = 0;
    4c6a:	12 92       	st	-Z, r1
    4c6c:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    4c6e:	cf 01       	movw	r24, r30
    4c70:	08 95       	ret

00004c72 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    4c72:	85 e5       	ldi	r24, 0x55	; 85
    4c74:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4c78:	ee ef       	ldi	r30, 0xFE	; 254
    4c7a:	f1 e4       	ldi	r31, 0x41	; 65
    4c7c:	f0 93 1c 06 	sts	0x061C, r31
    4c80:	e0 93 1b 06 	sts	0x061B, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4c84:	8e e6       	ldi	r24, 0x6E	; 110
    4c86:	93 e1       	ldi	r25, 0x13	; 19
    4c88:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4c8a:	80 93 ff 41 	sts	0x41FF, r24

}
    4c8e:	08 95       	ret

00004c90 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4c90:	8e e6       	ldi	r24, 0x6E	; 110
    4c92:	93 e1       	ldi	r25, 0x13	; 19
    4c94:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4c98:	80 93 ff 41 	sts	0x41FF, r24
}
    4c9c:	08 95       	ret

00004c9e <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    4c9e:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <_nrk_setup_timer>
  nrk_int_enable();  
    4ca2:	0e 94 79 11 	call	0x22f2	; 0x22f2 <nrk_int_enable>
	
}
    4ca6:	08 95       	ret

00004ca8 <nrk_start_high_ready_task>:
    4ca8:	a0 91 0a 05 	lds	r26, 0x050A
    4cac:	b0 91 0b 05 	lds	r27, 0x050B
    4cb0:	cd 91       	ld	r28, X+
    4cb2:	cd bf       	out	0x3d, r28	; 61
    4cb4:	dd 91       	ld	r29, X+
    4cb6:	de bf       	out	0x3e, r29	; 62
    4cb8:	ff 91       	pop	r31
    4cba:	ef 91       	pop	r30
    4cbc:	df 91       	pop	r29
    4cbe:	cf 91       	pop	r28
    4cc0:	bf 91       	pop	r27
    4cc2:	af 91       	pop	r26
    4cc4:	9f 91       	pop	r25
    4cc6:	8f 91       	pop	r24
    4cc8:	7f 91       	pop	r23
    4cca:	6f 91       	pop	r22
    4ccc:	5f 91       	pop	r21
    4cce:	4f 91       	pop	r20
    4cd0:	3f 91       	pop	r19
    4cd2:	2f 91       	pop	r18
    4cd4:	1f 91       	pop	r17
    4cd6:	0f 91       	pop	r16
    4cd8:	ff 90       	pop	r15
    4cda:	ef 90       	pop	r14
    4cdc:	df 90       	pop	r13
    4cde:	cf 90       	pop	r12
    4ce0:	bf 90       	pop	r11
    4ce2:	af 90       	pop	r10
    4ce4:	9f 90       	pop	r9
    4ce6:	8f 90       	pop	r8
    4ce8:	7f 90       	pop	r7
    4cea:	6f 90       	pop	r6
    4cec:	5f 90       	pop	r5
    4cee:	4f 90       	pop	r4
    4cf0:	3f 90       	pop	r3
    4cf2:	2f 90       	pop	r2
    4cf4:	1f 90       	pop	r1
    4cf6:	0f 90       	pop	r0
    4cf8:	0f be       	out	0x3f, r0	; 63
    4cfa:	0f 90       	pop	r0
    4cfc:	18 95       	reti

00004cfe <__udivdi3>:
    4cfe:	a8 e3       	ldi	r26, 0x38	; 56
    4d00:	b0 e0       	ldi	r27, 0x00	; 0
    4d02:	e5 e8       	ldi	r30, 0x85	; 133
    4d04:	f6 e2       	ldi	r31, 0x26	; 38
    4d06:	0c 94 93 2e 	jmp	0x5d26	; 0x5d26 <__prologue_saves__>
    4d0a:	29 83       	std	Y+1, r18	; 0x01
    4d0c:	3a 83       	std	Y+2, r19	; 0x02
    4d0e:	4b 83       	std	Y+3, r20	; 0x03
    4d10:	5c 83       	std	Y+4, r21	; 0x04
    4d12:	6d 83       	std	Y+5, r22	; 0x05
    4d14:	7e 83       	std	Y+6, r23	; 0x06
    4d16:	8f 83       	std	Y+7, r24	; 0x07
    4d18:	98 87       	std	Y+8, r25	; 0x08
    4d1a:	a9 86       	std	Y+9, r10	; 0x09
    4d1c:	ba 86       	std	Y+10, r11	; 0x0a
    4d1e:	cb 86       	std	Y+11, r12	; 0x0b
    4d20:	dc 86       	std	Y+12, r13	; 0x0c
    4d22:	ed 86       	std	Y+13, r14	; 0x0d
    4d24:	fe 86       	std	Y+14, r15	; 0x0e
    4d26:	0f 87       	std	Y+15, r16	; 0x0f
    4d28:	18 8b       	std	Y+16, r17	; 0x10
    4d2a:	e9 84       	ldd	r14, Y+9	; 0x09
    4d2c:	fa 84       	ldd	r15, Y+10	; 0x0a
    4d2e:	0b 85       	ldd	r16, Y+11	; 0x0b
    4d30:	1c 85       	ldd	r17, Y+12	; 0x0c
    4d32:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d34:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d36:	4f 85       	ldd	r20, Y+15	; 0x0f
    4d38:	58 89       	ldd	r21, Y+16	; 0x10
    4d3a:	29 80       	ldd	r2, Y+1	; 0x01
    4d3c:	3a 80       	ldd	r3, Y+2	; 0x02
    4d3e:	4b 80       	ldd	r4, Y+3	; 0x03
    4d40:	5c 80       	ldd	r5, Y+4	; 0x04
    4d42:	2d a2       	std	Y+37, r2	; 0x25
    4d44:	3e a2       	std	Y+38, r3	; 0x26
    4d46:	4f a2       	std	Y+39, r4	; 0x27
    4d48:	58 a6       	std	Y+40, r5	; 0x28
    4d4a:	ad 80       	ldd	r10, Y+5	; 0x05
    4d4c:	be 80       	ldd	r11, Y+6	; 0x06
    4d4e:	cf 80       	ldd	r12, Y+7	; 0x07
    4d50:	d8 84       	ldd	r13, Y+8	; 0x08
    4d52:	21 15       	cp	r18, r1
    4d54:	31 05       	cpc	r19, r1
    4d56:	41 05       	cpc	r20, r1
    4d58:	51 05       	cpc	r21, r1
    4d5a:	09 f0       	breq	.+2      	; 0x4d5e <__udivdi3+0x60>
    4d5c:	be c3       	rjmp	.+1916   	; 0x54da <__udivdi3+0x7dc>
    4d5e:	ae 14       	cp	r10, r14
    4d60:	bf 04       	cpc	r11, r15
    4d62:	c0 06       	cpc	r12, r16
    4d64:	d1 06       	cpc	r13, r17
    4d66:	08 f0       	brcs	.+2      	; 0x4d6a <__udivdi3+0x6c>
    4d68:	4f c1       	rjmp	.+670    	; 0x5008 <__udivdi3+0x30a>
    4d6a:	20 e0       	ldi	r18, 0x00	; 0
    4d6c:	e2 16       	cp	r14, r18
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	f2 06       	cpc	r15, r18
    4d72:	21 e0       	ldi	r18, 0x01	; 1
    4d74:	02 07       	cpc	r16, r18
    4d76:	20 e0       	ldi	r18, 0x00	; 0
    4d78:	12 07       	cpc	r17, r18
    4d7a:	58 f4       	brcc	.+22     	; 0x4d92 <__udivdi3+0x94>
    4d7c:	3f ef       	ldi	r19, 0xFF	; 255
    4d7e:	e3 16       	cp	r14, r19
    4d80:	f1 04       	cpc	r15, r1
    4d82:	01 05       	cpc	r16, r1
    4d84:	11 05       	cpc	r17, r1
    4d86:	09 f0       	breq	.+2      	; 0x4d8a <__udivdi3+0x8c>
    4d88:	90 f4       	brcc	.+36     	; 0x4dae <__udivdi3+0xb0>
    4d8a:	20 e0       	ldi	r18, 0x00	; 0
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	a9 01       	movw	r20, r18
    4d90:	17 c0       	rjmp	.+46     	; 0x4dc0 <__udivdi3+0xc2>
    4d92:	40 e0       	ldi	r20, 0x00	; 0
    4d94:	e4 16       	cp	r14, r20
    4d96:	40 e0       	ldi	r20, 0x00	; 0
    4d98:	f4 06       	cpc	r15, r20
    4d9a:	40 e0       	ldi	r20, 0x00	; 0
    4d9c:	04 07       	cpc	r16, r20
    4d9e:	41 e0       	ldi	r20, 0x01	; 1
    4da0:	14 07       	cpc	r17, r20
    4da2:	50 f4       	brcc	.+20     	; 0x4db8 <__udivdi3+0xba>
    4da4:	20 e1       	ldi	r18, 0x10	; 16
    4da6:	30 e0       	ldi	r19, 0x00	; 0
    4da8:	40 e0       	ldi	r20, 0x00	; 0
    4daa:	50 e0       	ldi	r21, 0x00	; 0
    4dac:	09 c0       	rjmp	.+18     	; 0x4dc0 <__udivdi3+0xc2>
    4dae:	28 e0       	ldi	r18, 0x08	; 8
    4db0:	30 e0       	ldi	r19, 0x00	; 0
    4db2:	40 e0       	ldi	r20, 0x00	; 0
    4db4:	50 e0       	ldi	r21, 0x00	; 0
    4db6:	04 c0       	rjmp	.+8      	; 0x4dc0 <__udivdi3+0xc2>
    4db8:	28 e1       	ldi	r18, 0x18	; 24
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	40 e0       	ldi	r20, 0x00	; 0
    4dbe:	50 e0       	ldi	r21, 0x00	; 0
    4dc0:	d8 01       	movw	r26, r16
    4dc2:	c7 01       	movw	r24, r14
    4dc4:	02 2e       	mov	r0, r18
    4dc6:	04 c0       	rjmp	.+8      	; 0x4dd0 <__udivdi3+0xd2>
    4dc8:	b6 95       	lsr	r27
    4dca:	a7 95       	ror	r26
    4dcc:	97 95       	ror	r25
    4dce:	87 95       	ror	r24
    4dd0:	0a 94       	dec	r0
    4dd2:	d2 f7       	brpl	.-12     	; 0x4dc8 <__udivdi3+0xca>
    4dd4:	8f 54       	subi	r24, 0x4F	; 79
    4dd6:	9d 4f       	sbci	r25, 0xFD	; 253
    4dd8:	dc 01       	movw	r26, r24
    4dda:	6c 91       	ld	r22, X
    4ddc:	80 e2       	ldi	r24, 0x20	; 32
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	a0 e0       	ldi	r26, 0x00	; 0
    4de2:	b0 e0       	ldi	r27, 0x00	; 0
    4de4:	82 1b       	sub	r24, r18
    4de6:	93 0b       	sbc	r25, r19
    4de8:	a4 0b       	sbc	r26, r20
    4dea:	b5 0b       	sbc	r27, r21
    4dec:	86 1b       	sub	r24, r22
    4dee:	91 09       	sbc	r25, r1
    4df0:	a1 09       	sbc	r26, r1
    4df2:	b1 09       	sbc	r27, r1
    4df4:	00 97       	sbiw	r24, 0x00	; 0
    4df6:	a1 05       	cpc	r26, r1
    4df8:	b1 05       	cpc	r27, r1
    4dfa:	a1 f1       	breq	.+104    	; 0x4e64 <__udivdi3+0x166>
    4dfc:	08 2e       	mov	r0, r24
    4dfe:	04 c0       	rjmp	.+8      	; 0x4e08 <__udivdi3+0x10a>
    4e00:	ee 0c       	add	r14, r14
    4e02:	ff 1c       	adc	r15, r15
    4e04:	00 1f       	adc	r16, r16
    4e06:	11 1f       	adc	r17, r17
    4e08:	0a 94       	dec	r0
    4e0a:	d2 f7       	brpl	.-12     	; 0x4e00 <__udivdi3+0x102>
    4e0c:	a6 01       	movw	r20, r12
    4e0e:	95 01       	movw	r18, r10
    4e10:	08 2e       	mov	r0, r24
    4e12:	04 c0       	rjmp	.+8      	; 0x4e1c <__udivdi3+0x11e>
    4e14:	22 0f       	add	r18, r18
    4e16:	33 1f       	adc	r19, r19
    4e18:	44 1f       	adc	r20, r20
    4e1a:	55 1f       	adc	r21, r21
    4e1c:	0a 94       	dec	r0
    4e1e:	d2 f7       	brpl	.-12     	; 0x4e14 <__udivdi3+0x116>
    4e20:	60 e2       	ldi	r22, 0x20	; 32
    4e22:	70 e0       	ldi	r23, 0x00	; 0
    4e24:	68 1b       	sub	r22, r24
    4e26:	79 0b       	sbc	r23, r25
    4e28:	ad a0       	ldd	r10, Y+37	; 0x25
    4e2a:	be a0       	ldd	r11, Y+38	; 0x26
    4e2c:	cf a0       	ldd	r12, Y+39	; 0x27
    4e2e:	d8 a4       	ldd	r13, Y+40	; 0x28
    4e30:	04 c0       	rjmp	.+8      	; 0x4e3a <__udivdi3+0x13c>
    4e32:	d6 94       	lsr	r13
    4e34:	c7 94       	ror	r12
    4e36:	b7 94       	ror	r11
    4e38:	a7 94       	ror	r10
    4e3a:	6a 95       	dec	r22
    4e3c:	d2 f7       	brpl	.-12     	; 0x4e32 <__udivdi3+0x134>
    4e3e:	a2 2a       	or	r10, r18
    4e40:	b3 2a       	or	r11, r19
    4e42:	c4 2a       	or	r12, r20
    4e44:	d5 2a       	or	r13, r21
    4e46:	2d a0       	ldd	r2, Y+37	; 0x25
    4e48:	3e a0       	ldd	r3, Y+38	; 0x26
    4e4a:	4f a0       	ldd	r4, Y+39	; 0x27
    4e4c:	58 a4       	ldd	r5, Y+40	; 0x28
    4e4e:	04 c0       	rjmp	.+8      	; 0x4e58 <__udivdi3+0x15a>
    4e50:	22 0c       	add	r2, r2
    4e52:	33 1c       	adc	r3, r3
    4e54:	44 1c       	adc	r4, r4
    4e56:	55 1c       	adc	r5, r5
    4e58:	8a 95       	dec	r24
    4e5a:	d2 f7       	brpl	.-12     	; 0x4e50 <__udivdi3+0x152>
    4e5c:	2d a2       	std	Y+37, r2	; 0x25
    4e5e:	3e a2       	std	Y+38, r3	; 0x26
    4e60:	4f a2       	std	Y+39, r4	; 0x27
    4e62:	58 a6       	std	Y+40, r5	; 0x28
    4e64:	38 01       	movw	r6, r16
    4e66:	88 24       	eor	r8, r8
    4e68:	99 24       	eor	r9, r9
    4e6a:	a8 01       	movw	r20, r16
    4e6c:	97 01       	movw	r18, r14
    4e6e:	40 70       	andi	r20, 0x00	; 0
    4e70:	50 70       	andi	r21, 0x00	; 0
    4e72:	2d 8f       	std	Y+29, r18	; 0x1d
    4e74:	3e 8f       	std	Y+30, r19	; 0x1e
    4e76:	4f 8f       	std	Y+31, r20	; 0x1f
    4e78:	58 a3       	std	Y+32, r21	; 0x20
    4e7a:	c6 01       	movw	r24, r12
    4e7c:	b5 01       	movw	r22, r10
    4e7e:	a4 01       	movw	r20, r8
    4e80:	93 01       	movw	r18, r6
    4e82:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    4e86:	22 2e       	mov	r2, r18
    4e88:	53 2e       	mov	r5, r19
    4e8a:	44 2e       	mov	r4, r20
    4e8c:	35 2e       	mov	r3, r21
    4e8e:	69 a3       	std	Y+33, r22	; 0x21
    4e90:	7a a3       	std	Y+34, r23	; 0x22
    4e92:	8b a3       	std	Y+35, r24	; 0x23
    4e94:	9c a3       	std	Y+36, r25	; 0x24
    4e96:	c6 01       	movw	r24, r12
    4e98:	b5 01       	movw	r22, r10
    4e9a:	a4 01       	movw	r20, r8
    4e9c:	93 01       	movw	r18, r6
    4e9e:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    4ea2:	82 2d       	mov	r24, r2
    4ea4:	95 2d       	mov	r25, r5
    4ea6:	a4 2d       	mov	r26, r4
    4ea8:	b3 2d       	mov	r27, r3
    4eaa:	89 8f       	std	Y+25, r24	; 0x19
    4eac:	9a 8f       	std	Y+26, r25	; 0x1a
    4eae:	ab 8f       	std	Y+27, r26	; 0x1b
    4eb0:	bc 8f       	std	Y+28, r27	; 0x1c
    4eb2:	bc 01       	movw	r22, r24
    4eb4:	cd 01       	movw	r24, r26
    4eb6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4eb8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4eba:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4ebc:	58 a1       	ldd	r21, Y+32	; 0x20
    4ebe:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    4ec2:	5b 01       	movw	r10, r22
    4ec4:	6c 01       	movw	r12, r24
    4ec6:	49 a1       	ldd	r20, Y+33	; 0x21
    4ec8:	5a a1       	ldd	r21, Y+34	; 0x22
    4eca:	6b a1       	ldd	r22, Y+35	; 0x23
    4ecc:	7c a1       	ldd	r23, Y+36	; 0x24
    4ece:	da 01       	movw	r26, r20
    4ed0:	99 27       	eor	r25, r25
    4ed2:	88 27       	eor	r24, r24
    4ed4:	2d a0       	ldd	r2, Y+37	; 0x25
    4ed6:	3e a0       	ldd	r3, Y+38	; 0x26
    4ed8:	4f a0       	ldd	r4, Y+39	; 0x27
    4eda:	58 a4       	ldd	r5, Y+40	; 0x28
    4edc:	92 01       	movw	r18, r4
    4ede:	44 27       	eor	r20, r20
    4ee0:	55 27       	eor	r21, r21
    4ee2:	82 2b       	or	r24, r18
    4ee4:	93 2b       	or	r25, r19
    4ee6:	a4 2b       	or	r26, r20
    4ee8:	b5 2b       	or	r27, r21
    4eea:	8a 15       	cp	r24, r10
    4eec:	9b 05       	cpc	r25, r11
    4eee:	ac 05       	cpc	r26, r12
    4ef0:	bd 05       	cpc	r27, r13
    4ef2:	30 f5       	brcc	.+76     	; 0x4f40 <__udivdi3+0x242>
    4ef4:	29 8d       	ldd	r18, Y+25	; 0x19
    4ef6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4ef8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4efa:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4efc:	21 50       	subi	r18, 0x01	; 1
    4efe:	30 40       	sbci	r19, 0x00	; 0
    4f00:	40 40       	sbci	r20, 0x00	; 0
    4f02:	50 40       	sbci	r21, 0x00	; 0
    4f04:	29 8f       	std	Y+25, r18	; 0x19
    4f06:	3a 8f       	std	Y+26, r19	; 0x1a
    4f08:	4b 8f       	std	Y+27, r20	; 0x1b
    4f0a:	5c 8f       	std	Y+28, r21	; 0x1c
    4f0c:	8e 0d       	add	r24, r14
    4f0e:	9f 1d       	adc	r25, r15
    4f10:	a0 1f       	adc	r26, r16
    4f12:	b1 1f       	adc	r27, r17
    4f14:	8e 15       	cp	r24, r14
    4f16:	9f 05       	cpc	r25, r15
    4f18:	a0 07       	cpc	r26, r16
    4f1a:	b1 07       	cpc	r27, r17
    4f1c:	88 f0       	brcs	.+34     	; 0x4f40 <__udivdi3+0x242>
    4f1e:	8a 15       	cp	r24, r10
    4f20:	9b 05       	cpc	r25, r11
    4f22:	ac 05       	cpc	r26, r12
    4f24:	bd 05       	cpc	r27, r13
    4f26:	60 f4       	brcc	.+24     	; 0x4f40 <__udivdi3+0x242>
    4f28:	21 50       	subi	r18, 0x01	; 1
    4f2a:	30 40       	sbci	r19, 0x00	; 0
    4f2c:	40 40       	sbci	r20, 0x00	; 0
    4f2e:	50 40       	sbci	r21, 0x00	; 0
    4f30:	29 8f       	std	Y+25, r18	; 0x19
    4f32:	3a 8f       	std	Y+26, r19	; 0x1a
    4f34:	4b 8f       	std	Y+27, r20	; 0x1b
    4f36:	5c 8f       	std	Y+28, r21	; 0x1c
    4f38:	8e 0d       	add	r24, r14
    4f3a:	9f 1d       	adc	r25, r15
    4f3c:	a0 1f       	adc	r26, r16
    4f3e:	b1 1f       	adc	r27, r17
    4f40:	ac 01       	movw	r20, r24
    4f42:	bd 01       	movw	r22, r26
    4f44:	4a 19       	sub	r20, r10
    4f46:	5b 09       	sbc	r21, r11
    4f48:	6c 09       	sbc	r22, r12
    4f4a:	7d 09       	sbc	r23, r13
    4f4c:	5a 01       	movw	r10, r20
    4f4e:	6b 01       	movw	r12, r22
    4f50:	cb 01       	movw	r24, r22
    4f52:	ba 01       	movw	r22, r20
    4f54:	a4 01       	movw	r20, r8
    4f56:	93 01       	movw	r18, r6
    4f58:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    4f5c:	22 2e       	mov	r2, r18
    4f5e:	53 2e       	mov	r5, r19
    4f60:	44 2e       	mov	r4, r20
    4f62:	35 2e       	mov	r3, r21
    4f64:	69 a3       	std	Y+33, r22	; 0x21
    4f66:	7a a3       	std	Y+34, r23	; 0x22
    4f68:	8b a3       	std	Y+35, r24	; 0x23
    4f6a:	9c a3       	std	Y+36, r25	; 0x24
    4f6c:	c6 01       	movw	r24, r12
    4f6e:	b5 01       	movw	r22, r10
    4f70:	a4 01       	movw	r20, r8
    4f72:	93 01       	movw	r18, r6
    4f74:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    4f78:	a2 2c       	mov	r10, r2
    4f7a:	b5 2c       	mov	r11, r5
    4f7c:	c4 2c       	mov	r12, r4
    4f7e:	d3 2c       	mov	r13, r3
    4f80:	c6 01       	movw	r24, r12
    4f82:	b5 01       	movw	r22, r10
    4f84:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4f86:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4f88:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4f8a:	58 a1       	ldd	r21, Y+32	; 0x20
    4f8c:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    4f90:	3b 01       	movw	r6, r22
    4f92:	4c 01       	movw	r8, r24
    4f94:	69 a1       	ldd	r22, Y+33	; 0x21
    4f96:	7a a1       	ldd	r23, Y+34	; 0x22
    4f98:	8b a1       	ldd	r24, Y+35	; 0x23
    4f9a:	9c a1       	ldd	r25, Y+36	; 0x24
    4f9c:	ab 01       	movw	r20, r22
    4f9e:	33 27       	eor	r19, r19
    4fa0:	22 27       	eor	r18, r18
    4fa2:	8d a1       	ldd	r24, Y+37	; 0x25
    4fa4:	9e a1       	ldd	r25, Y+38	; 0x26
    4fa6:	af a1       	ldd	r26, Y+39	; 0x27
    4fa8:	b8 a5       	ldd	r27, Y+40	; 0x28
    4faa:	a0 70       	andi	r26, 0x00	; 0
    4fac:	b0 70       	andi	r27, 0x00	; 0
    4fae:	28 2b       	or	r18, r24
    4fb0:	39 2b       	or	r19, r25
    4fb2:	4a 2b       	or	r20, r26
    4fb4:	5b 2b       	or	r21, r27
    4fb6:	26 15       	cp	r18, r6
    4fb8:	37 05       	cpc	r19, r7
    4fba:	48 05       	cpc	r20, r8
    4fbc:	59 05       	cpc	r21, r9
    4fbe:	c0 f4       	brcc	.+48     	; 0x4ff0 <__udivdi3+0x2f2>
    4fc0:	08 94       	sec
    4fc2:	a1 08       	sbc	r10, r1
    4fc4:	b1 08       	sbc	r11, r1
    4fc6:	c1 08       	sbc	r12, r1
    4fc8:	d1 08       	sbc	r13, r1
    4fca:	2e 0d       	add	r18, r14
    4fcc:	3f 1d       	adc	r19, r15
    4fce:	40 1f       	adc	r20, r16
    4fd0:	51 1f       	adc	r21, r17
    4fd2:	2e 15       	cp	r18, r14
    4fd4:	3f 05       	cpc	r19, r15
    4fd6:	40 07       	cpc	r20, r16
    4fd8:	51 07       	cpc	r21, r17
    4fda:	50 f0       	brcs	.+20     	; 0x4ff0 <__udivdi3+0x2f2>
    4fdc:	26 15       	cp	r18, r6
    4fde:	37 05       	cpc	r19, r7
    4fe0:	48 05       	cpc	r20, r8
    4fe2:	59 05       	cpc	r21, r9
    4fe4:	28 f4       	brcc	.+10     	; 0x4ff0 <__udivdi3+0x2f2>
    4fe6:	08 94       	sec
    4fe8:	a1 08       	sbc	r10, r1
    4fea:	b1 08       	sbc	r11, r1
    4fec:	c1 08       	sbc	r12, r1
    4fee:	d1 08       	sbc	r13, r1
    4ff0:	89 8d       	ldd	r24, Y+25	; 0x19
    4ff2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4ff4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4ff6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4ff8:	8c 01       	movw	r16, r24
    4ffa:	ff 24       	eor	r15, r15
    4ffc:	ee 24       	eor	r14, r14
    4ffe:	ea 28       	or	r14, r10
    5000:	fb 28       	or	r15, r11
    5002:	0c 29       	or	r16, r12
    5004:	1d 29       	or	r17, r13
    5006:	b3 c4       	rjmp	.+2406   	; 0x596e <__udivdi3+0xc70>
    5008:	e1 14       	cp	r14, r1
    500a:	f1 04       	cpc	r15, r1
    500c:	01 05       	cpc	r16, r1
    500e:	11 05       	cpc	r17, r1
    5010:	59 f4       	brne	.+22     	; 0x5028 <__udivdi3+0x32a>
    5012:	61 e0       	ldi	r22, 0x01	; 1
    5014:	70 e0       	ldi	r23, 0x00	; 0
    5016:	80 e0       	ldi	r24, 0x00	; 0
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	a8 01       	movw	r20, r16
    501c:	97 01       	movw	r18, r14
    501e:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    5022:	79 01       	movw	r14, r18
    5024:	8a 01       	movw	r16, r20
    5026:	10 c0       	rjmp	.+32     	; 0x5048 <__udivdi3+0x34a>
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	e9 16       	cp	r14, r25
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	f9 06       	cpc	r15, r25
    5030:	91 e0       	ldi	r25, 0x01	; 1
    5032:	09 07       	cpc	r16, r25
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	19 07       	cpc	r17, r25
    5038:	58 f4       	brcc	.+22     	; 0x5050 <__udivdi3+0x352>
    503a:	af ef       	ldi	r26, 0xFF	; 255
    503c:	ea 16       	cp	r14, r26
    503e:	f1 04       	cpc	r15, r1
    5040:	01 05       	cpc	r16, r1
    5042:	11 05       	cpc	r17, r1
    5044:	09 f0       	breq	.+2      	; 0x5048 <__udivdi3+0x34a>
    5046:	90 f4       	brcc	.+36     	; 0x506c <__udivdi3+0x36e>
    5048:	20 e0       	ldi	r18, 0x00	; 0
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	a9 01       	movw	r20, r18
    504e:	17 c0       	rjmp	.+46     	; 0x507e <__udivdi3+0x380>
    5050:	b0 e0       	ldi	r27, 0x00	; 0
    5052:	eb 16       	cp	r14, r27
    5054:	b0 e0       	ldi	r27, 0x00	; 0
    5056:	fb 06       	cpc	r15, r27
    5058:	b0 e0       	ldi	r27, 0x00	; 0
    505a:	0b 07       	cpc	r16, r27
    505c:	b1 e0       	ldi	r27, 0x01	; 1
    505e:	1b 07       	cpc	r17, r27
    5060:	50 f4       	brcc	.+20     	; 0x5076 <__udivdi3+0x378>
    5062:	20 e1       	ldi	r18, 0x10	; 16
    5064:	30 e0       	ldi	r19, 0x00	; 0
    5066:	40 e0       	ldi	r20, 0x00	; 0
    5068:	50 e0       	ldi	r21, 0x00	; 0
    506a:	09 c0       	rjmp	.+18     	; 0x507e <__udivdi3+0x380>
    506c:	28 e0       	ldi	r18, 0x08	; 8
    506e:	30 e0       	ldi	r19, 0x00	; 0
    5070:	40 e0       	ldi	r20, 0x00	; 0
    5072:	50 e0       	ldi	r21, 0x00	; 0
    5074:	04 c0       	rjmp	.+8      	; 0x507e <__udivdi3+0x380>
    5076:	28 e1       	ldi	r18, 0x18	; 24
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	40 e0       	ldi	r20, 0x00	; 0
    507c:	50 e0       	ldi	r21, 0x00	; 0
    507e:	d8 01       	movw	r26, r16
    5080:	c7 01       	movw	r24, r14
    5082:	02 2e       	mov	r0, r18
    5084:	04 c0       	rjmp	.+8      	; 0x508e <__udivdi3+0x390>
    5086:	b6 95       	lsr	r27
    5088:	a7 95       	ror	r26
    508a:	97 95       	ror	r25
    508c:	87 95       	ror	r24
    508e:	0a 94       	dec	r0
    5090:	d2 f7       	brpl	.-12     	; 0x5086 <__udivdi3+0x388>
    5092:	8f 54       	subi	r24, 0x4F	; 79
    5094:	9d 4f       	sbci	r25, 0xFD	; 253
    5096:	fc 01       	movw	r30, r24
    5098:	80 81       	ld	r24, Z
    509a:	28 0f       	add	r18, r24
    509c:	31 1d       	adc	r19, r1
    509e:	41 1d       	adc	r20, r1
    50a0:	51 1d       	adc	r21, r1
    50a2:	80 e2       	ldi	r24, 0x20	; 32
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	a0 e0       	ldi	r26, 0x00	; 0
    50a8:	b0 e0       	ldi	r27, 0x00	; 0
    50aa:	82 1b       	sub	r24, r18
    50ac:	93 0b       	sbc	r25, r19
    50ae:	a4 0b       	sbc	r26, r20
    50b0:	b5 0b       	sbc	r27, r21
    50b2:	61 f4       	brne	.+24     	; 0x50cc <__udivdi3+0x3ce>
    50b4:	15 01       	movw	r2, r10
    50b6:	26 01       	movw	r4, r12
    50b8:	2e 18       	sub	r2, r14
    50ba:	3f 08       	sbc	r3, r15
    50bc:	40 0a       	sbc	r4, r16
    50be:	51 0a       	sbc	r5, r17
    50c0:	81 e0       	ldi	r24, 0x01	; 1
    50c2:	a8 2e       	mov	r10, r24
    50c4:	b1 2c       	mov	r11, r1
    50c6:	c1 2c       	mov	r12, r1
    50c8:	d1 2c       	mov	r13, r1
    50ca:	29 c1       	rjmp	.+594    	; 0x531e <__udivdi3+0x620>
    50cc:	08 2e       	mov	r0, r24
    50ce:	04 c0       	rjmp	.+8      	; 0x50d8 <__udivdi3+0x3da>
    50d0:	ee 0c       	add	r14, r14
    50d2:	ff 1c       	adc	r15, r15
    50d4:	00 1f       	adc	r16, r16
    50d6:	11 1f       	adc	r17, r17
    50d8:	0a 94       	dec	r0
    50da:	d2 f7       	brpl	.-12     	; 0x50d0 <__udivdi3+0x3d2>
    50dc:	15 01       	movw	r2, r10
    50de:	26 01       	movw	r4, r12
    50e0:	02 2e       	mov	r0, r18
    50e2:	04 c0       	rjmp	.+8      	; 0x50ec <__udivdi3+0x3ee>
    50e4:	56 94       	lsr	r5
    50e6:	47 94       	ror	r4
    50e8:	37 94       	ror	r3
    50ea:	27 94       	ror	r2
    50ec:	0a 94       	dec	r0
    50ee:	d2 f7       	brpl	.-12     	; 0x50e4 <__udivdi3+0x3e6>
    50f0:	29 8e       	std	Y+25, r2	; 0x19
    50f2:	3a 8e       	std	Y+26, r3	; 0x1a
    50f4:	4b 8e       	std	Y+27, r4	; 0x1b
    50f6:	5c 8e       	std	Y+28, r5	; 0x1c
    50f8:	b6 01       	movw	r22, r12
    50fa:	a5 01       	movw	r20, r10
    50fc:	08 2e       	mov	r0, r24
    50fe:	04 c0       	rjmp	.+8      	; 0x5108 <__udivdi3+0x40a>
    5100:	44 0f       	add	r20, r20
    5102:	55 1f       	adc	r21, r21
    5104:	66 1f       	adc	r22, r22
    5106:	77 1f       	adc	r23, r23
    5108:	0a 94       	dec	r0
    510a:	d2 f7       	brpl	.-12     	; 0x5100 <__udivdi3+0x402>
    510c:	4d 8f       	std	Y+29, r20	; 0x1d
    510e:	5e 8f       	std	Y+30, r21	; 0x1e
    5110:	6f 8f       	std	Y+31, r22	; 0x1f
    5112:	78 a3       	std	Y+32, r23	; 0x20
    5114:	2d a0       	ldd	r2, Y+37	; 0x25
    5116:	3e a0       	ldd	r3, Y+38	; 0x26
    5118:	4f a0       	ldd	r4, Y+39	; 0x27
    511a:	58 a4       	ldd	r5, Y+40	; 0x28
    511c:	04 c0       	rjmp	.+8      	; 0x5126 <__udivdi3+0x428>
    511e:	56 94       	lsr	r5
    5120:	47 94       	ror	r4
    5122:	37 94       	ror	r3
    5124:	27 94       	ror	r2
    5126:	2a 95       	dec	r18
    5128:	d2 f7       	brpl	.-12     	; 0x511e <__udivdi3+0x420>
    512a:	ad 8c       	ldd	r10, Y+29	; 0x1d
    512c:	be 8c       	ldd	r11, Y+30	; 0x1e
    512e:	cf 8c       	ldd	r12, Y+31	; 0x1f
    5130:	d8 a0       	ldd	r13, Y+32	; 0x20
    5132:	a2 28       	or	r10, r2
    5134:	b3 28       	or	r11, r3
    5136:	c4 28       	or	r12, r4
    5138:	d5 28       	or	r13, r5
    513a:	ad 8e       	std	Y+29, r10	; 0x1d
    513c:	be 8e       	std	Y+30, r11	; 0x1e
    513e:	cf 8e       	std	Y+31, r12	; 0x1f
    5140:	d8 a2       	std	Y+32, r13	; 0x20
    5142:	2d a1       	ldd	r18, Y+37	; 0x25
    5144:	3e a1       	ldd	r19, Y+38	; 0x26
    5146:	4f a1       	ldd	r20, Y+39	; 0x27
    5148:	58 a5       	ldd	r21, Y+40	; 0x28
    514a:	04 c0       	rjmp	.+8      	; 0x5154 <__udivdi3+0x456>
    514c:	22 0f       	add	r18, r18
    514e:	33 1f       	adc	r19, r19
    5150:	44 1f       	adc	r20, r20
    5152:	55 1f       	adc	r21, r21
    5154:	8a 95       	dec	r24
    5156:	d2 f7       	brpl	.-12     	; 0x514c <__udivdi3+0x44e>
    5158:	2d a3       	std	Y+37, r18	; 0x25
    515a:	3e a3       	std	Y+38, r19	; 0x26
    515c:	4f a3       	std	Y+39, r20	; 0x27
    515e:	58 a7       	std	Y+40, r21	; 0x28
    5160:	38 01       	movw	r6, r16
    5162:	88 24       	eor	r8, r8
    5164:	99 24       	eor	r9, r9
    5166:	b8 01       	movw	r22, r16
    5168:	a7 01       	movw	r20, r14
    516a:	60 70       	andi	r22, 0x00	; 0
    516c:	70 70       	andi	r23, 0x00	; 0
    516e:	49 a3       	std	Y+33, r20	; 0x21
    5170:	5a a3       	std	Y+34, r21	; 0x22
    5172:	6b a3       	std	Y+35, r22	; 0x23
    5174:	7c a3       	std	Y+36, r23	; 0x24
    5176:	69 8d       	ldd	r22, Y+25	; 0x19
    5178:	7a 8d       	ldd	r23, Y+26	; 0x1a
    517a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    517c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    517e:	a4 01       	movw	r20, r8
    5180:	93 01       	movw	r18, r6
    5182:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    5186:	22 2e       	mov	r2, r18
    5188:	53 2e       	mov	r5, r19
    518a:	44 2e       	mov	r4, r20
    518c:	35 2e       	mov	r3, r21
    518e:	69 a7       	std	Y+41, r22	; 0x29
    5190:	7a a7       	std	Y+42, r23	; 0x2a
    5192:	8b a7       	std	Y+43, r24	; 0x2b
    5194:	9c a7       	std	Y+44, r25	; 0x2c
    5196:	69 8d       	ldd	r22, Y+25	; 0x19
    5198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    519a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    519c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    519e:	a4 01       	movw	r20, r8
    51a0:	93 01       	movw	r18, r6
    51a2:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    51a6:	a2 2c       	mov	r10, r2
    51a8:	b5 2c       	mov	r11, r5
    51aa:	c4 2c       	mov	r12, r4
    51ac:	d3 2c       	mov	r13, r3
    51ae:	a9 8e       	std	Y+25, r10	; 0x19
    51b0:	ba 8e       	std	Y+26, r11	; 0x1a
    51b2:	cb 8e       	std	Y+27, r12	; 0x1b
    51b4:	dc 8e       	std	Y+28, r13	; 0x1c
    51b6:	c6 01       	movw	r24, r12
    51b8:	b5 01       	movw	r22, r10
    51ba:	29 a1       	ldd	r18, Y+33	; 0x21
    51bc:	3a a1       	ldd	r19, Y+34	; 0x22
    51be:	4b a1       	ldd	r20, Y+35	; 0x23
    51c0:	5c a1       	ldd	r21, Y+36	; 0x24
    51c2:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    51c6:	5b 01       	movw	r10, r22
    51c8:	6c 01       	movw	r12, r24
    51ca:	29 a4       	ldd	r2, Y+41	; 0x29
    51cc:	3a a4       	ldd	r3, Y+42	; 0x2a
    51ce:	4b a4       	ldd	r4, Y+43	; 0x2b
    51d0:	5c a4       	ldd	r5, Y+44	; 0x2c
    51d2:	d1 01       	movw	r26, r2
    51d4:	99 27       	eor	r25, r25
    51d6:	88 27       	eor	r24, r24
    51d8:	2d 8c       	ldd	r2, Y+29	; 0x1d
    51da:	3e 8c       	ldd	r3, Y+30	; 0x1e
    51dc:	4f 8c       	ldd	r4, Y+31	; 0x1f
    51de:	58 a0       	ldd	r5, Y+32	; 0x20
    51e0:	92 01       	movw	r18, r4
    51e2:	44 27       	eor	r20, r20
    51e4:	55 27       	eor	r21, r21
    51e6:	82 2b       	or	r24, r18
    51e8:	93 2b       	or	r25, r19
    51ea:	a4 2b       	or	r26, r20
    51ec:	b5 2b       	or	r27, r21
    51ee:	8a 15       	cp	r24, r10
    51f0:	9b 05       	cpc	r25, r11
    51f2:	ac 05       	cpc	r26, r12
    51f4:	bd 05       	cpc	r27, r13
    51f6:	30 f5       	brcc	.+76     	; 0x5244 <__udivdi3+0x546>
    51f8:	29 8d       	ldd	r18, Y+25	; 0x19
    51fa:	3a 8d       	ldd	r19, Y+26	; 0x1a
    51fc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    51fe:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5200:	21 50       	subi	r18, 0x01	; 1
    5202:	30 40       	sbci	r19, 0x00	; 0
    5204:	40 40       	sbci	r20, 0x00	; 0
    5206:	50 40       	sbci	r21, 0x00	; 0
    5208:	29 8f       	std	Y+25, r18	; 0x19
    520a:	3a 8f       	std	Y+26, r19	; 0x1a
    520c:	4b 8f       	std	Y+27, r20	; 0x1b
    520e:	5c 8f       	std	Y+28, r21	; 0x1c
    5210:	8e 0d       	add	r24, r14
    5212:	9f 1d       	adc	r25, r15
    5214:	a0 1f       	adc	r26, r16
    5216:	b1 1f       	adc	r27, r17
    5218:	8e 15       	cp	r24, r14
    521a:	9f 05       	cpc	r25, r15
    521c:	a0 07       	cpc	r26, r16
    521e:	b1 07       	cpc	r27, r17
    5220:	88 f0       	brcs	.+34     	; 0x5244 <__udivdi3+0x546>
    5222:	8a 15       	cp	r24, r10
    5224:	9b 05       	cpc	r25, r11
    5226:	ac 05       	cpc	r26, r12
    5228:	bd 05       	cpc	r27, r13
    522a:	60 f4       	brcc	.+24     	; 0x5244 <__udivdi3+0x546>
    522c:	21 50       	subi	r18, 0x01	; 1
    522e:	30 40       	sbci	r19, 0x00	; 0
    5230:	40 40       	sbci	r20, 0x00	; 0
    5232:	50 40       	sbci	r21, 0x00	; 0
    5234:	29 8f       	std	Y+25, r18	; 0x19
    5236:	3a 8f       	std	Y+26, r19	; 0x1a
    5238:	4b 8f       	std	Y+27, r20	; 0x1b
    523a:	5c 8f       	std	Y+28, r21	; 0x1c
    523c:	8e 0d       	add	r24, r14
    523e:	9f 1d       	adc	r25, r15
    5240:	a0 1f       	adc	r26, r16
    5242:	b1 1f       	adc	r27, r17
    5244:	ac 01       	movw	r20, r24
    5246:	bd 01       	movw	r22, r26
    5248:	4a 19       	sub	r20, r10
    524a:	5b 09       	sbc	r21, r11
    524c:	6c 09       	sbc	r22, r12
    524e:	7d 09       	sbc	r23, r13
    5250:	5a 01       	movw	r10, r20
    5252:	6b 01       	movw	r12, r22
    5254:	cb 01       	movw	r24, r22
    5256:	ba 01       	movw	r22, r20
    5258:	a4 01       	movw	r20, r8
    525a:	93 01       	movw	r18, r6
    525c:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    5260:	22 2e       	mov	r2, r18
    5262:	53 2e       	mov	r5, r19
    5264:	44 2e       	mov	r4, r20
    5266:	35 2e       	mov	r3, r21
    5268:	69 a7       	std	Y+41, r22	; 0x29
    526a:	7a a7       	std	Y+42, r23	; 0x2a
    526c:	8b a7       	std	Y+43, r24	; 0x2b
    526e:	9c a7       	std	Y+44, r25	; 0x2c
    5270:	c6 01       	movw	r24, r12
    5272:	b5 01       	movw	r22, r10
    5274:	a4 01       	movw	r20, r8
    5276:	93 01       	movw	r18, r6
    5278:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    527c:	62 2c       	mov	r6, r2
    527e:	75 2c       	mov	r7, r5
    5280:	84 2c       	mov	r8, r4
    5282:	93 2c       	mov	r9, r3
    5284:	c4 01       	movw	r24, r8
    5286:	b3 01       	movw	r22, r6
    5288:	29 a1       	ldd	r18, Y+33	; 0x21
    528a:	3a a1       	ldd	r19, Y+34	; 0x22
    528c:	4b a1       	ldd	r20, Y+35	; 0x23
    528e:	5c a1       	ldd	r21, Y+36	; 0x24
    5290:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    5294:	9b 01       	movw	r18, r22
    5296:	ac 01       	movw	r20, r24
    5298:	69 a5       	ldd	r22, Y+41	; 0x29
    529a:	7a a5       	ldd	r23, Y+42	; 0x2a
    529c:	8b a5       	ldd	r24, Y+43	; 0x2b
    529e:	9c a5       	ldd	r25, Y+44	; 0x2c
    52a0:	6b 01       	movw	r12, r22
    52a2:	bb 24       	eor	r11, r11
    52a4:	aa 24       	eor	r10, r10
    52a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52aa:	af 8d       	ldd	r26, Y+31	; 0x1f
    52ac:	b8 a1       	ldd	r27, Y+32	; 0x20
    52ae:	a0 70       	andi	r26, 0x00	; 0
    52b0:	b0 70       	andi	r27, 0x00	; 0
    52b2:	a8 2a       	or	r10, r24
    52b4:	b9 2a       	or	r11, r25
    52b6:	ca 2a       	or	r12, r26
    52b8:	db 2a       	or	r13, r27
    52ba:	a2 16       	cp	r10, r18
    52bc:	b3 06       	cpc	r11, r19
    52be:	c4 06       	cpc	r12, r20
    52c0:	d5 06       	cpc	r13, r21
    52c2:	e0 f4       	brcc	.+56     	; 0x52fc <__udivdi3+0x5fe>
    52c4:	08 94       	sec
    52c6:	61 08       	sbc	r6, r1
    52c8:	71 08       	sbc	r7, r1
    52ca:	81 08       	sbc	r8, r1
    52cc:	91 08       	sbc	r9, r1
    52ce:	ae 0c       	add	r10, r14
    52d0:	bf 1c       	adc	r11, r15
    52d2:	c0 1e       	adc	r12, r16
    52d4:	d1 1e       	adc	r13, r17
    52d6:	ae 14       	cp	r10, r14
    52d8:	bf 04       	cpc	r11, r15
    52da:	c0 06       	cpc	r12, r16
    52dc:	d1 06       	cpc	r13, r17
    52de:	70 f0       	brcs	.+28     	; 0x52fc <__udivdi3+0x5fe>
    52e0:	a2 16       	cp	r10, r18
    52e2:	b3 06       	cpc	r11, r19
    52e4:	c4 06       	cpc	r12, r20
    52e6:	d5 06       	cpc	r13, r21
    52e8:	48 f4       	brcc	.+18     	; 0x52fc <__udivdi3+0x5fe>
    52ea:	08 94       	sec
    52ec:	61 08       	sbc	r6, r1
    52ee:	71 08       	sbc	r7, r1
    52f0:	81 08       	sbc	r8, r1
    52f2:	91 08       	sbc	r9, r1
    52f4:	ae 0c       	add	r10, r14
    52f6:	bf 1c       	adc	r11, r15
    52f8:	c0 1e       	adc	r12, r16
    52fa:	d1 1e       	adc	r13, r17
    52fc:	15 01       	movw	r2, r10
    52fe:	26 01       	movw	r4, r12
    5300:	22 1a       	sub	r2, r18
    5302:	33 0a       	sbc	r3, r19
    5304:	44 0a       	sbc	r4, r20
    5306:	55 0a       	sbc	r5, r21
    5308:	89 8d       	ldd	r24, Y+25	; 0x19
    530a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    530c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    530e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    5310:	6c 01       	movw	r12, r24
    5312:	bb 24       	eor	r11, r11
    5314:	aa 24       	eor	r10, r10
    5316:	a6 28       	or	r10, r6
    5318:	b7 28       	or	r11, r7
    531a:	c8 28       	or	r12, r8
    531c:	d9 28       	or	r13, r9
    531e:	98 01       	movw	r18, r16
    5320:	44 27       	eor	r20, r20
    5322:	55 27       	eor	r21, r21
    5324:	2d 8f       	std	Y+29, r18	; 0x1d
    5326:	3e 8f       	std	Y+30, r19	; 0x1e
    5328:	4f 8f       	std	Y+31, r20	; 0x1f
    532a:	58 a3       	std	Y+32, r21	; 0x20
    532c:	b8 01       	movw	r22, r16
    532e:	a7 01       	movw	r20, r14
    5330:	60 70       	andi	r22, 0x00	; 0
    5332:	70 70       	andi	r23, 0x00	; 0
    5334:	49 a3       	std	Y+33, r20	; 0x21
    5336:	5a a3       	std	Y+34, r21	; 0x22
    5338:	6b a3       	std	Y+35, r22	; 0x23
    533a:	7c a3       	std	Y+36, r23	; 0x24
    533c:	c2 01       	movw	r24, r4
    533e:	b1 01       	movw	r22, r2
    5340:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5342:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5344:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5346:	58 a1       	ldd	r21, Y+32	; 0x20
    5348:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    534c:	62 2e       	mov	r6, r18
    534e:	93 2e       	mov	r9, r19
    5350:	84 2e       	mov	r8, r20
    5352:	75 2e       	mov	r7, r21
    5354:	69 a7       	std	Y+41, r22	; 0x29
    5356:	7a a7       	std	Y+42, r23	; 0x2a
    5358:	8b a7       	std	Y+43, r24	; 0x2b
    535a:	9c a7       	std	Y+44, r25	; 0x2c
    535c:	c2 01       	movw	r24, r4
    535e:	b1 01       	movw	r22, r2
    5360:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5362:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5364:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5366:	58 a1       	ldd	r21, Y+32	; 0x20
    5368:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    536c:	86 2d       	mov	r24, r6
    536e:	99 2d       	mov	r25, r9
    5370:	a8 2d       	mov	r26, r8
    5372:	b7 2d       	mov	r27, r7
    5374:	89 8f       	std	Y+25, r24	; 0x19
    5376:	9a 8f       	std	Y+26, r25	; 0x1a
    5378:	ab 8f       	std	Y+27, r26	; 0x1b
    537a:	bc 8f       	std	Y+28, r27	; 0x1c
    537c:	bc 01       	movw	r22, r24
    537e:	cd 01       	movw	r24, r26
    5380:	29 a1       	ldd	r18, Y+33	; 0x21
    5382:	3a a1       	ldd	r19, Y+34	; 0x22
    5384:	4b a1       	ldd	r20, Y+35	; 0x23
    5386:	5c a1       	ldd	r21, Y+36	; 0x24
    5388:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    538c:	3b 01       	movw	r6, r22
    538e:	4c 01       	movw	r8, r24
    5390:	29 a4       	ldd	r2, Y+41	; 0x29
    5392:	3a a4       	ldd	r3, Y+42	; 0x2a
    5394:	4b a4       	ldd	r4, Y+43	; 0x2b
    5396:	5c a4       	ldd	r5, Y+44	; 0x2c
    5398:	d1 01       	movw	r26, r2
    539a:	99 27       	eor	r25, r25
    539c:	88 27       	eor	r24, r24
    539e:	2d a0       	ldd	r2, Y+37	; 0x25
    53a0:	3e a0       	ldd	r3, Y+38	; 0x26
    53a2:	4f a0       	ldd	r4, Y+39	; 0x27
    53a4:	58 a4       	ldd	r5, Y+40	; 0x28
    53a6:	92 01       	movw	r18, r4
    53a8:	44 27       	eor	r20, r20
    53aa:	55 27       	eor	r21, r21
    53ac:	82 2b       	or	r24, r18
    53ae:	93 2b       	or	r25, r19
    53b0:	a4 2b       	or	r26, r20
    53b2:	b5 2b       	or	r27, r21
    53b4:	86 15       	cp	r24, r6
    53b6:	97 05       	cpc	r25, r7
    53b8:	a8 05       	cpc	r26, r8
    53ba:	b9 05       	cpc	r27, r9
    53bc:	30 f5       	brcc	.+76     	; 0x540a <__udivdi3+0x70c>
    53be:	29 8d       	ldd	r18, Y+25	; 0x19
    53c0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    53c2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    53c4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    53c6:	21 50       	subi	r18, 0x01	; 1
    53c8:	30 40       	sbci	r19, 0x00	; 0
    53ca:	40 40       	sbci	r20, 0x00	; 0
    53cc:	50 40       	sbci	r21, 0x00	; 0
    53ce:	29 8f       	std	Y+25, r18	; 0x19
    53d0:	3a 8f       	std	Y+26, r19	; 0x1a
    53d2:	4b 8f       	std	Y+27, r20	; 0x1b
    53d4:	5c 8f       	std	Y+28, r21	; 0x1c
    53d6:	8e 0d       	add	r24, r14
    53d8:	9f 1d       	adc	r25, r15
    53da:	a0 1f       	adc	r26, r16
    53dc:	b1 1f       	adc	r27, r17
    53de:	8e 15       	cp	r24, r14
    53e0:	9f 05       	cpc	r25, r15
    53e2:	a0 07       	cpc	r26, r16
    53e4:	b1 07       	cpc	r27, r17
    53e6:	88 f0       	brcs	.+34     	; 0x540a <__udivdi3+0x70c>
    53e8:	86 15       	cp	r24, r6
    53ea:	97 05       	cpc	r25, r7
    53ec:	a8 05       	cpc	r26, r8
    53ee:	b9 05       	cpc	r27, r9
    53f0:	60 f4       	brcc	.+24     	; 0x540a <__udivdi3+0x70c>
    53f2:	21 50       	subi	r18, 0x01	; 1
    53f4:	30 40       	sbci	r19, 0x00	; 0
    53f6:	40 40       	sbci	r20, 0x00	; 0
    53f8:	50 40       	sbci	r21, 0x00	; 0
    53fa:	29 8f       	std	Y+25, r18	; 0x19
    53fc:	3a 8f       	std	Y+26, r19	; 0x1a
    53fe:	4b 8f       	std	Y+27, r20	; 0x1b
    5400:	5c 8f       	std	Y+28, r21	; 0x1c
    5402:	8e 0d       	add	r24, r14
    5404:	9f 1d       	adc	r25, r15
    5406:	a0 1f       	adc	r26, r16
    5408:	b1 1f       	adc	r27, r17
    540a:	ac 01       	movw	r20, r24
    540c:	bd 01       	movw	r22, r26
    540e:	46 19       	sub	r20, r6
    5410:	57 09       	sbc	r21, r7
    5412:	68 09       	sbc	r22, r8
    5414:	79 09       	sbc	r23, r9
    5416:	3a 01       	movw	r6, r20
    5418:	4b 01       	movw	r8, r22
    541a:	cb 01       	movw	r24, r22
    541c:	ba 01       	movw	r22, r20
    541e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5420:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5422:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5424:	58 a1       	ldd	r21, Y+32	; 0x20
    5426:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    542a:	52 2e       	mov	r5, r18
    542c:	43 2e       	mov	r4, r19
    542e:	34 2e       	mov	r3, r20
    5430:	25 2e       	mov	r2, r21
    5432:	69 a7       	std	Y+41, r22	; 0x29
    5434:	7a a7       	std	Y+42, r23	; 0x2a
    5436:	8b a7       	std	Y+43, r24	; 0x2b
    5438:	9c a7       	std	Y+44, r25	; 0x2c
    543a:	c4 01       	movw	r24, r8
    543c:	b3 01       	movw	r22, r6
    543e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5440:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5442:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5444:	58 a1       	ldd	r21, Y+32	; 0x20
    5446:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    544a:	65 2c       	mov	r6, r5
    544c:	74 2c       	mov	r7, r4
    544e:	83 2c       	mov	r8, r3
    5450:	92 2c       	mov	r9, r2
    5452:	c4 01       	movw	r24, r8
    5454:	b3 01       	movw	r22, r6
    5456:	29 a1       	ldd	r18, Y+33	; 0x21
    5458:	3a a1       	ldd	r19, Y+34	; 0x22
    545a:	4b a1       	ldd	r20, Y+35	; 0x23
    545c:	5c a1       	ldd	r21, Y+36	; 0x24
    545e:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    5462:	1b 01       	movw	r2, r22
    5464:	2c 01       	movw	r4, r24
    5466:	69 a5       	ldd	r22, Y+41	; 0x29
    5468:	7a a5       	ldd	r23, Y+42	; 0x2a
    546a:	8b a5       	ldd	r24, Y+43	; 0x2b
    546c:	9c a5       	ldd	r25, Y+44	; 0x2c
    546e:	ab 01       	movw	r20, r22
    5470:	33 27       	eor	r19, r19
    5472:	22 27       	eor	r18, r18
    5474:	8d a1       	ldd	r24, Y+37	; 0x25
    5476:	9e a1       	ldd	r25, Y+38	; 0x26
    5478:	af a1       	ldd	r26, Y+39	; 0x27
    547a:	b8 a5       	ldd	r27, Y+40	; 0x28
    547c:	a0 70       	andi	r26, 0x00	; 0
    547e:	b0 70       	andi	r27, 0x00	; 0
    5480:	28 2b       	or	r18, r24
    5482:	39 2b       	or	r19, r25
    5484:	4a 2b       	or	r20, r26
    5486:	5b 2b       	or	r21, r27
    5488:	22 15       	cp	r18, r2
    548a:	33 05       	cpc	r19, r3
    548c:	44 05       	cpc	r20, r4
    548e:	55 05       	cpc	r21, r5
    5490:	c0 f4       	brcc	.+48     	; 0x54c2 <__udivdi3+0x7c4>
    5492:	08 94       	sec
    5494:	61 08       	sbc	r6, r1
    5496:	71 08       	sbc	r7, r1
    5498:	81 08       	sbc	r8, r1
    549a:	91 08       	sbc	r9, r1
    549c:	2e 0d       	add	r18, r14
    549e:	3f 1d       	adc	r19, r15
    54a0:	40 1f       	adc	r20, r16
    54a2:	51 1f       	adc	r21, r17
    54a4:	2e 15       	cp	r18, r14
    54a6:	3f 05       	cpc	r19, r15
    54a8:	40 07       	cpc	r20, r16
    54aa:	51 07       	cpc	r21, r17
    54ac:	50 f0       	brcs	.+20     	; 0x54c2 <__udivdi3+0x7c4>
    54ae:	22 15       	cp	r18, r2
    54b0:	33 05       	cpc	r19, r3
    54b2:	44 05       	cpc	r20, r4
    54b4:	55 05       	cpc	r21, r5
    54b6:	28 f4       	brcc	.+10     	; 0x54c2 <__udivdi3+0x7c4>
    54b8:	08 94       	sec
    54ba:	61 08       	sbc	r6, r1
    54bc:	71 08       	sbc	r7, r1
    54be:	81 08       	sbc	r8, r1
    54c0:	91 08       	sbc	r9, r1
    54c2:	89 8d       	ldd	r24, Y+25	; 0x19
    54c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    54c6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    54c8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    54ca:	8c 01       	movw	r16, r24
    54cc:	ff 24       	eor	r15, r15
    54ce:	ee 24       	eor	r14, r14
    54d0:	e6 28       	or	r14, r6
    54d2:	f7 28       	or	r15, r7
    54d4:	08 29       	or	r16, r8
    54d6:	19 29       	or	r17, r9
    54d8:	4d c2       	rjmp	.+1178   	; 0x5974 <__udivdi3+0xc76>
    54da:	a2 16       	cp	r10, r18
    54dc:	b3 06       	cpc	r11, r19
    54de:	c4 06       	cpc	r12, r20
    54e0:	d5 06       	cpc	r13, r21
    54e2:	08 f4       	brcc	.+2      	; 0x54e6 <__udivdi3+0x7e8>
    54e4:	34 c2       	rjmp	.+1128   	; 0x594e <__udivdi3+0xc50>
    54e6:	20 30       	cpi	r18, 0x00	; 0
    54e8:	90 e0       	ldi	r25, 0x00	; 0
    54ea:	39 07       	cpc	r19, r25
    54ec:	91 e0       	ldi	r25, 0x01	; 1
    54ee:	49 07       	cpc	r20, r25
    54f0:	90 e0       	ldi	r25, 0x00	; 0
    54f2:	59 07       	cpc	r21, r25
    54f4:	50 f4       	brcc	.+20     	; 0x550a <__udivdi3+0x80c>
    54f6:	2f 3f       	cpi	r18, 0xFF	; 255
    54f8:	31 05       	cpc	r19, r1
    54fa:	41 05       	cpc	r20, r1
    54fc:	51 05       	cpc	r21, r1
    54fe:	09 f0       	breq	.+2      	; 0x5502 <__udivdi3+0x804>
    5500:	90 f4       	brcc	.+36     	; 0x5526 <__udivdi3+0x828>
    5502:	66 24       	eor	r6, r6
    5504:	77 24       	eor	r7, r7
    5506:	43 01       	movw	r8, r6
    5508:	19 c0       	rjmp	.+50     	; 0x553c <__udivdi3+0x83e>
    550a:	20 30       	cpi	r18, 0x00	; 0
    550c:	a0 e0       	ldi	r26, 0x00	; 0
    550e:	3a 07       	cpc	r19, r26
    5510:	a0 e0       	ldi	r26, 0x00	; 0
    5512:	4a 07       	cpc	r20, r26
    5514:	a1 e0       	ldi	r26, 0x01	; 1
    5516:	5a 07       	cpc	r21, r26
    5518:	60 f4       	brcc	.+24     	; 0x5532 <__udivdi3+0x834>
    551a:	90 e1       	ldi	r25, 0x10	; 16
    551c:	69 2e       	mov	r6, r25
    551e:	71 2c       	mov	r7, r1
    5520:	81 2c       	mov	r8, r1
    5522:	91 2c       	mov	r9, r1
    5524:	0b c0       	rjmp	.+22     	; 0x553c <__udivdi3+0x83e>
    5526:	88 e0       	ldi	r24, 0x08	; 8
    5528:	68 2e       	mov	r6, r24
    552a:	71 2c       	mov	r7, r1
    552c:	81 2c       	mov	r8, r1
    552e:	91 2c       	mov	r9, r1
    5530:	05 c0       	rjmp	.+10     	; 0x553c <__udivdi3+0x83e>
    5532:	b8 e1       	ldi	r27, 0x18	; 24
    5534:	6b 2e       	mov	r6, r27
    5536:	71 2c       	mov	r7, r1
    5538:	81 2c       	mov	r8, r1
    553a:	91 2c       	mov	r9, r1
    553c:	da 01       	movw	r26, r20
    553e:	c9 01       	movw	r24, r18
    5540:	06 2c       	mov	r0, r6
    5542:	04 c0       	rjmp	.+8      	; 0x554c <__udivdi3+0x84e>
    5544:	b6 95       	lsr	r27
    5546:	a7 95       	ror	r26
    5548:	97 95       	ror	r25
    554a:	87 95       	ror	r24
    554c:	0a 94       	dec	r0
    554e:	d2 f7       	brpl	.-12     	; 0x5544 <__udivdi3+0x846>
    5550:	8f 54       	subi	r24, 0x4F	; 79
    5552:	9d 4f       	sbci	r25, 0xFD	; 253
    5554:	fc 01       	movw	r30, r24
    5556:	80 81       	ld	r24, Z
    5558:	68 0e       	add	r6, r24
    555a:	71 1c       	adc	r7, r1
    555c:	81 1c       	adc	r8, r1
    555e:	91 1c       	adc	r9, r1
    5560:	80 e2       	ldi	r24, 0x20	; 32
    5562:	90 e0       	ldi	r25, 0x00	; 0
    5564:	a0 e0       	ldi	r26, 0x00	; 0
    5566:	b0 e0       	ldi	r27, 0x00	; 0
    5568:	86 19       	sub	r24, r6
    556a:	97 09       	sbc	r25, r7
    556c:	a8 09       	sbc	r26, r8
    556e:	b9 09       	sbc	r27, r9
    5570:	89 f4       	brne	.+34     	; 0x5594 <__udivdi3+0x896>
    5572:	2a 15       	cp	r18, r10
    5574:	3b 05       	cpc	r19, r11
    5576:	4c 05       	cpc	r20, r12
    5578:	5d 05       	cpc	r21, r13
    557a:	08 f4       	brcc	.+2      	; 0x557e <__udivdi3+0x880>
    557c:	ef c1       	rjmp	.+990    	; 0x595c <__udivdi3+0xc5e>
    557e:	2d a0       	ldd	r2, Y+37	; 0x25
    5580:	3e a0       	ldd	r3, Y+38	; 0x26
    5582:	4f a0       	ldd	r4, Y+39	; 0x27
    5584:	58 a4       	ldd	r5, Y+40	; 0x28
    5586:	2e 14       	cp	r2, r14
    5588:	3f 04       	cpc	r3, r15
    558a:	40 06       	cpc	r4, r16
    558c:	51 06       	cpc	r5, r17
    558e:	08 f0       	brcs	.+2      	; 0x5592 <__udivdi3+0x894>
    5590:	e5 c1       	rjmp	.+970    	; 0x595c <__udivdi3+0xc5e>
    5592:	dd c1       	rjmp	.+954    	; 0x594e <__udivdi3+0xc50>
    5594:	89 a7       	std	Y+41, r24	; 0x29
    5596:	19 01       	movw	r2, r18
    5598:	2a 01       	movw	r4, r20
    559a:	04 c0       	rjmp	.+8      	; 0x55a4 <__udivdi3+0x8a6>
    559c:	22 0c       	add	r2, r2
    559e:	33 1c       	adc	r3, r3
    55a0:	44 1c       	adc	r4, r4
    55a2:	55 1c       	adc	r5, r5
    55a4:	8a 95       	dec	r24
    55a6:	d2 f7       	brpl	.-12     	; 0x559c <__udivdi3+0x89e>
    55a8:	d8 01       	movw	r26, r16
    55aa:	c7 01       	movw	r24, r14
    55ac:	06 2c       	mov	r0, r6
    55ae:	04 c0       	rjmp	.+8      	; 0x55b8 <__udivdi3+0x8ba>
    55b0:	b6 95       	lsr	r27
    55b2:	a7 95       	ror	r26
    55b4:	97 95       	ror	r25
    55b6:	87 95       	ror	r24
    55b8:	0a 94       	dec	r0
    55ba:	d2 f7       	brpl	.-12     	; 0x55b0 <__udivdi3+0x8b2>
    55bc:	28 2a       	or	r2, r24
    55be:	39 2a       	or	r3, r25
    55c0:	4a 2a       	or	r4, r26
    55c2:	5b 2a       	or	r5, r27
    55c4:	a8 01       	movw	r20, r16
    55c6:	97 01       	movw	r18, r14
    55c8:	09 a4       	ldd	r0, Y+41	; 0x29
    55ca:	04 c0       	rjmp	.+8      	; 0x55d4 <__udivdi3+0x8d6>
    55cc:	22 0f       	add	r18, r18
    55ce:	33 1f       	adc	r19, r19
    55d0:	44 1f       	adc	r20, r20
    55d2:	55 1f       	adc	r21, r21
    55d4:	0a 94       	dec	r0
    55d6:	d2 f7       	brpl	.-12     	; 0x55cc <__udivdi3+0x8ce>
    55d8:	29 ab       	std	Y+49, r18	; 0x31
    55da:	3a ab       	std	Y+50, r19	; 0x32
    55dc:	4b ab       	std	Y+51, r20	; 0x33
    55de:	5c ab       	std	Y+52, r21	; 0x34
    55e0:	86 01       	movw	r16, r12
    55e2:	75 01       	movw	r14, r10
    55e4:	06 2c       	mov	r0, r6
    55e6:	04 c0       	rjmp	.+8      	; 0x55f0 <__udivdi3+0x8f2>
    55e8:	16 95       	lsr	r17
    55ea:	07 95       	ror	r16
    55ec:	f7 94       	ror	r15
    55ee:	e7 94       	ror	r14
    55f0:	0a 94       	dec	r0
    55f2:	d2 f7       	brpl	.-12     	; 0x55e8 <__udivdi3+0x8ea>
    55f4:	b6 01       	movw	r22, r12
    55f6:	a5 01       	movw	r20, r10
    55f8:	09 a4       	ldd	r0, Y+41	; 0x29
    55fa:	04 c0       	rjmp	.+8      	; 0x5604 <__udivdi3+0x906>
    55fc:	44 0f       	add	r20, r20
    55fe:	55 1f       	adc	r21, r21
    5600:	66 1f       	adc	r22, r22
    5602:	77 1f       	adc	r23, r23
    5604:	0a 94       	dec	r0
    5606:	d2 f7       	brpl	.-12     	; 0x55fc <__udivdi3+0x8fe>
    5608:	4d 8f       	std	Y+29, r20	; 0x1d
    560a:	5e 8f       	std	Y+30, r21	; 0x1e
    560c:	6f 8f       	std	Y+31, r22	; 0x1f
    560e:	78 a3       	std	Y+32, r23	; 0x20
    5610:	6d a1       	ldd	r22, Y+37	; 0x25
    5612:	7e a1       	ldd	r23, Y+38	; 0x26
    5614:	8f a1       	ldd	r24, Y+39	; 0x27
    5616:	98 a5       	ldd	r25, Y+40	; 0x28
    5618:	04 c0       	rjmp	.+8      	; 0x5622 <__udivdi3+0x924>
    561a:	96 95       	lsr	r25
    561c:	87 95       	ror	r24
    561e:	77 95       	ror	r23
    5620:	67 95       	ror	r22
    5622:	6a 94       	dec	r6
    5624:	d2 f7       	brpl	.-12     	; 0x561a <__udivdi3+0x91c>
    5626:	3b 01       	movw	r6, r22
    5628:	4c 01       	movw	r8, r24
    562a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    562c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    562e:	af 8d       	ldd	r26, Y+31	; 0x1f
    5630:	b8 a1       	ldd	r27, Y+32	; 0x20
    5632:	86 29       	or	r24, r6
    5634:	97 29       	or	r25, r7
    5636:	a8 29       	or	r26, r8
    5638:	b9 29       	or	r27, r9
    563a:	8d 8f       	std	Y+29, r24	; 0x1d
    563c:	9e 8f       	std	Y+30, r25	; 0x1e
    563e:	af 8f       	std	Y+31, r26	; 0x1f
    5640:	b8 a3       	std	Y+32, r27	; 0x20
    5642:	52 01       	movw	r10, r4
    5644:	cc 24       	eor	r12, r12
    5646:	dd 24       	eor	r13, r13
    5648:	a9 a2       	std	Y+33, r10	; 0x21
    564a:	ba a2       	std	Y+34, r11	; 0x22
    564c:	cb a2       	std	Y+35, r12	; 0x23
    564e:	dc a2       	std	Y+36, r13	; 0x24
    5650:	a2 01       	movw	r20, r4
    5652:	91 01       	movw	r18, r2
    5654:	40 70       	andi	r20, 0x00	; 0
    5656:	50 70       	andi	r21, 0x00	; 0
    5658:	2d ab       	std	Y+53, r18	; 0x35
    565a:	3e ab       	std	Y+54, r19	; 0x36
    565c:	4f ab       	std	Y+55, r20	; 0x37
    565e:	58 af       	std	Y+56, r21	; 0x38
    5660:	c8 01       	movw	r24, r16
    5662:	b7 01       	movw	r22, r14
    5664:	a6 01       	movw	r20, r12
    5666:	95 01       	movw	r18, r10
    5668:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    566c:	62 2e       	mov	r6, r18
    566e:	a3 2e       	mov	r10, r19
    5670:	d4 2e       	mov	r13, r20
    5672:	c5 2e       	mov	r12, r21
    5674:	6d a7       	std	Y+45, r22	; 0x2d
    5676:	7e a7       	std	Y+46, r23	; 0x2e
    5678:	8f a7       	std	Y+47, r24	; 0x2f
    567a:	98 ab       	std	Y+48, r25	; 0x30
    567c:	c8 01       	movw	r24, r16
    567e:	b7 01       	movw	r22, r14
    5680:	29 a1       	ldd	r18, Y+33	; 0x21
    5682:	3a a1       	ldd	r19, Y+34	; 0x22
    5684:	4b a1       	ldd	r20, Y+35	; 0x23
    5686:	5c a1       	ldd	r21, Y+36	; 0x24
    5688:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    568c:	e6 2c       	mov	r14, r6
    568e:	fa 2c       	mov	r15, r10
    5690:	0d 2d       	mov	r16, r13
    5692:	1c 2d       	mov	r17, r12
    5694:	e9 8e       	std	Y+25, r14	; 0x19
    5696:	fa 8e       	std	Y+26, r15	; 0x1a
    5698:	0b 8f       	std	Y+27, r16	; 0x1b
    569a:	1c 8f       	std	Y+28, r17	; 0x1c
    569c:	c8 01       	movw	r24, r16
    569e:	b7 01       	movw	r22, r14
    56a0:	2d a9       	ldd	r18, Y+53	; 0x35
    56a2:	3e a9       	ldd	r19, Y+54	; 0x36
    56a4:	4f a9       	ldd	r20, Y+55	; 0x37
    56a6:	58 ad       	ldd	r21, Y+56	; 0x38
    56a8:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    56ac:	ad a4       	ldd	r10, Y+45	; 0x2d
    56ae:	be a4       	ldd	r11, Y+46	; 0x2e
    56b0:	cf a4       	ldd	r12, Y+47	; 0x2f
    56b2:	d8 a8       	ldd	r13, Y+48	; 0x30
    56b4:	85 01       	movw	r16, r10
    56b6:	ff 24       	eor	r15, r15
    56b8:	ee 24       	eor	r14, r14
    56ba:	ad 8c       	ldd	r10, Y+29	; 0x1d
    56bc:	be 8c       	ldd	r11, Y+30	; 0x1e
    56be:	cf 8c       	ldd	r12, Y+31	; 0x1f
    56c0:	d8 a0       	ldd	r13, Y+32	; 0x20
    56c2:	96 01       	movw	r18, r12
    56c4:	44 27       	eor	r20, r20
    56c6:	55 27       	eor	r21, r21
    56c8:	e2 2a       	or	r14, r18
    56ca:	f3 2a       	or	r15, r19
    56cc:	04 2b       	or	r16, r20
    56ce:	15 2b       	or	r17, r21
    56d0:	e6 16       	cp	r14, r22
    56d2:	f7 06       	cpc	r15, r23
    56d4:	08 07       	cpc	r16, r24
    56d6:	19 07       	cpc	r17, r25
    56d8:	30 f5       	brcc	.+76     	; 0x5726 <__udivdi3+0xa28>
    56da:	29 8d       	ldd	r18, Y+25	; 0x19
    56dc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    56de:	4b 8d       	ldd	r20, Y+27	; 0x1b
    56e0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    56e2:	21 50       	subi	r18, 0x01	; 1
    56e4:	30 40       	sbci	r19, 0x00	; 0
    56e6:	40 40       	sbci	r20, 0x00	; 0
    56e8:	50 40       	sbci	r21, 0x00	; 0
    56ea:	29 8f       	std	Y+25, r18	; 0x19
    56ec:	3a 8f       	std	Y+26, r19	; 0x1a
    56ee:	4b 8f       	std	Y+27, r20	; 0x1b
    56f0:	5c 8f       	std	Y+28, r21	; 0x1c
    56f2:	e2 0c       	add	r14, r2
    56f4:	f3 1c       	adc	r15, r3
    56f6:	04 1d       	adc	r16, r4
    56f8:	15 1d       	adc	r17, r5
    56fa:	e2 14       	cp	r14, r2
    56fc:	f3 04       	cpc	r15, r3
    56fe:	04 05       	cpc	r16, r4
    5700:	15 05       	cpc	r17, r5
    5702:	88 f0       	brcs	.+34     	; 0x5726 <__udivdi3+0xa28>
    5704:	e6 16       	cp	r14, r22
    5706:	f7 06       	cpc	r15, r23
    5708:	08 07       	cpc	r16, r24
    570a:	19 07       	cpc	r17, r25
    570c:	60 f4       	brcc	.+24     	; 0x5726 <__udivdi3+0xa28>
    570e:	21 50       	subi	r18, 0x01	; 1
    5710:	30 40       	sbci	r19, 0x00	; 0
    5712:	40 40       	sbci	r20, 0x00	; 0
    5714:	50 40       	sbci	r21, 0x00	; 0
    5716:	29 8f       	std	Y+25, r18	; 0x19
    5718:	3a 8f       	std	Y+26, r19	; 0x1a
    571a:	4b 8f       	std	Y+27, r20	; 0x1b
    571c:	5c 8f       	std	Y+28, r21	; 0x1c
    571e:	e2 0c       	add	r14, r2
    5720:	f3 1c       	adc	r15, r3
    5722:	04 1d       	adc	r16, r4
    5724:	15 1d       	adc	r17, r5
    5726:	e6 1a       	sub	r14, r22
    5728:	f7 0a       	sbc	r15, r23
    572a:	08 0b       	sbc	r16, r24
    572c:	19 0b       	sbc	r17, r25
    572e:	c8 01       	movw	r24, r16
    5730:	b7 01       	movw	r22, r14
    5732:	29 a1       	ldd	r18, Y+33	; 0x21
    5734:	3a a1       	ldd	r19, Y+34	; 0x22
    5736:	4b a1       	ldd	r20, Y+35	; 0x23
    5738:	5c a1       	ldd	r21, Y+36	; 0x24
    573a:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    573e:	a2 2e       	mov	r10, r18
    5740:	d3 2e       	mov	r13, r19
    5742:	c4 2e       	mov	r12, r20
    5744:	b5 2e       	mov	r11, r21
    5746:	6d a7       	std	Y+45, r22	; 0x2d
    5748:	7e a7       	std	Y+46, r23	; 0x2e
    574a:	8f a7       	std	Y+47, r24	; 0x2f
    574c:	98 ab       	std	Y+48, r25	; 0x30
    574e:	c8 01       	movw	r24, r16
    5750:	b7 01       	movw	r22, r14
    5752:	29 a1       	ldd	r18, Y+33	; 0x21
    5754:	3a a1       	ldd	r19, Y+34	; 0x22
    5756:	4b a1       	ldd	r20, Y+35	; 0x23
    5758:	5c a1       	ldd	r21, Y+36	; 0x24
    575a:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__udivmodsi4>
    575e:	6a 2c       	mov	r6, r10
    5760:	7d 2c       	mov	r7, r13
    5762:	8c 2c       	mov	r8, r12
    5764:	9b 2c       	mov	r9, r11
    5766:	c4 01       	movw	r24, r8
    5768:	b3 01       	movw	r22, r6
    576a:	2d a9       	ldd	r18, Y+53	; 0x35
    576c:	3e a9       	ldd	r19, Y+54	; 0x36
    576e:	4f a9       	ldd	r20, Y+55	; 0x37
    5770:	58 ad       	ldd	r21, Y+56	; 0x38
    5772:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    5776:	9b 01       	movw	r18, r22
    5778:	ac 01       	movw	r20, r24
    577a:	ad a4       	ldd	r10, Y+45	; 0x2d
    577c:	be a4       	ldd	r11, Y+46	; 0x2e
    577e:	cf a4       	ldd	r12, Y+47	; 0x2f
    5780:	d8 a8       	ldd	r13, Y+48	; 0x30
    5782:	d5 01       	movw	r26, r10
    5784:	99 27       	eor	r25, r25
    5786:	88 27       	eor	r24, r24
    5788:	ad 8c       	ldd	r10, Y+29	; 0x1d
    578a:	be 8c       	ldd	r11, Y+30	; 0x1e
    578c:	cf 8c       	ldd	r12, Y+31	; 0x1f
    578e:	d8 a0       	ldd	r13, Y+32	; 0x20
    5790:	6f ef       	ldi	r22, 0xFF	; 255
    5792:	e6 2e       	mov	r14, r22
    5794:	6f ef       	ldi	r22, 0xFF	; 255
    5796:	f6 2e       	mov	r15, r22
    5798:	01 2d       	mov	r16, r1
    579a:	11 2d       	mov	r17, r1
    579c:	ae 20       	and	r10, r14
    579e:	bf 20       	and	r11, r15
    57a0:	c0 22       	and	r12, r16
    57a2:	d1 22       	and	r13, r17
    57a4:	8a 29       	or	r24, r10
    57a6:	9b 29       	or	r25, r11
    57a8:	ac 29       	or	r26, r12
    57aa:	bd 29       	or	r27, r13
    57ac:	82 17       	cp	r24, r18
    57ae:	93 07       	cpc	r25, r19
    57b0:	a4 07       	cpc	r26, r20
    57b2:	b5 07       	cpc	r27, r21
    57b4:	e0 f4       	brcc	.+56     	; 0x57ee <__udivdi3+0xaf0>
    57b6:	08 94       	sec
    57b8:	61 08       	sbc	r6, r1
    57ba:	71 08       	sbc	r7, r1
    57bc:	81 08       	sbc	r8, r1
    57be:	91 08       	sbc	r9, r1
    57c0:	82 0d       	add	r24, r2
    57c2:	93 1d       	adc	r25, r3
    57c4:	a4 1d       	adc	r26, r4
    57c6:	b5 1d       	adc	r27, r5
    57c8:	82 15       	cp	r24, r2
    57ca:	93 05       	cpc	r25, r3
    57cc:	a4 05       	cpc	r26, r4
    57ce:	b5 05       	cpc	r27, r5
    57d0:	70 f0       	brcs	.+28     	; 0x57ee <__udivdi3+0xaf0>
    57d2:	82 17       	cp	r24, r18
    57d4:	93 07       	cpc	r25, r19
    57d6:	a4 07       	cpc	r26, r20
    57d8:	b5 07       	cpc	r27, r21
    57da:	48 f4       	brcc	.+18     	; 0x57ee <__udivdi3+0xaf0>
    57dc:	08 94       	sec
    57de:	61 08       	sbc	r6, r1
    57e0:	71 08       	sbc	r7, r1
    57e2:	81 08       	sbc	r8, r1
    57e4:	91 08       	sbc	r9, r1
    57e6:	82 0d       	add	r24, r2
    57e8:	93 1d       	adc	r25, r3
    57ea:	a4 1d       	adc	r26, r4
    57ec:	b5 1d       	adc	r27, r5
    57ee:	1c 01       	movw	r2, r24
    57f0:	2d 01       	movw	r4, r26
    57f2:	22 1a       	sub	r2, r18
    57f4:	33 0a       	sbc	r3, r19
    57f6:	44 0a       	sbc	r4, r20
    57f8:	55 0a       	sbc	r5, r21
    57fa:	2d 8e       	std	Y+29, r2	; 0x1d
    57fc:	3e 8e       	std	Y+30, r3	; 0x1e
    57fe:	4f 8e       	std	Y+31, r4	; 0x1f
    5800:	58 a2       	std	Y+32, r5	; 0x20
    5802:	a9 8c       	ldd	r10, Y+25	; 0x19
    5804:	ba 8c       	ldd	r11, Y+26	; 0x1a
    5806:	cb 8c       	ldd	r12, Y+27	; 0x1b
    5808:	dc 8c       	ldd	r13, Y+28	; 0x1c
    580a:	85 01       	movw	r16, r10
    580c:	ff 24       	eor	r15, r15
    580e:	ee 24       	eor	r14, r14
    5810:	e6 28       	or	r14, r6
    5812:	f7 28       	or	r15, r7
    5814:	08 29       	or	r16, r8
    5816:	19 29       	or	r17, r9
    5818:	af ef       	ldi	r26, 0xFF	; 255
    581a:	aa 2e       	mov	r10, r26
    581c:	af ef       	ldi	r26, 0xFF	; 255
    581e:	ba 2e       	mov	r11, r26
    5820:	c1 2c       	mov	r12, r1
    5822:	d1 2c       	mov	r13, r1
    5824:	ae 20       	and	r10, r14
    5826:	bf 20       	and	r11, r15
    5828:	c0 22       	and	r12, r16
    582a:	d1 22       	and	r13, r17
    582c:	18 01       	movw	r2, r16
    582e:	44 24       	eor	r4, r4
    5830:	55 24       	eor	r5, r5
    5832:	69 a8       	ldd	r6, Y+49	; 0x31
    5834:	7a a8       	ldd	r7, Y+50	; 0x32
    5836:	8b a8       	ldd	r8, Y+51	; 0x33
    5838:	9c a8       	ldd	r9, Y+52	; 0x34
    583a:	2f ef       	ldi	r18, 0xFF	; 255
    583c:	3f ef       	ldi	r19, 0xFF	; 255
    583e:	40 e0       	ldi	r20, 0x00	; 0
    5840:	50 e0       	ldi	r21, 0x00	; 0
    5842:	62 22       	and	r6, r18
    5844:	73 22       	and	r7, r19
    5846:	84 22       	and	r8, r20
    5848:	95 22       	and	r9, r21
    584a:	69 a9       	ldd	r22, Y+49	; 0x31
    584c:	7a a9       	ldd	r23, Y+50	; 0x32
    584e:	8b a9       	ldd	r24, Y+51	; 0x33
    5850:	9c a9       	ldd	r25, Y+52	; 0x34
    5852:	ac 01       	movw	r20, r24
    5854:	66 27       	eor	r22, r22
    5856:	77 27       	eor	r23, r23
    5858:	49 8f       	std	Y+25, r20	; 0x19
    585a:	5a 8f       	std	Y+26, r21	; 0x1a
    585c:	6b 8f       	std	Y+27, r22	; 0x1b
    585e:	7c 8f       	std	Y+28, r23	; 0x1c
    5860:	c6 01       	movw	r24, r12
    5862:	b5 01       	movw	r22, r10
    5864:	a4 01       	movw	r20, r8
    5866:	93 01       	movw	r18, r6
    5868:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    586c:	69 a3       	std	Y+33, r22	; 0x21
    586e:	7a a3       	std	Y+34, r23	; 0x22
    5870:	8b a3       	std	Y+35, r24	; 0x23
    5872:	9c a3       	std	Y+36, r25	; 0x24
    5874:	c6 01       	movw	r24, r12
    5876:	b5 01       	movw	r22, r10
    5878:	29 8d       	ldd	r18, Y+25	; 0x19
    587a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    587c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    587e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5880:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    5884:	5b 01       	movw	r10, r22
    5886:	6c 01       	movw	r12, r24
    5888:	c2 01       	movw	r24, r4
    588a:	b1 01       	movw	r22, r2
    588c:	a4 01       	movw	r20, r8
    588e:	93 01       	movw	r18, r6
    5890:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    5894:	3b 01       	movw	r6, r22
    5896:	4c 01       	movw	r8, r24
    5898:	c2 01       	movw	r24, r4
    589a:	b1 01       	movw	r22, r2
    589c:	29 8d       	ldd	r18, Y+25	; 0x19
    589e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    58a0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    58a2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    58a4:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    58a8:	9b 01       	movw	r18, r22
    58aa:	ac 01       	movw	r20, r24
    58ac:	a6 0c       	add	r10, r6
    58ae:	b7 1c       	adc	r11, r7
    58b0:	c8 1c       	adc	r12, r8
    58b2:	d9 1c       	adc	r13, r9
    58b4:	29 a0       	ldd	r2, Y+33	; 0x21
    58b6:	3a a0       	ldd	r3, Y+34	; 0x22
    58b8:	4b a0       	ldd	r4, Y+35	; 0x23
    58ba:	5c a0       	ldd	r5, Y+36	; 0x24
    58bc:	c2 01       	movw	r24, r4
    58be:	aa 27       	eor	r26, r26
    58c0:	bb 27       	eor	r27, r27
    58c2:	a8 0e       	add	r10, r24
    58c4:	b9 1e       	adc	r11, r25
    58c6:	ca 1e       	adc	r12, r26
    58c8:	db 1e       	adc	r13, r27
    58ca:	a6 14       	cp	r10, r6
    58cc:	b7 04       	cpc	r11, r7
    58ce:	c8 04       	cpc	r12, r8
    58d0:	d9 04       	cpc	r13, r9
    58d2:	20 f4       	brcc	.+8      	; 0x58dc <__udivdi3+0xbde>
    58d4:	20 50       	subi	r18, 0x00	; 0
    58d6:	30 40       	sbci	r19, 0x00	; 0
    58d8:	4f 4f       	sbci	r20, 0xFF	; 255
    58da:	5f 4f       	sbci	r21, 0xFF	; 255
    58dc:	c6 01       	movw	r24, r12
    58de:	aa 27       	eor	r26, r26
    58e0:	bb 27       	eor	r27, r27
    58e2:	82 0f       	add	r24, r18
    58e4:	93 1f       	adc	r25, r19
    58e6:	a4 1f       	adc	r26, r20
    58e8:	b5 1f       	adc	r27, r21
    58ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
    58ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
    58ee:	4f 8d       	ldd	r20, Y+31	; 0x1f
    58f0:	58 a1       	ldd	r21, Y+32	; 0x20
    58f2:	28 17       	cp	r18, r24
    58f4:	39 07       	cpc	r19, r25
    58f6:	4a 07       	cpc	r20, r26
    58f8:	5b 07       	cpc	r21, r27
    58fa:	18 f1       	brcs	.+70     	; 0x5942 <__udivdi3+0xc44>
    58fc:	82 17       	cp	r24, r18
    58fe:	93 07       	cpc	r25, r19
    5900:	a4 07       	cpc	r26, r20
    5902:	b5 07       	cpc	r27, r21
    5904:	a1 f5       	brne	.+104    	; 0x596e <__udivdi3+0xc70>
    5906:	65 01       	movw	r12, r10
    5908:	bb 24       	eor	r11, r11
    590a:	aa 24       	eor	r10, r10
    590c:	89 a1       	ldd	r24, Y+33	; 0x21
    590e:	9a a1       	ldd	r25, Y+34	; 0x22
    5910:	ab a1       	ldd	r26, Y+35	; 0x23
    5912:	bc a1       	ldd	r27, Y+36	; 0x24
    5914:	a0 70       	andi	r26, 0x00	; 0
    5916:	b0 70       	andi	r27, 0x00	; 0
    5918:	a8 0e       	add	r10, r24
    591a:	b9 1e       	adc	r11, r25
    591c:	ca 1e       	adc	r12, r26
    591e:	db 1e       	adc	r13, r27
    5920:	8d a1       	ldd	r24, Y+37	; 0x25
    5922:	9e a1       	ldd	r25, Y+38	; 0x26
    5924:	af a1       	ldd	r26, Y+39	; 0x27
    5926:	b8 a5       	ldd	r27, Y+40	; 0x28
    5928:	09 a4       	ldd	r0, Y+41	; 0x29
    592a:	04 c0       	rjmp	.+8      	; 0x5934 <__udivdi3+0xc36>
    592c:	88 0f       	add	r24, r24
    592e:	99 1f       	adc	r25, r25
    5930:	aa 1f       	adc	r26, r26
    5932:	bb 1f       	adc	r27, r27
    5934:	0a 94       	dec	r0
    5936:	d2 f7       	brpl	.-12     	; 0x592c <__udivdi3+0xc2e>
    5938:	8a 15       	cp	r24, r10
    593a:	9b 05       	cpc	r25, r11
    593c:	ac 05       	cpc	r26, r12
    593e:	bd 05       	cpc	r27, r13
    5940:	b0 f4       	brcc	.+44     	; 0x596e <__udivdi3+0xc70>
    5942:	08 94       	sec
    5944:	e1 08       	sbc	r14, r1
    5946:	f1 08       	sbc	r15, r1
    5948:	01 09       	sbc	r16, r1
    594a:	11 09       	sbc	r17, r1
    594c:	10 c0       	rjmp	.+32     	; 0x596e <__udivdi3+0xc70>
    594e:	aa 24       	eor	r10, r10
    5950:	bb 24       	eor	r11, r11
    5952:	65 01       	movw	r12, r10
    5954:	ee 24       	eor	r14, r14
    5956:	ff 24       	eor	r15, r15
    5958:	87 01       	movw	r16, r14
    595a:	0c c0       	rjmp	.+24     	; 0x5974 <__udivdi3+0xc76>
    595c:	aa 24       	eor	r10, r10
    595e:	bb 24       	eor	r11, r11
    5960:	65 01       	movw	r12, r10
    5962:	81 e0       	ldi	r24, 0x01	; 1
    5964:	e8 2e       	mov	r14, r24
    5966:	f1 2c       	mov	r15, r1
    5968:	01 2d       	mov	r16, r1
    596a:	11 2d       	mov	r17, r1
    596c:	03 c0       	rjmp	.+6      	; 0x5974 <__udivdi3+0xc76>
    596e:	aa 24       	eor	r10, r10
    5970:	bb 24       	eor	r11, r11
    5972:	65 01       	movw	r12, r10
    5974:	fe 01       	movw	r30, r28
    5976:	71 96       	adiw	r30, 0x11	; 17
    5978:	88 e0       	ldi	r24, 0x08	; 8
    597a:	df 01       	movw	r26, r30
    597c:	1d 92       	st	X+, r1
    597e:	8a 95       	dec	r24
    5980:	e9 f7       	brne	.-6      	; 0x597c <__udivdi3+0xc7e>
    5982:	e9 8a       	std	Y+17, r14	; 0x11
    5984:	fa 8a       	std	Y+18, r15	; 0x12
    5986:	0b 8b       	std	Y+19, r16	; 0x13
    5988:	1c 8b       	std	Y+20, r17	; 0x14
    598a:	ad 8a       	std	Y+21, r10	; 0x15
    598c:	be 8a       	std	Y+22, r11	; 0x16
    598e:	cf 8a       	std	Y+23, r12	; 0x17
    5990:	d8 8e       	std	Y+24, r13	; 0x18
    5992:	2e 2d       	mov	r18, r14
    5994:	3a 89       	ldd	r19, Y+18	; 0x12
    5996:	4b 89       	ldd	r20, Y+19	; 0x13
    5998:	5c 89       	ldd	r21, Y+20	; 0x14
    599a:	6a 2d       	mov	r22, r10
    599c:	7e 89       	ldd	r23, Y+22	; 0x16
    599e:	8f 89       	ldd	r24, Y+23	; 0x17
    59a0:	98 8d       	ldd	r25, Y+24	; 0x18
    59a2:	e8 96       	adiw	r28, 0x38	; 56
    59a4:	e2 e1       	ldi	r30, 0x12	; 18
    59a6:	0c 94 af 2e 	jmp	0x5d5e	; 0x5d5e <__epilogue_restores__>

000059aa <vfprintf>:
    59aa:	6f 92       	push	r6
    59ac:	7f 92       	push	r7
    59ae:	8f 92       	push	r8
    59b0:	9f 92       	push	r9
    59b2:	af 92       	push	r10
    59b4:	bf 92       	push	r11
    59b6:	cf 92       	push	r12
    59b8:	df 92       	push	r13
    59ba:	ef 92       	push	r14
    59bc:	ff 92       	push	r15
    59be:	0f 93       	push	r16
    59c0:	1f 93       	push	r17
    59c2:	df 93       	push	r29
    59c4:	cf 93       	push	r28
    59c6:	cd b7       	in	r28, 0x3d	; 61
    59c8:	de b7       	in	r29, 0x3e	; 62
    59ca:	2c 97       	sbiw	r28, 0x0c	; 12
    59cc:	0f b6       	in	r0, 0x3f	; 63
    59ce:	f8 94       	cli
    59d0:	de bf       	out	0x3e, r29	; 62
    59d2:	0f be       	out	0x3f, r0	; 63
    59d4:	cd bf       	out	0x3d, r28	; 61
    59d6:	6c 01       	movw	r12, r24
    59d8:	3b 01       	movw	r6, r22
    59da:	8a 01       	movw	r16, r20
    59dc:	fc 01       	movw	r30, r24
    59de:	17 82       	std	Z+7, r1	; 0x07
    59e0:	16 82       	std	Z+6, r1	; 0x06
    59e2:	83 81       	ldd	r24, Z+3	; 0x03
    59e4:	81 fd       	sbrc	r24, 1
    59e6:	03 c0       	rjmp	.+6      	; 0x59ee <vfprintf+0x44>
    59e8:	1e c1       	rjmp	.+572    	; 0x5c26 <vfprintf+0x27c>
    59ea:	85 01       	movw	r16, r10
    59ec:	04 c0       	rjmp	.+8      	; 0x59f6 <vfprintf+0x4c>
    59ee:	4e 01       	movw	r8, r28
    59f0:	08 94       	sec
    59f2:	81 1c       	adc	r8, r1
    59f4:	91 1c       	adc	r9, r1
    59f6:	f6 01       	movw	r30, r12
    59f8:	e3 80       	ldd	r14, Z+3	; 0x03
    59fa:	f3 01       	movw	r30, r6
    59fc:	e3 fc       	sbrc	r14, 3
    59fe:	85 91       	lpm	r24, Z+
    5a00:	e3 fe       	sbrs	r14, 3
    5a02:	81 91       	ld	r24, Z+
    5a04:	3f 01       	movw	r6, r30
    5a06:	88 23       	and	r24, r24
    5a08:	09 f4       	brne	.+2      	; 0x5a0c <vfprintf+0x62>
    5a0a:	09 c1       	rjmp	.+530    	; 0x5c1e <vfprintf+0x274>
    5a0c:	85 32       	cpi	r24, 0x25	; 37
    5a0e:	51 f4       	brne	.+20     	; 0x5a24 <vfprintf+0x7a>
    5a10:	e3 fc       	sbrc	r14, 3
    5a12:	25 91       	lpm	r18, Z+
    5a14:	e3 fe       	sbrs	r14, 3
    5a16:	21 91       	ld	r18, Z+
    5a18:	3f 01       	movw	r6, r30
    5a1a:	25 32       	cpi	r18, 0x25	; 37
    5a1c:	11 f0       	breq	.+4      	; 0x5a22 <vfprintf+0x78>
    5a1e:	ff 24       	eor	r15, r15
    5a20:	23 c0       	rjmp	.+70     	; 0x5a68 <vfprintf+0xbe>
    5a22:	85 e2       	ldi	r24, 0x25	; 37
    5a24:	90 e0       	ldi	r25, 0x00	; 0
    5a26:	b6 01       	movw	r22, r12
    5a28:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <fputc>
    5a2c:	58 01       	movw	r10, r16
    5a2e:	dd cf       	rjmp	.-70     	; 0x59ea <vfprintf+0x40>
    5a30:	22 23       	and	r18, r18
    5a32:	09 f4       	brne	.+2      	; 0x5a36 <vfprintf+0x8c>
    5a34:	89 c0       	rjmp	.+274    	; 0x5b48 <vfprintf+0x19e>
    5a36:	84 e1       	ldi	r24, 0x14	; 20
    5a38:	95 e0       	ldi	r25, 0x05	; 5
    5a3a:	62 2f       	mov	r22, r18
    5a3c:	70 e0       	ldi	r23, 0x00	; 0
    5a3e:	2c 87       	std	Y+12, r18	; 0x0c
    5a40:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <strchr_P>
    5a44:	2c 85       	ldd	r18, Y+12	; 0x0c
    5a46:	00 97       	sbiw	r24, 0x00	; 0
    5a48:	49 f4       	brne	.+18     	; 0x5a5c <vfprintf+0xb2>
    5a4a:	23 32       	cpi	r18, 0x23	; 35
    5a4c:	19 f4       	brne	.+6      	; 0x5a54 <vfprintf+0xaa>
    5a4e:	f0 e1       	ldi	r31, 0x10	; 16
    5a50:	ff 2a       	or	r15, r31
    5a52:	04 c0       	rjmp	.+8      	; 0x5a5c <vfprintf+0xb2>
    5a54:	2c 36       	cpi	r18, 0x6C	; 108
    5a56:	69 f4       	brne	.+26     	; 0x5a72 <vfprintf+0xc8>
    5a58:	20 e8       	ldi	r18, 0x80	; 128
    5a5a:	f2 2a       	or	r15, r18
    5a5c:	f3 01       	movw	r30, r6
    5a5e:	e3 fc       	sbrc	r14, 3
    5a60:	25 91       	lpm	r18, Z+
    5a62:	e3 fe       	sbrs	r14, 3
    5a64:	21 91       	ld	r18, Z+
    5a66:	3f 01       	movw	r6, r30
    5a68:	f7 fe       	sbrs	r15, 7
    5a6a:	e2 cf       	rjmp	.-60     	; 0x5a30 <vfprintf+0x86>
    5a6c:	22 23       	and	r18, r18
    5a6e:	09 f4       	brne	.+2      	; 0x5a72 <vfprintf+0xc8>
    5a70:	3f c0       	rjmp	.+126    	; 0x5af0 <vfprintf+0x146>
    5a72:	8d e0       	ldi	r24, 0x0D	; 13
    5a74:	95 e0       	ldi	r25, 0x05	; 5
    5a76:	62 2f       	mov	r22, r18
    5a78:	70 e0       	ldi	r23, 0x00	; 0
    5a7a:	2c 87       	std	Y+12, r18	; 0x0c
    5a7c:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <strchr_P>
    5a80:	2c 85       	ldd	r18, Y+12	; 0x0c
    5a82:	00 97       	sbiw	r24, 0x00	; 0
    5a84:	41 f0       	breq	.+16     	; 0x5a96 <vfprintf+0xec>
    5a86:	64 e0       	ldi	r22, 0x04	; 4
    5a88:	a6 2e       	mov	r10, r22
    5a8a:	b1 2c       	mov	r11, r1
    5a8c:	a0 0e       	add	r10, r16
    5a8e:	b1 1e       	adc	r11, r17
    5a90:	8f e3       	ldi	r24, 0x3F	; 63
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	0f c0       	rjmp	.+30     	; 0x5ab4 <vfprintf+0x10a>
    5a96:	23 36       	cpi	r18, 0x63	; 99
    5a98:	29 f0       	breq	.+10     	; 0x5aa4 <vfprintf+0xfa>
    5a9a:	23 37       	cpi	r18, 0x73	; 115
    5a9c:	89 f0       	breq	.+34     	; 0x5ac0 <vfprintf+0x116>
    5a9e:	23 35       	cpi	r18, 0x53	; 83
    5aa0:	29 f5       	brne	.+74     	; 0x5aec <vfprintf+0x142>
    5aa2:	0c c0       	rjmp	.+24     	; 0x5abc <vfprintf+0x112>
    5aa4:	52 e0       	ldi	r21, 0x02	; 2
    5aa6:	a5 2e       	mov	r10, r21
    5aa8:	b1 2c       	mov	r11, r1
    5aaa:	a0 0e       	add	r10, r16
    5aac:	b1 1e       	adc	r11, r17
    5aae:	f8 01       	movw	r30, r16
    5ab0:	80 81       	ld	r24, Z
    5ab2:	91 81       	ldd	r25, Z+1	; 0x01
    5ab4:	b6 01       	movw	r22, r12
    5ab6:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <fputc>
    5aba:	97 cf       	rjmp	.-210    	; 0x59ea <vfprintf+0x40>
    5abc:	f1 e0       	ldi	r31, 0x01	; 1
    5abe:	ff 2a       	or	r15, r31
    5ac0:	42 e0       	ldi	r20, 0x02	; 2
    5ac2:	a4 2e       	mov	r10, r20
    5ac4:	b1 2c       	mov	r11, r1
    5ac6:	a0 0e       	add	r10, r16
    5ac8:	b1 1e       	adc	r11, r17
    5aca:	f8 01       	movw	r30, r16
    5acc:	00 81       	ld	r16, Z
    5ace:	11 81       	ldd	r17, Z+1	; 0x01
    5ad0:	04 c0       	rjmp	.+8      	; 0x5ada <vfprintf+0x130>
    5ad2:	90 e0       	ldi	r25, 0x00	; 0
    5ad4:	b6 01       	movw	r22, r12
    5ad6:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <fputc>
    5ada:	f8 01       	movw	r30, r16
    5adc:	f0 fc       	sbrc	r15, 0
    5ade:	85 91       	lpm	r24, Z+
    5ae0:	f0 fe       	sbrs	r15, 0
    5ae2:	81 91       	ld	r24, Z+
    5ae4:	8f 01       	movw	r16, r30
    5ae6:	88 23       	and	r24, r24
    5ae8:	a1 f7       	brne	.-24     	; 0x5ad2 <vfprintf+0x128>
    5aea:	7f cf       	rjmp	.-258    	; 0x59ea <vfprintf+0x40>
    5aec:	24 36       	cpi	r18, 0x64	; 100
    5aee:	11 f0       	breq	.+4      	; 0x5af4 <vfprintf+0x14a>
    5af0:	29 36       	cpi	r18, 0x69	; 105
    5af2:	51 f5       	brne	.+84     	; 0x5b48 <vfprintf+0x19e>
    5af4:	f7 fe       	sbrs	r15, 7
    5af6:	0b c0       	rjmp	.+22     	; 0x5b0e <vfprintf+0x164>
    5af8:	34 e0       	ldi	r19, 0x04	; 4
    5afa:	a3 2e       	mov	r10, r19
    5afc:	b1 2c       	mov	r11, r1
    5afe:	a0 0e       	add	r10, r16
    5b00:	b1 1e       	adc	r11, r17
    5b02:	f8 01       	movw	r30, r16
    5b04:	60 81       	ld	r22, Z
    5b06:	71 81       	ldd	r23, Z+1	; 0x01
    5b08:	82 81       	ldd	r24, Z+2	; 0x02
    5b0a:	93 81       	ldd	r25, Z+3	; 0x03
    5b0c:	0c c0       	rjmp	.+24     	; 0x5b26 <vfprintf+0x17c>
    5b0e:	22 e0       	ldi	r18, 0x02	; 2
    5b10:	a2 2e       	mov	r10, r18
    5b12:	b1 2c       	mov	r11, r1
    5b14:	a0 0e       	add	r10, r16
    5b16:	b1 1e       	adc	r11, r17
    5b18:	f8 01       	movw	r30, r16
    5b1a:	60 81       	ld	r22, Z
    5b1c:	71 81       	ldd	r23, Z+1	; 0x01
    5b1e:	88 27       	eor	r24, r24
    5b20:	77 fd       	sbrc	r23, 7
    5b22:	80 95       	com	r24
    5b24:	98 2f       	mov	r25, r24
    5b26:	ff ee       	ldi	r31, 0xEF	; 239
    5b28:	ff 22       	and	r15, r31
    5b2a:	97 ff       	sbrs	r25, 7
    5b2c:	09 c0       	rjmp	.+18     	; 0x5b40 <vfprintf+0x196>
    5b2e:	90 95       	com	r25
    5b30:	80 95       	com	r24
    5b32:	70 95       	com	r23
    5b34:	61 95       	neg	r22
    5b36:	7f 4f       	sbci	r23, 0xFF	; 255
    5b38:	8f 4f       	sbci	r24, 0xFF	; 255
    5b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b3c:	20 e4       	ldi	r18, 0x40	; 64
    5b3e:	f2 2a       	or	r15, r18
    5b40:	a4 01       	movw	r20, r8
    5b42:	2a e0       	ldi	r18, 0x0A	; 10
    5b44:	30 e0       	ldi	r19, 0x00	; 0
    5b46:	3b c0       	rjmp	.+118    	; 0x5bbe <vfprintf+0x214>
    5b48:	20 37       	cpi	r18, 0x70	; 112
    5b4a:	99 f0       	breq	.+38     	; 0x5b72 <vfprintf+0x1c8>
    5b4c:	21 37       	cpi	r18, 0x71	; 113
    5b4e:	30 f4       	brcc	.+12     	; 0x5b5c <vfprintf+0x1b2>
    5b50:	28 35       	cpi	r18, 0x58	; 88
    5b52:	b1 f0       	breq	.+44     	; 0x5b80 <vfprintf+0x1d6>
    5b54:	2f 36       	cpi	r18, 0x6F	; 111
    5b56:	09 f0       	breq	.+2      	; 0x5b5a <vfprintf+0x1b0>
    5b58:	62 c0       	rjmp	.+196    	; 0x5c1e <vfprintf+0x274>
    5b5a:	17 c0       	rjmp	.+46     	; 0x5b8a <vfprintf+0x1e0>
    5b5c:	25 37       	cpi	r18, 0x75	; 117
    5b5e:	21 f0       	breq	.+8      	; 0x5b68 <vfprintf+0x1be>
    5b60:	28 37       	cpi	r18, 0x78	; 120
    5b62:	09 f0       	breq	.+2      	; 0x5b66 <vfprintf+0x1bc>
    5b64:	5c c0       	rjmp	.+184    	; 0x5c1e <vfprintf+0x274>
    5b66:	07 c0       	rjmp	.+14     	; 0x5b76 <vfprintf+0x1cc>
    5b68:	8f ee       	ldi	r24, 0xEF	; 239
    5b6a:	f8 22       	and	r15, r24
    5b6c:	2a e0       	ldi	r18, 0x0A	; 10
    5b6e:	30 e0       	ldi	r19, 0x00	; 0
    5b70:	0e c0       	rjmp	.+28     	; 0x5b8e <vfprintf+0x1e4>
    5b72:	e0 e1       	ldi	r30, 0x10	; 16
    5b74:	fe 2a       	or	r15, r30
    5b76:	f4 e2       	ldi	r31, 0x24	; 36
    5b78:	ff 2a       	or	r15, r31
    5b7a:	20 e1       	ldi	r18, 0x10	; 16
    5b7c:	30 e0       	ldi	r19, 0x00	; 0
    5b7e:	07 c0       	rjmp	.+14     	; 0x5b8e <vfprintf+0x1e4>
    5b80:	24 e0       	ldi	r18, 0x04	; 4
    5b82:	f2 2a       	or	r15, r18
    5b84:	20 e1       	ldi	r18, 0x10	; 16
    5b86:	32 e0       	ldi	r19, 0x02	; 2
    5b88:	02 c0       	rjmp	.+4      	; 0x5b8e <vfprintf+0x1e4>
    5b8a:	28 e0       	ldi	r18, 0x08	; 8
    5b8c:	30 e0       	ldi	r19, 0x00	; 0
    5b8e:	f7 fe       	sbrs	r15, 7
    5b90:	0b c0       	rjmp	.+22     	; 0x5ba8 <vfprintf+0x1fe>
    5b92:	94 e0       	ldi	r25, 0x04	; 4
    5b94:	a9 2e       	mov	r10, r25
    5b96:	b1 2c       	mov	r11, r1
    5b98:	a0 0e       	add	r10, r16
    5b9a:	b1 1e       	adc	r11, r17
    5b9c:	f8 01       	movw	r30, r16
    5b9e:	60 81       	ld	r22, Z
    5ba0:	71 81       	ldd	r23, Z+1	; 0x01
    5ba2:	82 81       	ldd	r24, Z+2	; 0x02
    5ba4:	93 81       	ldd	r25, Z+3	; 0x03
    5ba6:	0a c0       	rjmp	.+20     	; 0x5bbc <vfprintf+0x212>
    5ba8:	82 e0       	ldi	r24, 0x02	; 2
    5baa:	a8 2e       	mov	r10, r24
    5bac:	b1 2c       	mov	r11, r1
    5bae:	a0 0e       	add	r10, r16
    5bb0:	b1 1e       	adc	r11, r17
    5bb2:	f8 01       	movw	r30, r16
    5bb4:	60 81       	ld	r22, Z
    5bb6:	71 81       	ldd	r23, Z+1	; 0x01
    5bb8:	80 e0       	ldi	r24, 0x00	; 0
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	a4 01       	movw	r20, r8
    5bbe:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__ultoa_invert>
    5bc2:	e8 2e       	mov	r14, r24
    5bc4:	e8 18       	sub	r14, r8
    5bc6:	0f 2d       	mov	r16, r15
    5bc8:	10 e0       	ldi	r17, 0x00	; 0
    5bca:	f6 fe       	sbrs	r15, 6
    5bcc:	05 c0       	rjmp	.+10     	; 0x5bd8 <vfprintf+0x22e>
    5bce:	8d e2       	ldi	r24, 0x2D	; 45
    5bd0:	90 e0       	ldi	r25, 0x00	; 0
    5bd2:	b6 01       	movw	r22, r12
    5bd4:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <fputc>
    5bd8:	04 ff       	sbrs	r16, 4
    5bda:	15 c0       	rjmp	.+42     	; 0x5c06 <vfprintf+0x25c>
    5bdc:	fe 01       	movw	r30, r28
    5bde:	ee 0d       	add	r30, r14
    5be0:	f1 1d       	adc	r31, r1
    5be2:	80 81       	ld	r24, Z
    5be4:	80 33       	cpi	r24, 0x30	; 48
    5be6:	79 f0       	breq	.+30     	; 0x5c06 <vfprintf+0x25c>
    5be8:	80 e3       	ldi	r24, 0x30	; 48
    5bea:	90 e0       	ldi	r25, 0x00	; 0
    5bec:	b6 01       	movw	r22, r12
    5bee:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <fputc>
    5bf2:	02 ff       	sbrs	r16, 2
    5bf4:	08 c0       	rjmp	.+16     	; 0x5c06 <vfprintf+0x25c>
    5bf6:	c8 01       	movw	r24, r16
    5bf8:	80 72       	andi	r24, 0x20	; 32
    5bfa:	90 70       	andi	r25, 0x00	; 0
    5bfc:	88 5a       	subi	r24, 0xA8	; 168
    5bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    5c00:	b6 01       	movw	r22, r12
    5c02:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <fputc>
    5c06:	ea 94       	dec	r14
    5c08:	f4 01       	movw	r30, r8
    5c0a:	ee 0d       	add	r30, r14
    5c0c:	f1 1d       	adc	r31, r1
    5c0e:	80 81       	ld	r24, Z
    5c10:	90 e0       	ldi	r25, 0x00	; 0
    5c12:	b6 01       	movw	r22, r12
    5c14:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <fputc>
    5c18:	ee 20       	and	r14, r14
    5c1a:	a9 f7       	brne	.-22     	; 0x5c06 <vfprintf+0x25c>
    5c1c:	e6 ce       	rjmp	.-564    	; 0x59ea <vfprintf+0x40>
    5c1e:	f6 01       	movw	r30, r12
    5c20:	26 81       	ldd	r18, Z+6	; 0x06
    5c22:	37 81       	ldd	r19, Z+7	; 0x07
    5c24:	02 c0       	rjmp	.+4      	; 0x5c2a <vfprintf+0x280>
    5c26:	2f ef       	ldi	r18, 0xFF	; 255
    5c28:	3f ef       	ldi	r19, 0xFF	; 255
    5c2a:	c9 01       	movw	r24, r18
    5c2c:	2c 96       	adiw	r28, 0x0c	; 12
    5c2e:	0f b6       	in	r0, 0x3f	; 63
    5c30:	f8 94       	cli
    5c32:	de bf       	out	0x3e, r29	; 62
    5c34:	0f be       	out	0x3f, r0	; 63
    5c36:	cd bf       	out	0x3d, r28	; 61
    5c38:	cf 91       	pop	r28
    5c3a:	df 91       	pop	r29
    5c3c:	1f 91       	pop	r17
    5c3e:	0f 91       	pop	r16
    5c40:	ff 90       	pop	r15
    5c42:	ef 90       	pop	r14
    5c44:	df 90       	pop	r13
    5c46:	cf 90       	pop	r12
    5c48:	bf 90       	pop	r11
    5c4a:	af 90       	pop	r10
    5c4c:	9f 90       	pop	r9
    5c4e:	8f 90       	pop	r8
    5c50:	7f 90       	pop	r7
    5c52:	6f 90       	pop	r6
    5c54:	08 95       	ret

00005c56 <__mulsi3>:
    5c56:	62 9f       	mul	r22, r18
    5c58:	d0 01       	movw	r26, r0
    5c5a:	73 9f       	mul	r23, r19
    5c5c:	f0 01       	movw	r30, r0
    5c5e:	82 9f       	mul	r24, r18
    5c60:	e0 0d       	add	r30, r0
    5c62:	f1 1d       	adc	r31, r1
    5c64:	64 9f       	mul	r22, r20
    5c66:	e0 0d       	add	r30, r0
    5c68:	f1 1d       	adc	r31, r1
    5c6a:	92 9f       	mul	r25, r18
    5c6c:	f0 0d       	add	r31, r0
    5c6e:	83 9f       	mul	r24, r19
    5c70:	f0 0d       	add	r31, r0
    5c72:	74 9f       	mul	r23, r20
    5c74:	f0 0d       	add	r31, r0
    5c76:	65 9f       	mul	r22, r21
    5c78:	f0 0d       	add	r31, r0
    5c7a:	99 27       	eor	r25, r25
    5c7c:	72 9f       	mul	r23, r18
    5c7e:	b0 0d       	add	r27, r0
    5c80:	e1 1d       	adc	r30, r1
    5c82:	f9 1f       	adc	r31, r25
    5c84:	63 9f       	mul	r22, r19
    5c86:	b0 0d       	add	r27, r0
    5c88:	e1 1d       	adc	r30, r1
    5c8a:	f9 1f       	adc	r31, r25
    5c8c:	bd 01       	movw	r22, r26
    5c8e:	cf 01       	movw	r24, r30
    5c90:	11 24       	eor	r1, r1
    5c92:	08 95       	ret

00005c94 <__udivmodhi4>:
    5c94:	aa 1b       	sub	r26, r26
    5c96:	bb 1b       	sub	r27, r27
    5c98:	51 e1       	ldi	r21, 0x11	; 17
    5c9a:	07 c0       	rjmp	.+14     	; 0x5caa <__udivmodhi4_ep>

00005c9c <__udivmodhi4_loop>:
    5c9c:	aa 1f       	adc	r26, r26
    5c9e:	bb 1f       	adc	r27, r27
    5ca0:	a6 17       	cp	r26, r22
    5ca2:	b7 07       	cpc	r27, r23
    5ca4:	10 f0       	brcs	.+4      	; 0x5caa <__udivmodhi4_ep>
    5ca6:	a6 1b       	sub	r26, r22
    5ca8:	b7 0b       	sbc	r27, r23

00005caa <__udivmodhi4_ep>:
    5caa:	88 1f       	adc	r24, r24
    5cac:	99 1f       	adc	r25, r25
    5cae:	5a 95       	dec	r21
    5cb0:	a9 f7       	brne	.-22     	; 0x5c9c <__udivmodhi4_loop>
    5cb2:	80 95       	com	r24
    5cb4:	90 95       	com	r25
    5cb6:	bc 01       	movw	r22, r24
    5cb8:	cd 01       	movw	r24, r26
    5cba:	08 95       	ret

00005cbc <__divmodhi4>:
    5cbc:	97 fb       	bst	r25, 7
    5cbe:	09 2e       	mov	r0, r25
    5cc0:	07 26       	eor	r0, r23
    5cc2:	0a d0       	rcall	.+20     	; 0x5cd8 <__divmodhi4_neg1>
    5cc4:	77 fd       	sbrc	r23, 7
    5cc6:	04 d0       	rcall	.+8      	; 0x5cd0 <__divmodhi4_neg2>
    5cc8:	e5 df       	rcall	.-54     	; 0x5c94 <__udivmodhi4>
    5cca:	06 d0       	rcall	.+12     	; 0x5cd8 <__divmodhi4_neg1>
    5ccc:	00 20       	and	r0, r0
    5cce:	1a f4       	brpl	.+6      	; 0x5cd6 <__divmodhi4_exit>

00005cd0 <__divmodhi4_neg2>:
    5cd0:	70 95       	com	r23
    5cd2:	61 95       	neg	r22
    5cd4:	7f 4f       	sbci	r23, 0xFF	; 255

00005cd6 <__divmodhi4_exit>:
    5cd6:	08 95       	ret

00005cd8 <__divmodhi4_neg1>:
    5cd8:	f6 f7       	brtc	.-4      	; 0x5cd6 <__divmodhi4_exit>
    5cda:	90 95       	com	r25
    5cdc:	81 95       	neg	r24
    5cde:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce0:	08 95       	ret

00005ce2 <__udivmodsi4>:
    5ce2:	a1 e2       	ldi	r26, 0x21	; 33
    5ce4:	1a 2e       	mov	r1, r26
    5ce6:	aa 1b       	sub	r26, r26
    5ce8:	bb 1b       	sub	r27, r27
    5cea:	fd 01       	movw	r30, r26
    5cec:	0d c0       	rjmp	.+26     	; 0x5d08 <__udivmodsi4_ep>

00005cee <__udivmodsi4_loop>:
    5cee:	aa 1f       	adc	r26, r26
    5cf0:	bb 1f       	adc	r27, r27
    5cf2:	ee 1f       	adc	r30, r30
    5cf4:	ff 1f       	adc	r31, r31
    5cf6:	a2 17       	cp	r26, r18
    5cf8:	b3 07       	cpc	r27, r19
    5cfa:	e4 07       	cpc	r30, r20
    5cfc:	f5 07       	cpc	r31, r21
    5cfe:	20 f0       	brcs	.+8      	; 0x5d08 <__udivmodsi4_ep>
    5d00:	a2 1b       	sub	r26, r18
    5d02:	b3 0b       	sbc	r27, r19
    5d04:	e4 0b       	sbc	r30, r20
    5d06:	f5 0b       	sbc	r31, r21

00005d08 <__udivmodsi4_ep>:
    5d08:	66 1f       	adc	r22, r22
    5d0a:	77 1f       	adc	r23, r23
    5d0c:	88 1f       	adc	r24, r24
    5d0e:	99 1f       	adc	r25, r25
    5d10:	1a 94       	dec	r1
    5d12:	69 f7       	brne	.-38     	; 0x5cee <__udivmodsi4_loop>
    5d14:	60 95       	com	r22
    5d16:	70 95       	com	r23
    5d18:	80 95       	com	r24
    5d1a:	90 95       	com	r25
    5d1c:	9b 01       	movw	r18, r22
    5d1e:	ac 01       	movw	r20, r24
    5d20:	bd 01       	movw	r22, r26
    5d22:	cf 01       	movw	r24, r30
    5d24:	08 95       	ret

00005d26 <__prologue_saves__>:
    5d26:	2f 92       	push	r2
    5d28:	3f 92       	push	r3
    5d2a:	4f 92       	push	r4
    5d2c:	5f 92       	push	r5
    5d2e:	6f 92       	push	r6
    5d30:	7f 92       	push	r7
    5d32:	8f 92       	push	r8
    5d34:	9f 92       	push	r9
    5d36:	af 92       	push	r10
    5d38:	bf 92       	push	r11
    5d3a:	cf 92       	push	r12
    5d3c:	df 92       	push	r13
    5d3e:	ef 92       	push	r14
    5d40:	ff 92       	push	r15
    5d42:	0f 93       	push	r16
    5d44:	1f 93       	push	r17
    5d46:	cf 93       	push	r28
    5d48:	df 93       	push	r29
    5d4a:	cd b7       	in	r28, 0x3d	; 61
    5d4c:	de b7       	in	r29, 0x3e	; 62
    5d4e:	ca 1b       	sub	r28, r26
    5d50:	db 0b       	sbc	r29, r27
    5d52:	0f b6       	in	r0, 0x3f	; 63
    5d54:	f8 94       	cli
    5d56:	de bf       	out	0x3e, r29	; 62
    5d58:	0f be       	out	0x3f, r0	; 63
    5d5a:	cd bf       	out	0x3d, r28	; 61
    5d5c:	09 94       	ijmp

00005d5e <__epilogue_restores__>:
    5d5e:	2a 88       	ldd	r2, Y+18	; 0x12
    5d60:	39 88       	ldd	r3, Y+17	; 0x11
    5d62:	48 88       	ldd	r4, Y+16	; 0x10
    5d64:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d66:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d68:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d70:	b9 84       	ldd	r11, Y+9	; 0x09
    5d72:	c8 84       	ldd	r12, Y+8	; 0x08
    5d74:	df 80       	ldd	r13, Y+7	; 0x07
    5d76:	ee 80       	ldd	r14, Y+6	; 0x06
    5d78:	fd 80       	ldd	r15, Y+5	; 0x05
    5d7a:	0c 81       	ldd	r16, Y+4	; 0x04
    5d7c:	1b 81       	ldd	r17, Y+3	; 0x03
    5d7e:	aa 81       	ldd	r26, Y+2	; 0x02
    5d80:	b9 81       	ldd	r27, Y+1	; 0x01
    5d82:	ce 0f       	add	r28, r30
    5d84:	d1 1d       	adc	r29, r1
    5d86:	0f b6       	in	r0, 0x3f	; 63
    5d88:	f8 94       	cli
    5d8a:	de bf       	out	0x3e, r29	; 62
    5d8c:	0f be       	out	0x3f, r0	; 63
    5d8e:	cd bf       	out	0x3d, r28	; 61
    5d90:	ed 01       	movw	r28, r26
    5d92:	08 95       	ret

00005d94 <do_rand>:
    5d94:	af 92       	push	r10
    5d96:	bf 92       	push	r11
    5d98:	cf 92       	push	r12
    5d9a:	df 92       	push	r13
    5d9c:	ef 92       	push	r14
    5d9e:	ff 92       	push	r15
    5da0:	0f 93       	push	r16
    5da2:	1f 93       	push	r17
    5da4:	cf 93       	push	r28
    5da6:	df 93       	push	r29
    5da8:	ec 01       	movw	r28, r24
    5daa:	68 81       	ld	r22, Y
    5dac:	79 81       	ldd	r23, Y+1	; 0x01
    5dae:	8a 81       	ldd	r24, Y+2	; 0x02
    5db0:	9b 81       	ldd	r25, Y+3	; 0x03
    5db2:	61 15       	cp	r22, r1
    5db4:	71 05       	cpc	r23, r1
    5db6:	81 05       	cpc	r24, r1
    5db8:	91 05       	cpc	r25, r1
    5dba:	21 f4       	brne	.+8      	; 0x5dc4 <do_rand+0x30>
    5dbc:	64 e2       	ldi	r22, 0x24	; 36
    5dbe:	79 ed       	ldi	r23, 0xD9	; 217
    5dc0:	8b e5       	ldi	r24, 0x5B	; 91
    5dc2:	97 e0       	ldi	r25, 0x07	; 7
    5dc4:	2d e1       	ldi	r18, 0x1D	; 29
    5dc6:	33 ef       	ldi	r19, 0xF3	; 243
    5dc8:	41 e0       	ldi	r20, 0x01	; 1
    5dca:	50 e0       	ldi	r21, 0x00	; 0
    5dcc:	0e 94 c8 31 	call	0x6390	; 0x6390 <__divmodsi4>
    5dd0:	79 01       	movw	r14, r18
    5dd2:	8a 01       	movw	r16, r20
    5dd4:	27 ea       	ldi	r18, 0xA7	; 167
    5dd6:	31 e4       	ldi	r19, 0x41	; 65
    5dd8:	40 e0       	ldi	r20, 0x00	; 0
    5dda:	50 e0       	ldi	r21, 0x00	; 0
    5ddc:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    5de0:	5b 01       	movw	r10, r22
    5de2:	6c 01       	movw	r12, r24
    5de4:	c8 01       	movw	r24, r16
    5de6:	b7 01       	movw	r22, r14
    5de8:	2c ee       	ldi	r18, 0xEC	; 236
    5dea:	34 ef       	ldi	r19, 0xF4	; 244
    5dec:	4f ef       	ldi	r20, 0xFF	; 255
    5dee:	5f ef       	ldi	r21, 0xFF	; 255
    5df0:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__mulsi3>
    5df4:	6a 0d       	add	r22, r10
    5df6:	7b 1d       	adc	r23, r11
    5df8:	8c 1d       	adc	r24, r12
    5dfa:	9d 1d       	adc	r25, r13
    5dfc:	97 ff       	sbrs	r25, 7
    5dfe:	04 c0       	rjmp	.+8      	; 0x5e08 <do_rand+0x74>
    5e00:	61 50       	subi	r22, 0x01	; 1
    5e02:	70 40       	sbci	r23, 0x00	; 0
    5e04:	80 40       	sbci	r24, 0x00	; 0
    5e06:	90 48       	sbci	r25, 0x80	; 128
    5e08:	68 83       	st	Y, r22
    5e0a:	79 83       	std	Y+1, r23	; 0x01
    5e0c:	8a 83       	std	Y+2, r24	; 0x02
    5e0e:	9b 83       	std	Y+3, r25	; 0x03
    5e10:	7f 77       	andi	r23, 0x7F	; 127
    5e12:	cb 01       	movw	r24, r22
    5e14:	df 91       	pop	r29
    5e16:	cf 91       	pop	r28
    5e18:	1f 91       	pop	r17
    5e1a:	0f 91       	pop	r16
    5e1c:	ff 90       	pop	r15
    5e1e:	ef 90       	pop	r14
    5e20:	df 90       	pop	r13
    5e22:	cf 90       	pop	r12
    5e24:	bf 90       	pop	r11
    5e26:	af 90       	pop	r10
    5e28:	08 95       	ret

00005e2a <rand_r>:
    5e2a:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <do_rand>
    5e2e:	08 95       	ret

00005e30 <rand>:
    5e30:	81 eb       	ldi	r24, 0xB1	; 177
    5e32:	93 e0       	ldi	r25, 0x03	; 3
    5e34:	0e 94 ca 2e 	call	0x5d94	; 0x5d94 <do_rand>
    5e38:	08 95       	ret

00005e3a <srand>:
    5e3a:	a0 e0       	ldi	r26, 0x00	; 0
    5e3c:	b0 e0       	ldi	r27, 0x00	; 0
    5e3e:	80 93 b1 03 	sts	0x03B1, r24
    5e42:	90 93 b2 03 	sts	0x03B2, r25
    5e46:	a0 93 b3 03 	sts	0x03B3, r26
    5e4a:	b0 93 b4 03 	sts	0x03B4, r27
    5e4e:	08 95       	ret

00005e50 <strchr_P>:
    5e50:	fc 01       	movw	r30, r24
    5e52:	05 90       	lpm	r0, Z+
    5e54:	06 16       	cp	r0, r22
    5e56:	21 f0       	breq	.+8      	; 0x5e60 <strchr_P+0x10>
    5e58:	00 20       	and	r0, r0
    5e5a:	d9 f7       	brne	.-10     	; 0x5e52 <strchr_P+0x2>
    5e5c:	c0 01       	movw	r24, r0
    5e5e:	08 95       	ret
    5e60:	31 97       	sbiw	r30, 0x01	; 1
    5e62:	cf 01       	movw	r24, r30
    5e64:	08 95       	ret

00005e66 <memcpy>:
    5e66:	fb 01       	movw	r30, r22
    5e68:	dc 01       	movw	r26, r24
    5e6a:	02 c0       	rjmp	.+4      	; 0x5e70 <memcpy+0xa>
    5e6c:	01 90       	ld	r0, Z+
    5e6e:	0d 92       	st	X+, r0
    5e70:	41 50       	subi	r20, 0x01	; 1
    5e72:	50 40       	sbci	r21, 0x00	; 0
    5e74:	d8 f7       	brcc	.-10     	; 0x5e6c <memcpy+0x6>
    5e76:	08 95       	ret

00005e78 <fdevopen>:
    5e78:	0f 93       	push	r16
    5e7a:	1f 93       	push	r17
    5e7c:	cf 93       	push	r28
    5e7e:	df 93       	push	r29
    5e80:	8c 01       	movw	r16, r24
    5e82:	eb 01       	movw	r28, r22
    5e84:	00 97       	sbiw	r24, 0x00	; 0
    5e86:	11 f4       	brne	.+4      	; 0x5e8c <fdevopen+0x14>
    5e88:	20 97       	sbiw	r28, 0x00	; 0
    5e8a:	c9 f1       	breq	.+114    	; 0x5efe <fdevopen+0x86>
    5e8c:	81 e0       	ldi	r24, 0x01	; 1
    5e8e:	90 e0       	ldi	r25, 0x00	; 0
    5e90:	6e e0       	ldi	r22, 0x0E	; 14
    5e92:	70 e0       	ldi	r23, 0x00	; 0
    5e94:	0e 94 69 30 	call	0x60d2	; 0x60d2 <calloc>
    5e98:	fc 01       	movw	r30, r24
    5e9a:	9c 01       	movw	r18, r24
    5e9c:	00 97       	sbiw	r24, 0x00	; 0
    5e9e:	89 f1       	breq	.+98     	; 0x5f02 <fdevopen+0x8a>
    5ea0:	80 e8       	ldi	r24, 0x80	; 128
    5ea2:	83 83       	std	Z+3, r24	; 0x03
    5ea4:	20 97       	sbiw	r28, 0x00	; 0
    5ea6:	71 f0       	breq	.+28     	; 0x5ec4 <fdevopen+0x4c>
    5ea8:	d3 87       	std	Z+11, r29	; 0x0b
    5eaa:	c2 87       	std	Z+10, r28	; 0x0a
    5eac:	81 e8       	ldi	r24, 0x81	; 129
    5eae:	83 83       	std	Z+3, r24	; 0x03
    5eb0:	80 91 6a 08 	lds	r24, 0x086A
    5eb4:	90 91 6b 08 	lds	r25, 0x086B
    5eb8:	00 97       	sbiw	r24, 0x00	; 0
    5eba:	21 f4       	brne	.+8      	; 0x5ec4 <fdevopen+0x4c>
    5ebc:	f0 93 6b 08 	sts	0x086B, r31
    5ec0:	e0 93 6a 08 	sts	0x086A, r30
    5ec4:	01 15       	cp	r16, r1
    5ec6:	11 05       	cpc	r17, r1
    5ec8:	e1 f0       	breq	.+56     	; 0x5f02 <fdevopen+0x8a>
    5eca:	11 87       	std	Z+9, r17	; 0x09
    5ecc:	00 87       	std	Z+8, r16	; 0x08
    5ece:	83 81       	ldd	r24, Z+3	; 0x03
    5ed0:	82 60       	ori	r24, 0x02	; 2
    5ed2:	83 83       	std	Z+3, r24	; 0x03
    5ed4:	80 91 6c 08 	lds	r24, 0x086C
    5ed8:	90 91 6d 08 	lds	r25, 0x086D
    5edc:	00 97       	sbiw	r24, 0x00	; 0
    5ede:	89 f4       	brne	.+34     	; 0x5f02 <fdevopen+0x8a>
    5ee0:	f0 93 6d 08 	sts	0x086D, r31
    5ee4:	e0 93 6c 08 	sts	0x086C, r30
    5ee8:	80 91 6e 08 	lds	r24, 0x086E
    5eec:	90 91 6f 08 	lds	r25, 0x086F
    5ef0:	00 97       	sbiw	r24, 0x00	; 0
    5ef2:	39 f4       	brne	.+14     	; 0x5f02 <fdevopen+0x8a>
    5ef4:	f0 93 6f 08 	sts	0x086F, r31
    5ef8:	e0 93 6e 08 	sts	0x086E, r30
    5efc:	02 c0       	rjmp	.+4      	; 0x5f02 <fdevopen+0x8a>
    5efe:	20 e0       	ldi	r18, 0x00	; 0
    5f00:	30 e0       	ldi	r19, 0x00	; 0
    5f02:	c9 01       	movw	r24, r18
    5f04:	df 91       	pop	r29
    5f06:	cf 91       	pop	r28
    5f08:	1f 91       	pop	r17
    5f0a:	0f 91       	pop	r16
    5f0c:	08 95       	ret

00005f0e <fputc>:
    5f0e:	0f 93       	push	r16
    5f10:	1f 93       	push	r17
    5f12:	cf 93       	push	r28
    5f14:	df 93       	push	r29
    5f16:	8c 01       	movw	r16, r24
    5f18:	eb 01       	movw	r28, r22
    5f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    5f1c:	81 ff       	sbrs	r24, 1
    5f1e:	1b c0       	rjmp	.+54     	; 0x5f56 <fputc+0x48>
    5f20:	82 ff       	sbrs	r24, 2
    5f22:	0d c0       	rjmp	.+26     	; 0x5f3e <fputc+0x30>
    5f24:	2e 81       	ldd	r18, Y+6	; 0x06
    5f26:	3f 81       	ldd	r19, Y+7	; 0x07
    5f28:	8c 81       	ldd	r24, Y+4	; 0x04
    5f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    5f2c:	28 17       	cp	r18, r24
    5f2e:	39 07       	cpc	r19, r25
    5f30:	64 f4       	brge	.+24     	; 0x5f4a <fputc+0x3c>
    5f32:	e8 81       	ld	r30, Y
    5f34:	f9 81       	ldd	r31, Y+1	; 0x01
    5f36:	01 93       	st	Z+, r16
    5f38:	f9 83       	std	Y+1, r31	; 0x01
    5f3a:	e8 83       	st	Y, r30
    5f3c:	06 c0       	rjmp	.+12     	; 0x5f4a <fputc+0x3c>
    5f3e:	e8 85       	ldd	r30, Y+8	; 0x08
    5f40:	f9 85       	ldd	r31, Y+9	; 0x09
    5f42:	80 2f       	mov	r24, r16
    5f44:	09 95       	icall
    5f46:	00 97       	sbiw	r24, 0x00	; 0
    5f48:	31 f4       	brne	.+12     	; 0x5f56 <fputc+0x48>
    5f4a:	8e 81       	ldd	r24, Y+6	; 0x06
    5f4c:	9f 81       	ldd	r25, Y+7	; 0x07
    5f4e:	01 96       	adiw	r24, 0x01	; 1
    5f50:	9f 83       	std	Y+7, r25	; 0x07
    5f52:	8e 83       	std	Y+6, r24	; 0x06
    5f54:	02 c0       	rjmp	.+4      	; 0x5f5a <fputc+0x4c>
    5f56:	0f ef       	ldi	r16, 0xFF	; 255
    5f58:	1f ef       	ldi	r17, 0xFF	; 255
    5f5a:	c8 01       	movw	r24, r16
    5f5c:	df 91       	pop	r29
    5f5e:	cf 91       	pop	r28
    5f60:	1f 91       	pop	r17
    5f62:	0f 91       	pop	r16
    5f64:	08 95       	ret

00005f66 <printf>:
    5f66:	df 93       	push	r29
    5f68:	cf 93       	push	r28
    5f6a:	cd b7       	in	r28, 0x3d	; 61
    5f6c:	de b7       	in	r29, 0x3e	; 62
    5f6e:	fe 01       	movw	r30, r28
    5f70:	35 96       	adiw	r30, 0x05	; 5
    5f72:	61 91       	ld	r22, Z+
    5f74:	71 91       	ld	r23, Z+
    5f76:	80 91 6c 08 	lds	r24, 0x086C
    5f7a:	90 91 6d 08 	lds	r25, 0x086D
    5f7e:	af 01       	movw	r20, r30
    5f80:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <vfprintf>
    5f84:	cf 91       	pop	r28
    5f86:	df 91       	pop	r29
    5f88:	08 95       	ret

00005f8a <sprintf>:
    5f8a:	0f 93       	push	r16
    5f8c:	1f 93       	push	r17
    5f8e:	df 93       	push	r29
    5f90:	cf 93       	push	r28
    5f92:	cd b7       	in	r28, 0x3d	; 61
    5f94:	de b7       	in	r29, 0x3e	; 62
    5f96:	2e 97       	sbiw	r28, 0x0e	; 14
    5f98:	0f b6       	in	r0, 0x3f	; 63
    5f9a:	f8 94       	cli
    5f9c:	de bf       	out	0x3e, r29	; 62
    5f9e:	0f be       	out	0x3f, r0	; 63
    5fa0:	cd bf       	out	0x3d, r28	; 61
    5fa2:	0d 89       	ldd	r16, Y+21	; 0x15
    5fa4:	1e 89       	ldd	r17, Y+22	; 0x16
    5fa6:	86 e0       	ldi	r24, 0x06	; 6
    5fa8:	8c 83       	std	Y+4, r24	; 0x04
    5faa:	1a 83       	std	Y+2, r17	; 0x02
    5fac:	09 83       	std	Y+1, r16	; 0x01
    5fae:	8f ef       	ldi	r24, 0xFF	; 255
    5fb0:	9f e7       	ldi	r25, 0x7F	; 127
    5fb2:	9e 83       	std	Y+6, r25	; 0x06
    5fb4:	8d 83       	std	Y+5, r24	; 0x05
    5fb6:	9e 01       	movw	r18, r28
    5fb8:	27 5e       	subi	r18, 0xE7	; 231
    5fba:	3f 4f       	sbci	r19, 0xFF	; 255
    5fbc:	ce 01       	movw	r24, r28
    5fbe:	01 96       	adiw	r24, 0x01	; 1
    5fc0:	6f 89       	ldd	r22, Y+23	; 0x17
    5fc2:	78 8d       	ldd	r23, Y+24	; 0x18
    5fc4:	a9 01       	movw	r20, r18
    5fc6:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <vfprintf>
    5fca:	ef 81       	ldd	r30, Y+7	; 0x07
    5fcc:	f8 85       	ldd	r31, Y+8	; 0x08
    5fce:	e0 0f       	add	r30, r16
    5fd0:	f1 1f       	adc	r31, r17
    5fd2:	10 82       	st	Z, r1
    5fd4:	2e 96       	adiw	r28, 0x0e	; 14
    5fd6:	0f b6       	in	r0, 0x3f	; 63
    5fd8:	f8 94       	cli
    5fda:	de bf       	out	0x3e, r29	; 62
    5fdc:	0f be       	out	0x3f, r0	; 63
    5fde:	cd bf       	out	0x3d, r28	; 61
    5fe0:	cf 91       	pop	r28
    5fe2:	df 91       	pop	r29
    5fe4:	1f 91       	pop	r17
    5fe6:	0f 91       	pop	r16
    5fe8:	08 95       	ret

00005fea <__ultoa_invert>:
    5fea:	fa 01       	movw	r30, r20
    5fec:	aa 27       	eor	r26, r26
    5fee:	28 30       	cpi	r18, 0x08	; 8
    5ff0:	51 f1       	breq	.+84     	; 0x6046 <__ultoa_invert+0x5c>
    5ff2:	20 31       	cpi	r18, 0x10	; 16
    5ff4:	81 f1       	breq	.+96     	; 0x6056 <__ultoa_invert+0x6c>
    5ff6:	e8 94       	clt
    5ff8:	6f 93       	push	r22
    5ffa:	6e 7f       	andi	r22, 0xFE	; 254
    5ffc:	6e 5f       	subi	r22, 0xFE	; 254
    5ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    6000:	8f 4f       	sbci	r24, 0xFF	; 255
    6002:	9f 4f       	sbci	r25, 0xFF	; 255
    6004:	af 4f       	sbci	r26, 0xFF	; 255
    6006:	b1 e0       	ldi	r27, 0x01	; 1
    6008:	3e d0       	rcall	.+124    	; 0x6086 <__ultoa_invert+0x9c>
    600a:	b4 e0       	ldi	r27, 0x04	; 4
    600c:	3c d0       	rcall	.+120    	; 0x6086 <__ultoa_invert+0x9c>
    600e:	67 0f       	add	r22, r23
    6010:	78 1f       	adc	r23, r24
    6012:	89 1f       	adc	r24, r25
    6014:	9a 1f       	adc	r25, r26
    6016:	a1 1d       	adc	r26, r1
    6018:	68 0f       	add	r22, r24
    601a:	79 1f       	adc	r23, r25
    601c:	8a 1f       	adc	r24, r26
    601e:	91 1d       	adc	r25, r1
    6020:	a1 1d       	adc	r26, r1
    6022:	6a 0f       	add	r22, r26
    6024:	71 1d       	adc	r23, r1
    6026:	81 1d       	adc	r24, r1
    6028:	91 1d       	adc	r25, r1
    602a:	a1 1d       	adc	r26, r1
    602c:	20 d0       	rcall	.+64     	; 0x606e <__ultoa_invert+0x84>
    602e:	09 f4       	brne	.+2      	; 0x6032 <__ultoa_invert+0x48>
    6030:	68 94       	set
    6032:	3f 91       	pop	r19
    6034:	2a e0       	ldi	r18, 0x0A	; 10
    6036:	26 9f       	mul	r18, r22
    6038:	11 24       	eor	r1, r1
    603a:	30 19       	sub	r19, r0
    603c:	30 5d       	subi	r19, 0xD0	; 208
    603e:	31 93       	st	Z+, r19
    6040:	de f6       	brtc	.-74     	; 0x5ff8 <__ultoa_invert+0xe>
    6042:	cf 01       	movw	r24, r30
    6044:	08 95       	ret
    6046:	46 2f       	mov	r20, r22
    6048:	47 70       	andi	r20, 0x07	; 7
    604a:	40 5d       	subi	r20, 0xD0	; 208
    604c:	41 93       	st	Z+, r20
    604e:	b3 e0       	ldi	r27, 0x03	; 3
    6050:	0f d0       	rcall	.+30     	; 0x6070 <__ultoa_invert+0x86>
    6052:	c9 f7       	brne	.-14     	; 0x6046 <__ultoa_invert+0x5c>
    6054:	f6 cf       	rjmp	.-20     	; 0x6042 <__ultoa_invert+0x58>
    6056:	46 2f       	mov	r20, r22
    6058:	4f 70       	andi	r20, 0x0F	; 15
    605a:	40 5d       	subi	r20, 0xD0	; 208
    605c:	4a 33       	cpi	r20, 0x3A	; 58
    605e:	18 f0       	brcs	.+6      	; 0x6066 <__ultoa_invert+0x7c>
    6060:	49 5d       	subi	r20, 0xD9	; 217
    6062:	31 fd       	sbrc	r19, 1
    6064:	40 52       	subi	r20, 0x20	; 32
    6066:	41 93       	st	Z+, r20
    6068:	02 d0       	rcall	.+4      	; 0x606e <__ultoa_invert+0x84>
    606a:	a9 f7       	brne	.-22     	; 0x6056 <__ultoa_invert+0x6c>
    606c:	ea cf       	rjmp	.-44     	; 0x6042 <__ultoa_invert+0x58>
    606e:	b4 e0       	ldi	r27, 0x04	; 4
    6070:	a6 95       	lsr	r26
    6072:	97 95       	ror	r25
    6074:	87 95       	ror	r24
    6076:	77 95       	ror	r23
    6078:	67 95       	ror	r22
    607a:	ba 95       	dec	r27
    607c:	c9 f7       	brne	.-14     	; 0x6070 <__ultoa_invert+0x86>
    607e:	00 97       	sbiw	r24, 0x00	; 0
    6080:	61 05       	cpc	r22, r1
    6082:	71 05       	cpc	r23, r1
    6084:	08 95       	ret
    6086:	9b 01       	movw	r18, r22
    6088:	ac 01       	movw	r20, r24
    608a:	0a 2e       	mov	r0, r26
    608c:	06 94       	lsr	r0
    608e:	57 95       	ror	r21
    6090:	47 95       	ror	r20
    6092:	37 95       	ror	r19
    6094:	27 95       	ror	r18
    6096:	ba 95       	dec	r27
    6098:	c9 f7       	brne	.-14     	; 0x608c <__ultoa_invert+0xa2>
    609a:	62 0f       	add	r22, r18
    609c:	73 1f       	adc	r23, r19
    609e:	84 1f       	adc	r24, r20
    60a0:	95 1f       	adc	r25, r21
    60a2:	a0 1d       	adc	r26, r0
    60a4:	08 95       	ret

000060a6 <__eerd_byte_m128rfa1>:
    60a6:	f9 99       	sbic	0x1f, 1	; 31
    60a8:	fe cf       	rjmp	.-4      	; 0x60a6 <__eerd_byte_m128rfa1>
    60aa:	92 bd       	out	0x22, r25	; 34
    60ac:	81 bd       	out	0x21, r24	; 33
    60ae:	f8 9a       	sbi	0x1f, 0	; 31
    60b0:	99 27       	eor	r25, r25
    60b2:	80 b5       	in	r24, 0x20	; 32
    60b4:	08 95       	ret

000060b6 <__eewr_byte_m128rfa1>:
    60b6:	26 2f       	mov	r18, r22

000060b8 <__eewr_r18_m128rfa1>:
    60b8:	f9 99       	sbic	0x1f, 1	; 31
    60ba:	fe cf       	rjmp	.-4      	; 0x60b8 <__eewr_r18_m128rfa1>
    60bc:	1f ba       	out	0x1f, r1	; 31
    60be:	92 bd       	out	0x22, r25	; 34
    60c0:	81 bd       	out	0x21, r24	; 33
    60c2:	20 bd       	out	0x20, r18	; 32
    60c4:	0f b6       	in	r0, 0x3f	; 63
    60c6:	f8 94       	cli
    60c8:	fa 9a       	sbi	0x1f, 2	; 31
    60ca:	f9 9a       	sbi	0x1f, 1	; 31
    60cc:	0f be       	out	0x3f, r0	; 63
    60ce:	01 96       	adiw	r24, 0x01	; 1
    60d0:	08 95       	ret

000060d2 <calloc>:
    60d2:	ef 92       	push	r14
    60d4:	ff 92       	push	r15
    60d6:	0f 93       	push	r16
    60d8:	1f 93       	push	r17
    60da:	cf 93       	push	r28
    60dc:	df 93       	push	r29
    60de:	68 9f       	mul	r22, r24
    60e0:	80 01       	movw	r16, r0
    60e2:	69 9f       	mul	r22, r25
    60e4:	10 0d       	add	r17, r0
    60e6:	78 9f       	mul	r23, r24
    60e8:	10 0d       	add	r17, r0
    60ea:	11 24       	eor	r1, r1
    60ec:	c8 01       	movw	r24, r16
    60ee:	0e 94 8e 30 	call	0x611c	; 0x611c <malloc>
    60f2:	e8 2e       	mov	r14, r24
    60f4:	e7 01       	movw	r28, r14
    60f6:	7e 01       	movw	r14, r28
    60f8:	f9 2e       	mov	r15, r25
    60fa:	e7 01       	movw	r28, r14
    60fc:	20 97       	sbiw	r28, 0x00	; 0
    60fe:	31 f0       	breq	.+12     	; 0x610c <calloc+0x3a>
    6100:	8e 2d       	mov	r24, r14
    6102:	60 e0       	ldi	r22, 0x00	; 0
    6104:	70 e0       	ldi	r23, 0x00	; 0
    6106:	a8 01       	movw	r20, r16
    6108:	0e 94 c1 31 	call	0x6382	; 0x6382 <memset>
    610c:	ce 01       	movw	r24, r28
    610e:	df 91       	pop	r29
    6110:	cf 91       	pop	r28
    6112:	1f 91       	pop	r17
    6114:	0f 91       	pop	r16
    6116:	ff 90       	pop	r15
    6118:	ef 90       	pop	r14
    611a:	08 95       	ret

0000611c <malloc>:
    611c:	cf 93       	push	r28
    611e:	df 93       	push	r29
    6120:	82 30       	cpi	r24, 0x02	; 2
    6122:	91 05       	cpc	r25, r1
    6124:	10 f4       	brcc	.+4      	; 0x612a <malloc+0xe>
    6126:	82 e0       	ldi	r24, 0x02	; 2
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	e0 91 72 08 	lds	r30, 0x0872
    612e:	f0 91 73 08 	lds	r31, 0x0873
    6132:	40 e0       	ldi	r20, 0x00	; 0
    6134:	50 e0       	ldi	r21, 0x00	; 0
    6136:	20 e0       	ldi	r18, 0x00	; 0
    6138:	30 e0       	ldi	r19, 0x00	; 0
    613a:	26 c0       	rjmp	.+76     	; 0x6188 <malloc+0x6c>
    613c:	60 81       	ld	r22, Z
    613e:	71 81       	ldd	r23, Z+1	; 0x01
    6140:	68 17       	cp	r22, r24
    6142:	79 07       	cpc	r23, r25
    6144:	e0 f0       	brcs	.+56     	; 0x617e <malloc+0x62>
    6146:	68 17       	cp	r22, r24
    6148:	79 07       	cpc	r23, r25
    614a:	81 f4       	brne	.+32     	; 0x616c <malloc+0x50>
    614c:	82 81       	ldd	r24, Z+2	; 0x02
    614e:	93 81       	ldd	r25, Z+3	; 0x03
    6150:	21 15       	cp	r18, r1
    6152:	31 05       	cpc	r19, r1
    6154:	31 f0       	breq	.+12     	; 0x6162 <malloc+0x46>
    6156:	d9 01       	movw	r26, r18
    6158:	13 96       	adiw	r26, 0x03	; 3
    615a:	9c 93       	st	X, r25
    615c:	8e 93       	st	-X, r24
    615e:	12 97       	sbiw	r26, 0x02	; 2
    6160:	2b c0       	rjmp	.+86     	; 0x61b8 <malloc+0x9c>
    6162:	90 93 73 08 	sts	0x0873, r25
    6166:	80 93 72 08 	sts	0x0872, r24
    616a:	26 c0       	rjmp	.+76     	; 0x61b8 <malloc+0x9c>
    616c:	41 15       	cp	r20, r1
    616e:	51 05       	cpc	r21, r1
    6170:	19 f0       	breq	.+6      	; 0x6178 <malloc+0x5c>
    6172:	64 17       	cp	r22, r20
    6174:	75 07       	cpc	r23, r21
    6176:	18 f4       	brcc	.+6      	; 0x617e <malloc+0x62>
    6178:	ab 01       	movw	r20, r22
    617a:	e9 01       	movw	r28, r18
    617c:	df 01       	movw	r26, r30
    617e:	9f 01       	movw	r18, r30
    6180:	72 81       	ldd	r23, Z+2	; 0x02
    6182:	63 81       	ldd	r22, Z+3	; 0x03
    6184:	e7 2f       	mov	r30, r23
    6186:	f6 2f       	mov	r31, r22
    6188:	30 97       	sbiw	r30, 0x00	; 0
    618a:	c1 f6       	brne	.-80     	; 0x613c <malloc+0x20>
    618c:	41 15       	cp	r20, r1
    618e:	51 05       	cpc	r21, r1
    6190:	01 f1       	breq	.+64     	; 0x61d2 <malloc+0xb6>
    6192:	48 1b       	sub	r20, r24
    6194:	59 0b       	sbc	r21, r25
    6196:	44 30       	cpi	r20, 0x04	; 4
    6198:	51 05       	cpc	r21, r1
    619a:	80 f4       	brcc	.+32     	; 0x61bc <malloc+0xa0>
    619c:	12 96       	adiw	r26, 0x02	; 2
    619e:	8d 91       	ld	r24, X+
    61a0:	9c 91       	ld	r25, X
    61a2:	13 97       	sbiw	r26, 0x03	; 3
    61a4:	20 97       	sbiw	r28, 0x00	; 0
    61a6:	19 f0       	breq	.+6      	; 0x61ae <malloc+0x92>
    61a8:	9b 83       	std	Y+3, r25	; 0x03
    61aa:	8a 83       	std	Y+2, r24	; 0x02
    61ac:	04 c0       	rjmp	.+8      	; 0x61b6 <malloc+0x9a>
    61ae:	90 93 73 08 	sts	0x0873, r25
    61b2:	80 93 72 08 	sts	0x0872, r24
    61b6:	fd 01       	movw	r30, r26
    61b8:	32 96       	adiw	r30, 0x02	; 2
    61ba:	46 c0       	rjmp	.+140    	; 0x6248 <malloc+0x12c>
    61bc:	fd 01       	movw	r30, r26
    61be:	e4 0f       	add	r30, r20
    61c0:	f5 1f       	adc	r31, r21
    61c2:	81 93       	st	Z+, r24
    61c4:	91 93       	st	Z+, r25
    61c6:	42 50       	subi	r20, 0x02	; 2
    61c8:	50 40       	sbci	r21, 0x00	; 0
    61ca:	11 96       	adiw	r26, 0x01	; 1
    61cc:	5c 93       	st	X, r21
    61ce:	4e 93       	st	-X, r20
    61d0:	3b c0       	rjmp	.+118    	; 0x6248 <malloc+0x12c>
    61d2:	20 91 70 08 	lds	r18, 0x0870
    61d6:	30 91 71 08 	lds	r19, 0x0871
    61da:	21 15       	cp	r18, r1
    61dc:	31 05       	cpc	r19, r1
    61de:	41 f4       	brne	.+16     	; 0x61f0 <malloc+0xd4>
    61e0:	20 91 b7 03 	lds	r18, 0x03B7
    61e4:	30 91 b8 03 	lds	r19, 0x03B8
    61e8:	30 93 71 08 	sts	0x0871, r19
    61ec:	20 93 70 08 	sts	0x0870, r18
    61f0:	20 91 b9 03 	lds	r18, 0x03B9
    61f4:	30 91 ba 03 	lds	r19, 0x03BA
    61f8:	21 15       	cp	r18, r1
    61fa:	31 05       	cpc	r19, r1
    61fc:	41 f4       	brne	.+16     	; 0x620e <malloc+0xf2>
    61fe:	2d b7       	in	r18, 0x3d	; 61
    6200:	3e b7       	in	r19, 0x3e	; 62
    6202:	40 91 b5 03 	lds	r20, 0x03B5
    6206:	50 91 b6 03 	lds	r21, 0x03B6
    620a:	24 1b       	sub	r18, r20
    620c:	35 0b       	sbc	r19, r21
    620e:	e0 91 70 08 	lds	r30, 0x0870
    6212:	f0 91 71 08 	lds	r31, 0x0871
    6216:	e2 17       	cp	r30, r18
    6218:	f3 07       	cpc	r31, r19
    621a:	a0 f4       	brcc	.+40     	; 0x6244 <malloc+0x128>
    621c:	2e 1b       	sub	r18, r30
    621e:	3f 0b       	sbc	r19, r31
    6220:	28 17       	cp	r18, r24
    6222:	39 07       	cpc	r19, r25
    6224:	78 f0       	brcs	.+30     	; 0x6244 <malloc+0x128>
    6226:	ac 01       	movw	r20, r24
    6228:	4e 5f       	subi	r20, 0xFE	; 254
    622a:	5f 4f       	sbci	r21, 0xFF	; 255
    622c:	24 17       	cp	r18, r20
    622e:	35 07       	cpc	r19, r21
    6230:	48 f0       	brcs	.+18     	; 0x6244 <malloc+0x128>
    6232:	4e 0f       	add	r20, r30
    6234:	5f 1f       	adc	r21, r31
    6236:	50 93 71 08 	sts	0x0871, r21
    623a:	40 93 70 08 	sts	0x0870, r20
    623e:	81 93       	st	Z+, r24
    6240:	91 93       	st	Z+, r25
    6242:	02 c0       	rjmp	.+4      	; 0x6248 <malloc+0x12c>
    6244:	e0 e0       	ldi	r30, 0x00	; 0
    6246:	f0 e0       	ldi	r31, 0x00	; 0
    6248:	cf 01       	movw	r24, r30
    624a:	df 91       	pop	r29
    624c:	cf 91       	pop	r28
    624e:	08 95       	ret

00006250 <free>:
    6250:	cf 93       	push	r28
    6252:	df 93       	push	r29
    6254:	00 97       	sbiw	r24, 0x00	; 0
    6256:	09 f4       	brne	.+2      	; 0x625a <free+0xa>
    6258:	91 c0       	rjmp	.+290    	; 0x637c <free+0x12c>
    625a:	fc 01       	movw	r30, r24
    625c:	32 97       	sbiw	r30, 0x02	; 2
    625e:	13 82       	std	Z+3, r1	; 0x03
    6260:	12 82       	std	Z+2, r1	; 0x02
    6262:	60 91 72 08 	lds	r22, 0x0872
    6266:	70 91 73 08 	lds	r23, 0x0873
    626a:	61 15       	cp	r22, r1
    626c:	71 05       	cpc	r23, r1
    626e:	81 f4       	brne	.+32     	; 0x6290 <free+0x40>
    6270:	20 81       	ld	r18, Z
    6272:	31 81       	ldd	r19, Z+1	; 0x01
    6274:	28 0f       	add	r18, r24
    6276:	39 1f       	adc	r19, r25
    6278:	80 91 70 08 	lds	r24, 0x0870
    627c:	90 91 71 08 	lds	r25, 0x0871
    6280:	82 17       	cp	r24, r18
    6282:	93 07       	cpc	r25, r19
    6284:	99 f5       	brne	.+102    	; 0x62ec <free+0x9c>
    6286:	f0 93 71 08 	sts	0x0871, r31
    628a:	e0 93 70 08 	sts	0x0870, r30
    628e:	76 c0       	rjmp	.+236    	; 0x637c <free+0x12c>
    6290:	db 01       	movw	r26, r22
    6292:	80 e0       	ldi	r24, 0x00	; 0
    6294:	90 e0       	ldi	r25, 0x00	; 0
    6296:	02 c0       	rjmp	.+4      	; 0x629c <free+0x4c>
    6298:	cd 01       	movw	r24, r26
    629a:	d9 01       	movw	r26, r18
    629c:	ae 17       	cp	r26, r30
    629e:	bf 07       	cpc	r27, r31
    62a0:	48 f4       	brcc	.+18     	; 0x62b4 <free+0x64>
    62a2:	12 96       	adiw	r26, 0x02	; 2
    62a4:	2d 91       	ld	r18, X+
    62a6:	3c 91       	ld	r19, X
    62a8:	13 97       	sbiw	r26, 0x03	; 3
    62aa:	21 15       	cp	r18, r1
    62ac:	31 05       	cpc	r19, r1
    62ae:	a1 f7       	brne	.-24     	; 0x6298 <free+0x48>
    62b0:	cd 01       	movw	r24, r26
    62b2:	21 c0       	rjmp	.+66     	; 0x62f6 <free+0xa6>
    62b4:	b3 83       	std	Z+3, r27	; 0x03
    62b6:	a2 83       	std	Z+2, r26	; 0x02
    62b8:	ef 01       	movw	r28, r30
    62ba:	49 91       	ld	r20, Y+
    62bc:	59 91       	ld	r21, Y+
    62be:	9e 01       	movw	r18, r28
    62c0:	24 0f       	add	r18, r20
    62c2:	35 1f       	adc	r19, r21
    62c4:	a2 17       	cp	r26, r18
    62c6:	b3 07       	cpc	r27, r19
    62c8:	79 f4       	brne	.+30     	; 0x62e8 <free+0x98>
    62ca:	2d 91       	ld	r18, X+
    62cc:	3c 91       	ld	r19, X
    62ce:	11 97       	sbiw	r26, 0x01	; 1
    62d0:	24 0f       	add	r18, r20
    62d2:	35 1f       	adc	r19, r21
    62d4:	2e 5f       	subi	r18, 0xFE	; 254
    62d6:	3f 4f       	sbci	r19, 0xFF	; 255
    62d8:	31 83       	std	Z+1, r19	; 0x01
    62da:	20 83       	st	Z, r18
    62dc:	12 96       	adiw	r26, 0x02	; 2
    62de:	2d 91       	ld	r18, X+
    62e0:	3c 91       	ld	r19, X
    62e2:	13 97       	sbiw	r26, 0x03	; 3
    62e4:	33 83       	std	Z+3, r19	; 0x03
    62e6:	22 83       	std	Z+2, r18	; 0x02
    62e8:	00 97       	sbiw	r24, 0x00	; 0
    62ea:	29 f4       	brne	.+10     	; 0x62f6 <free+0xa6>
    62ec:	f0 93 73 08 	sts	0x0873, r31
    62f0:	e0 93 72 08 	sts	0x0872, r30
    62f4:	43 c0       	rjmp	.+134    	; 0x637c <free+0x12c>
    62f6:	dc 01       	movw	r26, r24
    62f8:	13 96       	adiw	r26, 0x03	; 3
    62fa:	fc 93       	st	X, r31
    62fc:	ee 93       	st	-X, r30
    62fe:	12 97       	sbiw	r26, 0x02	; 2
    6300:	4d 91       	ld	r20, X+
    6302:	5d 91       	ld	r21, X+
    6304:	a4 0f       	add	r26, r20
    6306:	b5 1f       	adc	r27, r21
    6308:	ea 17       	cp	r30, r26
    630a:	fb 07       	cpc	r31, r27
    630c:	69 f4       	brne	.+26     	; 0x6328 <free+0xd8>
    630e:	20 81       	ld	r18, Z
    6310:	31 81       	ldd	r19, Z+1	; 0x01
    6312:	24 0f       	add	r18, r20
    6314:	35 1f       	adc	r19, r21
    6316:	2e 5f       	subi	r18, 0xFE	; 254
    6318:	3f 4f       	sbci	r19, 0xFF	; 255
    631a:	ec 01       	movw	r28, r24
    631c:	39 83       	std	Y+1, r19	; 0x01
    631e:	28 83       	st	Y, r18
    6320:	22 81       	ldd	r18, Z+2	; 0x02
    6322:	33 81       	ldd	r19, Z+3	; 0x03
    6324:	3b 83       	std	Y+3, r19	; 0x03
    6326:	2a 83       	std	Y+2, r18	; 0x02
    6328:	e0 e0       	ldi	r30, 0x00	; 0
    632a:	f0 e0       	ldi	r31, 0x00	; 0
    632c:	02 c0       	rjmp	.+4      	; 0x6332 <free+0xe2>
    632e:	fb 01       	movw	r30, r22
    6330:	bc 01       	movw	r22, r24
    6332:	db 01       	movw	r26, r22
    6334:	12 96       	adiw	r26, 0x02	; 2
    6336:	8d 91       	ld	r24, X+
    6338:	9c 91       	ld	r25, X
    633a:	13 97       	sbiw	r26, 0x03	; 3
    633c:	00 97       	sbiw	r24, 0x00	; 0
    633e:	b9 f7       	brne	.-18     	; 0x632e <free+0xde>
    6340:	9b 01       	movw	r18, r22
    6342:	2e 5f       	subi	r18, 0xFE	; 254
    6344:	3f 4f       	sbci	r19, 0xFF	; 255
    6346:	8d 91       	ld	r24, X+
    6348:	9c 91       	ld	r25, X
    634a:	11 97       	sbiw	r26, 0x01	; 1
    634c:	82 0f       	add	r24, r18
    634e:	93 1f       	adc	r25, r19
    6350:	40 91 70 08 	lds	r20, 0x0870
    6354:	50 91 71 08 	lds	r21, 0x0871
    6358:	48 17       	cp	r20, r24
    635a:	59 07       	cpc	r21, r25
    635c:	79 f4       	brne	.+30     	; 0x637c <free+0x12c>
    635e:	30 97       	sbiw	r30, 0x00	; 0
    6360:	29 f4       	brne	.+10     	; 0x636c <free+0x11c>
    6362:	10 92 73 08 	sts	0x0873, r1
    6366:	10 92 72 08 	sts	0x0872, r1
    636a:	02 c0       	rjmp	.+4      	; 0x6370 <free+0x120>
    636c:	13 82       	std	Z+3, r1	; 0x03
    636e:	12 82       	std	Z+2, r1	; 0x02
    6370:	22 50       	subi	r18, 0x02	; 2
    6372:	30 40       	sbci	r19, 0x00	; 0
    6374:	30 93 71 08 	sts	0x0871, r19
    6378:	20 93 70 08 	sts	0x0870, r18
    637c:	df 91       	pop	r29
    637e:	cf 91       	pop	r28
    6380:	08 95       	ret

00006382 <memset>:
    6382:	dc 01       	movw	r26, r24
    6384:	01 c0       	rjmp	.+2      	; 0x6388 <memset+0x6>
    6386:	6d 93       	st	X+, r22
    6388:	41 50       	subi	r20, 0x01	; 1
    638a:	50 40       	sbci	r21, 0x00	; 0
    638c:	e0 f7       	brcc	.-8      	; 0x6386 <memset+0x4>
    638e:	08 95       	ret

00006390 <__divmodsi4>:
    6390:	97 fb       	bst	r25, 7
    6392:	09 2e       	mov	r0, r25
    6394:	05 26       	eor	r0, r21
    6396:	0e d0       	rcall	.+28     	; 0x63b4 <__divmodsi4_neg1>
    6398:	57 fd       	sbrc	r21, 7
    639a:	04 d0       	rcall	.+8      	; 0x63a4 <__divmodsi4_neg2>
    639c:	a2 dc       	rcall	.-1724   	; 0x5ce2 <__udivmodsi4>
    639e:	0a d0       	rcall	.+20     	; 0x63b4 <__divmodsi4_neg1>
    63a0:	00 1c       	adc	r0, r0
    63a2:	38 f4       	brcc	.+14     	; 0x63b2 <__divmodsi4_exit>

000063a4 <__divmodsi4_neg2>:
    63a4:	50 95       	com	r21
    63a6:	40 95       	com	r20
    63a8:	30 95       	com	r19
    63aa:	21 95       	neg	r18
    63ac:	3f 4f       	sbci	r19, 0xFF	; 255
    63ae:	4f 4f       	sbci	r20, 0xFF	; 255
    63b0:	5f 4f       	sbci	r21, 0xFF	; 255

000063b2 <__divmodsi4_exit>:
    63b2:	08 95       	ret

000063b4 <__divmodsi4_neg1>:
    63b4:	f6 f7       	brtc	.-4      	; 0x63b2 <__divmodsi4_exit>
    63b6:	90 95       	com	r25
    63b8:	80 95       	com	r24
    63ba:	70 95       	com	r23
    63bc:	61 95       	neg	r22
    63be:	7f 4f       	sbci	r23, 0xFF	; 255
    63c0:	8f 4f       	sbci	r24, 0xFF	; 255
    63c2:	9f 4f       	sbci	r25, 0xFF	; 255
    63c4:	08 95       	ret

000063c6 <_exit>:
    63c6:	f8 94       	cli

000063c8 <__stop_program>:
    63c8:	ff cf       	rjmp	.-2      	; 0x63c8 <__stop_program>
