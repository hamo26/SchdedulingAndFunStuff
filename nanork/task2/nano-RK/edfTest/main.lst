   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 138               	.global	Task2
 140               	Task2:
 141               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        ****  *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        ****  *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        ****  *  All rights reserved.
   5:main.c        ****  *
   6:main.c        ****  *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        ****  *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        ****  *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        ****  *
  10:main.c        ****  *  This program is free software: you can redistribute it and/or modify
  11:main.c        ****  *  it under the terms of the GNU General Public License as published by
  12:main.c        ****  *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        ****  *
  14:main.c        ****  *  This program is distributed in the hope that it will be useful,
  15:main.c        ****  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        ****  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        ****  *  GNU General Public License for more details.
  18:main.c        ****  *
  19:main.c        ****  *  You should have received a copy of the GNU General Public License
  20:main.c        ****  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        ****  *
  22:main.c        ****  *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** 
  25:main.c        **** #include <nrk.h>
  26:main.c        **** #include <include.h>
  27:main.c        **** #include <ulib.h>
  28:main.c        **** #include <stdio.h>
  29:main.c        **** #include <avr/sleep.h>
  30:main.c        **** #include <hal.h>
  31:main.c        **** #include <nrk_error.h>
  32:main.c        **** #include <nrk_timer.h>
  33:main.c        **** #include <nrk_stack_check.h>
  34:main.c        **** 
  35:main.c        **** 
  36:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  37:main.c        **** nrk_task_type TaskOne;
  38:main.c        **** void Task1(void);
  39:main.c        **** 
  40:main.c        **** NRK_STK Stack2[NRK_APP_STACKSIZE];
  41:main.c        **** nrk_task_type TaskTwo;
  42:main.c        **** void Task2 (void);
  43:main.c        **** 
  44:main.c        **** /*NRK_STK Stack3[NRK_APP_STACKSIZE];
  45:main.c        ****   nrk_task_type TaskThree;
  46:main.c        ****   void Task3 (void);*/
  47:main.c        **** 
  48:main.c        **** 
  49:main.c        **** void nrk_create_taskset();
  50:main.c        **** 
  51:main.c        **** int main ()
  52:main.c        **** {
  53:main.c        **** 
  54:main.c        ****     nrk_setup_ports();
  55:main.c        ****     nrk_setup_uart(UART_BAUDRATE_115K2);
  56:main.c        ****     nrk_kprintf( PSTR("EDF Test: \n") );
  57:main.c        **** 
  58:main.c        ****     nrk_init();
  59:main.c        **** 
  60:main.c        ****     nrk_time_set(0,0);
  61:main.c        ****     nrk_create_taskset ();
  62:main.c        ****     nrk_start();
  63:main.c        ****     return 0;
  64:main.c        **** }
  65:main.c        **** 
  66:main.c        **** void Task1()
  67:main.c        **** {
  68:main.c        ****     while(1) {
  69:main.c        **** 	nrk_kprintf( PSTR("In T1 loop \n") );
  70:main.c        **** 	nrk_wait_until_next_period();
  71:main.c        ****     }
  72:main.c        **** }
  73:main.c        **** 
  74:main.c        **** void Task2()
  75:main.c        **** {
 143               	.LM0:
 144               	.LFBB1:
 145               	/* prologue: function */
 146               	/* frame size = 0 */
 147               	/* stack size = 0 */
 148               	.L__stack_usage = 0
 149               	.L2:
  76:main.c        ****     while(1) {
  77:main.c        **** 	nrk_kprintf( PSTR("In T2 loop \n") );
 151               	.LM1:
 152 0000 80E0      		ldi r24,lo8(__c.2121)
 153 0002 90E0      		ldi r25,hi8(__c.2121)
 154 0004 0E94 0000 		call nrk_kprintf
  78:main.c        **** 	nrk_wait_until_next_period();
 156               	.LM2:
 157 0008 0E94 0000 		call nrk_wait_until_next_period
 158 000c 00C0      		rjmp .L2
 160               	.Lscope1:
 162               		.stabd	78,0,0
 164               	.global	Task1
 166               	Task1:
 167               		.stabd	46,0,0
  67:main.c        **** {
 169               	.LM3:
 170               	.LFBB2:
 171               	/* prologue: function */
 172               	/* frame size = 0 */
 173               	/* stack size = 0 */
 174               	.L__stack_usage = 0
 175               	.L4:
  69:main.c        **** 	nrk_kprintf( PSTR("In T1 loop \n") );
 177               	.LM4:
 178 000e 80E0      		ldi r24,lo8(__c.2116)
 179 0010 90E0      		ldi r25,hi8(__c.2116)
 180 0012 0E94 0000 		call nrk_kprintf
  70:main.c        **** 	nrk_wait_until_next_period();
 182               	.LM5:
 183 0016 0E94 0000 		call nrk_wait_until_next_period
 184 001a 00C0      		rjmp .L4
 186               	.Lscope2:
 188               		.stabd	78,0,0
 190               	.global	nrk_create_taskset
 192               	nrk_create_taskset:
 193               		.stabd	46,0,0
  79:main.c        ****     }
  80:main.c        **** }
  81:main.c        **** 
  82:main.c        **** 
  83:main.c        **** void nrk_create_taskset()
  84:main.c        **** {
 195               	.LM6:
 196               	.LFBB3:
 197 001c 1F93      		push r17
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 1 */
 201               	.L__stack_usage = 1
  85:main.c        ****     TaskOne.task = Task1;
 203               	.LM7:
 204 001e 80E0      		ldi r24,lo8(gs(Task1))
 205 0020 90E0      		ldi r25,hi8(gs(Task1))
 206 0022 9093 0000 		sts TaskOne+5+1,r25
 207 0026 8093 0000 		sts TaskOne+5,r24
  86:main.c        ****     TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE];
 209               	.LM8:
 210 002a 80E0      		ldi r24,lo8(Stack1+128)
 211 002c 90E0      		ldi r25,hi8(Stack1+128)
 212 002e 9093 0000 		sts TaskOne+1+1,r25
 213 0032 8093 0000 		sts TaskOne+1,r24
  87:main.c        ****     TaskOne.Pbos = (void *) &Stack1[0];
 215               	.LM9:
 216 0036 80E0      		ldi r24,lo8(Stack1)
 217 0038 90E0      		ldi r25,hi8(Stack1)
 218 003a 9093 0000 		sts TaskOne+3+1,r25
 219 003e 8093 0000 		sts TaskOne+3,r24
  88:main.c        ****     TaskOne.prio = 1;
 221               	.LM10:
 222 0042 11E0      		ldi r17,lo8(1)
 223 0044 1093 0000 		sts TaskOne+8,r17
  89:main.c        ****     TaskOne.FirstActivation = TRUE;
 225               	.LM11:
 226 0048 1093 0000 		sts TaskOne+7,r17
  90:main.c        ****     TaskOne.Type = BASIC_TASK;
 228               	.LM12:
 229 004c 1093 0000 		sts TaskOne+9,r17
  91:main.c        ****     TaskOne.SchType = PREEMPTIVE;
 231               	.LM13:
 232 0050 1093 0000 		sts TaskOne+10,r17
  92:main.c        ****     TaskOne.period.secs = 0;
 234               	.LM14:
 235 0054 1092 0000 		sts TaskOne+11,__zero_reg__
 236 0058 1092 0000 		sts TaskOne+11+1,__zero_reg__
 237 005c 1092 0000 		sts TaskOne+11+2,__zero_reg__
 238 0060 1092 0000 		sts TaskOne+11+3,__zero_reg__
  93:main.c        ****     TaskOne.period.nano_secs = 250*NANOS_PER_MS;
 240               	.LM15:
 241 0064 80E8      		ldi r24,lo8(250000000)
 242 0066 92EB      		ldi r25,hi8(250000000)
 243 0068 A6EE      		ldi r26,hlo8(250000000)
 244 006a BEE0      		ldi r27,hhi8(250000000)
 245 006c 8093 0000 		sts TaskOne+15,r24
 246 0070 9093 0000 		sts TaskOne+15+1,r25
 247 0074 A093 0000 		sts TaskOne+15+2,r26
 248 0078 B093 0000 		sts TaskOne+15+3,r27
  94:main.c        ****     TaskOne.cpu_reserve.secs = 0;
 250               	.LM16:
 251 007c 1092 0000 		sts TaskOne+19,__zero_reg__
 252 0080 1092 0000 		sts TaskOne+19+1,__zero_reg__
 253 0084 1092 0000 		sts TaskOne+19+2,__zero_reg__
 254 0088 1092 0000 		sts TaskOne+19+3,__zero_reg__
  95:main.c        ****     TaskOne.cpu_reserve.nano_secs =  50*NANOS_PER_MS;
 256               	.LM17:
 257 008c 80E8      		ldi r24,lo8(50000000)
 258 008e 90EF      		ldi r25,hi8(50000000)
 259 0090 AAEF      		ldi r26,hlo8(50000000)
 260 0092 B2E0      		ldi r27,hhi8(50000000)
 261 0094 8093 0000 		sts TaskOne+23,r24
 262 0098 9093 0000 		sts TaskOne+23+1,r25
 263 009c A093 0000 		sts TaskOne+23+2,r26
 264 00a0 B093 0000 		sts TaskOne+23+3,r27
  96:main.c        ****     TaskOne.offset.secs = 0;
 266               	.LM18:
 267 00a4 1092 0000 		sts TaskOne+27,__zero_reg__
 268 00a8 1092 0000 		sts TaskOne+27+1,__zero_reg__
 269 00ac 1092 0000 		sts TaskOne+27+2,__zero_reg__
 270 00b0 1092 0000 		sts TaskOne+27+3,__zero_reg__
  97:main.c        ****     TaskOne.offset.nano_secs= 0;
 272               	.LM19:
 273 00b4 1092 0000 		sts TaskOne+31,__zero_reg__
 274 00b8 1092 0000 		sts TaskOne+31+1,__zero_reg__
 275 00bc 1092 0000 		sts TaskOne+31+2,__zero_reg__
 276 00c0 1092 0000 		sts TaskOne+31+3,__zero_reg__
  98:main.c        ****     nrk_activate_task (&TaskOne);
 278               	.LM20:
 279 00c4 80E0      		ldi r24,lo8(TaskOne)
 280 00c6 90E0      		ldi r25,hi8(TaskOne)
 281 00c8 0E94 0000 		call nrk_activate_task
  99:main.c        **** 
 100:main.c        ****     TaskTwo.task = Task2;
 283               	.LM21:
 284 00cc 80E0      		ldi r24,lo8(gs(Task2))
 285 00ce 90E0      		ldi r25,hi8(gs(Task2))
 286 00d0 9093 0000 		sts TaskTwo+5+1,r25
 287 00d4 8093 0000 		sts TaskTwo+5,r24
 101:main.c        ****     TaskTwo.Ptos = (void *) &Stack2[NRK_APP_STACKSIZE];
 289               	.LM22:
 290 00d8 80E0      		ldi r24,lo8(Stack2+128)
 291 00da 90E0      		ldi r25,hi8(Stack2+128)
 292 00dc 9093 0000 		sts TaskTwo+1+1,r25
 293 00e0 8093 0000 		sts TaskTwo+1,r24
 102:main.c        ****     TaskTwo.Pbos = (void *) &Stack2[0];
 295               	.LM23:
 296 00e4 80E0      		ldi r24,lo8(Stack2)
 297 00e6 90E0      		ldi r25,hi8(Stack2)
 298 00e8 9093 0000 		sts TaskTwo+3+1,r25
 299 00ec 8093 0000 		sts TaskTwo+3,r24
 103:main.c        ****     TaskTwo.prio = 2;
 301               	.LM24:
 302 00f0 82E0      		ldi r24,lo8(2)
 303 00f2 8093 0000 		sts TaskTwo+8,r24
 104:main.c        ****     TaskTwo.FirstActivation = TRUE;
 305               	.LM25:
 306 00f6 1093 0000 		sts TaskTwo+7,r17
 105:main.c        ****     TaskTwo.Type = BASIC_TASK;
 308               	.LM26:
 309 00fa 1093 0000 		sts TaskTwo+9,r17
 106:main.c        ****     TaskTwo.SchType = PREEMPTIVE;
 311               	.LM27:
 312 00fe 1093 0000 		sts TaskTwo+10,r17
 107:main.c        ****     TaskTwo.period.secs = 0;
 314               	.LM28:
 315 0102 1092 0000 		sts TaskTwo+11,__zero_reg__
 316 0106 1092 0000 		sts TaskTwo+11+1,__zero_reg__
 317 010a 1092 0000 		sts TaskTwo+11+2,__zero_reg__
 318 010e 1092 0000 		sts TaskTwo+11+3,__zero_reg__
 108:main.c        ****     TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
 320               	.LM29:
 321 0112 80E0      		ldi r24,lo8(500000000)
 322 0114 95E6      		ldi r25,hi8(500000000)
 323 0116 ADEC      		ldi r26,hlo8(500000000)
 324 0118 BDE1      		ldi r27,hhi8(500000000)
 325 011a 8093 0000 		sts TaskTwo+15,r24
 326 011e 9093 0000 		sts TaskTwo+15+1,r25
 327 0122 A093 0000 		sts TaskTwo+15+2,r26
 328 0126 B093 0000 		sts TaskTwo+15+3,r27
 109:main.c        ****     TaskTwo.cpu_reserve.secs = 0;
 330               	.LM30:
 331 012a 1092 0000 		sts TaskTwo+19,__zero_reg__
 332 012e 1092 0000 		sts TaskTwo+19+1,__zero_reg__
 333 0132 1092 0000 		sts TaskTwo+19+2,__zero_reg__
 334 0136 1092 0000 		sts TaskTwo+19+3,__zero_reg__
 110:main.c        ****     TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 336               	.LM31:
 337 013a 80E0      		ldi r24,lo8(100000000)
 338 013c 91EE      		ldi r25,hi8(100000000)
 339 013e A5EF      		ldi r26,hlo8(100000000)
 340 0140 B5E0      		ldi r27,hhi8(100000000)
 341 0142 8093 0000 		sts TaskTwo+23,r24
 342 0146 9093 0000 		sts TaskTwo+23+1,r25
 343 014a A093 0000 		sts TaskTwo+23+2,r26
 344 014e B093 0000 		sts TaskTwo+23+3,r27
 111:main.c        ****     TaskTwo.offset.secs = 0;
 346               	.LM32:
 347 0152 1092 0000 		sts TaskTwo+27,__zero_reg__
 348 0156 1092 0000 		sts TaskTwo+27+1,__zero_reg__
 349 015a 1092 0000 		sts TaskTwo+27+2,__zero_reg__
 350 015e 1092 0000 		sts TaskTwo+27+3,__zero_reg__
 112:main.c        ****     TaskTwo.offset.nano_secs= 0;
 352               	.LM33:
 353 0162 1092 0000 		sts TaskTwo+31,__zero_reg__
 354 0166 1092 0000 		sts TaskTwo+31+1,__zero_reg__
 355 016a 1092 0000 		sts TaskTwo+31+2,__zero_reg__
 356 016e 1092 0000 		sts TaskTwo+31+3,__zero_reg__
 113:main.c        ****     nrk_activate_task (&TaskTwo);
 358               	.LM34:
 359 0172 80E0      		ldi r24,lo8(TaskTwo)
 360 0174 90E0      		ldi r25,hi8(TaskTwo)
 361 0176 0E94 0000 		call nrk_activate_task
 362               	/* epilogue start */
 114:main.c        **** 
 115:main.c        **** }
 364               	.LM35:
 365 017a 1F91      		pop r17
 366 017c 0895      		ret
 368               	.Lscope3:
 370               		.stabd	78,0,0
 372               	.global	main
 374               	main:
 375               		.stabd	46,0,0
  52:main.c        **** {
 377               	.LM36:
 378               	.LFBB4:
 379               	/* prologue: function */
 380               	/* frame size = 0 */
 381               	/* stack size = 0 */
 382               	.L__stack_usage = 0
  54:main.c        ****     nrk_setup_ports();
 384               	.LM37:
 385 017e 0E94 0000 		call nrk_setup_ports
  55:main.c        ****     nrk_setup_uart(UART_BAUDRATE_115K2);
 387               	.LM38:
 388 0182 87E0      		ldi r24,lo8(7)
 389 0184 90E0      		ldi r25,hi8(7)
 390 0186 0E94 0000 		call nrk_setup_uart
  56:main.c        ****     nrk_kprintf( PSTR("EDF Test: \n") );
 392               	.LM39:
 393 018a 80E0      		ldi r24,lo8(__c.2112)
 394 018c 90E0      		ldi r25,hi8(__c.2112)
 395 018e 0E94 0000 		call nrk_kprintf
  58:main.c        ****     nrk_init();
 397               	.LM40:
 398 0192 0E94 0000 		call nrk_init
  60:main.c        ****     nrk_time_set(0,0);
 400               	.LM41:
 401 0196 60E0      		ldi r22,lo8(0)
 402 0198 70E0      		ldi r23,hi8(0)
 403 019a CB01      		movw r24,r22
 404 019c 20E0      		ldi r18,lo8(0)
 405 019e 30E0      		ldi r19,hi8(0)
 406 01a0 A901      		movw r20,r18
 407 01a2 0E94 0000 		call nrk_time_set
  61:main.c        ****     nrk_create_taskset ();
 409               	.LM42:
 410 01a6 0E94 0000 		call nrk_create_taskset
  62:main.c        ****     nrk_start();
 412               	.LM43:
 413 01aa 0E94 0000 		call nrk_start
  64:main.c        **** }
 415               	.LM44:
 416 01ae 80E0      		ldi r24,lo8(0)
 417 01b0 90E0      		ldi r25,hi8(0)
 418               	/* epilogue start */
 419 01b2 0895      		ret
 421               	.Lscope4:
 423               		.stabd	78,0,0
 424               		.comm _nrk_signal_list,4,1
 425               		.comm nrk_idle_task_stk,128,1
 426               		.comm nrk_kernel_stk_ptr,2,1
 427               		.comm error_task,1,1
 428               		.comm error_num,1,1
 429               		.comm _nrk_prev_timer_val,1,1
 430               		.comm _nrk_time_trigger,1,1
 431               		.comm app_timer0_callback,2,1
 432               		.comm app_timer0_prescale,1,1
 433               		.comm Stack1,128,1
 434               		.comm TaskOne,35,1
 435               		.comm Stack2,128,1
 436               		.comm TaskTwo,35,1
 437               		.section	.progmem.data,"a",@progbits
 440               	__c.2121:
 441 0000 496E 2054 		.string	"In T2 loop \n"
 441      3220 6C6F 
 441      6F70 200A 
 441      00
 444               	__c.2116:
 445 000d 496E 2054 		.string	"In T1 loop \n"
 445      3120 6C6F 
 445      6F70 200A 
 445      00
 448               	__c.2112:
 449 001a 4544 4620 		.string	"EDF Test: \n"
 449      5465 7374 
 449      3A20 0A00 
 463               		.text
 465               	.Letext0:
 466               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccK5a4yb.s:2      *ABS*:0000003f __SREG__
     /tmp/ccK5a4yb.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccK5a4yb.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccK5a4yb.s:5      *ABS*:00000034 __CCP__
     /tmp/ccK5a4yb.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccK5a4yb.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccK5a4yb.s:140    .text:00000000 Task2
     /tmp/ccK5a4yb.s:440    .progmem.data:00000000 __c.2121
     /tmp/ccK5a4yb.s:166    .text:0000000e Task1
     /tmp/ccK5a4yb.s:444    .progmem.data:0000000d __c.2116
     /tmp/ccK5a4yb.s:192    .text:0000001c nrk_create_taskset
                            *COM*:00000023 TaskOne
                            *COM*:00000080 Stack1
                            *COM*:00000023 TaskTwo
                            *COM*:00000080 Stack2
     /tmp/ccK5a4yb.s:374    .text:0000017e main
     /tmp/ccK5a4yb.s:448    .progmem.data:0000001a __c.2112
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale

UNDEFINED SYMBOLS
nrk_kprintf
nrk_wait_until_next_period
nrk_activate_task
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
nrk_start
__do_clear_bss
