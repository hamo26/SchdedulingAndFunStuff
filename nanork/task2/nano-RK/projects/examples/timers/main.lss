
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800200  00006668  000066fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002f3  008003d8  008003d8  000068d4  2**0
                  ALLOC
  3 .stab         0000ef10  00000000  00000000  000068d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008d44  00000000  00000000  000157e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__ctors_end>
       4:	0c 94 54 27 	jmp	0x4ea8	; 0x4ea8 <__vector_1>
       8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
       c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      10:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      14:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      18:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      1c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      20:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      24:	0c 94 22 27 	jmp	0x4e44	; 0x4e44 <__vector_9>
      28:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      2c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      30:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      34:	0c 94 80 25 	jmp	0x4b00	; 0x4b00 <__vector_13>
      38:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      3c:	0c 94 80 25 	jmp	0x4b00	; 0x4b00 <__vector_13>
      40:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      44:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      48:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      4c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      50:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      54:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      58:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      5c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      60:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      64:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      68:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      6c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      70:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      74:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      78:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      7c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      80:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__vector_32>
      84:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      88:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      8c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      90:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      94:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      98:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      9c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      a8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      ac:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      b8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      bc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      c0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      c4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      c8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      cc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d4:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      d8:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      dc:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      e0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
      e4:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__vector_57>
      e8:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__vector_58>
      ec:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_59>
      f0:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__vector_60>
      f4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__vector_61>
      f8:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__vector_62>
      fc:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_63>
     100:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__vector_64>
     104:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
     108:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
     10c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
     110:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
     114:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
     118:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
     11c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__bad_interrupt>
     120:	36 16       	cp	r3, r22
     122:	3c 16       	cp	r3, r28
     124:	3f 16       	cp	r3, r31
     126:	42 16       	cp	r4, r18
     128:	45 16       	cp	r4, r21
     12a:	48 16       	cp	r4, r24
     12c:	4e 16       	cp	r4, r30
     12e:	4b 16       	cp	r4, r27
     130:	51 16       	cp	r5, r17
     132:	54 16       	cp	r5, r20
     134:	57 16       	cp	r5, r23
     136:	60 16       	cp	r6, r16
     138:	63 16       	cp	r6, r19
     13a:	66 16       	cp	r6, r22
     13c:	69 16       	cp	r6, r25
     13e:	5d 16       	cp	r5, r29
     140:	33 16       	cp	r3, r19
     142:	39 16       	cp	r3, r25
     144:	6c 16       	cp	r6, r28
     146:	6f 16       	cp	r6, r31
     148:	5a 16       	cp	r5, r26
     14a:	30 16       	cp	r3, r16

0000014c <__c.2767>:
     14c:	45 72 72 6f 72 20 73 65 74 74 69 6e 67 20 75 70     Error setting up
     15c:	20 74 69 6d 65 72 20 63 61 6c 6c 62 61 63 6b 0d      timer callback.
     16c:	0a 00                                               ..

0000016e <__c.2765>:
     16e:	43 61 6c 6c 62 61 63 6b 20 74 69 6d 65 72 20 73     Callback timer s
     17e:	65 74 75 70 0d 0a 00                                etup...

00000185 <__c.2757>:
     185:	53 74 61 72 74 69 6e 67 20 75 70 2e 2e 2e 0d 0a     Starting up.....
	...

00000196 <__c.2154>:
     196:	0d 0a 4e 61 6e 6f 2d 52 4b 20 54 61 73 6b 20 53     ..Nano-RK Task S
     1a6:	74 61 74 69 73 74 69 63 73 3a 0d 0a 00              tatistics:...

000001b3 <__c.2149>:
     1b3:	0d 0a 00                                            ...

000001b6 <__c.2147>:
     1b6:	0d 0a 20 20 20 4f 76 65 72 66 6c 6f 77 20 45 72     ..   Overflow Er
     1c6:	72 6f 72 20 53 74 61 74 75 73 3a 20 00              ror Status: .

000001d3 <__c.2145>:
     1d3:	0d 0a 20 20 20 4b 65 72 6e 65 6c 20 56 69 6f 6c     ..   Kernel Viol
     1e3:	61 74 69 6f 6e 73 3a 20 00                          ations: .

000001ec <__c.2143>:
     1ec:	0d 0a 20 20 20 50 72 65 65 6d 70 74 69 6f 6e 73     ..   Preemptions
     1fc:	3a 20 00                                            : .

000001ff <__c.2141>:
     1ff:	0d 0a 20 20 20 53 77 61 70 2d 69 6e 73 3a 20 00     ..   Swap-ins: .

0000020f <__c.2139>:
     20f:	0d 0a 20 20 20 54 69 6d 65 20 5b 4d 69 6e 2c 4c     ..   Time [Min,L
     21f:	61 73 74 2c 4d 61 78 5d 3a 20 00                    ast,Max]: .

0000022a <__c.2137>:
     22a:	0d 0a 20 20 20 54 6f 74 61 6c 20 43 50 55 3a 20     ..   Total CPU: 
	...

0000023b <__c.2135>:
     23b:	0d 0a 20 20 20 49 64 6c 65 20 54 61 73 6b 20 44     ..   Idle Task D
     24b:	65 65 70 20 53 6c 65 65 70 20 54 69 6d 65 3a 20     eep Sleep Time: 
	...

0000025c <__c.2133>:
     25c:	0d 0a 20 20 20 54 6f 74 61 6c 20 53 79 73 74 65     ..   Total Syste
     26c:	6d 20 55 70 74 69 6d 65 3a 20 00                    m Uptime: .

00000277 <__c.2131>:
     277:	20 54 61 73 6b 20 49 44 3a 20 00                     Task ID: .

00000282 <__c.2209>:
     282:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000289 <__c.2206>:
     289:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000298 <__c.2203>:
     298:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000002a9 <__c.2200>:
     2a9:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2b9:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000002c4 <__c.2197>:
     2c4:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     2d4:	20 53 69 67 6e 61 6c 00                              Signal.

000002dc <__c.2194>:
     2dc:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     2ec:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000002fc <__c.2191>:
     2fc:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     30c:	72 6f 72 00                                         ror.

00000310 <__c.2188>:
     310:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000321 <__c.2185>:
     321:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     331:	61 72 74 00                                         art.

00000335 <__c.2182>:
     335:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000344 <__c.2179>:
     344:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     354:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000035f <__c.2176>:
     35f:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000036b <__c.2173>:
     36b:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     37b:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     38b:	20 6f 6b 3f 00                                       ok?.

00000390 <__c.2170>:
     390:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     3a0:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000003ae <__c.2167>:
     3ae:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     3be:	72 74 00                                            rt.

000003c1 <__c.2164>:
     3c1:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     3d1:	49 44 00                                            ID.

000003d4 <__c.2161>:
     3d4:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     3e4:	20 57 61 6b 65 75 70 00                              Wakeup.

000003ec <__c.2158>:
     3ec:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     3fc:	6c 61 74 65 64 00                                   lated.

00000402 <__c.2155>:
     402:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     412:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000041d <__c.2152>:
     41d:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     42d:	69 6e 74 65 72 00                                   inter.

00000433 <__c.2149>:
     433:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     443:	6c 6f 77 00                                         low.

00000447 <__c.2146>:
     447:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     457:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     467:	6e 6f 75 67 68 21 00                                nough!.

0000046e <__c.2142>:
     46e:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     47e:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     48e:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     49e:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000004aa <__c.2139>:
     4aa:	29 3a 20 00                                         ): .

000004ae <__c.2137>:
     4ae:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000004ba <__c.2062>:
     4ba:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000004c9 <__c.1851>:
     4c9:	45 46 47 65 66 67 00                                EFGefg.

000004d0 <__c.1845>:
     4d0:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000004e0 <__ctors_end>:
     4e0:	11 24       	eor	r1, r1
     4e2:	1f be       	out	0x3f, r1	; 63
     4e4:	cf ef       	ldi	r28, 0xFF	; 255
     4e6:	d1 e4       	ldi	r29, 0x41	; 65
     4e8:	de bf       	out	0x3e, r29	; 62
     4ea:	cd bf       	out	0x3d, r28	; 61

000004ec <__do_copy_data>:
     4ec:	13 e0       	ldi	r17, 0x03	; 3
     4ee:	a0 e0       	ldi	r26, 0x00	; 0
     4f0:	b2 e0       	ldi	r27, 0x02	; 2
     4f2:	e8 e6       	ldi	r30, 0x68	; 104
     4f4:	f6 e6       	ldi	r31, 0x66	; 102
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	0b bf       	out	0x3b, r16	; 59
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <__do_copy_data+0x14>
     4fc:	07 90       	elpm	r0, Z+
     4fe:	0d 92       	st	X+, r0
     500:	a8 3d       	cpi	r26, 0xD8	; 216
     502:	b1 07       	cpc	r27, r17
     504:	d9 f7       	brne	.-10     	; 0x4fc <__do_copy_data+0x10>

00000506 <__do_clear_bss>:
     506:	16 e0       	ldi	r17, 0x06	; 6
     508:	a8 ed       	ldi	r26, 0xD8	; 216
     50a:	b3 e0       	ldi	r27, 0x03	; 3
     50c:	01 c0       	rjmp	.+2      	; 0x510 <.do_clear_bss_start>

0000050e <.do_clear_bss_loop>:
     50e:	1d 92       	st	X+, r1

00000510 <.do_clear_bss_start>:
     510:	ab 3c       	cpi	r26, 0xCB	; 203
     512:	b1 07       	cpc	r27, r17
     514:	e1 f7       	brne	.-8      	; 0x50e <.do_clear_bss_loop>
     516:	0e 94 49 03 	call	0x692	; 0x692 <main>
     51a:	0c 94 32 33 	jmp	0x6664	; 0x6664 <_exit>

0000051e <__bad_interrupt>:
     51e:	0c 94 68 25 	jmp	0x4ad0	; 0x4ad0 <__vector_default>

00000522 <Task1>:
	// inside a interrupt callback
	//nrk_kprintf( PSTR("*** Timer interrupt!\r\n"));
}

void Task1()
{
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
uint16_t cnt;
uint8_t val;

printf( "My node's address is %d\r\n",NODE_ADDR );
     526:	00 d0       	rcall	.+0      	; 0x528 <Task1+0x6>
     528:	00 d0       	rcall	.+0      	; 0x52a <Task1+0x8>
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	ad b7       	in	r26, 0x3d	; 61
     530:	be b7       	in	r27, 0x3e	; 62
     532:	12 96       	adiw	r26, 0x02	; 2
     534:	9c 93       	st	X, r25
     536:	8e 93       	st	-X, r24
     538:	11 97       	sbiw	r26, 0x01	; 1
     53a:	14 96       	adiw	r26, 0x04	; 4
     53c:	1c 92       	st	X, r1
     53e:	1e 92       	st	-X, r1
     540:	13 97       	sbiw	r26, 0x03	; 3
     542:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>

  printf( "Task1 PID=%d\r\n",nrk_get_pid());
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <nrk_get_pid>
     552:	00 d0       	rcall	.+0      	; 0x554 <Task1+0x32>
     554:	00 d0       	rcall	.+0      	; 0x556 <Task1+0x34>
     556:	ed b7       	in	r30, 0x3d	; 61
     558:	fe b7       	in	r31, 0x3e	; 62
     55a:	31 96       	adiw	r30, 0x01	; 1
     55c:	2a e1       	ldi	r18, 0x1A	; 26
     55e:	32 e0       	ldi	r19, 0x02	; 2
     560:	ad b7       	in	r26, 0x3d	; 61
     562:	be b7       	in	r27, 0x3e	; 62
     564:	12 96       	adiw	r26, 0x02	; 2
     566:	3c 93       	st	X, r19
     568:	2e 93       	st	-X, r18
     56a:	11 97       	sbiw	r26, 0x01	; 1
     56c:	82 83       	std	Z+2, r24	; 0x02
     56e:	13 82       	std	Z+3, r1	; 0x03
     570:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
  // Prescaler 5 means divide sys clock by 1024
  // 16000000 / 1024 = 15625 Hz clock
  // 1 / 15625 = 0.064 ms per tick
  // 0.064 ms * 15625 = ~1000 ms / per interrupt callback

  val=nrk_timer_int_configure(NRK_APP_TIMER_0, 1, 40000, &my_timer_callback );// this will give a 400HZ timer int
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	40 e4       	ldi	r20, 0x40	; 64
     584:	5c e9       	ldi	r21, 0x9C	; 156
     586:	2c ee       	ldi	r18, 0xEC	; 236
     588:	32 e0       	ldi	r19, 0x02	; 2
     58a:	0e 94 28 25 	call	0x4a50	; 0x4a50 <nrk_timer_int_configure>
  if(val==NRK_OK) nrk_kprintf( PSTR("Callback timer setup\r\n"));
     58e:	81 30       	cpi	r24, 0x01	; 1
     590:	19 f4       	brne	.+6      	; 0x598 <Task1+0x76>
     592:	8e e6       	ldi	r24, 0x6E	; 110
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	02 c0       	rjmp	.+4      	; 0x59c <Task1+0x7a>
  else nrk_kprintf( PSTR("Error setting up timer callback\r\n"));
     598:	8c e4       	ldi	r24, 0x4C	; 76
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>

  // Zero the timer...
  nrk_timer_int_reset(NRK_APP_TIMER_0);
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <nrk_timer_int_reset>
  // Start the timer...
  nrk_timer_int_start(NRK_APP_TIMER_0);
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 1f 25 	call	0x4a3e	; 0x4a3e <nrk_timer_int_start>

  while(1) {
	cnt=nrk_timer_int_read(NRK_APP_TIMER_0);
	printf( "Task1 timer=%u\r\n",cnt );
     5ac:	c9 e2       	ldi	r28, 0x29	; 41
     5ae:	d2 e0       	ldi	r29, 0x02	; 2
  nrk_timer_int_reset(NRK_APP_TIMER_0);
  // Start the timer...
  nrk_timer_int_start(NRK_APP_TIMER_0);

  while(1) {
	cnt=nrk_timer_int_read(NRK_APP_TIMER_0);
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	0e 94 14 25 	call	0x4a28	; 0x4a28 <nrk_timer_int_read>
	printf( "Task1 timer=%u\r\n",cnt );
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <Task1+0x96>
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <Task1+0x98>
     5ba:	ed b7       	in	r30, 0x3d	; 61
     5bc:	fe b7       	in	r31, 0x3e	; 62
     5be:	d2 83       	std	Z+2, r29	; 0x02
     5c0:	c1 83       	std	Z+1, r28	; 0x01
     5c2:	94 83       	std	Z+4, r25	; 0x04
     5c4:	83 83       	std	Z+3, r24	; 0x03
     5c6:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
	nrk_wait_until_next_period();
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <nrk_wait_until_next_period>
     5d6:	ec cf       	rjmp	.-40     	; 0x5b0 <Task1+0x8e>

000005d8 <my_timer_callback>:
  return 0;
}

void my_timer_callback()
{
	nrk_led_toggle(ORANGE_LED);
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 b8 0a 	call	0x1570	; 0x1570 <nrk_led_toggle>
	//nrk_gpio_toggle(NRK_DEBUG_0);
	// Normally you should not call long functions like printf
	// inside a interrupt callback
	//nrk_kprintf( PSTR("*** Timer interrupt!\r\n"));
}
     5e0:	08 95       	ret

000005e2 <nrk_create_taskset>:


void
nrk_create_taskset()
{
  TaskOne.task = Task1;
     5e2:	81 e9       	ldi	r24, 0x91	; 145
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	90 93 e4 03 	sts	0x03E4, r25
     5ea:	80 93 e3 03 	sts	0x03E3, r24
  TaskOne.Ptos = (void *) &Stack1[NRK_APP_STACKSIZE];
     5ee:	85 e8       	ldi	r24, 0x85	; 133
     5f0:	94 e0       	ldi	r25, 0x04	; 4
     5f2:	90 93 e0 03 	sts	0x03E0, r25
     5f6:	80 93 df 03 	sts	0x03DF, r24
  TaskOne.Pbos = (void *) &Stack1[0];
     5fa:	85 e0       	ldi	r24, 0x05	; 5
     5fc:	94 e0       	ldi	r25, 0x04	; 4
     5fe:	90 93 e2 03 	sts	0x03E2, r25
     602:	80 93 e1 03 	sts	0x03E1, r24
  TaskOne.prio = 1;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	80 93 e6 03 	sts	0x03E6, r24
  TaskOne.FirstActivation = TRUE;
     60c:	80 93 e5 03 	sts	0x03E5, r24
  TaskOne.Type = BASIC_TASK;
     610:	80 93 e7 03 	sts	0x03E7, r24
  TaskOne.SchType = PREEMPTIVE;
     614:	80 93 e8 03 	sts	0x03E8, r24
  TaskOne.period.secs = 0;
     618:	10 92 e9 03 	sts	0x03E9, r1
     61c:	10 92 ea 03 	sts	0x03EA, r1
     620:	10 92 eb 03 	sts	0x03EB, r1
     624:	10 92 ec 03 	sts	0x03EC, r1
  TaskOne.period.nano_secs = 250*NANOS_PER_MS;
     628:	80 e8       	ldi	r24, 0x80	; 128
     62a:	92 eb       	ldi	r25, 0xB2	; 178
     62c:	a6 ee       	ldi	r26, 0xE6	; 230
     62e:	be e0       	ldi	r27, 0x0E	; 14
     630:	80 93 ed 03 	sts	0x03ED, r24
     634:	90 93 ee 03 	sts	0x03EE, r25
     638:	a0 93 ef 03 	sts	0x03EF, r26
     63c:	b0 93 f0 03 	sts	0x03F0, r27
  TaskOne.cpu_reserve.secs = 0;
     640:	10 92 f1 03 	sts	0x03F1, r1
     644:	10 92 f2 03 	sts	0x03F2, r1
     648:	10 92 f3 03 	sts	0x03F3, r1
     64c:	10 92 f4 03 	sts	0x03F4, r1
  TaskOne.cpu_reserve.nano_secs =  50*NANOS_PER_MS;
     650:	80 e8       	ldi	r24, 0x80	; 128
     652:	90 ef       	ldi	r25, 0xF0	; 240
     654:	aa ef       	ldi	r26, 0xFA	; 250
     656:	b2 e0       	ldi	r27, 0x02	; 2
     658:	80 93 f5 03 	sts	0x03F5, r24
     65c:	90 93 f6 03 	sts	0x03F6, r25
     660:	a0 93 f7 03 	sts	0x03F7, r26
     664:	b0 93 f8 03 	sts	0x03F8, r27
  TaskOne.offset.secs = 0;
     668:	10 92 f9 03 	sts	0x03F9, r1
     66c:	10 92 fa 03 	sts	0x03FA, r1
     670:	10 92 fb 03 	sts	0x03FB, r1
     674:	10 92 fc 03 	sts	0x03FC, r1
  TaskOne.offset.nano_secs= 0;
     678:	10 92 fd 03 	sts	0x03FD, r1
     67c:	10 92 fe 03 	sts	0x03FE, r1
     680:	10 92 ff 03 	sts	0x03FF, r1
     684:	10 92 00 04 	sts	0x0400, r1
  nrk_activate_task (&TaskOne);
     688:	8e ed       	ldi	r24, 0xDE	; 222
     68a:	93 e0       	ldi	r25, 0x03	; 3
     68c:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_activate_task>
  nrk_activate_task (&TaskThree);*/




}
     690:	08 95       	ret

00000692 <main>:
int
main ()
{
  uint8_t t;
  
  nrk_setup_ports();
     692:	0e 94 77 07 	call	0xeee	; 0xeee <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
     696:	80 e1       	ldi	r24, 0x10	; 16
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <nrk_setup_uart>
  
  nrk_kprintf( PSTR("Starting up...\r\n") );
     69e:	85 e8       	ldi	r24, 0x85	; 133
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>

  nrk_init();
     6a6:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_init>

 
  nrk_time_set(0,0);
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	cb 01       	movw	r24, r22
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	a9 01       	movw	r20, r18
     6b6:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <nrk_time_set>
  nrk_create_taskset ();
     6ba:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <nrk_create_taskset>
  nrk_start();
     6be:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <nrk_start>
  return 0;
}
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	08 95       	ret

000006c8 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     6c8:	90 91 41 01 	lds	r25, 0x0141
     6cc:	9f 71       	andi	r25, 0x1F	; 31
     6ce:	9f 31       	cpi	r25, 0x1F	; 31
     6d0:	d9 f3       	breq	.-10     	; 0x6c8 <rf_cmd>
		continue;
	TRX_STATE = cmd;
     6d2:	80 93 42 01 	sts	0x0142, r24
}
     6d6:	08 95       	ret

000006d8 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     6d8:	80 91 41 01 	lds	r24, 0x0141
     6dc:	8f 71       	andi	r24, 0x1F	; 31
     6de:	8f 31       	cpi	r24, 0x1F	; 31
     6e0:	d9 f3       	breq	.-10     	; 0x6d8 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     6e2:	80 91 41 01 	lds	r24, 0x0141
     6e6:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     6e8:	d1 f0       	breq	.+52     	; 0x71e <rf_power_down+0x46>
     6ea:	8f 30       	cpi	r24, 0x0F	; 15
     6ec:	c1 f0       	breq	.+48     	; 0x71e <rf_power_down+0x46>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     6ee:	80 91 41 01 	lds	r24, 0x0141
     6f2:	8f 71       	andi	r24, 0x1F	; 31
     6f4:	88 30       	cpi	r24, 0x08	; 8
     6f6:	41 f0       	breq	.+16     	; 0x708 <rf_power_down+0x30>
		rf_cmd(TRX_OFF);
     6f8:	88 e0       	ldi	r24, 0x08	; 8
     6fa:	0e 94 64 03 	call	0x6c8	; 0x6c8 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     6fe:	80 91 41 01 	lds	r24, 0x0141
     702:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     704:	88 30       	cpi	r24, 0x08	; 8
     706:	d9 f7       	brne	.-10     	; 0x6fe <rf_power_down+0x26>
	}

	TRXPR |= (1 << SLPTR);
     708:	80 91 39 01 	lds	r24, 0x0139
     70c:	82 60       	ori	r24, 0x02	; 2
     70e:	80 93 39 01 	sts	0x0139, r24
	do{
		status = (TRX_STATUS & 0x1F);
     712:	80 91 41 01 	lds	r24, 0x0141
     716:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     718:	11 f0       	breq	.+4      	; 0x71e <rf_power_down+0x46>
     71a:	8f 30       	cpi	r24, 0x0F	; 15
     71c:	d1 f7       	brne	.-12     	; 0x712 <rf_power_down+0x3a>
     71e:	08 95       	ret

00000720 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     720:	80 91 41 01 	lds	r24, 0x0141
     724:	8f 71       	andi	r24, 0x1F	; 31
     726:	8f 31       	cpi	r24, 0x1F	; 31
     728:	d9 f3       	breq	.-10     	; 0x720 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     72a:	80 91 41 01 	lds	r24, 0x0141
     72e:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     730:	11 f0       	breq	.+4      	; 0x736 <rf_power_up+0x16>
     732:	8f 30       	cpi	r24, 0x0F	; 15
     734:	51 f4       	brne	.+20     	; 0x74a <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     736:	80 91 39 01 	lds	r24, 0x0139
     73a:	8d 7f       	andi	r24, 0xFD	; 253
     73c:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     740:	80 91 41 01 	lds	r24, 0x0141
     744:	8f 71       	andi	r24, 0x1F	; 31
     746:	88 30       	cpi	r24, 0x08	; 8
     748:	d9 f7       	brne	.-10     	; 0x740 <rf_power_up+0x20>
     74a:	08 95       	ret

0000074c <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     74c:	e5 e4       	ldi	r30, 0x45	; 69
     74e:	f1 e0       	ldi	r31, 0x01	; 1
     750:	90 81       	ld	r25, Z
     752:	90 7f       	andi	r25, 0xF0	; 240
     754:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     756:	90 81       	ld	r25, Z
     758:	8f 70       	andi	r24, 0x0F	; 15
     75a:	89 2b       	or	r24, r25
     75c:	80 83       	st	Z, r24
}
     75e:	08 95       	ret

00000760 <rf_addr_decode_enable>:

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     760:	e7 e5       	ldi	r30, 0x57	; 87
     762:	f1 e0       	ldi	r31, 0x01	; 1
     764:	80 81       	ld	r24, Z
     766:	8d 7f       	andi	r24, 0xFD	; 253
     768:	80 83       	st	Z, r24
}
     76a:	08 95       	ret

0000076c <rf_addr_decode_disable>:


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     76c:	e7 e5       	ldi	r30, 0x57	; 87
     76e:	f1 e0       	ldi	r31, 0x01	; 1
     770:	80 81       	ld	r24, Z
     772:	82 60       	ori	r24, 0x02	; 2
     774:	80 83       	st	Z, r24
}
     776:	08 95       	ret

00000778 <rf_auto_ack_enable>:


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     778:	ee e6       	ldi	r30, 0x6E	; 110
     77a:	f1 e0       	ldi	r31, 0x01	; 1
     77c:	80 81       	ld	r24, Z
     77e:	8f 7e       	andi	r24, 0xEF	; 239
     780:	80 83       	st	Z, r24
}
     782:	08 95       	ret

00000784 <rf_auto_ack_disable>:

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     784:	ee e6       	ldi	r30, 0x6E	; 110
     786:	f1 e0       	ldi	r31, 0x01	; 1
     788:	80 81       	ld	r24, Z
     78a:	80 61       	ori	r24, 0x10	; 16
     78c:	80 83       	st	Z, r24
}
     78e:	08 95       	ret

00000790 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     790:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     794:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     798:	90 93 19 05 	sts	0x0519, r25
     79c:	80 93 18 05 	sts	0x0518, r24
}
     7a0:	08 95       	ret

000007a2 <rf_set_rx>:


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     7a2:	90 93 13 05 	sts	0x0513, r25
     7a6:	80 93 12 05 	sts	0x0512, r24
	PHY_CC_CCA &= ~(0x1F);
     7aa:	e8 e4       	ldi	r30, 0x48	; 72
     7ac:	f1 e0       	ldi	r31, 0x01	; 1
     7ae:	80 81       	ld	r24, Z
     7b0:	80 7e       	andi	r24, 0xE0	; 224
     7b2:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     7b4:	80 81       	ld	r24, Z
     7b6:	68 2b       	or	r22, r24
     7b8:	60 83       	st	Z, r22
}
     7ba:	08 95       	ret

000007bc <rx_start_callback>:

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     7bc:	90 93 d9 03 	sts	0x03D9, r25
     7c0:	80 93 d8 03 	sts	0x03D8, r24
}
     7c4:	08 95       	ret

000007c6 <rf_init>:


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     7c6:	1f 93       	push	r17

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     7c8:	70 e2       	ldi	r23, 0x20	; 32
     7ca:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     7ce:	70 ec       	ldi	r23, 0xC0	; 192
     7d0:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     7d4:	60 62       	ori	r22, 0x20	; 32
     7d6:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     7da:	65 ec       	ldi	r22, 0xC5	; 197
     7dc:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     7e0:	67 ea       	ldi	r22, 0xA7	; 167
     7e2:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     7e6:	60 e8       	ldi	r22, 0x80	; 128
     7e8:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     7ec:	20 93 60 01 	sts	0x0160, r18
     7f0:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     7f4:	40 93 62 01 	sts	0x0162, r20
     7f8:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     7fc:	e6 e4       	ldi	r30, 0x46	; 70
     7fe:	f1 e0       	ldi	r31, 0x01	; 1
     800:	10 81       	ld	r17, Z
     802:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     804:	60 81       	ld	r22, Z
     806:	70 81       	ld	r23, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     808:	12 95       	swap	r17
     80a:	16 95       	lsr	r17
     80c:	17 70       	andi	r17, 0x07	; 7
     80e:	12 95       	swap	r17
     810:	11 0f       	add	r17, r17
     812:	11 0f       	add	r17, r17
     814:	10 7c       	andi	r17, 0xC0	; 192
     816:	72 95       	swap	r23
     818:	76 95       	lsr	r23
     81a:	73 70       	andi	r23, 0x03	; 3
     81c:	17 2b       	or	r17, r23
     81e:	a2 95       	swap	r26
     820:	a6 95       	lsr	r26
     822:	a7 70       	andi	r26, 0x07	; 7
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	a3 70       	andi	r26, 0x03	; 3
     828:	b0 70       	andi	r27, 0x00	; 0
     82a:	74 e0       	ldi	r23, 0x04	; 4
     82c:	aa 0f       	add	r26, r26
     82e:	bb 1f       	adc	r27, r27
     830:	7a 95       	dec	r23
     832:	e1 f7       	brne	.-8      	; 0x82c <rf_init+0x66>
     834:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     836:	62 95       	swap	r22
     838:	66 95       	lsr	r22
     83a:	67 70       	andi	r22, 0x07	; 7
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	63 70       	andi	r22, 0x03	; 3
     840:	70 70       	andi	r23, 0x00	; 0
     842:	66 0f       	add	r22, r22
     844:	77 1f       	adc	r23, r23
     846:	66 0f       	add	r22, r22
     848:	77 1f       	adc	r23, r23
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     84a:	16 2b       	or	r17, r22
     84c:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     850:	60 81       	ld	r22, Z
     852:	e0 81       	ld	r30, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     854:	e2 95       	swap	r30
     856:	e6 95       	lsr	r30
     858:	e3 70       	andi	r30, 0x03	; 3
     85a:	e0 64       	ori	r30, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     85c:	62 95       	swap	r22
     85e:	66 95       	lsr	r22
     860:	67 70       	andi	r22, 0x07	; 7
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	63 70       	andi	r22, 0x03	; 3
     866:	70 70       	andi	r23, 0x00	; 0
     868:	66 0f       	add	r22, r22
     86a:	77 1f       	adc	r23, r23
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     86c:	e6 2b       	or	r30, r22
     86e:	e0 93 6e 01 	sts	0x016E, r30
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     872:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     876:	6f ef       	ldi	r22, 0xFF	; 255
     878:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     87c:	90 93 13 05 	sts	0x0513, r25
     880:	80 93 12 05 	sts	0x0512, r24
	rfSettings.txSeqNumber = 0;
     884:	10 92 14 05 	sts	0x0514, r1
	rfSettings.ackReceived = 0;
     888:	10 92 15 05 	sts	0x0515, r1
	rfSettings.panId = panId;
     88c:	50 93 17 05 	sts	0x0517, r21
     890:	40 93 16 05 	sts	0x0516, r20
	rfSettings.myAddr = myAddr;
     894:	30 93 19 05 	sts	0x0519, r19
     898:	20 93 18 05 	sts	0x0518, r18
	rfSettings.receiveOn = 0;
     89c:	10 92 1a 05 	sts	0x051A, r1

	rf_ready = 1;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 24 05 	sts	0x0524, r24
	rx_ready = 0;
     8a6:	10 92 33 05 	sts	0x0533, r1
	tx_done = 0;
     8aa:	10 92 23 05 	sts	0x0523, r1

} // rf_init() 
     8ae:	1f 91       	pop	r17
     8b0:	08 95       	ret

000008b2 <rf_rx_on>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
	rf_cmd(RX_AACK_ON);
     8b2:	86 e1       	ldi	r24, 0x16	; 22
     8b4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <rf_cmd>
}
     8b8:	08 95       	ret

000008ba <rf_polling_rx_on>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
	rf_cmd(RX_AACK_ON);
     8ba:	86 e1       	ldi	r24, 0x16	; 22
     8bc:	0e 94 64 03 	call	0x6c8	; 0x6c8 <rf_cmd>
}
     8c0:	08 95       	ret

000008c2 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
     8c2:	88 e0       	ldi	r24, 0x08	; 8
     8c4:	0e 94 64 03 	call	0x6c8	; 0x6c8 <rf_cmd>
	rx_ready = 0;
     8c8:	10 92 33 05 	sts	0x0533, r1
}
     8cc:	08 95       	ret

000008ce <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
     8ce:	2f 92       	push	r2
     8d0:	3f 92       	push	r3
     8d2:	4f 92       	push	r4
     8d4:	5f 92       	push	r5
     8d6:	7f 92       	push	r7
     8d8:	8f 92       	push	r8
     8da:	9f 92       	push	r9
     8dc:	af 92       	push	r10
     8de:	bf 92       	push	r11
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	ec 01       	movw	r28, r24
     8f2:	1b 01       	movw	r2, r22
	

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready)
     8f4:	80 91 24 05 	lds	r24, 0x0524
     8f8:	88 23       	and	r24, r24
     8fa:	09 f4       	brne	.+2      	; 0x8fe <rf_tx_packet_repeat+0x30>
     8fc:	01 c1       	rjmp	.+514    	; 0xb00 <rf_tx_packet_repeat+0x232>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     8fe:	8e 81       	ldd	r24, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     900:	90 91 14 05 	lds	r25, 0x0514
     904:	9f 5f       	subi	r25, 0xFF	; 255
     906:	90 93 14 05 	sts	0x0514, r25
	machead->fcf = fcf;
     90a:	e1 e8       	ldi	r30, 0x81	; 129
     90c:	f1 e0       	ldi	r31, 0x01	; 1
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     90e:	81 70       	andi	r24, 0x01	; 1
     910:	82 95       	swap	r24
     912:	88 0f       	add	r24, r24
     914:	80 72       	andi	r24, 0x20	; 32
     916:	81 64       	ori	r24, 0x41	; 65
     918:	80 93 81 01 	sts	0x0181, r24
     91c:	88 e8       	ldi	r24, 0x88	; 136
     91e:	81 83       	std	Z+1, r24	; 0x01
	machead->fcf = fcf;
	machead->seq_num = rfSettings.txSeqNumber;
     920:	80 91 14 05 	lds	r24, 0x0514
     924:	82 83       	std	Z+2, r24	; 0x02
	machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     926:	90 91 63 01 	lds	r25, 0x0163
     92a:	80 91 62 01 	lds	r24, 0x0162
     92e:	39 2f       	mov	r19, r25
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	82 2b       	or	r24, r18
     936:	93 2b       	or	r25, r19
     938:	94 83       	std	Z+4, r25	; 0x04
     93a:	83 83       	std	Z+3, r24	; 0x03
	machead->dest_addr = pRTI->destAddr;
     93c:	88 81       	ld	r24, Y
     93e:	99 81       	ldd	r25, Y+1	; 0x01
     940:	96 83       	std	Z+6, r25	; 0x06
     942:	85 83       	std	Z+5, r24	; 0x05
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     944:	90 91 61 01 	lds	r25, 0x0161
     948:	80 91 60 01 	lds	r24, 0x0160
     94c:	39 2f       	mov	r19, r25
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	82 2b       	or	r24, r18
     954:	93 2b       	or	r25, r19
     956:	90 87       	std	Z+8, r25	; 0x08
     958:	87 83       	std	Z+7, r24	; 0x07
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     95a:	4a 81       	ldd	r20, Y+2	; 0x02
     95c:	24 2f       	mov	r18, r20
     95e:	33 27       	eor	r19, r19
     960:	27 fd       	sbrc	r18, 7
     962:	30 95       	com	r19
     964:	6b 81       	ldd	r22, Y+3	; 0x03
     966:	7c 81       	ldd	r23, Y+4	; 0x04
     968:	8a e8       	ldi	r24, 0x8A	; 138
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	53 2f       	mov	r21, r19
     96e:	0e 94 9d 30 	call	0x613a	; 0x613a <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     972:	8a 81       	ldd	r24, Y+2	; 0x02
     974:	85 5f       	subi	r24, 0xF5	; 245
     976:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     97a:	70 90 41 01 	lds	r7, 0x0141
     97e:	8f e1       	ldi	r24, 0x1F	; 31
     980:	78 22       	and	r7, r24
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     982:	87 2d       	mov	r24, r7
     984:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	c0 f3       	brcs	.-16     	; 0x97a <rf_tx_packet_repeat+0xac>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     98a:	87 2d       	mov	r24, r7
     98c:	81 31       	cpi	r24, 0x11	; 17
     98e:	a9 f3       	breq	.-22     	; 0x97a <rf_tx_packet_repeat+0xac>
     990:	82 31       	cpi	r24, 0x12	; 18
     992:	99 f3       	breq	.-26     	; 0x97a <rf_tx_packet_repeat+0xac>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     994:	8f 31       	cpi	r24, 0x1F	; 31
     996:	89 f3       	breq	.-30     	; 0x97a <rf_tx_packet_repeat+0xac>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     998:	88 30       	cpi	r24, 0x08	; 8
     99a:	39 f0       	breq	.+14     	; 0x9aa <rf_tx_packet_repeat+0xdc>
     99c:	86 30       	cpi	r24, 0x06	; 6
     99e:	29 f0       	breq	.+10     	; 0x9aa <rf_tx_packet_repeat+0xdc>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
     9a0:	86 31       	cpi	r24, 0x16	; 22
     9a2:	19 f0       	breq	.+6      	; 0x9aa <rf_tx_packet_repeat+0xdc>
     9a4:	89 30       	cpi	r24, 0x09	; 9
     9a6:	09 f0       	breq	.+2      	; 0x9aa <rf_tx_packet_repeat+0xdc>
     9a8:	ab c0       	rjmp	.+342    	; 0xb00 <rf_tx_packet_repeat+0x232>
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     9aa:	86 e1       	ldi	r24, 0x16	; 22
     9ac:	0e 94 64 03 	call	0x6c8	; 0x6c8 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     9b0:	8d 81       	ldd	r24, Y+5	; 0x05
     9b2:	88 23       	and	r24, r24
     9b4:	69 f0       	breq	.+26     	; 0x9d0 <rf_tx_packet_repeat+0x102>
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     9b6:	80 91 48 01 	lds	r24, 0x0148
     9ba:	80 68       	ori	r24, 0x80	; 128
     9bc:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     9c0:	80 91 41 01 	lds	r24, 0x0141
     9c4:	87 ff       	sbrs	r24, 7
     9c6:	fc cf       	rjmp	.-8      	; 0x9c0 <rf_tx_packet_repeat+0xf2>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     9c8:	80 91 41 01 	lds	r24, 0x0141
     9cc:	86 ff       	sbrs	r24, 6
     9ce:	98 c0       	rjmp	.+304    	; 0xb00 <rf_tx_packet_repeat+0x232>
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     9d0:	89 e0       	ldi	r24, 0x09	; 9
     9d2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <rf_cmd>
	if(pRTI->ackRequest)
     9d6:	8e 81       	ldd	r24, Y+6	; 0x06
     9d8:	88 23       	and	r24, r24
     9da:	19 f0       	breq	.+6      	; 0x9e2 <rf_tx_packet_repeat+0x114>
		rf_cmd(TX_ARET_ON);
     9dc:	89 e1       	ldi	r24, 0x19	; 25
     9de:	0e 94 64 03 	call	0x6c8	; 0x6c8 <rf_cmd>
	
	if(ms != 0){
     9e2:	21 14       	cp	r2, r1
     9e4:	31 04       	cpc	r3, r1
     9e6:	a9 f1       	breq	.+106    	; 0xa52 <rf_tx_packet_repeat+0x184>
		nrk_time_get(&curr_t);
     9e8:	8b e1       	ldi	r24, 0x1B	; 27
     9ea:	95 e0       	ldi	r25, 0x05	; 5
     9ec:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <nrk_time_get>
		target_t.secs = curr_t.secs;
     9f0:	80 91 1b 05 	lds	r24, 0x051B
     9f4:	90 91 1c 05 	lds	r25, 0x051C
     9f8:	a0 91 1d 05 	lds	r26, 0x051D
     9fc:	b0 91 1e 05 	lds	r27, 0x051E
     a00:	80 93 25 05 	sts	0x0525, r24
     a04:	90 93 26 05 	sts	0x0526, r25
     a08:	a0 93 27 05 	sts	0x0527, r26
     a0c:	b0 93 28 05 	sts	0x0528, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
     a10:	b1 01       	movw	r22, r2
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	20 e4       	ldi	r18, 0x40	; 64
     a18:	32 e4       	ldi	r19, 0x42	; 66
     a1a:	4f e0       	ldi	r20, 0x0F	; 15
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
     a22:	20 91 1f 05 	lds	r18, 0x051F
     a26:	30 91 20 05 	lds	r19, 0x0520
     a2a:	40 91 21 05 	lds	r20, 0x0521
     a2e:	50 91 22 05 	lds	r21, 0x0522
     a32:	62 0f       	add	r22, r18
     a34:	73 1f       	adc	r23, r19
     a36:	84 1f       	adc	r24, r20
     a38:	95 1f       	adc	r25, r21
     a3a:	60 93 29 05 	sts	0x0529, r22
     a3e:	70 93 2a 05 	sts	0x052A, r23
     a42:	80 93 2b 05 	sts	0x052B, r24
     a46:	90 93 2c 05 	sts	0x052C, r25
		nrk_time_compact_nanos(&target_t);
     a4a:	85 e2       	ldi	r24, 0x25	; 37
     a4c:	95 e0       	ldi	r25, 0x05	; 5
     a4e:	0e 94 75 1f 	call	0x3eea	; 0x3eea <nrk_time_compact_nanos>
	}
	
	do{
		tx_done = 0;
     a52:	10 92 23 05 	sts	0x0523, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	0e 94 64 03 	call	0x6c8	; 0x6c8 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
     a5c:	44 24       	eor	r4, r4
     a5e:	55 24       	eor	r5, r5
     a60:	08 c0       	rjmp	.+16     	; 0xa72 <rf_tx_packet_repeat+0x1a4>
     a62:	08 94       	sec
     a64:	41 1c       	adc	r4, r1
     a66:	51 1c       	adc	r5, r1
     a68:	88 ee       	ldi	r24, 0xE8	; 232
     a6a:	48 16       	cp	r4, r24
     a6c:	8d ef       	ldi	r24, 0xFD	; 253
     a6e:	58 06       	cpc	r5, r24
     a70:	21 f0       	breq	.+8      	; 0xa7a <rf_tx_packet_repeat+0x1ac>
     a72:	80 91 23 05 	lds	r24, 0x0523
     a76:	88 23       	and	r24, r24
     a78:	a1 f3       	breq	.-24     	; 0xa62 <rf_tx_packet_repeat+0x194>
			continue;
		if(ms == 0)
     a7a:	21 14       	cp	r2, r1
     a7c:	31 04       	cpc	r3, r1
     a7e:	59 f1       	breq	.+86     	; 0xad6 <rf_tx_packet_repeat+0x208>
			break;
		nrk_time_get(&curr_t);
     a80:	8b e1       	ldi	r24, 0x1B	; 27
     a82:	95 e0       	ldi	r25, 0x05	; 5
     a84:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
     a88:	84 e3       	ldi	r24, 0x34	; 52
     a8a:	95 e0       	ldi	r25, 0x05	; 5
     a8c:	00 91 25 05 	lds	r16, 0x0525
     a90:	10 91 26 05 	lds	r17, 0x0526
     a94:	20 91 27 05 	lds	r18, 0x0527
     a98:	30 91 28 05 	lds	r19, 0x0528
     a9c:	40 91 29 05 	lds	r20, 0x0529
     aa0:	50 91 2a 05 	lds	r21, 0x052A
     aa4:	60 91 2b 05 	lds	r22, 0x052B
     aa8:	70 91 2c 05 	lds	r23, 0x052C
     aac:	80 90 1b 05 	lds	r8, 0x051B
     ab0:	90 90 1c 05 	lds	r9, 0x051C
     ab4:	a0 90 1d 05 	lds	r10, 0x051D
     ab8:	b0 90 1e 05 	lds	r11, 0x051E
     abc:	c0 90 1f 05 	lds	r12, 0x051F
     ac0:	d0 90 20 05 	lds	r13, 0x0520
     ac4:	e0 90 21 05 	lds	r14, 0x0521
     ac8:	f0 90 22 05 	lds	r15, 0x0522
     acc:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_time_sub>
     ad0:	8f 3f       	cpi	r24, 0xFF	; 255
     ad2:	09 f0       	breq	.+2      	; 0xad6 <rf_tx_packet_repeat+0x208>
     ad4:	be cf       	rjmp	.-132    	; 0xa52 <rf_tx_packet_repeat+0x184>

	trx_error = ((pRTI->ackRequest && 
     ad6:	8e 81       	ldd	r24, Y+6	; 0x06
     ad8:	88 23       	and	r24, r24
     ada:	31 f0       	breq	.+12     	; 0xae8 <rf_tx_packet_repeat+0x21a>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     adc:	80 91 42 01 	lds	r24, 0x0142
     ae0:	82 95       	swap	r24
     ae2:	86 95       	lsr	r24
     ae4:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     ae6:	29 f4       	brne	.+10     	; 0xaf2 <rf_tx_packet_repeat+0x224>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     ae8:	88 ee       	ldi	r24, 0xE8	; 232
     aea:	48 16       	cp	r4, r24
     aec:	8d ef       	ldi	r24, 0xFD	; 253
     aee:	58 06       	cpc	r5, r24
     af0:	11 f4       	brne	.+4      	; 0xaf6 <rf_tx_packet_repeat+0x228>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
     af2:	1f ef       	ldi	r17, 0xFF	; 255
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <rf_tx_packet_repeat+0x22a>
     af6:	11 e0       	ldi	r17, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     af8:	87 2d       	mov	r24, r7
     afa:	0e 94 64 03 	call	0x6c8	; 0x6c8 <rf_cmd>

	return trx_error;
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <rf_tx_packet_repeat+0x234>
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
		while(!(TRX_STATUS & (1 << CCA_DONE)))
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
     b00:	1f ef       	ldi	r17, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);

	return trx_error;
}
     b02:	81 2f       	mov	r24, r17
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	bf 90       	pop	r11
     b16:	af 90       	pop	r10
     b18:	9f 90       	pop	r9
     b1a:	8f 90       	pop	r8
     b1c:	7f 90       	pop	r7
     b1e:	5f 90       	pop	r5
     b20:	4f 90       	pop	r4
     b22:	3f 90       	pop	r3
     b24:	2f 90       	pop	r2
     b26:	08 95       	ret

00000b28 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	0e 94 67 04 	call	0x8ce	; 0x8ce <rf_tx_packet_repeat>
}
     b30:	08 95       	ret

00000b32 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     b36:	80 91 24 05 	lds	r24, 0x0524
     b3a:	88 23       	and	r24, r24
     b3c:	49 f1       	breq	.+82     	; 0xb90 <rf_cca_check+0x5e>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     b3e:	10 91 41 01 	lds	r17, 0x0141
     b42:	1f 71       	andi	r17, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     b44:	81 2f       	mov	r24, r17
     b46:	81 50       	subi	r24, 0x01	; 1
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	c8 f3       	brcs	.-14     	; 0xb3e <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     b4c:	11 31       	cpi	r17, 0x11	; 17
     b4e:	b9 f3       	breq	.-18     	; 0xb3e <rf_cca_check+0xc>
     b50:	12 31       	cpi	r17, 0x12	; 18
     b52:	a9 f3       	breq	.-22     	; 0xb3e <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     b54:	1f 31       	cpi	r17, 0x1F	; 31
     b56:	99 f3       	breq	.-26     	; 0xb3e <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     b58:	18 30       	cpi	r17, 0x08	; 8
     b5a:	21 f0       	breq	.+8      	; 0xb64 <rf_cca_check+0x32>
     b5c:	16 30       	cpi	r17, 0x06	; 6
     b5e:	11 f0       	breq	.+4      	; 0xb64 <rf_cca_check+0x32>
			&& (trx_status != RX_AACK_ON))
     b60:	16 31       	cpi	r17, 0x16	; 22
     b62:	b1 f4       	brne	.+44     	; 0xb90 <rf_cca_check+0x5e>
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     b64:	86 e1       	ldi	r24, 0x16	; 22
     b66:	0e 94 64 03 	call	0x6c8	; 0x6c8 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     b6a:	80 91 48 01 	lds	r24, 0x0148
     b6e:	80 68       	ori	r24, 0x80	; 128
     b70:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     b74:	80 91 41 01 	lds	r24, 0x0141
     b78:	87 ff       	sbrs	r24, 7
     b7a:	fc cf       	rjmp	.-8      	; 0xb74 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     b7c:	00 91 41 01 	lds	r16, 0x0141
	rf_cmd(trx_status);
     b80:	81 2f       	mov	r24, r17
     b82:	0e 94 64 03 	call	0x6c8	; 0x6c8 <rf_cmd>

	return cca_value;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	06 fd       	sbrc	r16, 6
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <rf_cca_check+0x60>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <rf_cca_check+0x60>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
     b90:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	08 95       	ret

00000b98 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
     b98:	80 91 24 05 	lds	r24, 0x0524
     b9c:	88 23       	and	r24, r24
     b9e:	09 f4       	brne	.+2      	; 0xba2 <rf_rx_packet_nonblock+0xa>
     ba0:	84 c0       	rjmp	.+264    	; 0xcaa <rf_rx_packet_nonblock+0x112>
		return NRK_ERROR;

	if(!rx_ready)
     ba2:	80 91 33 05 	lds	r24, 0x0533
     ba6:	88 23       	and	r24, r24
     ba8:	09 f4       	brne	.+2      	; 0xbac <rf_rx_packet_nonblock+0x14>
     baa:	81 c0       	rjmp	.+258    	; 0xcae <rf_rx_packet_nonblock+0x116>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
     bac:	80 91 7b 01 	lds	r24, 0x017B
     bb0:	e0 91 12 05 	lds	r30, 0x0512
     bb4:	f0 91 13 05 	lds	r31, 0x0513
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 97       	sbiw	r24, 0x02	; 2
     bbc:	24 81       	ldd	r18, Z+4	; 0x04
     bbe:	33 27       	eor	r19, r19
     bc0:	27 fd       	sbrc	r18, 7
     bc2:	30 95       	com	r19
     bc4:	28 17       	cp	r18, r24
     bc6:	39 07       	cpc	r19, r25
     bc8:	0c f4       	brge	.+2      	; 0xbcc <rf_rx_packet_nonblock+0x34>
     bca:	73 c0       	rjmp	.+230    	; 0xcb2 <rf_rx_packet_nonblock+0x11a>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     bcc:	e0 91 12 05 	lds	r30, 0x0512
     bd0:	f0 91 13 05 	lds	r31, 0x0513
     bd4:	80 91 82 01 	lds	r24, 0x0182
     bd8:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     bda:	e0 91 12 05 	lds	r30, 0x0512
     bde:	f0 91 13 05 	lds	r31, 0x0513
     be2:	80 91 87 01 	lds	r24, 0x0187
     be6:	90 91 88 01 	lds	r25, 0x0188
     bea:	92 83       	std	Z+2, r25	; 0x02
     bec:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     bee:	e0 91 12 05 	lds	r30, 0x0512
     bf2:	f0 91 13 05 	lds	r31, 0x0513
     bf6:	80 91 7b 01 	lds	r24, 0x017B
     bfa:	8b 50       	subi	r24, 0x0B	; 11
     bfc:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     bfe:	a0 91 12 05 	lds	r26, 0x0512
     c02:	b0 91 13 05 	lds	r27, 0x0513
     c06:	e0 91 12 05 	lds	r30, 0x0512
     c0a:	f0 91 13 05 	lds	r31, 0x0513
     c0e:	13 96       	adiw	r26, 0x03	; 3
     c10:	9c 91       	ld	r25, X
     c12:	13 97       	sbiw	r26, 0x03	; 3
     c14:	84 81       	ldd	r24, Z+4	; 0x04
     c16:	89 17       	cp	r24, r25
     c18:	3c f0       	brlt	.+14     	; 0xc28 <rf_rx_packet_nonblock+0x90>
			|| (rfSettings.pRxInfo->length < 0)){
     c1a:	e0 91 12 05 	lds	r30, 0x0512
     c1e:	f0 91 13 05 	lds	r31, 0x0513
     c22:	83 81       	ldd	r24, Z+3	; 0x03
     c24:	87 ff       	sbrs	r24, 7
     c26:	0d c0       	rjmp	.+26     	; 0xc42 <rf_rx_packet_nonblock+0xaa>
		rx_ready = 0;
     c28:	10 92 33 05 	sts	0x0533, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     c2c:	80 91 4c 01 	lds	r24, 0x014C
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     c36:	80 91 4c 01 	lds	r24, 0x014C
     c3a:	80 68       	ori	r24, 0x80	; 128
     c3c:	80 93 4c 01 	sts	0x014C, r24
     c40:	34 c0       	rjmp	.+104    	; 0xcaa <rf_rx_packet_nonblock+0x112>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     c42:	e0 91 12 05 	lds	r30, 0x0512
     c46:	f0 91 13 05 	lds	r31, 0x0513
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     c4a:	a0 91 12 05 	lds	r26, 0x0512
     c4e:	b0 91 13 05 	lds	r27, 0x0513
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     c52:	13 96       	adiw	r26, 0x03	; 3
     c54:	4c 91       	ld	r20, X
     c56:	24 2f       	mov	r18, r20
     c58:	33 27       	eor	r19, r19
     c5a:	27 fd       	sbrc	r18, 7
     c5c:	30 95       	com	r19
     c5e:	85 81       	ldd	r24, Z+5	; 0x05
     c60:	96 81       	ldd	r25, Z+6	; 0x06
     c62:	69 e8       	ldi	r22, 0x89	; 137
     c64:	71 e0       	ldi	r23, 0x01	; 1
     c66:	53 2f       	mov	r21, r19
     c68:	0e 94 9d 30 	call	0x613a	; 0x613a <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     c6c:	e0 91 12 05 	lds	r30, 0x0512
     c70:	f0 91 13 05 	lds	r31, 0x0513
     c74:	80 91 80 01 	lds	r24, 0x0180
     c78:	82 95       	swap	r24
     c7a:	86 95       	lsr	r24
     c7c:	81 70       	andi	r24, 0x01	; 1
     c7e:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     c80:	e0 91 12 05 	lds	r30, 0x0512
     c84:	f0 91 13 05 	lds	r31, 0x0513
     c88:	80 91 47 01 	lds	r24, 0x0147
     c8c:	80 87       	std	Z+8, r24	; 0x08

	/* Reset frame buffer protection */
	rx_ready = 0;
     c8e:	10 92 33 05 	sts	0x0533, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     c92:	80 91 4c 01 	lds	r24, 0x014C
     c96:	8f 77       	andi	r24, 0x7F	; 127
     c98:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     c9c:	80 91 4c 01 	lds	r24, 0x014C
     ca0:	80 68       	ori	r24, 0x80	; 128
     ca2:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	08 95       	ret

	if(!rx_ready)
		return 0;
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	08 95       	ret
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
		return NRK_ERROR;
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
     cb4:	08 95       	ret

00000cb6 <__vector_60>:


SIGNAL(TRX24_RX_END_vect)
{	
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	11 24       	eor	r1, r1
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <__vector_60+0x14>
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
     cca:	90 91 7b 01 	lds	r25, 0x017B
     cce:	89 17       	cp	r24, r25
     cd0:	d8 f3       	brcs	.-10     	; 0xcc8 <__vector_60+0x12>
			vprintf("\r\n");
	}
	vprintf("\r\n");


	if((PHY_RSSI >> RX_CRC_VALID) & 0x1)
     cd2:	80 91 46 01 	lds	r24, 0x0146
     cd6:	87 ff       	sbrs	r24, 7
     cd8:	03 c0       	rjmp	.+6      	; 0xce0 <__vector_60+0x2a>
		rx_ready = 1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	80 93 33 05 	sts	0x0533, r24
	IRQ_STATUS = (1 << RX_END);
     ce0:	88 e0       	ldi	r24, 0x08	; 8
     ce2:	80 93 4f 01 	sts	0x014F, r24
	
	return;
}
     ce6:	9f 91       	pop	r25
     ce8:	8f 91       	pop	r24
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	0f 90       	pop	r0
     cf0:	1f 90       	pop	r1
     cf2:	18 95       	reti

00000cf4 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     cf4:	1f 92       	push	r1
     cf6:	0f 92       	push	r0
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	0f 92       	push	r0
     cfc:	11 24       	eor	r1, r1
     cfe:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     d00:	80 e8       	ldi	r24, 0x80	; 128
     d02:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     d06:	8f 91       	pop	r24
     d08:	0f 90       	pop	r0
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	0f 90       	pop	r0
     d0e:	1f 90       	pop	r1
     d10:	18 95       	reti

00000d12 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{ 
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	80 93 23 05 	sts	0x0523, r24
	IRQ_STATUS = (1 << TX_END);
     d24:	80 e4       	ldi	r24, 0x40	; 64
     d26:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     d2a:	8f 91       	pop	r24
     d2c:	0f 90       	pop	r0
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	0f 90       	pop	r0
     d32:	1f 90       	pop	r1
     d34:	18 95       	reti

00000d36 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
     d36:	1f 92       	push	r1
     d38:	0f 92       	push	r0
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     d42:	80 e2       	ldi	r24, 0x20	; 32
     d44:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     d48:	8f 91       	pop	r24
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
     d5e:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     d60:	80 e1       	ldi	r24, 0x10	; 16
     d62:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     d66:	8f 91       	pop	r24
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	0f 90       	pop	r0
     d6e:	1f 90       	pop	r1
     d70:	18 95       	reti

00000d72 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	0b b6       	in	r0, 0x3b	; 59
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	2f 93       	push	r18
     d82:	3f 93       	push	r19
     d84:	4f 93       	push	r20
     d86:	5f 93       	push	r21
     d88:	6f 93       	push	r22
     d8a:	7f 93       	push	r23
     d8c:	8f 93       	push	r24
     d8e:	9f 93       	push	r25
     d90:	af 93       	push	r26
     d92:	bf 93       	push	r27
     d94:	ef 93       	push	r30
     d96:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     d98:	84 e0       	ldi	r24, 0x04	; 4
     d9a:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     d9e:	e0 91 d8 03 	lds	r30, 0x03D8
     da2:	f0 91 d9 03 	lds	r31, 0x03D9
     da6:	30 97       	sbiw	r30, 0x00	; 0
     da8:	09 f0       	breq	.+2      	; 0xdac <__vector_59+0x3a>
		rx_start_func();
     daa:	09 95       	icall

	return;
}
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0b be       	out	0x3b, r0	; 59
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     de4:	8f 91       	pop	r24
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	0f 90       	pop	r0
     dec:	1f 90       	pop	r1
     dee:	18 95       	reti

00000df0 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
     df0:	1f 92       	push	r1
     df2:	0f 92       	push	r0
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	0f 92       	push	r0
     df8:	11 24       	eor	r1, r1
     dfa:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     e02:	8f 91       	pop	r24
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti

00000e0e <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
     e0e:	e9 e4       	ldi	r30, 0x49	; 73
     e10:	f1 e0       	ldi	r31, 0x01	; 1
     e12:	90 81       	ld	r25, Z
     e14:	90 7f       	andi	r25, 0xF0	; 240
     e16:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
     e18:	90 81       	ld	r25, Z
     e1a:	8f 70       	andi	r24, 0x0F	; 15
     e1c:	89 2b       	or	r24, r25
     e1e:	80 83       	st	Z, r24
	return;
}
     e20:	08 95       	ret

00000e22 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	08 95       	ret

00000e26 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
	return;
}
     e26:	08 95       	ret

00000e28 <rf_security_set_key>:


void rf_security_set_key(uint8_t *key)
{
	return;
}
     e28:	08 95       	ret

00000e2a <rf_security_disable>:


void rf_security_disable()
{
	return;
}
     e2a:	08 95       	ret

00000e2c <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	08 95       	ret

00000e30 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     e30:	80 91 0e 05 	lds	r24, 0x050E
     e34:	90 91 0f 05 	lds	r25, 0x050F
     e38:	08 95       	ret

00000e3a <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	08 95       	ret

00000e3e <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
}
     e3e:	08 95       	ret

00000e40 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	08 95       	ret

00000e44 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	08 95       	ret

00000e48 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	08 95       	ret

00000e4c <rf_carrier_on>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
     e4c:	08 95       	ret

00000e4e <rf_carrier_off>:
     
#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
     e4e:	08 95       	ret

00000e50 <rf_test_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
     e50:	08 95       	ret

00000e52 <rf_data_mode>:

#ifdef RADIO_PRIORITY_CEILING
	nrk_sem_post(radio_sem);
#endif
*/
}
     e52:	08 95       	ret

00000e54 <rf_rx_set_serial>:
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
}
     e54:	08 95       	ret

00000e56 <rf_tx_set_serial>:
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
}
     e56:	08 95       	ret

00000e58 <rf_set_preamble_length>:
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
}
     e58:	08 95       	ret

00000e5a <rf_set_cca_mode>:


void rf_set_cca_mode(uint8_t mode)
{
}
     e5a:	08 95       	ret

00000e5c <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
     e5c:	80 91 c0 00 	lds	r24, 0x00C0
     e60:	87 ff       	sbrs	r24, 7
     e62:	fc cf       	rjmp	.-8      	; 0xe5c <getc0>
     e64:	80 91 c0 00 	lds	r24, 0x00C0
     e68:	8f 77       	andi	r24, 0x7F	; 127
     e6a:	80 93 c0 00 	sts	0x00C0, r24
     e6e:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
     e72:	08 95       	ret

00000e74 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
     e74:	90 91 c0 00 	lds	r25, 0x00C0
     e78:	95 ff       	sbrs	r25, 5
     e7a:	fc cf       	rjmp	.-8      	; 0xe74 <putc0>
     e7c:	90 91 c0 00 	lds	r25, 0x00C0
     e80:	9f 7d       	andi	r25, 0xDF	; 223
     e82:	90 93 c0 00 	sts	0x00C0, r25
     e86:	80 93 c6 00 	sts	0x00C6, r24
}
     e8a:	08 95       	ret

00000e8c <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
     e8c:	8f ef       	ldi	r24, 0xFF	; 255
     e8e:	08 95       	ret

00000e90 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	19 f4       	brne	.+6      	; 0xe9a <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
     e94:	80 91 c8 00 	lds	r24, 0x00C8
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
     e9a:	88 23       	and	r24, r24
     e9c:	31 f4       	brne	.+12     	; 0xeaa <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
     e9e:	80 91 c0 00 	lds	r24, 0x00C0
{
   return NRK_ERROR;
}


uint8_t nrk_uart_data_ready(uint8_t uart_num)
     ea2:	88 1f       	adc	r24, r24
     ea4:	88 27       	eor	r24, r24
     ea6:	88 1f       	adc	r24, r24
     ea8:	08 95       	ret
        }
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
     eaa:	80 e0       	ldi	r24, 0x00	; 0
}
     eac:	08 95       	ret

00000eae <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	ec 01       	movw	r28, r24
 char c;
   while((c=pgm_read_byte(addr++)))
     eb4:	07 c0       	rjmp	.+14     	; 0xec4 <nrk_kprintf+0x16>
        putchar(c);
     eb6:	60 91 c3 06 	lds	r22, 0x06C3
     eba:	70 91 c4 06 	lds	r23, 0x06C4
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <fputc>
     ec4:	fe 01       	movw	r30, r28
#endif

void nrk_kprintf( const char *addr)
{
 char c;
   while((c=pgm_read_byte(addr++)))
     ec6:	21 96       	adiw	r28, 0x01	; 1
     ec8:	84 91       	lpm	r24, Z+
     eca:	88 23       	and	r24, r24
     ecc:	a1 f7       	brne	.-24     	; 0xeb6 <nrk_kprintf+0x8>
        putchar(c);
}
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	08 95       	ret

00000ed4 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
     ed4:	86 e0       	ldi	r24, 0x06	; 6
     ed6:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
     ed8:	85 b9       	out	0x05, r24	; 5
#endif
       // DDRE  = ; 
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
     eda:	88 ef       	ldi	r24, 0xF8	; 248
     edc:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
     ede:	80 ef       	ldi	r24, 0xF0	; 240
     ee0:	8b b9       	out	0x0b, r24	; 11
        PORTE  = BM(UART0_TXD); 
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	8e b9       	out	0x0e, r24	; 14
        DDRA  = BM(VREG_EN) | BM(RESET_N) ; 
     ee6:	80 e6       	ldi	r24, 0x60	; 96
     ee8:	81 b9       	out	0x01, r24	; 1
        PORTA |= BM(RESET_N); 
     eea:	16 9a       	sbi	0x02, 6	; 2
} 
     eec:	08 95       	ret

00000eee <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
     eee:	0e 94 6a 07 	call	0xed4	; 0xed4 <PORT_INIT>
//SPI_INIT();
}
     ef2:	08 95       	ret

00000ef4 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	09 f4       	brne	.+2      	; 0xefa <nrk_gpio_set+0x6>
     ef8:	71 c0       	rjmp	.+226    	; 0xfdc <nrk_gpio_set+0xe8>
        switch (pin & 0x07) {
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	27 70       	andi	r18, 0x07	; 7
     f00:	30 70       	andi	r19, 0x00	; 0
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	89 f1       	breq	.+98     	; 0xf6a <nrk_gpio_set+0x76>
     f08:	23 30       	cpi	r18, 0x03	; 3
     f0a:	31 05       	cpc	r19, r1
     f0c:	44 f4       	brge	.+16     	; 0xf1e <nrk_gpio_set+0x2a>
     f0e:	21 15       	cp	r18, r1
     f10:	31 05       	cpc	r19, r1
     f12:	89 f0       	breq	.+34     	; 0xf36 <nrk_gpio_set+0x42>
     f14:	21 30       	cpi	r18, 0x01	; 1
     f16:	31 05       	cpc	r19, r1
     f18:	09 f0       	breq	.+2      	; 0xf1c <nrk_gpio_set+0x28>
     f1a:	62 c0       	rjmp	.+196    	; 0xfe0 <nrk_gpio_set+0xec>
     f1c:	1a c0       	rjmp	.+52     	; 0xf52 <nrk_gpio_set+0x5e>
     f1e:	24 30       	cpi	r18, 0x04	; 4
     f20:	31 05       	cpc	r19, r1
     f22:	09 f4       	brne	.+2      	; 0xf26 <nrk_gpio_set+0x32>
     f24:	3f c0       	rjmp	.+126    	; 0xfa4 <nrk_gpio_set+0xb0>
     f26:	24 30       	cpi	r18, 0x04	; 4
     f28:	31 05       	cpc	r19, r1
     f2a:	74 f1       	brlt	.+92     	; 0xf88 <nrk_gpio_set+0x94>
     f2c:	25 30       	cpi	r18, 0x05	; 5
     f2e:	31 05       	cpc	r19, r1
     f30:	09 f0       	breq	.+2      	; 0xf34 <nrk_gpio_set+0x40>
     f32:	56 c0       	rjmp	.+172    	; 0xfe0 <nrk_gpio_set+0xec>
     f34:	45 c0       	rjmp	.+138    	; 0xfc0 <nrk_gpio_set+0xcc>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
     f36:	92 b1       	in	r25, 0x02	; 2
     f38:	86 95       	lsr	r24
     f3a:	86 95       	lsr	r24
     f3c:	86 95       	lsr	r24
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <nrk_gpio_set+0x54>
     f44:	44 0f       	add	r20, r20
     f46:	55 1f       	adc	r21, r21
     f48:	8a 95       	dec	r24
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <nrk_gpio_set+0x50>
     f4c:	94 2b       	or	r25, r20
     f4e:	92 b9       	out	0x02, r25	; 2
     f50:	19 c0       	rjmp	.+50     	; 0xf84 <nrk_gpio_set+0x90>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
     f52:	95 b1       	in	r25, 0x05	; 5
     f54:	86 95       	lsr	r24
     f56:	86 95       	lsr	r24
     f58:	86 95       	lsr	r24
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <nrk_gpio_set+0x6c>
     f5c:	22 0f       	add	r18, r18
     f5e:	33 1f       	adc	r19, r19
     f60:	8a 95       	dec	r24
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <nrk_gpio_set+0x68>
     f64:	92 2b       	or	r25, r18
     f66:	95 b9       	out	0x05, r25	; 5
     f68:	0d c0       	rjmp	.+26     	; 0xf84 <nrk_gpio_set+0x90>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
     f6a:	98 b1       	in	r25, 0x08	; 8
     f6c:	86 95       	lsr	r24
     f6e:	86 95       	lsr	r24
     f70:	86 95       	lsr	r24
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <nrk_gpio_set+0x88>
     f78:	44 0f       	add	r20, r20
     f7a:	55 1f       	adc	r21, r21
     f7c:	8a 95       	dec	r24
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <nrk_gpio_set+0x84>
     f80:	94 2b       	or	r25, r20
     f82:	98 b9       	out	0x08, r25	; 8
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
     f84:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
     f86:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
     f88:	9b b1       	in	r25, 0x0b	; 11
     f8a:	86 95       	lsr	r24
     f8c:	86 95       	lsr	r24
     f8e:	86 95       	lsr	r24
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <nrk_gpio_set+0xa6>
     f96:	44 0f       	add	r20, r20
     f98:	55 1f       	adc	r21, r21
     f9a:	8a 95       	dec	r24
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <nrk_gpio_set+0xa2>
     f9e:	94 2b       	or	r25, r20
     fa0:	9b b9       	out	0x0b, r25	; 11
     fa2:	f0 cf       	rjmp	.-32     	; 0xf84 <nrk_gpio_set+0x90>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
     fa4:	9e b1       	in	r25, 0x0e	; 14
     fa6:	86 95       	lsr	r24
     fa8:	86 95       	lsr	r24
     faa:	86 95       	lsr	r24
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <nrk_gpio_set+0xc2>
     fb2:	44 0f       	add	r20, r20
     fb4:	55 1f       	adc	r21, r21
     fb6:	8a 95       	dec	r24
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <nrk_gpio_set+0xbe>
     fba:	94 2b       	or	r25, r20
     fbc:	9e b9       	out	0x0e, r25	; 14
     fbe:	e2 cf       	rjmp	.-60     	; 0xf84 <nrk_gpio_set+0x90>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
     fc0:	91 b3       	in	r25, 0x11	; 17
     fc2:	86 95       	lsr	r24
     fc4:	86 95       	lsr	r24
     fc6:	86 95       	lsr	r24
     fc8:	41 e0       	ldi	r20, 0x01	; 1
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <nrk_gpio_set+0xde>
     fce:	44 0f       	add	r20, r20
     fd0:	55 1f       	adc	r21, r21
     fd2:	8a 95       	dec	r24
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <nrk_gpio_set+0xda>
     fd6:	94 2b       	or	r25, r20
     fd8:	91 bb       	out	0x11, r25	; 17
     fda:	d4 cf       	rjmp	.-88     	; 0xf84 <nrk_gpio_set+0x90>
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
     fdc:	8f ef       	ldi	r24, 0xFF	; 255
     fde:	08 95       	ret
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
     fe2:	08 95       	ret

00000fe4 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
     fe4:	8f 3f       	cpi	r24, 0xFF	; 255
     fe6:	09 f4       	brne	.+2      	; 0xfea <nrk_gpio_clr+0x6>
     fe8:	77 c0       	rjmp	.+238    	; 0x10d8 <nrk_gpio_clr+0xf4>
        switch (pin & 0x07) {
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	27 70       	andi	r18, 0x07	; 7
     ff0:	30 70       	andi	r19, 0x00	; 0
     ff2:	22 30       	cpi	r18, 0x02	; 2
     ff4:	31 05       	cpc	r19, r1
     ff6:	99 f1       	breq	.+102    	; 0x105e <nrk_gpio_clr+0x7a>
     ff8:	23 30       	cpi	r18, 0x03	; 3
     ffa:	31 05       	cpc	r19, r1
     ffc:	44 f4       	brge	.+16     	; 0x100e <nrk_gpio_clr+0x2a>
     ffe:	21 15       	cp	r18, r1
    1000:	31 05       	cpc	r19, r1
    1002:	89 f0       	breq	.+34     	; 0x1026 <nrk_gpio_clr+0x42>
    1004:	21 30       	cpi	r18, 0x01	; 1
    1006:	31 05       	cpc	r19, r1
    1008:	09 f0       	breq	.+2      	; 0x100c <nrk_gpio_clr+0x28>
    100a:	68 c0       	rjmp	.+208    	; 0x10dc <nrk_gpio_clr+0xf8>
    100c:	1b c0       	rjmp	.+54     	; 0x1044 <nrk_gpio_clr+0x60>
    100e:	24 30       	cpi	r18, 0x04	; 4
    1010:	31 05       	cpc	r19, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <nrk_gpio_clr+0x32>
    1014:	43 c0       	rjmp	.+134    	; 0x109c <nrk_gpio_clr+0xb8>
    1016:	24 30       	cpi	r18, 0x04	; 4
    1018:	31 05       	cpc	r19, r1
    101a:	8c f1       	brlt	.+98     	; 0x107e <nrk_gpio_clr+0x9a>
    101c:	25 30       	cpi	r18, 0x05	; 5
    101e:	31 05       	cpc	r19, r1
    1020:	09 f0       	breq	.+2      	; 0x1024 <nrk_gpio_clr+0x40>
    1022:	5c c0       	rjmp	.+184    	; 0x10dc <nrk_gpio_clr+0xf8>
    1024:	4a c0       	rjmp	.+148    	; 0x10ba <nrk_gpio_clr+0xd6>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1026:	92 b1       	in	r25, 0x02	; 2
    1028:	86 95       	lsr	r24
    102a:	86 95       	lsr	r24
    102c:	86 95       	lsr	r24
    102e:	41 e0       	ldi	r20, 0x01	; 1
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <nrk_gpio_clr+0x54>
    1034:	44 0f       	add	r20, r20
    1036:	55 1f       	adc	r21, r21
    1038:	8a 95       	dec	r24
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <nrk_gpio_clr+0x50>
    103c:	40 95       	com	r20
    103e:	49 23       	and	r20, r25
    1040:	42 b9       	out	0x02, r20	; 2
    1042:	1b c0       	rjmp	.+54     	; 0x107a <nrk_gpio_clr+0x96>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1044:	95 b1       	in	r25, 0x05	; 5
    1046:	86 95       	lsr	r24
    1048:	86 95       	lsr	r24
    104a:	86 95       	lsr	r24
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <nrk_gpio_clr+0x6e>
    104e:	22 0f       	add	r18, r18
    1050:	33 1f       	adc	r19, r19
    1052:	8a 95       	dec	r24
    1054:	e2 f7       	brpl	.-8      	; 0x104e <nrk_gpio_clr+0x6a>
    1056:	20 95       	com	r18
    1058:	29 23       	and	r18, r25
    105a:	25 b9       	out	0x05, r18	; 5
    105c:	0e c0       	rjmp	.+28     	; 0x107a <nrk_gpio_clr+0x96>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    105e:	98 b1       	in	r25, 0x08	; 8
    1060:	86 95       	lsr	r24
    1062:	86 95       	lsr	r24
    1064:	86 95       	lsr	r24
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <nrk_gpio_clr+0x8c>
    106c:	44 0f       	add	r20, r20
    106e:	55 1f       	adc	r21, r21
    1070:	8a 95       	dec	r24
    1072:	e2 f7       	brpl	.-8      	; 0x106c <nrk_gpio_clr+0x88>
    1074:	40 95       	com	r20
    1076:	49 23       	and	r20, r25
    1078:	48 b9       	out	0x08, r20	; 8
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
        }
        return 1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    107c:	08 95       	ret
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    107e:	9b b1       	in	r25, 0x0b	; 11
    1080:	86 95       	lsr	r24
    1082:	86 95       	lsr	r24
    1084:	86 95       	lsr	r24
    1086:	41 e0       	ldi	r20, 0x01	; 1
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <nrk_gpio_clr+0xac>
    108c:	44 0f       	add	r20, r20
    108e:	55 1f       	adc	r21, r21
    1090:	8a 95       	dec	r24
    1092:	e2 f7       	brpl	.-8      	; 0x108c <nrk_gpio_clr+0xa8>
    1094:	40 95       	com	r20
    1096:	49 23       	and	r20, r25
    1098:	4b b9       	out	0x0b, r20	; 11
    109a:	ef cf       	rjmp	.-34     	; 0x107a <nrk_gpio_clr+0x96>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    109c:	9e b1       	in	r25, 0x0e	; 14
    109e:	86 95       	lsr	r24
    10a0:	86 95       	lsr	r24
    10a2:	86 95       	lsr	r24
    10a4:	41 e0       	ldi	r20, 0x01	; 1
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <nrk_gpio_clr+0xca>
    10aa:	44 0f       	add	r20, r20
    10ac:	55 1f       	adc	r21, r21
    10ae:	8a 95       	dec	r24
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <nrk_gpio_clr+0xc6>
    10b2:	40 95       	com	r20
    10b4:	49 23       	and	r20, r25
    10b6:	4e b9       	out	0x0e, r20	; 14
    10b8:	e0 cf       	rjmp	.-64     	; 0x107a <nrk_gpio_clr+0x96>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    10ba:	91 b3       	in	r25, 0x11	; 17
    10bc:	86 95       	lsr	r24
    10be:	86 95       	lsr	r24
    10c0:	86 95       	lsr	r24
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <nrk_gpio_clr+0xe8>
    10c8:	44 0f       	add	r20, r20
    10ca:	55 1f       	adc	r21, r21
    10cc:	8a 95       	dec	r24
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <nrk_gpio_clr+0xe4>
    10d0:	40 95       	com	r20
    10d2:	49 23       	and	r20, r25
    10d4:	41 bb       	out	0x11, r20	; 17
    10d6:	d1 cf       	rjmp	.-94     	; 0x107a <nrk_gpio_clr+0x96>
        return 1;
}

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	08 95       	ret
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                default: return -1;
    10dc:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    10de:	08 95       	ret

000010e0 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    10e0:	8f 3f       	cpi	r24, 0xFF	; 255
    10e2:	89 f1       	breq	.+98     	; 0x1146 <nrk_gpio_get+0x66>
        switch (pin & 0x07) {
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	27 70       	andi	r18, 0x07	; 7
    10ea:	30 70       	andi	r19, 0x00	; 0
    10ec:	22 30       	cpi	r18, 0x02	; 2
    10ee:	31 05       	cpc	r19, r1
    10f0:	c1 f0       	breq	.+48     	; 0x1122 <nrk_gpio_get+0x42>
    10f2:	23 30       	cpi	r18, 0x03	; 3
    10f4:	31 05       	cpc	r19, r1
    10f6:	3c f4       	brge	.+14     	; 0x1106 <nrk_gpio_get+0x26>
    10f8:	21 15       	cp	r18, r1
    10fa:	31 05       	cpc	r19, r1
    10fc:	71 f0       	breq	.+28     	; 0x111a <nrk_gpio_get+0x3a>
    10fe:	21 30       	cpi	r18, 0x01	; 1
    1100:	31 05       	cpc	r19, r1
    1102:	09 f5       	brne	.+66     	; 0x1146 <nrk_gpio_get+0x66>
    1104:	0c c0       	rjmp	.+24     	; 0x111e <nrk_gpio_get+0x3e>
    1106:	24 30       	cpi	r18, 0x04	; 4
    1108:	31 05       	cpc	r19, r1
    110a:	79 f0       	breq	.+30     	; 0x112a <nrk_gpio_get+0x4a>
    110c:	24 30       	cpi	r18, 0x04	; 4
    110e:	31 05       	cpc	r19, r1
    1110:	54 f0       	brlt	.+20     	; 0x1126 <nrk_gpio_get+0x46>
    1112:	25 30       	cpi	r18, 0x05	; 5
    1114:	31 05       	cpc	r19, r1
    1116:	b9 f4       	brne	.+46     	; 0x1146 <nrk_gpio_get+0x66>
    1118:	0a c0       	rjmp	.+20     	; 0x112e <nrk_gpio_get+0x4e>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    111a:	20 b1       	in	r18, 0x00	; 0
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <nrk_gpio_get+0x50>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    111e:	23 b1       	in	r18, 0x03	; 3
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <nrk_gpio_get+0x50>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1122:	26 b1       	in	r18, 0x06	; 6
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <nrk_gpio_get+0x50>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1126:	29 b1       	in	r18, 0x09	; 9
    1128:	03 c0       	rjmp	.+6      	; 0x1130 <nrk_gpio_get+0x50>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    112a:	2c b1       	in	r18, 0x0c	; 12
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <nrk_gpio_get+0x50>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    112e:	2f b1       	in	r18, 0x0f	; 15
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	86 95       	lsr	r24
    1134:	86 95       	lsr	r24
    1136:	86 95       	lsr	r24
    1138:	02 c0       	rjmp	.+4      	; 0x113e <nrk_gpio_get+0x5e>
    113a:	35 95       	asr	r19
    113c:	27 95       	ror	r18
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <nrk_gpio_get+0x5a>
    1142:	21 70       	andi	r18, 0x01	; 1
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <nrk_gpio_get+0x68>
                default: return -1;
    1146:	2f ef       	ldi	r18, 0xFF	; 255
        }
        return 1;
}
    1148:	82 2f       	mov	r24, r18
    114a:	08 95       	ret

0000114c <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    114c:	8f 3f       	cpi	r24, 0xFF	; 255
    114e:	09 f4       	brne	.+2      	; 0x1152 <nrk_gpio_toggle+0x6>
    1150:	fa c0       	rjmp	.+500    	; 0x1346 <nrk_gpio_toggle+0x1fa>
        switch (pin & 0x07) {
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	27 70       	andi	r18, 0x07	; 7
    1158:	30 70       	andi	r19, 0x00	; 0
    115a:	22 30       	cpi	r18, 0x02	; 2
    115c:	31 05       	cpc	r19, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <nrk_gpio_toggle+0x16>
    1160:	59 c0       	rjmp	.+178    	; 0x1214 <nrk_gpio_toggle+0xc8>
    1162:	23 30       	cpi	r18, 0x03	; 3
    1164:	31 05       	cpc	r19, r1
    1166:	44 f4       	brge	.+16     	; 0x1178 <nrk_gpio_toggle+0x2c>
    1168:	21 15       	cp	r18, r1
    116a:	31 05       	cpc	r19, r1
    116c:	91 f0       	breq	.+36     	; 0x1192 <nrk_gpio_toggle+0x46>
    116e:	21 30       	cpi	r18, 0x01	; 1
    1170:	31 05       	cpc	r19, r1
    1172:	09 f0       	breq	.+2      	; 0x1176 <nrk_gpio_toggle+0x2a>
    1174:	ea c0       	rjmp	.+468    	; 0x134a <nrk_gpio_toggle+0x1fe>
    1176:	33 c0       	rjmp	.+102    	; 0x11de <nrk_gpio_toggle+0x92>
    1178:	24 30       	cpi	r18, 0x04	; 4
    117a:	31 05       	cpc	r19, r1
    117c:	09 f4       	brne	.+2      	; 0x1180 <nrk_gpio_toggle+0x34>
    117e:	97 c0       	rjmp	.+302    	; 0x12ae <nrk_gpio_toggle+0x162>
    1180:	24 30       	cpi	r18, 0x04	; 4
    1182:	31 05       	cpc	r19, r1
    1184:	0c f4       	brge	.+2      	; 0x1188 <nrk_gpio_toggle+0x3c>
    1186:	6c c0       	rjmp	.+216    	; 0x1260 <nrk_gpio_toggle+0x114>
    1188:	25 30       	cpi	r18, 0x05	; 5
    118a:	31 05       	cpc	r19, r1
    118c:	09 f0       	breq	.+2      	; 0x1190 <nrk_gpio_toggle+0x44>
    118e:	dd c0       	rjmp	.+442    	; 0x134a <nrk_gpio_toggle+0x1fe>
    1190:	b4 c0       	rjmp	.+360    	; 0x12fa <nrk_gpio_toggle+0x1ae>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1192:	90 b1       	in	r25, 0x00	; 0
    1194:	86 95       	lsr	r24
    1196:	86 95       	lsr	r24
    1198:	86 95       	lsr	r24
    119a:	28 2f       	mov	r18, r24
    119c:	89 2f       	mov	r24, r25
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <nrk_gpio_toggle+0x5c>
    11a4:	95 95       	asr	r25
    11a6:	87 95       	ror	r24
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <nrk_gpio_toggle+0x58>
    11ac:	80 fd       	sbrc	r24, 0
    11ae:	0b c0       	rjmp	.+22     	; 0x11c6 <nrk_gpio_toggle+0x7a>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    11b0:	32 b1       	in	r19, 0x02	; 2
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <nrk_gpio_toggle+0x70>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	2a 95       	dec	r18
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <nrk_gpio_toggle+0x6c>
    11c0:	38 2b       	or	r19, r24
    11c2:	32 b9       	out	0x02, r19	; 2
    11c4:	66 c0       	rjmp	.+204    	; 0x1292 <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    11c6:	32 b1       	in	r19, 0x02	; 2
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <nrk_gpio_toggle+0x86>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	2a 95       	dec	r18
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <nrk_gpio_toggle+0x82>
    11d6:	80 95       	com	r24
    11d8:	83 23       	and	r24, r19
    11da:	82 b9       	out	0x02, r24	; 2
    11dc:	5a c0       	rjmp	.+180    	; 0x1292 <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    11de:	43 b1       	in	r20, 0x03	; 3
    11e0:	86 95       	lsr	r24
    11e2:	86 95       	lsr	r24
    11e4:	86 95       	lsr	r24
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	08 2e       	mov	r0, r24
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <nrk_gpio_toggle+0xa4>
    11ec:	55 95       	asr	r21
    11ee:	47 95       	ror	r20
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <nrk_gpio_toggle+0xa0>
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <nrk_gpio_toggle+0xae>
    11f6:	22 0f       	add	r18, r18
    11f8:	33 1f       	adc	r19, r19
    11fa:	8a 95       	dec	r24
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <nrk_gpio_toggle+0xaa>
    11fe:	40 fd       	sbrc	r20, 0
    1200:	04 c0       	rjmp	.+8      	; 0x120a <nrk_gpio_toggle+0xbe>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1202:	85 b1       	in	r24, 0x05	; 5
    1204:	82 2b       	or	r24, r18
    1206:	85 b9       	out	0x05, r24	; 5
    1208:	44 c0       	rjmp	.+136    	; 0x1292 <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    120a:	85 b1       	in	r24, 0x05	; 5
    120c:	20 95       	com	r18
    120e:	28 23       	and	r18, r24
    1210:	25 b9       	out	0x05, r18	; 5
    1212:	3f c0       	rjmp	.+126    	; 0x1292 <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1214:	96 b1       	in	r25, 0x06	; 6
    1216:	86 95       	lsr	r24
    1218:	86 95       	lsr	r24
    121a:	86 95       	lsr	r24
    121c:	28 2f       	mov	r18, r24
    121e:	89 2f       	mov	r24, r25
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <nrk_gpio_toggle+0xde>
    1226:	95 95       	asr	r25
    1228:	87 95       	ror	r24
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <nrk_gpio_toggle+0xda>
    122e:	80 fd       	sbrc	r24, 0
    1230:	0b c0       	rjmp	.+22     	; 0x1248 <nrk_gpio_toggle+0xfc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1232:	38 b1       	in	r19, 0x08	; 8
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 c0       	rjmp	.+4      	; 0x123e <nrk_gpio_toggle+0xf2>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	2a 95       	dec	r18
    1240:	e2 f7       	brpl	.-8      	; 0x123a <nrk_gpio_toggle+0xee>
    1242:	38 2b       	or	r19, r24
    1244:	38 b9       	out	0x08, r19	; 8
    1246:	25 c0       	rjmp	.+74     	; 0x1292 <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1248:	38 b1       	in	r19, 0x08	; 8
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <nrk_gpio_toggle+0x108>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	2a 95       	dec	r18
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <nrk_gpio_toggle+0x104>
    1258:	80 95       	com	r24
    125a:	83 23       	and	r24, r19
    125c:	88 b9       	out	0x08, r24	; 8
    125e:	19 c0       	rjmp	.+50     	; 0x1292 <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1260:	99 b1       	in	r25, 0x09	; 9
    1262:	86 95       	lsr	r24
    1264:	86 95       	lsr	r24
    1266:	86 95       	lsr	r24
    1268:	28 2f       	mov	r18, r24
    126a:	89 2f       	mov	r24, r25
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <nrk_gpio_toggle+0x12a>
    1272:	95 95       	asr	r25
    1274:	87 95       	ror	r24
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <nrk_gpio_toggle+0x126>
    127a:	80 fd       	sbrc	r24, 0
    127c:	0c c0       	rjmp	.+24     	; 0x1296 <nrk_gpio_toggle+0x14a>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    127e:	3b b1       	in	r19, 0x0b	; 11
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	02 c0       	rjmp	.+4      	; 0x128a <nrk_gpio_toggle+0x13e>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	2a 95       	dec	r18
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <nrk_gpio_toggle+0x13a>
    128e:	38 2b       	or	r19, r24
    1290:	3b b9       	out	0x0b, r19	; 11
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                default: return -1;
        }
        return 1;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	08 95       	ret
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    1296:	3b b1       	in	r19, 0x0b	; 11
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <nrk_gpio_toggle+0x156>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	2a 95       	dec	r18
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <nrk_gpio_toggle+0x152>
    12a6:	80 95       	com	r24
    12a8:	83 23       	and	r24, r19
    12aa:	8b b9       	out	0x0b, r24	; 11
    12ac:	f2 cf       	rjmp	.-28     	; 0x1292 <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    12ae:	9c b1       	in	r25, 0x0c	; 12
    12b0:	86 95       	lsr	r24
    12b2:	86 95       	lsr	r24
    12b4:	86 95       	lsr	r24
    12b6:	28 2f       	mov	r18, r24
    12b8:	89 2f       	mov	r24, r25
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <nrk_gpio_toggle+0x178>
    12c0:	95 95       	asr	r25
    12c2:	87 95       	ror	r24
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <nrk_gpio_toggle+0x174>
    12c8:	80 fd       	sbrc	r24, 0
    12ca:	0b c0       	rjmp	.+22     	; 0x12e2 <nrk_gpio_toggle+0x196>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    12cc:	3e b1       	in	r19, 0x0e	; 14
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <nrk_gpio_toggle+0x18c>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	2a 95       	dec	r18
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <nrk_gpio_toggle+0x188>
    12dc:	38 2b       	or	r19, r24
    12de:	3e b9       	out	0x0e, r19	; 14
    12e0:	d8 cf       	rjmp	.-80     	; 0x1292 <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    12e2:	3e b1       	in	r19, 0x0e	; 14
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <nrk_gpio_toggle+0x1a2>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	2a 95       	dec	r18
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <nrk_gpio_toggle+0x19e>
    12f2:	80 95       	com	r24
    12f4:	83 23       	and	r24, r19
    12f6:	8e b9       	out	0x0e, r24	; 14
    12f8:	cc cf       	rjmp	.-104    	; 0x1292 <nrk_gpio_toggle+0x146>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    12fa:	9f b1       	in	r25, 0x0f	; 15
    12fc:	86 95       	lsr	r24
    12fe:	86 95       	lsr	r24
    1300:	86 95       	lsr	r24
    1302:	28 2f       	mov	r18, r24
    1304:	89 2f       	mov	r24, r25
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <nrk_gpio_toggle+0x1c4>
    130c:	95 95       	asr	r25
    130e:	87 95       	ror	r24
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <nrk_gpio_toggle+0x1c0>
    1314:	80 fd       	sbrc	r24, 0
    1316:	0b c0       	rjmp	.+22     	; 0x132e <nrk_gpio_toggle+0x1e2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1318:	31 b3       	in	r19, 0x11	; 17
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <nrk_gpio_toggle+0x1d8>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	2a 95       	dec	r18
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <nrk_gpio_toggle+0x1d4>
    1328:	38 2b       	or	r19, r24
    132a:	31 bb       	out	0x11, r19	; 17
    132c:	b2 cf       	rjmp	.-156    	; 0x1292 <nrk_gpio_toggle+0x146>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    132e:	31 b3       	in	r19, 0x11	; 17
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <nrk_gpio_toggle+0x1ee>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	2a 95       	dec	r18
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <nrk_gpio_toggle+0x1ea>
    133e:	80 95       	com	r24
    1340:	83 23       	and	r24, r19
    1342:	81 bb       	out	0x11, r24	; 17
    1344:	a6 cf       	rjmp	.-180    	; 0x1292 <nrk_gpio_toggle+0x146>
        return 1;
}

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	08 95       	ret
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                default: return -1;
    134a:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    134c:	08 95       	ret

0000134e <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    134e:	8f 3f       	cpi	r24, 0xFF	; 255
    1350:	09 f4       	brne	.+2      	; 0x1354 <nrk_gpio_direction+0x6>
    1352:	01 c1       	rjmp	.+514    	; 0x1556 <nrk_gpio_direction+0x208>
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
        if (pin_direction == NRK_PIN_INPUT) {
    1358:	66 23       	and	r22, r22
    135a:	09 f0       	breq	.+2      	; 0x135e <nrk_gpio_direction+0x10>
    135c:	8d c0       	rjmp	.+282    	; 0x1478 <nrk_gpio_direction+0x12a>
                switch (pin & 0x07) {
    135e:	27 70       	andi	r18, 0x07	; 7
    1360:	30 70       	andi	r19, 0x00	; 0
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	e1 f1       	breq	.+120    	; 0x13e0 <nrk_gpio_direction+0x92>
    1368:	23 30       	cpi	r18, 0x03	; 3
    136a:	31 05       	cpc	r19, r1
    136c:	44 f4       	brge	.+16     	; 0x137e <nrk_gpio_direction+0x30>
    136e:	21 15       	cp	r18, r1
    1370:	31 05       	cpc	r19, r1
    1372:	91 f0       	breq	.+36     	; 0x1398 <nrk_gpio_direction+0x4a>
    1374:	21 30       	cpi	r18, 0x01	; 1
    1376:	31 05       	cpc	r19, r1
    1378:	09 f0       	breq	.+2      	; 0x137c <nrk_gpio_direction+0x2e>
    137a:	ed c0       	rjmp	.+474    	; 0x1556 <nrk_gpio_direction+0x208>
    137c:	20 c0       	rjmp	.+64     	; 0x13be <nrk_gpio_direction+0x70>
    137e:	24 30       	cpi	r18, 0x04	; 4
    1380:	31 05       	cpc	r19, r1
    1382:	09 f4       	brne	.+2      	; 0x1386 <nrk_gpio_direction+0x38>
    1384:	53 c0       	rjmp	.+166    	; 0x142c <nrk_gpio_direction+0xde>
    1386:	24 30       	cpi	r18, 0x04	; 4
    1388:	31 05       	cpc	r19, r1
    138a:	0c f4       	brge	.+2      	; 0x138e <nrk_gpio_direction+0x40>
    138c:	3c c0       	rjmp	.+120    	; 0x1406 <nrk_gpio_direction+0xb8>
    138e:	25 30       	cpi	r18, 0x05	; 5
    1390:	31 05       	cpc	r19, r1
    1392:	09 f0       	breq	.+2      	; 0x1396 <nrk_gpio_direction+0x48>
    1394:	e0 c0       	rjmp	.+448    	; 0x1556 <nrk_gpio_direction+0x208>
    1396:	5d c0       	rjmp	.+186    	; 0x1452 <nrk_gpio_direction+0x104>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    1398:	91 b1       	in	r25, 0x01	; 1
    139a:	86 95       	lsr	r24
    139c:	86 95       	lsr	r24
    139e:	86 95       	lsr	r24
    13a0:	41 e0       	ldi	r20, 0x01	; 1
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <nrk_gpio_direction+0x5c>
    13a6:	44 0f       	add	r20, r20
    13a8:	55 1f       	adc	r21, r21
    13aa:	8a 95       	dec	r24
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <nrk_gpio_direction+0x58>
    13ae:	84 2f       	mov	r24, r20
    13b0:	80 95       	com	r24
    13b2:	89 23       	and	r24, r25
    13b4:	81 b9       	out	0x01, r24	; 1
                                PORTA |= BM((pin & 0xF8) >> 3); 
    13b6:	82 b1       	in	r24, 0x02	; 2
    13b8:	84 2b       	or	r24, r20
    13ba:	82 b9       	out	0x02, r24	; 2
    13bc:	ca c0       	rjmp	.+404    	; 0x1552 <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    13be:	94 b1       	in	r25, 0x04	; 4
    13c0:	86 95       	lsr	r24
    13c2:	86 95       	lsr	r24
    13c4:	86 95       	lsr	r24
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <nrk_gpio_direction+0x7e>
    13c8:	22 0f       	add	r18, r18
    13ca:	33 1f       	adc	r19, r19
    13cc:	8a 95       	dec	r24
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <nrk_gpio_direction+0x7a>
    13d0:	82 2f       	mov	r24, r18
    13d2:	80 95       	com	r24
    13d4:	89 23       	and	r24, r25
    13d6:	84 b9       	out	0x04, r24	; 4
                                PORTB |= BM((pin & 0xF8) >> 3); 
    13d8:	85 b1       	in	r24, 0x05	; 5
    13da:	82 2b       	or	r24, r18
    13dc:	85 b9       	out	0x05, r24	; 5
    13de:	b9 c0       	rjmp	.+370    	; 0x1552 <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    13e0:	97 b1       	in	r25, 0x07	; 7
    13e2:	86 95       	lsr	r24
    13e4:	86 95       	lsr	r24
    13e6:	86 95       	lsr	r24
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <nrk_gpio_direction+0xa4>
    13ee:	44 0f       	add	r20, r20
    13f0:	55 1f       	adc	r21, r21
    13f2:	8a 95       	dec	r24
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <nrk_gpio_direction+0xa0>
    13f6:	84 2f       	mov	r24, r20
    13f8:	80 95       	com	r24
    13fa:	89 23       	and	r24, r25
    13fc:	87 b9       	out	0x07, r24	; 7
                                PORTC |= BM((pin & 0xF8) >> 3); 
    13fe:	88 b1       	in	r24, 0x08	; 8
    1400:	84 2b       	or	r24, r20
    1402:	88 b9       	out	0x08, r24	; 8
    1404:	a6 c0       	rjmp	.+332    	; 0x1552 <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    1406:	9a b1       	in	r25, 0x0a	; 10
    1408:	86 95       	lsr	r24
    140a:	86 95       	lsr	r24
    140c:	86 95       	lsr	r24
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <nrk_gpio_direction+0xca>
    1414:	44 0f       	add	r20, r20
    1416:	55 1f       	adc	r21, r21
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <nrk_gpio_direction+0xc6>
    141c:	84 2f       	mov	r24, r20
    141e:	80 95       	com	r24
    1420:	89 23       	and	r24, r25
    1422:	8a b9       	out	0x0a, r24	; 10
                                PORTD |= BM((pin & 0xF8) >> 3); 
    1424:	8b b1       	in	r24, 0x0b	; 11
    1426:	84 2b       	or	r24, r20
    1428:	8b b9       	out	0x0b, r24	; 11
    142a:	93 c0       	rjmp	.+294    	; 0x1552 <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    142c:	9d b1       	in	r25, 0x0d	; 13
    142e:	86 95       	lsr	r24
    1430:	86 95       	lsr	r24
    1432:	86 95       	lsr	r24
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	02 c0       	rjmp	.+4      	; 0x143e <nrk_gpio_direction+0xf0>
    143a:	44 0f       	add	r20, r20
    143c:	55 1f       	adc	r21, r21
    143e:	8a 95       	dec	r24
    1440:	e2 f7       	brpl	.-8      	; 0x143a <nrk_gpio_direction+0xec>
    1442:	84 2f       	mov	r24, r20
    1444:	80 95       	com	r24
    1446:	89 23       	and	r24, r25
    1448:	8d b9       	out	0x0d, r24	; 13
                                PORTE |= BM((pin & 0xF8) >> 3); 
    144a:	8e b1       	in	r24, 0x0e	; 14
    144c:	84 2b       	or	r24, r20
    144e:	8e b9       	out	0x0e, r24	; 14
    1450:	80 c0       	rjmp	.+256    	; 0x1552 <nrk_gpio_direction+0x204>
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    1452:	90 b3       	in	r25, 0x10	; 16
    1454:	86 95       	lsr	r24
    1456:	86 95       	lsr	r24
    1458:	86 95       	lsr	r24
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <nrk_gpio_direction+0x116>
    1460:	44 0f       	add	r20, r20
    1462:	55 1f       	adc	r21, r21
    1464:	8a 95       	dec	r24
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <nrk_gpio_direction+0x112>
    1468:	84 2f       	mov	r24, r20
    146a:	80 95       	com	r24
    146c:	89 23       	and	r24, r25
    146e:	80 bb       	out	0x10, r24	; 16
                                PORTF |= BM((pin & 0xF8) >> 3); 
    1470:	81 b3       	in	r24, 0x11	; 17
    1472:	84 2b       	or	r24, r20
    1474:	81 bb       	out	0x11, r24	; 17
    1476:	6d c0       	rjmp	.+218    	; 0x1552 <nrk_gpio_direction+0x204>
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1478:	27 70       	andi	r18, 0x07	; 7
    147a:	30 70       	andi	r19, 0x00	; 0
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	89 f1       	breq	.+98     	; 0x14e4 <nrk_gpio_direction+0x196>
    1482:	23 30       	cpi	r18, 0x03	; 3
    1484:	31 05       	cpc	r19, r1
    1486:	44 f4       	brge	.+16     	; 0x1498 <nrk_gpio_direction+0x14a>
    1488:	21 15       	cp	r18, r1
    148a:	31 05       	cpc	r19, r1
    148c:	89 f0       	breq	.+34     	; 0x14b0 <nrk_gpio_direction+0x162>
    148e:	21 30       	cpi	r18, 0x01	; 1
    1490:	31 05       	cpc	r19, r1
    1492:	09 f0       	breq	.+2      	; 0x1496 <nrk_gpio_direction+0x148>
    1494:	62 c0       	rjmp	.+196    	; 0x155a <nrk_gpio_direction+0x20c>
    1496:	1a c0       	rjmp	.+52     	; 0x14cc <nrk_gpio_direction+0x17e>
    1498:	24 30       	cpi	r18, 0x04	; 4
    149a:	31 05       	cpc	r19, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <nrk_gpio_direction+0x152>
    149e:	3e c0       	rjmp	.+124    	; 0x151c <nrk_gpio_direction+0x1ce>
    14a0:	24 30       	cpi	r18, 0x04	; 4
    14a2:	31 05       	cpc	r19, r1
    14a4:	6c f1       	brlt	.+90     	; 0x1500 <nrk_gpio_direction+0x1b2>
    14a6:	25 30       	cpi	r18, 0x05	; 5
    14a8:	31 05       	cpc	r19, r1
    14aa:	09 f0       	breq	.+2      	; 0x14ae <nrk_gpio_direction+0x160>
    14ac:	56 c0       	rjmp	.+172    	; 0x155a <nrk_gpio_direction+0x20c>
    14ae:	44 c0       	rjmp	.+136    	; 0x1538 <nrk_gpio_direction+0x1ea>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    14b0:	91 b1       	in	r25, 0x01	; 1
    14b2:	86 95       	lsr	r24
    14b4:	86 95       	lsr	r24
    14b6:	86 95       	lsr	r24
    14b8:	41 e0       	ldi	r20, 0x01	; 1
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <nrk_gpio_direction+0x174>
    14be:	44 0f       	add	r20, r20
    14c0:	55 1f       	adc	r21, r21
    14c2:	8a 95       	dec	r24
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <nrk_gpio_direction+0x170>
    14c6:	94 2b       	or	r25, r20
    14c8:	91 b9       	out	0x01, r25	; 1
    14ca:	43 c0       	rjmp	.+134    	; 0x1552 <nrk_gpio_direction+0x204>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    14cc:	94 b1       	in	r25, 0x04	; 4
    14ce:	86 95       	lsr	r24
    14d0:	86 95       	lsr	r24
    14d2:	86 95       	lsr	r24
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <nrk_gpio_direction+0x18c>
    14d6:	22 0f       	add	r18, r18
    14d8:	33 1f       	adc	r19, r19
    14da:	8a 95       	dec	r24
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <nrk_gpio_direction+0x188>
    14de:	92 2b       	or	r25, r18
    14e0:	94 b9       	out	0x04, r25	; 4
    14e2:	37 c0       	rjmp	.+110    	; 0x1552 <nrk_gpio_direction+0x204>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    14e4:	97 b1       	in	r25, 0x07	; 7
    14e6:	86 95       	lsr	r24
    14e8:	86 95       	lsr	r24
    14ea:	86 95       	lsr	r24
    14ec:	41 e0       	ldi	r20, 0x01	; 1
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <nrk_gpio_direction+0x1a8>
    14f2:	44 0f       	add	r20, r20
    14f4:	55 1f       	adc	r21, r21
    14f6:	8a 95       	dec	r24
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <nrk_gpio_direction+0x1a4>
    14fa:	94 2b       	or	r25, r20
    14fc:	97 b9       	out	0x07, r25	; 7
    14fe:	29 c0       	rjmp	.+82     	; 0x1552 <nrk_gpio_direction+0x204>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    1500:	9a b1       	in	r25, 0x0a	; 10
    1502:	86 95       	lsr	r24
    1504:	86 95       	lsr	r24
    1506:	86 95       	lsr	r24
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <nrk_gpio_direction+0x1c4>
    150e:	44 0f       	add	r20, r20
    1510:	55 1f       	adc	r21, r21
    1512:	8a 95       	dec	r24
    1514:	e2 f7       	brpl	.-8      	; 0x150e <nrk_gpio_direction+0x1c0>
    1516:	94 2b       	or	r25, r20
    1518:	9a b9       	out	0x0a, r25	; 10
    151a:	1b c0       	rjmp	.+54     	; 0x1552 <nrk_gpio_direction+0x204>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    151c:	9d b1       	in	r25, 0x0d	; 13
    151e:	86 95       	lsr	r24
    1520:	86 95       	lsr	r24
    1522:	86 95       	lsr	r24
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	02 c0       	rjmp	.+4      	; 0x152e <nrk_gpio_direction+0x1e0>
    152a:	44 0f       	add	r20, r20
    152c:	55 1f       	adc	r21, r21
    152e:	8a 95       	dec	r24
    1530:	e2 f7       	brpl	.-8      	; 0x152a <nrk_gpio_direction+0x1dc>
    1532:	94 2b       	or	r25, r20
    1534:	9d b9       	out	0x0d, r25	; 13
    1536:	0d c0       	rjmp	.+26     	; 0x1552 <nrk_gpio_direction+0x204>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    1538:	90 b3       	in	r25, 0x10	; 16
    153a:	86 95       	lsr	r24
    153c:	86 95       	lsr	r24
    153e:	86 95       	lsr	r24
    1540:	41 e0       	ldi	r20, 0x01	; 1
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <nrk_gpio_direction+0x1fc>
    1546:	44 0f       	add	r20, r20
    1548:	55 1f       	adc	r21, r21
    154a:	8a 95       	dec	r24
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <nrk_gpio_direction+0x1f8>
    154e:	94 2b       	or	r25, r20
    1550:	90 bb       	out	0x10, r25	; 16
                        default: return -1;
                }
        }
        return 1;
    1552:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    1554:	08 95       	ret
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
                                PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	08 95       	ret
                                DDRD |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        default: return -1;
    155a:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    155c:	08 95       	ret

0000155e <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    155e:	88 23       	and	r24, r24
    1560:	29 f4       	brne	.+10     	; 0x156c <nrk_get_button+0xe>
	 return( !(PINA & BM(BUTTON))); 
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	01 9b       	sbis	0x00, 1	; 0
    1566:	03 c0       	rjmp	.+6      	; 0x156e <nrk_get_button+0x10>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	08 95       	ret
	} 
return -1;
    156c:	8f ef       	ldi	r24, 0xFF	; 255
}
    156e:	08 95       	ret

00001570 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	11 f4       	brne	.+4      	; 0x1578 <nrk_led_toggle+0x8>
    1574:	83 e2       	ldi	r24, 0x23	; 35
    1576:	0e c0       	rjmp	.+28     	; 0x1594 <nrk_led_toggle+0x24>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	91 05       	cpc	r25, r1
    157c:	11 f4       	brne	.+4      	; 0x1582 <nrk_led_toggle+0x12>
    157e:	8b e2       	ldi	r24, 0x2B	; 43
    1580:	09 c0       	rjmp	.+18     	; 0x1594 <nrk_led_toggle+0x24>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	91 05       	cpc	r25, r1
    1586:	11 f4       	brne	.+4      	; 0x158c <nrk_led_toggle+0x1c>
    1588:	83 e3       	ldi	r24, 0x33	; 51
    158a:	04 c0       	rjmp	.+8      	; 0x1594 <nrk_led_toggle+0x24>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	91 05       	cpc	r25, r1
    1590:	29 f4       	brne	.+10     	; 0x159c <nrk_led_toggle+0x2c>
    1592:	8b e3       	ldi	r24, 0x3B	; 59
    1594:	0e 94 a6 08 	call	0x114c	; 0x114c <nrk_gpio_toggle>
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	08 95       	ret
return -1;
    159c:	8f ef       	ldi	r24, 0xFF	; 255
}
    159e:	08 95       	ret

000015a0 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <nrk_led_clr+0x8>
    15a4:	83 e2       	ldi	r24, 0x23	; 35
    15a6:	0e c0       	rjmp	.+28     	; 0x15c4 <nrk_led_clr+0x24>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	91 05       	cpc	r25, r1
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <nrk_led_clr+0x12>
    15ae:	8b e2       	ldi	r24, 0x2B	; 43
    15b0:	09 c0       	rjmp	.+18     	; 0x15c4 <nrk_led_clr+0x24>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    15b2:	82 30       	cpi	r24, 0x02	; 2
    15b4:	91 05       	cpc	r25, r1
    15b6:	11 f4       	brne	.+4      	; 0x15bc <nrk_led_clr+0x1c>
    15b8:	83 e3       	ldi	r24, 0x33	; 51
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <nrk_led_clr+0x24>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	91 05       	cpc	r25, r1
    15c0:	29 f4       	brne	.+10     	; 0x15cc <nrk_led_clr+0x2c>
    15c2:	8b e3       	ldi	r24, 0x3B	; 59
    15c4:	0e 94 7a 07 	call	0xef4	; 0xef4 <nrk_gpio_set>
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	08 95       	ret
return -1;
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
}
    15ce:	08 95       	ret

000015d0 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <nrk_led_set+0x8>
    15d4:	83 e2       	ldi	r24, 0x23	; 35
    15d6:	0e c0       	rjmp	.+28     	; 0x15f4 <nrk_led_set+0x24>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	91 05       	cpc	r25, r1
    15dc:	11 f4       	brne	.+4      	; 0x15e2 <nrk_led_set+0x12>
    15de:	8b e2       	ldi	r24, 0x2B	; 43
    15e0:	09 c0       	rjmp	.+18     	; 0x15f4 <nrk_led_set+0x24>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	91 05       	cpc	r25, r1
    15e6:	11 f4       	brne	.+4      	; 0x15ec <nrk_led_set+0x1c>
    15e8:	83 e3       	ldi	r24, 0x33	; 51
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <nrk_led_set+0x24>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	91 05       	cpc	r25, r1
    15f0:	29 f4       	brne	.+10     	; 0x15fc <nrk_led_set+0x2c>
    15f2:	8b e3       	ldi	r24, 0x3B	; 59
    15f4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <nrk_gpio_clr>
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	08 95       	ret
return -1;
    15fc:	8f ef       	ldi	r24, 0xFF	; 255
}
    15fe:	08 95       	ret

00001600 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    1600:	88 23       	and	r24, r24
    1602:	19 f0       	breq	.+6      	; 0x160a <nrk_gpio_pullups+0xa>
    1604:	85 b7       	in	r24, 0x35	; 53
    1606:	8f 7e       	andi	r24, 0xEF	; 239
    1608:	02 c0       	rjmp	.+4      	; 0x160e <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    160a:	85 b7       	in	r24, 0x35	; 53
    160c:	80 61       	ori	r24, 0x10	; 16
    160e:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	08 95       	ret

00001614 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    1614:	90 91 c8 00 	lds	r25, 0x00C8
    1618:	95 ff       	sbrs	r25, 5
    161a:	fc cf       	rjmp	.-8      	; 0x1614 <putc1>
    161c:	80 93 ce 00 	sts	0x00CE, r24
}
    1620:	08 95       	ret

00001622 <setup_uart0>:

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1622:	90 93 c5 00 	sts	0x00C5, r25
    1626:	80 93 c4 00 	sts	0x00C4, r24
    162a:	86 e0       	ldi	r24, 0x06	; 6
    162c:	80 93 c2 00 	sts	0x00C2, r24
    1630:	e1 ec       	ldi	r30, 0xC1	; 193
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	8b 7f       	andi	r24, 0xFB	; 251
    1638:	80 83       	st	Z, r24
    163a:	a0 ec       	ldi	r26, 0xC0	; 192
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	8c 91       	ld	r24, X
    1640:	82 60       	ori	r24, 0x02	; 2
    1642:	8c 93       	st	X, r24
ENABLE_UART0();
    1644:	80 81       	ld	r24, Z
    1646:	88 61       	ori	r24, 0x18	; 24
    1648:	80 83       	st	Z, r24
}
    164a:	08 95       	ret

0000164c <setup_uart1>:

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    164c:	90 93 cd 00 	sts	0x00CD, r25
    1650:	80 93 cc 00 	sts	0x00CC, r24
    1654:	86 e0       	ldi	r24, 0x06	; 6
    1656:	80 93 ca 00 	sts	0x00CA, r24
    165a:	e9 ec       	ldi	r30, 0xC9	; 201
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8b 7f       	andi	r24, 0xFB	; 251
    1662:	80 83       	st	Z, r24
    1664:	a8 ec       	ldi	r26, 0xC8	; 200
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	8c 91       	ld	r24, X
    166a:	82 60       	ori	r24, 0x02	; 2
    166c:	8c 93       	st	X, r24
ENABLE_UART1();
    166e:	80 81       	ld	r24, Z
    1670:	88 61       	ori	r24, 0x18	; 24
    1672:	80 83       	st	Z, r24
}
    1674:	08 95       	ret

00001676 <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    167e:	0e 94 11 0b 	call	0x1622	; 0x1622 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    1682:	ca e3       	ldi	r28, 0x3A	; 58
    1684:	d7 e0       	ldi	r29, 0x07	; 7
    1686:	0e e2       	ldi	r16, 0x2E	; 46
    1688:	17 e0       	ldi	r17, 0x07	; 7
    168a:	ce 01       	movw	r24, r28
    168c:	b8 01       	movw	r22, r16
    168e:	0e 94 a6 30 	call	0x614c	; 0x614c <fdevopen>
    1692:	90 93 c4 06 	sts	0x06C4, r25
    1696:	80 93 c3 06 	sts	0x06C3, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    169a:	ce 01       	movw	r24, r28
    169c:	b8 01       	movw	r22, r16
    169e:	0e 94 a6 30 	call	0x614c	; 0x614c <fdevopen>
    16a2:	90 93 c2 06 	sts	0x06C2, r25
    16a6:	80 93 c1 06 	sts	0x06C1, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	08 95       	ret

000016b4 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    16b4:	80 91 c8 00 	lds	r24, 0x00C8
    16b8:	87 ff       	sbrs	r24, 7
    16ba:	fc cf       	rjmp	.-8      	; 0x16b4 <getc1>
    16bc:	80 91 c8 00 	lds	r24, 0x00C8
    16c0:	8f 77       	andi	r24, 0x7F	; 127
    16c2:	80 93 c8 00 	sts	0x00C8, r24
    16c6:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    16ca:	08 95       	ret

000016cc <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	d1 f7       	brne	.-12     	; 0x16cc <halWait>

} // halWait
    16d8:	08 95       	ret

000016da <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    16da:	0e 94 bd 31 	call	0x637a	; 0x637a <__eerd_byte_m128rfa1>
return v;
}
    16de:	08 95       	ret

000016e0 <nrk_eeprom_write_byte>:

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    16e0:	0e 94 c5 31 	call	0x638a	; 0x638a <__eewr_byte_m128rfa1>
}
    16e4:	08 95       	ret

000016e6 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
    16f2:	e8 2e       	mov	r14, r24
    16f4:	e7 01       	movw	r28, r14
    16f6:	7e 01       	movw	r14, r28
    16f8:	f9 2e       	mov	r15, r25
    16fa:	e7 01       	movw	r28, r14
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 bd 31 	call	0x637a	; 0x637a <__eerd_byte_m128rfa1>
    1704:	08 2f       	mov	r16, r24
    1706:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 bd 31 	call	0x637a	; 0x637a <__eerd_byte_m128rfa1>
    1710:	e8 2e       	mov	r14, r24
    1712:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 bd 31 	call	0x637a	; 0x637a <__eerd_byte_m128rfa1>
    171c:	f8 2e       	mov	r15, r24
    171e:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    1720:	83 e0       	ldi	r24, 0x03	; 3
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 bd 31 	call	0x637a	; 0x637a <__eerd_byte_m128rfa1>
    1728:	18 2f       	mov	r17, r24
    172a:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    172c:	84 e0       	ldi	r24, 0x04	; 4
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 bd 31 	call	0x637a	; 0x637a <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    1734:	fe 0c       	add	r15, r14
ct+=buf[2];
    1736:	f0 0e       	add	r15, r16
ct+=buf[3];
    1738:	f1 0e       	add	r15, r17
if(checksum==ct) return NRK_OK;
    173a:	8f 15       	cp	r24, r15
    173c:	11 f4       	brne	.+4      	; 0x1742 <read_eeprom_mac_address+0x5c>
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <read_eeprom_mac_address+0x5e>

return NRK_ERROR;
    1742:	8f ef       	ldi	r24, 0xFF	; 255
}
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	08 95       	ret

00001752 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    1758:	85 e0       	ldi	r24, 0x05	; 5
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 bd 31 	call	0x637a	; 0x637a <__eerd_byte_m128rfa1>
    1760:	88 83       	st	Y, r24
return NRK_OK;
}
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

0000176a <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
    176a:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    176c:	86 e0       	ldi	r24, 0x06	; 6
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	60 81       	ld	r22, Z
    1772:	0e 94 c5 31 	call	0x638a	; 0x638a <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	08 95       	ret

0000177a <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    1780:	86 e0       	ldi	r24, 0x06	; 6
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0e 94 bd 31 	call	0x637a	; 0x637a <__eerd_byte_m128rfa1>
    1788:	88 83       	st	Y, r24
  return NRK_OK;
}
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	08 2f       	mov	r16, r24
    179c:	19 2f       	mov	r17, r25
    179e:	c8 e0       	ldi	r28, 0x08	; 8
    17a0:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    17a2:	ce 01       	movw	r24, r28
    17a4:	0e 94 bd 31 	call	0x637a	; 0x637a <__eerd_byte_m128rfa1>
    17a8:	f8 01       	movw	r30, r16
    17aa:	81 93       	st	Z+, r24
    17ac:	8f 01       	movw	r16, r30
    17ae:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    17b0:	c8 31       	cpi	r28, 0x18	; 24
    17b2:	d1 05       	cpc	r29, r1
    17b4:	b1 f7       	brne	.-20     	; 0x17a2 <read_eeprom_aes_key+0x10>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	08 95       	ret

000017c2 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	08 2f       	mov	r16, r24
    17cc:	19 2f       	mov	r17, r25
    17ce:	c8 e0       	ldi	r28, 0x08	; 8
    17d0:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    17d2:	f8 01       	movw	r30, r16
    17d4:	61 91       	ld	r22, Z+
    17d6:	8f 01       	movw	r16, r30
    17d8:	ce 01       	movw	r24, r28
    17da:	0e 94 c5 31 	call	0x638a	; 0x638a <__eewr_byte_m128rfa1>
    17de:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    17e0:	c8 31       	cpi	r28, 0x18	; 24
    17e2:	d1 05       	cpc	r29, r1
    17e4:	b1 f7       	brne	.-20     	; 0x17d2 <write_eeprom_aes_key+0x10>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	08 95       	ret

000017f2 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    17f8:	87 e0       	ldi	r24, 0x07	; 7
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 bd 31 	call	0x637a	; 0x637a <__eerd_byte_m128rfa1>
    1800:	88 83       	st	Y, r24
  return NRK_OK;
}
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    180a:	fc 01       	movw	r30, r24
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    180c:	87 e0       	ldi	r24, 0x07	; 7
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	60 81       	ld	r22, Z
    1812:	0e 94 c5 31 	call	0x638a	; 0x638a <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	08 95       	ret

0000181a <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    181a:	f8 94       	cli
};
    181c:	08 95       	ret

0000181e <nrk_int_enable>:

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    181e:	78 94       	sei
};
    1820:	08 95       	ret

00001822 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    1822:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
    1826:	ff cf       	rjmp	.-2      	; 0x1826 <nrk_halt+0x4>

00001828 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	a3 97       	sbiw	r28, 0x23	; 35
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    1840:	0e 94 41 18 	call	0x3082	; 0x3082 <nrk_signal_create>
    1844:	80 93 e9 05 	sts	0x05E9, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    1848:	8f 3f       	cpi	r24, 0xFF	; 255
    184a:	21 f4       	brne	.+8      	; 0x1854 <nrk_init+0x2c>
    184c:	8e e0       	ldi	r24, 0x0E	; 14
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    1854:	0e 94 ef 25 	call	0x4bde	; 0x4bde <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    1858:	80 ff       	sbrs	r24, 0
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <nrk_init+0x3c>
    185c:	86 e0       	ldi	r24, 0x06	; 6
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_kernel_error_add>
	   }
   #endif
   #endif

   #ifdef NRK_WATCHDOG
    if(nrk_watchdog_check()==NRK_ERROR) 
    1864:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <nrk_watchdog_check>
    1868:	8f 3f       	cpi	r24, 0xFF	; 255
    186a:	31 f4       	brne	.+12     	; 0x1878 <nrk_init+0x50>
	{
    	nrk_watchdog_disable();
    186c:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <nrk_watchdog_disable>
	nrk_kernel_error_add(NRK_WATCHDOG_ERROR,0);
    1870:	80 e1       	ldi	r24, 0x10	; 16
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_kernel_error_add>
	}
    nrk_watchdog_enable();
    1878:	0e 94 95 27 	call	0x4f2a	; 0x4f2a <nrk_watchdog_enable>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    187c:	10 92 f4 05 	sts	0x05F4, r1
    nrk_cur_task_TCB = NULL;
    1880:	10 92 02 06 	sts	0x0602, r1
    1884:	10 92 01 06 	sts	0x0601, r1
    
    nrk_high_ready_TCB = NULL;
    1888:	10 92 eb 05 	sts	0x05EB, r1
    188c:	10 92 ea 05 	sts	0x05EA, r1
    nrk_high_ready_prio = 0; 
    1890:	10 92 03 06 	sts	0x0603, r1

   #ifdef NRK_STATS_TRACKER
	nrk_stats_reset();
    1894:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <nrk_stats_reset>
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1898:	10 92 00 06 	sts	0x0600, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    189c:	8f ef       	ldi	r24, 0xFF	; 255
    189e:	80 93 e5 05 	sts	0x05E5, r24
    nrk_sem_list[i].value=-1;
    18a2:	80 93 e7 05 	sts	0x05E7, r24
    nrk_sem_list[i].resource_ceiling=-1;
    18a6:	80 93 e6 05 	sts	0x05E6, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    18aa:	93 e6       	ldi	r25, 0x63	; 99
    18ac:	90 93 48 05 	sts	0x0548, r25
        nrk_task_TCB[i].task_ID = -1; 
    18b0:	80 93 46 05 	sts	0x0546, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    18b4:	90 93 69 05 	sts	0x0569, r25
        nrk_task_TCB[i].task_ID = -1; 
    18b8:	80 93 67 05 	sts	0x0567, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    18bc:	90 93 8a 05 	sts	0x058A, r25
        nrk_task_TCB[i].task_ID = -1; 
    18c0:	80 93 88 05 	sts	0x0588, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    18c4:	90 93 ab 05 	sts	0x05AB, r25
        nrk_task_TCB[i].task_ID = -1; 
    18c8:	80 93 a9 05 	sts	0x05A9, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    18cc:	90 93 cc 05 	sts	0x05CC, r25
        nrk_task_TCB[i].task_ID = -1; 
    18d0:	80 93 ca 05 	sts	0x05CA, r24
    18d4:	ed e9       	ldi	r30, 0x9D	; 157
    18d6:	f6 e0       	ldi	r31, 0x06	; 6
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <nrk_init+0xb8>
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    18de:	9a 01       	movw	r18, r20
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
        nrk_task_TCB[i].task_ID = -1; 
    18e0:	a9 01       	movw	r20, r18
    18e2:	4f 5f       	subi	r20, 0xFF	; 255
    18e4:	5f 4f       	sbci	r21, 0xFF	; 255
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    18e6:	ca 01       	movw	r24, r20
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	84 0f       	add	r24, r20
    18f2:	95 1f       	adc	r25, r21
    18f4:	86 56       	subi	r24, 0x66	; 102
    18f6:	99 4f       	sbci	r25, 0xF9	; 249
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	80 83       	st	Z, r24
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    18fc:	c9 01       	movw	r24, r18
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	82 0f       	add	r24, r18
    1908:	93 1f       	adc	r25, r19
    190a:	86 56       	subi	r24, 0x66	; 102
    190c:	99 4f       	sbci	r25, 0xF9	; 249
    190e:	94 83       	std	Z+4, r25	; 0x04
    1910:	83 83       	std	Z+3, r24	; 0x03
    1912:	35 96       	adiw	r30, 0x05	; 5
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    1914:	45 30       	cpi	r20, 0x05	; 5
    1916:	51 05       	cpc	r21, r1
    1918:	11 f7       	brne	.-60     	; 0x18de <nrk_init+0xb6>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    191a:	10 92 9c 06 	sts	0x069C, r1
    191e:	10 92 9b 06 	sts	0x069B, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    1922:	10 92 b7 06 	sts	0x06B7, r1
    1926:	10 92 b6 06 	sts	0x06B6, r1
	_head_node = NULL;
    192a:	10 92 f7 05 	sts	0x05F7, r1
    192e:	10 92 f6 05 	sts	0x05F6, r1
	_free_node = &_nrk_readyQ[0];
    1932:	8a e9       	ldi	r24, 0x9A	; 154
    1934:	96 e0       	ldi	r25, 0x06	; 6
    1936:	90 93 3d 05 	sts	0x053D, r25
    193a:	80 93 3c 05 	sts	0x053C, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    193e:	8e 01       	movw	r16, r28
    1940:	0f 5f       	subi	r16, 0xFF	; 255
    1942:	1f 4f       	sbci	r17, 0xFF	; 255
    1944:	c8 01       	movw	r24, r16
    1946:	63 e5       	ldi	r22, 0x53	; 83
    1948:	71 e2       	ldi	r23, 0x21	; 33
    194a:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    194e:	c8 01       	movw	r24, r16
    1950:	6a e8       	ldi	r22, 0x8A	; 138
    1952:	74 e0       	ldi	r23, 0x04	; 4
    1954:	40 e8       	ldi	r20, 0x80	; 128
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    195c:	85 e5       	ldi	r24, 0x55	; 85
    195e:	80 93 8a 04 	sts	0x048A, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    1962:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    1964:	1c 86       	std	Y+12, r1	; 0x0c
    1966:	1d 86       	std	Y+13, r1	; 0x0d
    1968:	1e 86       	std	Y+14, r1	; 0x0e
    196a:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    196c:	18 8a       	std	Y+16, r1	; 0x10
    196e:	19 8a       	std	Y+17, r1	; 0x11
    1970:	1a 8a       	std	Y+18, r1	; 0x12
    1972:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1974:	1c 8a       	std	Y+20, r1	; 0x14
    1976:	1d 8a       	std	Y+21, r1	; 0x15
    1978:	1e 8a       	std	Y+22, r1	; 0x16
    197a:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    197c:	18 8e       	std	Y+24, r1	; 0x18
    197e:	19 8e       	std	Y+25, r1	; 0x19
    1980:	1a 8e       	std	Y+26, r1	; 0x1a
    1982:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1984:	1c 8e       	std	Y+28, r1	; 0x1c
    1986:	1d 8e       	std	Y+29, r1	; 0x1d
    1988:	1e 8e       	std	Y+30, r1	; 0x1e
    198a:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    198c:	18 a2       	std	Y+32, r1	; 0x20
    198e:	19 a2       	std	Y+33, r1	; 0x21
    1990:	1a a2       	std	Y+34, r1	; 0x22
    1992:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1998:	92 e0       	ldi	r25, 0x02	; 2
    199a:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    199c:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    199e:	c8 01       	movw	r24, r16
    19a0:	0e 94 3b 1c 	call	0x3876	; 0x3876 <nrk_activate_task>
	
}
    19a4:	a3 96       	adiw	r28, 0x23	; 35
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	08 95       	ret

000019ba <nrk_start>:




void nrk_start (void)
{
    19ba:	cf 92       	push	r12
    19bc:	df 92       	push	r13
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <nrk_start+0x10>
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
    19ce:	b6 e4       	ldi	r27, 0x46	; 70
    19d0:	cb 2e       	mov	r12, r27
    19d2:	b5 e0       	ldi	r27, 0x05	; 5
    19d4:	db 2e       	mov	r13, r27
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    19d8:	f6 01       	movw	r30, r12
    19da:	f0 80       	ld	r15, Z
	// only check activated tasks
	if(task_ID!=-1)
    19dc:	ff 2d       	mov	r31, r15
    19de:	ff 3f       	cpi	r31, 0xFF	; 255
    19e0:	b1 f0       	breq	.+44     	; 0x1a0e <nrk_start+0x54>
    19e2:	06 e4       	ldi	r16, 0x46	; 70
    19e4:	15 e0       	ldi	r17, 0x05	; 5
    19e6:	20 e0       	ldi	r18, 0x00	; 0
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    19e8:	92 17       	cp	r25, r18
    19ea:	61 f0       	breq	.+24     	; 0x1a04 <nrk_start+0x4a>
    19ec:	f8 01       	movw	r30, r16
    19ee:	80 81       	ld	r24, Z
    19f0:	f8 16       	cp	r15, r24
    19f2:	41 f4       	brne	.+16     	; 0x1a04 <nrk_start+0x4a>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    19f4:	85 e0       	ldi	r24, 0x05	; 5
    19f6:	6f 2d       	mov	r22, r15
    19f8:	29 83       	std	Y+1, r18	; 0x01
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_kernel_error_add>
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	29 81       	ldd	r18, Y+1	; 0x01
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    1a04:	2f 5f       	subi	r18, 0xFF	; 255
    1a06:	0f 5d       	subi	r16, 0xDF	; 223
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	25 30       	cpi	r18, 0x05	; 5
    1a0c:	69 f7       	brne	.-38     	; 0x19e8 <nrk_start+0x2e>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1a0e:	9f 5f       	subi	r25, 0xFF	; 255
    1a10:	21 e2       	ldi	r18, 0x21	; 33
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	c2 0e       	add	r12, r18
    1a16:	d3 1e       	adc	r13, r19
    1a18:	95 30       	cpi	r25, 0x05	; 5
    1a1a:	f1 f6       	brne	.-68     	; 0x19d8 <nrk_start+0x1e>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    1a1c:	0e 94 29 1b 	call	0x3652	; 0x3652 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    1a20:	99 27       	eor	r25, r25
    1a22:	87 fd       	sbrc	r24, 7
    1a24:	90 95       	com	r25
    1a26:	fc 01       	movw	r30, r24
    1a28:	a5 e0       	ldi	r26, 0x05	; 5
    1a2a:	ee 0f       	add	r30, r30
    1a2c:	ff 1f       	adc	r31, r31
    1a2e:	aa 95       	dec	r26
    1a30:	e1 f7       	brne	.-8      	; 0x1a2a <nrk_start+0x70>
    1a32:	e8 0f       	add	r30, r24
    1a34:	f9 1f       	adc	r31, r25
    1a36:	e2 5c       	subi	r30, 0xC2	; 194
    1a38:	fa 4f       	sbci	r31, 0xFA	; 250
    1a3a:	82 85       	ldd	r24, Z+10	; 0x0a
    1a3c:	80 93 03 06 	sts	0x0603, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    1a40:	f0 93 02 06 	sts	0x0602, r31
    1a44:	e0 93 01 06 	sts	0x0601, r30
    1a48:	f0 93 eb 05 	sts	0x05EB, r31
    1a4c:	e0 93 ea 05 	sts	0x05EA, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    1a50:	80 93 f4 05 	sts	0x05F4, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    1a54:	0e 94 2a 28 	call	0x5054	; 0x5054 <nrk_target_start>
    nrk_stack_pointer_init(); 
    1a58:	0e 94 14 28 	call	0x5028	; 0x5028 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    1a5c:	0e 94 2f 28 	call	0x505e	; 0x505e <nrk_start_high_ready_task>
    1a60:	ff cf       	rjmp	.-2      	; 0x1a60 <nrk_start+0xa6>

00001a62 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	ec 01       	movw	r28, r24
    1a70:	7b 01       	movw	r14, r22
    1a72:	8a 01       	movw	r16, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	82 30       	cpi	r24, 0x02	; 2
    1a78:	21 f0       	breq	.+8      	; 0x1a82 <nrk_TCB_init+0x20>
    	Task->task_ID=nrk_task_init_cnt;
    1a7a:	80 91 e8 05 	lds	r24, 0x05E8
    1a7e:	88 83       	st	Y, r24
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <nrk_TCB_init+0x22>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1a82:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1a84:	80 91 e8 05 	lds	r24, 0x05E8
    1a88:	85 30       	cpi	r24, 0x05	; 5
    1a8a:	20 f0       	brcs	.+8      	; 0x1a94 <nrk_TCB_init+0x32>
    1a8c:	87 e0       	ldi	r24, 0x07	; 7
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1a94:	89 85       	ldd	r24, Y+9	; 0x09
    1a96:	82 30       	cpi	r24, 0x02	; 2
    1a98:	29 f0       	breq	.+10     	; 0x1aa4 <nrk_TCB_init+0x42>
    1a9a:	80 91 e8 05 	lds	r24, 0x05E8
    1a9e:	8f 5f       	subi	r24, 0xFF	; 255
    1aa0:	80 93 e8 05 	sts	0x05E8, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1aa4:	80 91 e8 05 	lds	r24, 0x05E8
    1aa8:	88 23       	and	r24, r24
    1aaa:	19 f4       	brne	.+6      	; 0x1ab2 <nrk_TCB_init+0x50>
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	80 93 e8 05 	sts	0x05E8, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1ab2:	88 81       	ld	r24, Y
    1ab4:	99 27       	eor	r25, r25
    1ab6:	87 fd       	sbrc	r24, 7
    1ab8:	90 95       	com	r25
    1aba:	fc 01       	movw	r30, r24
    1abc:	a5 e0       	ldi	r26, 0x05	; 5
    1abe:	ee 0f       	add	r30, r30
    1ac0:	ff 1f       	adc	r31, r31
    1ac2:	aa 95       	dec	r26
    1ac4:	e1 f7       	brne	.-8      	; 0x1abe <nrk_TCB_init+0x5c>
    1ac6:	e8 0f       	add	r30, r24
    1ac8:	f9 1f       	adc	r31, r25
    1aca:	e2 5c       	subi	r30, 0xC2	; 194
    1acc:	fa 4f       	sbci	r31, 0xFA	; 250
    1ace:	f1 82       	std	Z+1, r15	; 0x01
    1ad0:	e0 82       	st	Z, r14
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    1ad2:	88 85       	ldd	r24, Y+8	; 0x08
    1ad4:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    1ad6:	88 81       	ld	r24, Y
    1ad8:	99 27       	eor	r25, r25
    1ada:	87 fd       	sbrc	r24, 7
    1adc:	90 95       	com	r25
    1ade:	fc 01       	movw	r30, r24
    1ae0:	75 e0       	ldi	r23, 0x05	; 5
    1ae2:	ee 0f       	add	r30, r30
    1ae4:	ff 1f       	adc	r31, r31
    1ae6:	7a 95       	dec	r23
    1ae8:	e1 f7       	brne	.-8      	; 0x1ae2 <nrk_TCB_init+0x80>
    1aea:	e8 0f       	add	r30, r24
    1aec:	f9 1f       	adc	r31, r25
    1aee:	e2 5c       	subi	r30, 0xC2	; 194
    1af0:	fa 4f       	sbci	r31, 0xFA	; 250
    1af2:	83 e0       	ldi	r24, 0x03	; 3
    1af4:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    1af6:	28 81       	ld	r18, Y
    1af8:	82 2f       	mov	r24, r18
    1afa:	99 27       	eor	r25, r25
    1afc:	87 fd       	sbrc	r24, 7
    1afe:	90 95       	com	r25
    1b00:	fc 01       	movw	r30, r24
    1b02:	65 e0       	ldi	r22, 0x05	; 5
    1b04:	ee 0f       	add	r30, r30
    1b06:	ff 1f       	adc	r31, r31
    1b08:	6a 95       	dec	r22
    1b0a:	e1 f7       	brne	.-8      	; 0x1b04 <nrk_TCB_init+0xa2>
    1b0c:	e8 0f       	add	r30, r24
    1b0e:	f9 1f       	adc	r31, r25
    1b10:	e2 5c       	subi	r30, 0xC2	; 194
    1b12:	fa 4f       	sbci	r31, 0xFA	; 250
    1b14:	20 87       	std	Z+8, r18	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    1b16:	88 81       	ld	r24, Y
    1b18:	99 27       	eor	r25, r25
    1b1a:	87 fd       	sbrc	r24, 7
    1b1c:	90 95       	com	r25
    1b1e:	7c 01       	movw	r14, r24
    1b20:	55 e0       	ldi	r21, 0x05	; 5
    1b22:	ee 0c       	add	r14, r14
    1b24:	ff 1c       	adc	r15, r15
    1b26:	5a 95       	dec	r21
    1b28:	e1 f7       	brne	.-8      	; 0x1b22 <nrk_TCB_init+0xc0>
    1b2a:	e8 0e       	add	r14, r24
    1b2c:	f9 1e       	adc	r15, r25
    1b2e:	8e e3       	ldi	r24, 0x3E	; 62
    1b30:	95 e0       	ldi	r25, 0x05	; 5
    1b32:	e8 0e       	add	r14, r24
    1b34:	f9 1e       	adc	r15, r25
    1b36:	f7 01       	movw	r30, r14
    1b38:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks( &(Task->period) );
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	0b 96       	adiw	r24, 0x0b	; 11
    1b3e:	0e 94 04 20 	call	0x4008	; 0x4008 <_nrk_time_to_ticks>
    1b42:	f7 01       	movw	r30, r14
    1b44:	94 8f       	std	Z+28, r25	; 0x1c
    1b46:	83 8f       	std	Z+27, r24	; 0x1b
    if(Task->period.secs > 61) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    1b48:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b4c:	ad 85       	ldd	r26, Y+13	; 0x0d
    1b4e:	be 85       	ldd	r27, Y+14	; 0x0e
    1b50:	8e 33       	cpi	r24, 0x3E	; 62
    1b52:	91 05       	cpc	r25, r1
    1b54:	a1 05       	cpc	r26, r1
    1b56:	b1 05       	cpc	r27, r1
    1b58:	20 f0       	brcs	.+8      	; 0x1b62 <nrk_TCB_init+0x100>
    1b5a:	86 e1       	ldi	r24, 0x16	; 22
    1b5c:	68 81       	ld	r22, Y
    1b5e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks( &(Task->offset));
    1b62:	e8 80       	ld	r14, Y
    1b64:	ff 24       	eor	r15, r15
    1b66:	e7 fc       	sbrc	r14, 7
    1b68:	f0 94       	com	r15
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	4b 96       	adiw	r24, 0x1b	; 27
    1b6e:	0e 94 04 20 	call	0x4008	; 0x4008 <_nrk_time_to_ticks>
    1b72:	f7 01       	movw	r30, r14
    1b74:	45 e0       	ldi	r20, 0x05	; 5
    1b76:	ee 0f       	add	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	4a 95       	dec	r20
    1b7c:	e1 f7       	brne	.-8      	; 0x1b76 <nrk_TCB_init+0x114>
    1b7e:	ee 0d       	add	r30, r14
    1b80:	ff 1d       	adc	r31, r15
    1b82:	e2 5c       	subi	r30, 0xC2	; 194
    1b84:	fa 4f       	sbci	r31, 0xFA	; 250
    1b86:	96 8b       	std	Z+22, r25	; 0x16
    1b88:	85 8b       	std	Z+21, r24	; 0x15
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    1b8a:	88 81       	ld	r24, Y
    1b8c:	99 27       	eor	r25, r25
    1b8e:	87 fd       	sbrc	r24, 7
    1b90:	90 95       	com	r25
    1b92:	7c 01       	movw	r14, r24
    1b94:	35 e0       	ldi	r19, 0x05	; 5
    1b96:	ee 0c       	add	r14, r14
    1b98:	ff 1c       	adc	r15, r15
    1b9a:	3a 95       	dec	r19
    1b9c:	e1 f7       	brne	.-8      	; 0x1b96 <nrk_TCB_init+0x134>
    1b9e:	e8 0e       	add	r14, r24
    1ba0:	f9 1e       	adc	r15, r25
    1ba2:	8e e3       	ldi	r24, 0x3E	; 62
    1ba4:	95 e0       	ldi	r25, 0x05	; 5
    1ba6:	e8 0e       	add	r14, r24
    1ba8:	f9 1e       	adc	r15, r25
    1baa:	f7 01       	movw	r30, r14
    1bac:	85 89       	ldd	r24, Z+21	; 0x15
    1bae:	96 89       	ldd	r25, Z+22	; 0x16
    1bb0:	23 8d       	ldd	r18, Z+27	; 0x1b
    1bb2:	34 8d       	ldd	r19, Z+28	; 0x1c
    1bb4:	82 0f       	add	r24, r18
    1bb6:	93 1f       	adc	r25, r19
    1bb8:	90 8f       	std	Z+24, r25	; 0x18
    1bba:	87 8b       	std	Z+23, r24	; 0x17
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks(&(Task->cpu_reserve));
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	43 96       	adiw	r24, 0x13	; 19
    1bc0:	0e 94 04 20 	call	0x4008	; 0x4008 <_nrk_time_to_ticks>
    1bc4:	f7 01       	movw	r30, r14
    1bc6:	96 8f       	std	Z+30, r25	; 0x1e
    1bc8:	85 8f       	std	Z+29, r24	; 0x1d
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    1bca:	88 81       	ld	r24, Y
    1bcc:	99 27       	eor	r25, r25
    1bce:	87 fd       	sbrc	r24, 7
    1bd0:	90 95       	com	r25
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	25 e0       	ldi	r18, 0x05	; 5
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	ff 1f       	adc	r31, r31
    1bda:	2a 95       	dec	r18
    1bdc:	e1 f7       	brne	.-8      	; 0x1bd6 <nrk_TCB_init+0x174>
    1bde:	e8 0f       	add	r30, r24
    1be0:	f9 1f       	adc	r31, r25
    1be2:	e2 5c       	subi	r30, 0xC2	; 194
    1be4:	fa 4f       	sbci	r31, 0xFA	; 250
    1be6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1be8:	96 8d       	ldd	r25, Z+30	; 0x1e
    1bea:	92 8f       	std	Z+26, r25	; 0x1a
    1bec:	81 8f       	std	Z+25, r24	; 0x19
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	90 a3       	std	Z+32, r25	; 0x20
    1bf4:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    1bf6:	13 83       	std	Z+3, r17	; 0x03
    1bf8:	02 83       	std	Z+2, r16	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	08 95       	ret

00001c0c <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    1c0c:	0e 94 79 21 	call	0x42f2	; 0x42f2 <_nrk_scheduler>

  	return;
}
    1c10:	08 95       	ret

00001c12 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    1c12:	85 e6       	ldi	r24, 0x65	; 101
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	08 95       	ret

00001c18 <nrk_stats_reset>:
#ifdef NRK_STATS_TRACKER
void nrk_stats_reset()
{
    uint8_t i;

    _nrk_stats_sleep_time.secs=0;
    1c18:	10 92 ec 05 	sts	0x05EC, r1
    1c1c:	10 92 ed 05 	sts	0x05ED, r1
    1c20:	10 92 ee 05 	sts	0x05EE, r1
    1c24:	10 92 ef 05 	sts	0x05EF, r1
    _nrk_stats_sleep_time.nano_secs=0;
    1c28:	10 92 f0 05 	sts	0x05F0, r1
    1c2c:	10 92 f1 05 	sts	0x05F1, r1
    1c30:	10 92 f2 05 	sts	0x05F2, r1
    1c34:	10 92 f3 05 	sts	0x05F3, r1
    1c38:	e4 e0       	ldi	r30, 0x04	; 4
    1c3a:	f6 e0       	ldi	r31, 0x06	; 6
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        cur_task_stats[i].total_ticks=0;
    1c3c:	10 82       	st	Z, r1
    1c3e:	11 82       	std	Z+1, r1	; 0x01
    1c40:	12 82       	std	Z+2, r1	; 0x02
    1c42:	13 82       	std	Z+3, r1	; 0x03
        cur_task_stats[i].max_exec_ticks=0;
    1c44:	10 86       	std	Z+8, r1	; 0x08
    1c46:	11 86       	std	Z+9, r1	; 0x09
    1c48:	12 86       	std	Z+10, r1	; 0x0a
    1c4a:	13 86       	std	Z+11, r1	; 0x0b
        cur_task_stats[i].min_exec_ticks=0;
    1c4c:	14 82       	std	Z+4, r1	; 0x04
    1c4e:	15 82       	std	Z+5, r1	; 0x05
    1c50:	16 82       	std	Z+6, r1	; 0x06
    1c52:	17 82       	std	Z+7, r1	; 0x07
        cur_task_stats[i].last_exec_ticks=0;
    1c54:	14 86       	std	Z+12, r1	; 0x0c
    1c56:	15 86       	std	Z+13, r1	; 0x0d
    1c58:	16 86       	std	Z+14, r1	; 0x0e
    1c5a:	17 86       	std	Z+15, r1	; 0x0f
        cur_task_stats[i].swapped_in=0;
    1c5c:	10 8a       	std	Z+16, r1	; 0x10
    1c5e:	11 8a       	std	Z+17, r1	; 0x11
    1c60:	12 8a       	std	Z+18, r1	; 0x12
    1c62:	13 8a       	std	Z+19, r1	; 0x13
        cur_task_stats[i].preempted=0;
    1c64:	10 8e       	std	Z+24, r1	; 0x18
    1c66:	11 8e       	std	Z+25, r1	; 0x19
    1c68:	12 8e       	std	Z+26, r1	; 0x1a
    1c6a:	13 8e       	std	Z+27, r1	; 0x1b
        cur_task_stats[i].violations=0;
    1c6c:	14 8e       	std	Z+28, r1	; 0x1c
        cur_task_stats[i].overflow=0;
    1c6e:	15 8e       	std	Z+29, r1	; 0x1d
    1c70:	7e 96       	adiw	r30, 0x1e	; 30
{
    uint8_t i;

    _nrk_stats_sleep_time.secs=0;
    _nrk_stats_sleep_time.nano_secs=0;
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1c72:	86 e0       	ldi	r24, 0x06	; 6
    1c74:	ea 39       	cpi	r30, 0x9A	; 154
    1c76:	f8 07       	cpc	r31, r24
    1c78:	09 f7       	brne	.-62     	; 0x1c3c <nrk_stats_reset+0x24>
        cur_task_stats[i].preempted=0;
        cur_task_stats[i].violations=0;
        cur_task_stats[i].overflow=0;
    }

}
    1c7a:	08 95       	ret

00001c7c <_nrk_stats_sleep>:


void _nrk_stats_sleep(uint8_t t)
{
//_nrk_stats_sleep_time+=t;
    _nrk_stats_sleep_time.nano_secs+=t*NANOS_PER_TICK;
    1c7c:	68 2f       	mov	r22, r24
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	23 eb       	ldi	r18, 0xB3	; 179
    1c86:	36 ee       	ldi	r19, 0xE6	; 230
    1c88:	4e e0       	ldi	r20, 0x0E	; 14
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    1c90:	20 91 f0 05 	lds	r18, 0x05F0
    1c94:	30 91 f1 05 	lds	r19, 0x05F1
    1c98:	40 91 f2 05 	lds	r20, 0x05F2
    1c9c:	50 91 f3 05 	lds	r21, 0x05F3
    1ca0:	62 0f       	add	r22, r18
    1ca2:	73 1f       	adc	r23, r19
    1ca4:	84 1f       	adc	r24, r20
    1ca6:	95 1f       	adc	r25, r21
    1ca8:	60 93 f0 05 	sts	0x05F0, r22
    1cac:	70 93 f1 05 	sts	0x05F1, r23
    1cb0:	80 93 f2 05 	sts	0x05F2, r24
    1cb4:	90 93 f3 05 	sts	0x05F3, r25
    nrk_time_compact_nanos(&_nrk_stats_sleep_time);
    1cb8:	8c ee       	ldi	r24, 0xEC	; 236
    1cba:	95 e0       	ldi	r25, 0x05	; 5
    1cbc:	0e 94 75 1f 	call	0x3eea	; 0x3eea <nrk_time_compact_nanos>
}
    1cc0:	08 95       	ret

00001cc2 <nrk_stats_get_deep_sleep>:

void nrk_stats_get_deep_sleep(nrk_time_t *t)
{
    1cc2:	fc 01       	movw	r30, r24
    t->secs=_nrk_stats_sleep_time.secs;
    1cc4:	20 91 ec 05 	lds	r18, 0x05EC
    1cc8:	30 91 ed 05 	lds	r19, 0x05ED
    1ccc:	40 91 ee 05 	lds	r20, 0x05EE
    1cd0:	50 91 ef 05 	lds	r21, 0x05EF
    1cd4:	20 83       	st	Z, r18
    1cd6:	31 83       	std	Z+1, r19	; 0x01
    1cd8:	42 83       	std	Z+2, r20	; 0x02
    1cda:	53 83       	std	Z+3, r21	; 0x03
    t->nano_secs=_nrk_stats_sleep_time.nano_secs;
    1cdc:	20 91 f0 05 	lds	r18, 0x05F0
    1ce0:	30 91 f1 05 	lds	r19, 0x05F1
    1ce4:	40 91 f2 05 	lds	r20, 0x05F2
    1ce8:	50 91 f3 05 	lds	r21, 0x05F3
    1cec:	24 83       	std	Z+4, r18	; 0x04
    1cee:	35 83       	std	Z+5, r19	; 0x05
    1cf0:	46 83       	std	Z+6, r20	; 0x06
    1cf2:	57 83       	std	Z+7, r21	; 0x07
}
    1cf4:	08 95       	ret

00001cf6 <_nrk_stats_add_violation>:

void _nrk_stats_add_violation(uint8_t task_id)
{
    if( cur_task_stats[task_id].overflow==1) return;
    1cf6:	e8 2f       	mov	r30, r24
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	9f 01       	movw	r18, r30
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	a5 e0       	ldi	r26, 0x05	; 5
    1d02:	ee 0f       	add	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	aa 95       	dec	r26
    1d08:	e1 f7       	brne	.-8      	; 0x1d02 <_nrk_stats_add_violation+0xc>
    1d0a:	e2 1b       	sub	r30, r18
    1d0c:	f3 0b       	sbc	r31, r19
    1d0e:	ec 5f       	subi	r30, 0xFC	; 252
    1d10:	f9 4f       	sbci	r31, 0xF9	; 249
    1d12:	95 8d       	ldd	r25, Z+29	; 0x1d
    1d14:	91 30       	cpi	r25, 0x01	; 1
    1d16:	89 f1       	breq	.+98     	; 0x1d7a <_nrk_stats_add_violation+0x84>
    cur_task_stats[task_id].violations++;
    1d18:	e8 2f       	mov	r30, r24
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	9f 01       	movw	r18, r30
    1d1e:	22 0f       	add	r18, r18
    1d20:	33 1f       	adc	r19, r19
    1d22:	65 e0       	ldi	r22, 0x05	; 5
    1d24:	ee 0f       	add	r30, r30
    1d26:	ff 1f       	adc	r31, r31
    1d28:	6a 95       	dec	r22
    1d2a:	e1 f7       	brne	.-8      	; 0x1d24 <_nrk_stats_add_violation+0x2e>
    1d2c:	e2 1b       	sub	r30, r18
    1d2e:	f3 0b       	sbc	r31, r19
    1d30:	ec 5f       	subi	r30, 0xFC	; 252
    1d32:	f9 4f       	sbci	r31, 0xF9	; 249
    1d34:	94 8d       	ldd	r25, Z+28	; 0x1c
    1d36:	9f 5f       	subi	r25, 0xFF	; 255
    1d38:	e8 2f       	mov	r30, r24
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	9f 01       	movw	r18, r30
    1d3e:	22 0f       	add	r18, r18
    1d40:	33 1f       	adc	r19, r19
    1d42:	45 e0       	ldi	r20, 0x05	; 5
    1d44:	ee 0f       	add	r30, r30
    1d46:	ff 1f       	adc	r31, r31
    1d48:	4a 95       	dec	r20
    1d4a:	e1 f7       	brne	.-8      	; 0x1d44 <_nrk_stats_add_violation+0x4e>
    1d4c:	e2 1b       	sub	r30, r18
    1d4e:	f3 0b       	sbc	r31, r19
    1d50:	ec 5f       	subi	r30, 0xFC	; 252
    1d52:	f9 4f       	sbci	r31, 0xF9	; 249
    1d54:	94 8f       	std	Z+28, r25	; 0x1c
    if(cur_task_stats[task_id].violations==255) cur_task_stats[task_id].overflow=1;
    1d56:	9f 3f       	cpi	r25, 0xFF	; 255
    1d58:	81 f4       	brne	.+32     	; 0x1d7a <_nrk_stats_add_violation+0x84>
    1d5a:	e8 2f       	mov	r30, r24
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	cf 01       	movw	r24, r30
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	25 e0       	ldi	r18, 0x05	; 5
    1d66:	ee 0f       	add	r30, r30
    1d68:	ff 1f       	adc	r31, r31
    1d6a:	2a 95       	dec	r18
    1d6c:	e1 f7       	brne	.-8      	; 0x1d66 <_nrk_stats_add_violation+0x70>
    1d6e:	e8 1b       	sub	r30, r24
    1d70:	f9 0b       	sbc	r31, r25
    1d72:	ec 5f       	subi	r30, 0xFC	; 252
    1d74:	f9 4f       	sbci	r31, 0xF9	; 249
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	85 8f       	std	Z+29, r24	; 0x1d
    1d7a:	08 95       	ret

00001d7c <_nrk_stats_task_start>:


// task_id is the PID of the task in question
void _nrk_stats_task_start(uint8_t task_id)
{
    if( cur_task_stats[task_id].overflow==1) return;
    1d7c:	e8 2f       	mov	r30, r24
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	9f 01       	movw	r18, r30
    1d82:	22 0f       	add	r18, r18
    1d84:	33 1f       	adc	r19, r19
    1d86:	75 e0       	ldi	r23, 0x05	; 5
    1d88:	ee 0f       	add	r30, r30
    1d8a:	ff 1f       	adc	r31, r31
    1d8c:	7a 95       	dec	r23
    1d8e:	e1 f7       	brne	.-8      	; 0x1d88 <_nrk_stats_task_start+0xc>
    1d90:	e2 1b       	sub	r30, r18
    1d92:	f3 0b       	sbc	r31, r19
    1d94:	ec 5f       	subi	r30, 0xFC	; 252
    1d96:	f9 4f       	sbci	r31, 0xF9	; 249
    1d98:	95 8d       	ldd	r25, Z+29	; 0x1d
    1d9a:	91 30       	cpi	r25, 0x01	; 1
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <_nrk_stats_task_start+0x24>
    1d9e:	52 c0       	rjmp	.+164    	; 0x1e44 <_nrk_stats_task_start+0xc8>
    cur_task_stats[task_id].cur_ticks=0;
    1da0:	e8 2f       	mov	r30, r24
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	9f 01       	movw	r18, r30
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	55 e0       	ldi	r21, 0x05	; 5
    1dac:	ee 0f       	add	r30, r30
    1dae:	ff 1f       	adc	r31, r31
    1db0:	5a 95       	dec	r21
    1db2:	e1 f7       	brne	.-8      	; 0x1dac <_nrk_stats_task_start+0x30>
    1db4:	e2 1b       	sub	r30, r18
    1db6:	f3 0b       	sbc	r31, r19
    1db8:	ec 5f       	subi	r30, 0xFC	; 252
    1dba:	f9 4f       	sbci	r31, 0xF9	; 249
    1dbc:	14 8a       	std	Z+20, r1	; 0x14
    1dbe:	15 8a       	std	Z+21, r1	; 0x15
    1dc0:	16 8a       	std	Z+22, r1	; 0x16
    1dc2:	17 8a       	std	Z+23, r1	; 0x17
    cur_task_stats[task_id].swapped_in++;
    1dc4:	e8 2f       	mov	r30, r24
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	9f 01       	movw	r18, r30
    1dca:	22 0f       	add	r18, r18
    1dcc:	33 1f       	adc	r19, r19
    1dce:	95 e0       	ldi	r25, 0x05	; 5
    1dd0:	ee 0f       	add	r30, r30
    1dd2:	ff 1f       	adc	r31, r31
    1dd4:	9a 95       	dec	r25
    1dd6:	e1 f7       	brne	.-8      	; 0x1dd0 <_nrk_stats_task_start+0x54>
    1dd8:	e2 1b       	sub	r30, r18
    1dda:	f3 0b       	sbc	r31, r19
    1ddc:	ec 5f       	subi	r30, 0xFC	; 252
    1dde:	f9 4f       	sbci	r31, 0xF9	; 249
    1de0:	20 89       	ldd	r18, Z+16	; 0x10
    1de2:	31 89       	ldd	r19, Z+17	; 0x11
    1de4:	42 89       	ldd	r20, Z+18	; 0x12
    1de6:	53 89       	ldd	r21, Z+19	; 0x13
    1de8:	2f 5f       	subi	r18, 0xFF	; 255
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	4f 4f       	sbci	r20, 0xFF	; 255
    1dee:	5f 4f       	sbci	r21, 0xFF	; 255
    1df0:	e8 2f       	mov	r30, r24
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	bf 01       	movw	r22, r30
    1df6:	66 0f       	add	r22, r22
    1df8:	77 1f       	adc	r23, r23
    1dfa:	a5 e0       	ldi	r26, 0x05	; 5
    1dfc:	ee 0f       	add	r30, r30
    1dfe:	ff 1f       	adc	r31, r31
    1e00:	aa 95       	dec	r26
    1e02:	e1 f7       	brne	.-8      	; 0x1dfc <_nrk_stats_task_start+0x80>
    1e04:	e6 1b       	sub	r30, r22
    1e06:	f7 0b       	sbc	r31, r23
    1e08:	ec 5f       	subi	r30, 0xFC	; 252
    1e0a:	f9 4f       	sbci	r31, 0xF9	; 249
    1e0c:	20 8b       	std	Z+16, r18	; 0x10
    1e0e:	31 8b       	std	Z+17, r19	; 0x11
    1e10:	42 8b       	std	Z+18, r20	; 0x12
    1e12:	53 8b       	std	Z+19, r21	; 0x13
    if(cur_task_stats[task_id].swapped_in==(UINT32_MAX-1)) cur_task_stats[task_id].overflow=1;
    1e14:	2e 3f       	cpi	r18, 0xFE	; 254
    1e16:	9f ef       	ldi	r25, 0xFF	; 255
    1e18:	39 07       	cpc	r19, r25
    1e1a:	9f ef       	ldi	r25, 0xFF	; 255
    1e1c:	49 07       	cpc	r20, r25
    1e1e:	9f ef       	ldi	r25, 0xFF	; 255
    1e20:	59 07       	cpc	r21, r25
    1e22:	81 f4       	brne	.+32     	; 0x1e44 <_nrk_stats_task_start+0xc8>
    1e24:	e8 2f       	mov	r30, r24
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	cf 01       	movw	r24, r30
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	25 e0       	ldi	r18, 0x05	; 5
    1e30:	ee 0f       	add	r30, r30
    1e32:	ff 1f       	adc	r31, r31
    1e34:	2a 95       	dec	r18
    1e36:	e1 f7       	brne	.-8      	; 0x1e30 <_nrk_stats_task_start+0xb4>
    1e38:	e8 1b       	sub	r30, r24
    1e3a:	f9 0b       	sbc	r31, r25
    1e3c:	ec 5f       	subi	r30, 0xFC	; 252
    1e3e:	f9 4f       	sbci	r31, 0xF9	; 249
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	85 8f       	std	Z+29, r24	; 0x1d
    1e44:	08 95       	ret

00001e46 <_nrk_stats_task_preempted>:
}


void _nrk_stats_task_preempted(uint8_t task_id, uint8_t ticks)
{
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	a8 2f       	mov	r26, r24
    if( cur_task_stats[task_id].overflow==1) return;
    1e50:	e8 2f       	mov	r30, r24
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	cf 01       	movw	r24, r30
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	75 e0       	ldi	r23, 0x05	; 5
    1e5c:	ee 0f       	add	r30, r30
    1e5e:	ff 1f       	adc	r31, r31
    1e60:	7a 95       	dec	r23
    1e62:	e1 f7       	brne	.-8      	; 0x1e5c <_nrk_stats_task_preempted+0x16>
    1e64:	e8 1b       	sub	r30, r24
    1e66:	f9 0b       	sbc	r31, r25
    1e68:	ec 5f       	subi	r30, 0xFC	; 252
    1e6a:	f9 4f       	sbci	r31, 0xF9	; 249
    1e6c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <_nrk_stats_task_preempted+0x2e>
    1e72:	b1 c0       	rjmp	.+354    	; 0x1fd6 <_nrk_stats_task_preempted+0x190>
    cur_task_stats[task_id].preempted++;
    1e74:	ea 2f       	mov	r30, r26
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	cf 01       	movw	r24, r30
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	45 e0       	ldi	r20, 0x05	; 5
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	4a 95       	dec	r20
    1e86:	e1 f7       	brne	.-8      	; 0x1e80 <_nrk_stats_task_preempted+0x3a>
    1e88:	e8 1b       	sub	r30, r24
    1e8a:	f9 0b       	sbc	r31, r25
    1e8c:	ec 5f       	subi	r30, 0xFC	; 252
    1e8e:	f9 4f       	sbci	r31, 0xF9	; 249
    1e90:	ea 2e       	mov	r14, r26
    1e92:	e7 01       	movw	r28, r14
    1e94:	7e 01       	movw	r14, r28
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	f2 2e       	mov	r15, r18
    1e9a:	e7 01       	movw	r28, r14
    1e9c:	c7 01       	movw	r24, r14
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	25 e0       	ldi	r18, 0x05	; 5
    1ea4:	cc 0f       	add	r28, r28
    1ea6:	dd 1f       	adc	r29, r29
    1ea8:	2a 95       	dec	r18
    1eaa:	e1 f7       	brne	.-8      	; 0x1ea4 <_nrk_stats_task_preempted+0x5e>
    1eac:	c8 1b       	sub	r28, r24
    1eae:	d9 0b       	sbc	r29, r25
    1eb0:	cc 5f       	subi	r28, 0xFC	; 252
    1eb2:	d9 4f       	sbci	r29, 0xF9	; 249
    1eb4:	28 8d       	ldd	r18, Y+24	; 0x18
    1eb6:	39 8d       	ldd	r19, Y+25	; 0x19
    1eb8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1eba:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1ebc:	2f 5f       	subi	r18, 0xFF	; 255
    1ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec4:	20 8f       	std	Z+24, r18	; 0x18
    1ec6:	31 8f       	std	Z+25, r19	; 0x19
    1ec8:	42 8f       	std	Z+26, r20	; 0x1a
    1eca:	53 8f       	std	Z+27, r21	; 0x1b
    cur_task_stats[task_id].cur_ticks+=ticks;
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	ea 2f       	mov	r30, r26
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	9f 01       	movw	r18, r30
    1ed8:	22 0f       	add	r18, r18
    1eda:	33 1f       	adc	r19, r19
    1edc:	55 e0       	ldi	r21, 0x05	; 5
    1ede:	ee 0f       	add	r30, r30
    1ee0:	ff 1f       	adc	r31, r31
    1ee2:	5a 95       	dec	r21
    1ee4:	e1 f7       	brne	.-8      	; 0x1ede <_nrk_stats_task_preempted+0x98>
    1ee6:	e2 1b       	sub	r30, r18
    1ee8:	f3 0b       	sbc	r31, r19
    1eea:	ec 5f       	subi	r30, 0xFC	; 252
    1eec:	f9 4f       	sbci	r31, 0xF9	; 249
    1eee:	ea 2e       	mov	r14, r26
    1ef0:	e7 01       	movw	r28, r14
    1ef2:	7e 01       	movw	r14, r28
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	f2 2e       	mov	r15, r18
    1ef8:	e7 01       	movw	r28, r14
    1efa:	97 01       	movw	r18, r14
    1efc:	22 0f       	add	r18, r18
    1efe:	33 1f       	adc	r19, r19
    1f00:	b5 e0       	ldi	r27, 0x05	; 5
    1f02:	cc 0f       	add	r28, r28
    1f04:	dd 1f       	adc	r29, r29
    1f06:	ba 95       	dec	r27
    1f08:	e1 f7       	brne	.-8      	; 0x1f02 <_nrk_stats_task_preempted+0xbc>
    1f0a:	c2 1b       	sub	r28, r18
    1f0c:	d3 0b       	sbc	r29, r19
    1f0e:	cc 5f       	subi	r28, 0xFC	; 252
    1f10:	d9 4f       	sbci	r29, 0xF9	; 249
    1f12:	2c 89       	ldd	r18, Y+20	; 0x14
    1f14:	3d 89       	ldd	r19, Y+21	; 0x15
    1f16:	4e 89       	ldd	r20, Y+22	; 0x16
    1f18:	5f 89       	ldd	r21, Y+23	; 0x17
    1f1a:	26 0f       	add	r18, r22
    1f1c:	37 1f       	adc	r19, r23
    1f1e:	48 1f       	adc	r20, r24
    1f20:	59 1f       	adc	r21, r25
    1f22:	24 8b       	std	Z+20, r18	; 0x14
    1f24:	35 8b       	std	Z+21, r19	; 0x15
    1f26:	46 8b       	std	Z+22, r20	; 0x16
    1f28:	57 8b       	std	Z+23, r21	; 0x17
    cur_task_stats[task_id].total_ticks+=ticks;
    1f2a:	ea 2f       	mov	r30, r26
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	9f 01       	movw	r18, r30
    1f30:	22 0f       	add	r18, r18
    1f32:	33 1f       	adc	r19, r19
    1f34:	45 e0       	ldi	r20, 0x05	; 5
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	4a 95       	dec	r20
    1f3c:	e1 f7       	brne	.-8      	; 0x1f36 <_nrk_stats_task_preempted+0xf0>
    1f3e:	e2 1b       	sub	r30, r18
    1f40:	f3 0b       	sbc	r31, r19
    1f42:	ec 5f       	subi	r30, 0xFC	; 252
    1f44:	f9 4f       	sbci	r31, 0xF9	; 249
    1f46:	ea 2e       	mov	r14, r26
    1f48:	e7 01       	movw	r28, r14
    1f4a:	7e 01       	movw	r14, r28
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	f2 2e       	mov	r15, r18
    1f50:	e7 01       	movw	r28, r14
    1f52:	97 01       	movw	r18, r14
    1f54:	22 0f       	add	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	55 e0       	ldi	r21, 0x05	; 5
    1f5a:	cc 0f       	add	r28, r28
    1f5c:	dd 1f       	adc	r29, r29
    1f5e:	5a 95       	dec	r21
    1f60:	e1 f7       	brne	.-8      	; 0x1f5a <_nrk_stats_task_preempted+0x114>
    1f62:	c2 1b       	sub	r28, r18
    1f64:	d3 0b       	sbc	r29, r19
    1f66:	cc 5f       	subi	r28, 0xFC	; 252
    1f68:	d9 4f       	sbci	r29, 0xF9	; 249
    1f6a:	28 81       	ld	r18, Y
    1f6c:	39 81       	ldd	r19, Y+1	; 0x01
    1f6e:	4a 81       	ldd	r20, Y+2	; 0x02
    1f70:	5b 81       	ldd	r21, Y+3	; 0x03
    1f72:	26 0f       	add	r18, r22
    1f74:	37 1f       	adc	r19, r23
    1f76:	48 1f       	adc	r20, r24
    1f78:	59 1f       	adc	r21, r25
    1f7a:	20 83       	st	Z, r18
    1f7c:	31 83       	std	Z+1, r19	; 0x01
    1f7e:	42 83       	std	Z+2, r20	; 0x02
    1f80:	53 83       	std	Z+3, r21	; 0x03
    if(cur_task_stats[task_id].preempted==(UINT32_MAX-1)) cur_task_stats[task_id].overflow=1;
    1f82:	ea 2f       	mov	r30, r26
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	cf 01       	movw	r24, r30
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	35 e0       	ldi	r19, 0x05	; 5
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	3a 95       	dec	r19
    1f94:	e1 f7       	brne	.-8      	; 0x1f8e <_nrk_stats_task_preempted+0x148>
    1f96:	e8 1b       	sub	r30, r24
    1f98:	f9 0b       	sbc	r31, r25
    1f9a:	ec 5f       	subi	r30, 0xFC	; 252
    1f9c:	f9 4f       	sbci	r31, 0xF9	; 249
    1f9e:	20 8d       	ldd	r18, Z+24	; 0x18
    1fa0:	31 8d       	ldd	r19, Z+25	; 0x19
    1fa2:	42 8d       	ldd	r20, Z+26	; 0x1a
    1fa4:	53 8d       	ldd	r21, Z+27	; 0x1b
    1fa6:	2e 3f       	cpi	r18, 0xFE	; 254
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	38 07       	cpc	r19, r24
    1fac:	8f ef       	ldi	r24, 0xFF	; 255
    1fae:	48 07       	cpc	r20, r24
    1fb0:	8f ef       	ldi	r24, 0xFF	; 255
    1fb2:	58 07       	cpc	r21, r24
    1fb4:	81 f4       	brne	.+32     	; 0x1fd6 <_nrk_stats_task_preempted+0x190>
    1fb6:	ea 2f       	mov	r30, r26
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	cf 01       	movw	r24, r30
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	b5 e0       	ldi	r27, 0x05	; 5
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	ba 95       	dec	r27
    1fc8:	e1 f7       	brne	.-8      	; 0x1fc2 <_nrk_stats_task_preempted+0x17c>
    1fca:	e8 1b       	sub	r30, r24
    1fcc:	f9 0b       	sbc	r31, r25
    1fce:	ec 5f       	subi	r30, 0xFC	; 252
    1fd0:	f9 4f       	sbci	r31, 0xF9	; 249
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	85 8f       	std	Z+29, r24	; 0x1d
}
    1fd6:	df 91       	pop	r29
    1fd8:	cf 91       	pop	r28
    1fda:	ff 90       	pop	r15
    1fdc:	ef 90       	pop	r14
    1fde:	08 95       	ret

00001fe0 <_nrk_stats_task_suspend>:

void _nrk_stats_task_suspend(uint8_t task_id, uint8_t ticks)
{
    1fe0:	ef 92       	push	r14
    1fe2:	ff 92       	push	r15
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	e8 2f       	mov	r30, r24
    if( cur_task_stats[task_id].overflow==1) return;
    1fea:	a8 2f       	mov	r26, r24
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	cd 01       	movw	r24, r26
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	75 e0       	ldi	r23, 0x05	; 5
    1ff6:	aa 0f       	add	r26, r26
    1ff8:	bb 1f       	adc	r27, r27
    1ffa:	7a 95       	dec	r23
    1ffc:	e1 f7       	brne	.-8      	; 0x1ff6 <_nrk_stats_task_suspend+0x16>
    1ffe:	a8 1b       	sub	r26, r24
    2000:	b9 0b       	sbc	r27, r25
    2002:	ac 5f       	subi	r26, 0xFC	; 252
    2004:	b9 4f       	sbci	r27, 0xF9	; 249
    2006:	5d 96       	adiw	r26, 0x1d	; 29
    2008:	8c 91       	ld	r24, X
    200a:	5d 97       	sbiw	r26, 0x1d	; 29
    200c:	81 30       	cpi	r24, 0x01	; 1
    200e:	09 f4       	brne	.+2      	; 0x2012 <_nrk_stats_task_suspend+0x32>
    2010:	fa c0       	rjmp	.+500    	; 0x2206 <_nrk_stats_task_suspend+0x226>
    cur_task_stats[task_id].last_exec_ticks = cur_task_stats[task_id].cur_ticks+ticks;
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	ae 2f       	mov	r26, r30
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	9d 01       	movw	r18, r26
    201e:	22 0f       	add	r18, r18
    2020:	33 1f       	adc	r19, r19
    2022:	45 e0       	ldi	r20, 0x05	; 5
    2024:	aa 0f       	add	r26, r26
    2026:	bb 1f       	adc	r27, r27
    2028:	4a 95       	dec	r20
    202a:	e1 f7       	brne	.-8      	; 0x2024 <_nrk_stats_task_suspend+0x44>
    202c:	a2 1b       	sub	r26, r18
    202e:	b3 0b       	sbc	r27, r19
    2030:	ac 5f       	subi	r26, 0xFC	; 252
    2032:	b9 4f       	sbci	r27, 0xF9	; 249
    2034:	ee 2e       	mov	r14, r30
    2036:	e7 01       	movw	r28, r14
    2038:	7e 01       	movw	r14, r28
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	f2 2e       	mov	r15, r18
    203e:	e7 01       	movw	r28, r14
    2040:	97 01       	movw	r18, r14
    2042:	22 0f       	add	r18, r18
    2044:	33 1f       	adc	r19, r19
    2046:	55 e0       	ldi	r21, 0x05	; 5
    2048:	cc 0f       	add	r28, r28
    204a:	dd 1f       	adc	r29, r29
    204c:	5a 95       	dec	r21
    204e:	e1 f7       	brne	.-8      	; 0x2048 <_nrk_stats_task_suspend+0x68>
    2050:	c2 1b       	sub	r28, r18
    2052:	d3 0b       	sbc	r29, r19
    2054:	cc 5f       	subi	r28, 0xFC	; 252
    2056:	d9 4f       	sbci	r29, 0xF9	; 249
    2058:	2c 89       	ldd	r18, Y+20	; 0x14
    205a:	3d 89       	ldd	r19, Y+21	; 0x15
    205c:	4e 89       	ldd	r20, Y+22	; 0x16
    205e:	5f 89       	ldd	r21, Y+23	; 0x17
    2060:	26 0f       	add	r18, r22
    2062:	37 1f       	adc	r19, r23
    2064:	48 1f       	adc	r20, r24
    2066:	59 1f       	adc	r21, r25
    2068:	1c 96       	adiw	r26, 0x0c	; 12
    206a:	2d 93       	st	X+, r18
    206c:	3d 93       	st	X+, r19
    206e:	4d 93       	st	X+, r20
    2070:	5c 93       	st	X, r21
    2072:	1f 97       	sbiw	r26, 0x0f	; 15
    cur_task_stats[task_id].total_ticks+=ticks;
    2074:	ae 2f       	mov	r26, r30
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	9d 01       	movw	r18, r26
    207a:	22 0f       	add	r18, r18
    207c:	33 1f       	adc	r19, r19
    207e:	f5 e0       	ldi	r31, 0x05	; 5
    2080:	aa 0f       	add	r26, r26
    2082:	bb 1f       	adc	r27, r27
    2084:	fa 95       	dec	r31
    2086:	e1 f7       	brne	.-8      	; 0x2080 <_nrk_stats_task_suspend+0xa0>
    2088:	a2 1b       	sub	r26, r18
    208a:	b3 0b       	sbc	r27, r19
    208c:	ac 5f       	subi	r26, 0xFC	; 252
    208e:	b9 4f       	sbci	r27, 0xF9	; 249
    2090:	ee 2e       	mov	r14, r30
    2092:	e7 01       	movw	r28, r14
    2094:	7e 01       	movw	r14, r28
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	f2 2e       	mov	r15, r18
    209a:	e7 01       	movw	r28, r14
    209c:	97 01       	movw	r18, r14
    209e:	22 0f       	add	r18, r18
    20a0:	33 1f       	adc	r19, r19
    20a2:	45 e0       	ldi	r20, 0x05	; 5
    20a4:	cc 0f       	add	r28, r28
    20a6:	dd 1f       	adc	r29, r29
    20a8:	4a 95       	dec	r20
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <_nrk_stats_task_suspend+0xc4>
    20ac:	c2 1b       	sub	r28, r18
    20ae:	d3 0b       	sbc	r29, r19
    20b0:	cc 5f       	subi	r28, 0xFC	; 252
    20b2:	d9 4f       	sbci	r29, 0xF9	; 249
    20b4:	28 81       	ld	r18, Y
    20b6:	39 81       	ldd	r19, Y+1	; 0x01
    20b8:	4a 81       	ldd	r20, Y+2	; 0x02
    20ba:	5b 81       	ldd	r21, Y+3	; 0x03
    20bc:	26 0f       	add	r18, r22
    20be:	37 1f       	adc	r19, r23
    20c0:	48 1f       	adc	r20, r24
    20c2:	59 1f       	adc	r21, r25
    20c4:	2d 93       	st	X+, r18
    20c6:	3d 93       	st	X+, r19
    20c8:	4d 93       	st	X+, r20
    20ca:	5c 93       	st	X, r21
    20cc:	13 97       	sbiw	r26, 0x03	; 3

    if(cur_task_stats[task_id].min_exec_ticks==0 || cur_task_stats[task_id].last_exec_ticks<cur_task_stats[task_id].min_exec_ticks)
    20ce:	ae 2f       	mov	r26, r30
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	cd 01       	movw	r24, r26
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	f5 e0       	ldi	r31, 0x05	; 5
    20da:	aa 0f       	add	r26, r26
    20dc:	bb 1f       	adc	r27, r27
    20de:	fa 95       	dec	r31
    20e0:	e1 f7       	brne	.-8      	; 0x20da <_nrk_stats_task_suspend+0xfa>
    20e2:	a8 1b       	sub	r26, r24
    20e4:	b9 0b       	sbc	r27, r25
    20e6:	ac 5f       	subi	r26, 0xFC	; 252
    20e8:	b9 4f       	sbci	r27, 0xF9	; 249
    20ea:	14 96       	adiw	r26, 0x04	; 4
    20ec:	2d 91       	ld	r18, X+
    20ee:	3d 91       	ld	r19, X+
    20f0:	4d 91       	ld	r20, X+
    20f2:	5c 91       	ld	r21, X
    20f4:	17 97       	sbiw	r26, 0x07	; 7
    20f6:	21 15       	cp	r18, r1
    20f8:	31 05       	cpc	r19, r1
    20fa:	41 05       	cpc	r20, r1
    20fc:	51 05       	cpc	r21, r1
    20fe:	c9 f0       	breq	.+50     	; 0x2132 <_nrk_stats_task_suspend+0x152>
    2100:	ae 2f       	mov	r26, r30
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	cd 01       	movw	r24, r26
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	65 e0       	ldi	r22, 0x05	; 5
    210c:	aa 0f       	add	r26, r26
    210e:	bb 1f       	adc	r27, r27
    2110:	6a 95       	dec	r22
    2112:	e1 f7       	brne	.-8      	; 0x210c <_nrk_stats_task_suspend+0x12c>
    2114:	a8 1b       	sub	r26, r24
    2116:	b9 0b       	sbc	r27, r25
    2118:	ac 5f       	subi	r26, 0xFC	; 252
    211a:	b9 4f       	sbci	r27, 0xF9	; 249
    211c:	1c 96       	adiw	r26, 0x0c	; 12
    211e:	8d 91       	ld	r24, X+
    2120:	9d 91       	ld	r25, X+
    2122:	0d 90       	ld	r0, X+
    2124:	bc 91       	ld	r27, X
    2126:	a0 2d       	mov	r26, r0
    2128:	82 17       	cp	r24, r18
    212a:	93 07       	cpc	r25, r19
    212c:	a4 07       	cpc	r26, r20
    212e:	b5 07       	cpc	r27, r21
    2130:	50 f5       	brcc	.+84     	; 0x2186 <_nrk_stats_task_suspend+0x1a6>
        cur_task_stats[task_id].min_exec_ticks=cur_task_stats[task_id].last_exec_ticks;
    2132:	8e 2f       	mov	r24, r30
    2134:	ec 01       	movw	r28, r24
    2136:	7e 01       	movw	r14, r28
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	f2 2e       	mov	r15, r18
    213c:	e7 01       	movw	r28, r14
    213e:	c7 01       	movw	r24, r14
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	45 e0       	ldi	r20, 0x05	; 5
    2146:	cc 0f       	add	r28, r28
    2148:	dd 1f       	adc	r29, r29
    214a:	4a 95       	dec	r20
    214c:	e1 f7       	brne	.-8      	; 0x2146 <_nrk_stats_task_suspend+0x166>
    214e:	c8 1b       	sub	r28, r24
    2150:	d9 0b       	sbc	r29, r25
    2152:	cc 5f       	subi	r28, 0xFC	; 252
    2154:	d9 4f       	sbci	r29, 0xF9	; 249
    2156:	ae 2f       	mov	r26, r30
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	cd 01       	movw	r24, r26
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	25 e0       	ldi	r18, 0x05	; 5
    2162:	aa 0f       	add	r26, r26
    2164:	bb 1f       	adc	r27, r27
    2166:	2a 95       	dec	r18
    2168:	e1 f7       	brne	.-8      	; 0x2162 <_nrk_stats_task_suspend+0x182>
    216a:	a8 1b       	sub	r26, r24
    216c:	b9 0b       	sbc	r27, r25
    216e:	ac 5f       	subi	r26, 0xFC	; 252
    2170:	b9 4f       	sbci	r27, 0xF9	; 249
    2172:	1c 96       	adiw	r26, 0x0c	; 12
    2174:	8d 91       	ld	r24, X+
    2176:	9d 91       	ld	r25, X+
    2178:	0d 90       	ld	r0, X+
    217a:	bc 91       	ld	r27, X
    217c:	a0 2d       	mov	r26, r0
    217e:	8c 83       	std	Y+4, r24	; 0x04
    2180:	9d 83       	std	Y+5, r25	; 0x05
    2182:	ae 83       	std	Y+6, r26	; 0x06
    2184:	bf 83       	std	Y+7, r27	; 0x07

    if(cur_task_stats[task_id].last_exec_ticks>cur_task_stats[task_id].max_exec_ticks)
    2186:	ae 2f       	mov	r26, r30
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	cd 01       	movw	r24, r26
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	75 e0       	ldi	r23, 0x05	; 5
    2192:	aa 0f       	add	r26, r26
    2194:	bb 1f       	adc	r27, r27
    2196:	7a 95       	dec	r23
    2198:	e1 f7       	brne	.-8      	; 0x2192 <_nrk_stats_task_suspend+0x1b2>
    219a:	a8 1b       	sub	r26, r24
    219c:	b9 0b       	sbc	r27, r25
    219e:	ac 5f       	subi	r26, 0xFC	; 252
    21a0:	b9 4f       	sbci	r27, 0xF9	; 249
    21a2:	1c 96       	adiw	r26, 0x0c	; 12
    21a4:	2d 91       	ld	r18, X+
    21a6:	3d 91       	ld	r19, X+
    21a8:	4d 91       	ld	r20, X+
    21aa:	5c 91       	ld	r21, X
    21ac:	1f 97       	sbiw	r26, 0x0f	; 15
    21ae:	ae 2f       	mov	r26, r30
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	cd 01       	movw	r24, r26
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	f5 e0       	ldi	r31, 0x05	; 5
    21ba:	aa 0f       	add	r26, r26
    21bc:	bb 1f       	adc	r27, r27
    21be:	fa 95       	dec	r31
    21c0:	e1 f7       	brne	.-8      	; 0x21ba <_nrk_stats_task_suspend+0x1da>
    21c2:	a8 1b       	sub	r26, r24
    21c4:	b9 0b       	sbc	r27, r25
    21c6:	ac 5f       	subi	r26, 0xFC	; 252
    21c8:	b9 4f       	sbci	r27, 0xF9	; 249
    21ca:	18 96       	adiw	r26, 0x08	; 8
    21cc:	6d 91       	ld	r22, X+
    21ce:	7d 91       	ld	r23, X+
    21d0:	8d 91       	ld	r24, X+
    21d2:	9c 91       	ld	r25, X
    21d4:	1b 97       	sbiw	r26, 0x0b	; 11
    21d6:	62 17       	cp	r22, r18
    21d8:	73 07       	cpc	r23, r19
    21da:	84 07       	cpc	r24, r20
    21dc:	95 07       	cpc	r25, r21
    21de:	98 f4       	brcc	.+38     	; 0x2206 <_nrk_stats_task_suspend+0x226>
        cur_task_stats[task_id].max_exec_ticks=cur_task_stats[task_id].last_exec_ticks;
    21e0:	8e 2f       	mov	r24, r30
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	bc 01       	movw	r22, r24
    21e6:	66 0f       	add	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	fc 01       	movw	r30, r24
    21ec:	85 e0       	ldi	r24, 0x05	; 5
    21ee:	ee 0f       	add	r30, r30
    21f0:	ff 1f       	adc	r31, r31
    21f2:	8a 95       	dec	r24
    21f4:	e1 f7       	brne	.-8      	; 0x21ee <_nrk_stats_task_suspend+0x20e>
    21f6:	e6 1b       	sub	r30, r22
    21f8:	f7 0b       	sbc	r31, r23
    21fa:	ec 5f       	subi	r30, 0xFC	; 252
    21fc:	f9 4f       	sbci	r31, 0xF9	; 249
    21fe:	20 87       	std	Z+8, r18	; 0x08
    2200:	31 87       	std	Z+9, r19	; 0x09
    2202:	42 87       	std	Z+10, r20	; 0x0a
    2204:	53 87       	std	Z+11, r21	; 0x0b

}
    2206:	df 91       	pop	r29
    2208:	cf 91       	pop	r28
    220a:	ff 90       	pop	r15
    220c:	ef 90       	pop	r14
    220e:	08 95       	ret

00002210 <nrk_stats_display_pid>:



void nrk_stats_display_pid(uint8_t pid)
{
    2210:	8f 92       	push	r8
    2212:	9f 92       	push	r9
    2214:	af 92       	push	r10
    2216:	bf 92       	push	r11
    2218:	cf 92       	push	r12
    221a:	df 92       	push	r13
    221c:	ef 92       	push	r14
    221e:	ff 92       	push	r15
    2220:	1f 93       	push	r17
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	60 97       	sbiw	r28, 0x10	; 16
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	18 2f       	mov	r17, r24
    nrk_time_t t;

    nrk_kprintf( PSTR( " Task ID: "));
    2238:	87 e7       	ldi	r24, 0x77	; 119
    223a:	92 e0       	ldi	r25, 0x02	; 2
    223c:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>
    printf( "%d",pid );
    2240:	00 d0       	rcall	.+0      	; 0x2242 <nrk_stats_display_pid+0x32>
    2242:	00 d0       	rcall	.+0      	; 0x2244 <nrk_stats_display_pid+0x34>
    2244:	ed b7       	in	r30, 0x3d	; 61
    2246:	fe b7       	in	r31, 0x3e	; 62
    2248:	31 96       	adiw	r30, 0x01	; 1
    224a:	84 e5       	ldi	r24, 0x54	; 84
    224c:	92 e0       	ldi	r25, 0x02	; 2
    224e:	ad b7       	in	r26, 0x3d	; 61
    2250:	be b7       	in	r27, 0x3e	; 62
    2252:	12 96       	adiw	r26, 0x02	; 2
    2254:	9c 93       	st	X, r25
    2256:	8e 93       	st	-X, r24
    2258:	11 97       	sbiw	r26, 0x01	; 1
    225a:	12 83       	std	Z+2, r17	; 0x02
    225c:	13 82       	std	Z+3, r1	; 0x03
    225e:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    if(pid==NRK_IDLE_TASK_ID)
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	11 23       	and	r17, r17
    226c:	09 f0       	breq	.+2      	; 0x2270 <nrk_stats_display_pid+0x60>
    226e:	85 c0       	rjmp	.+266    	; 0x237a <nrk_stats_display_pid+0x16a>
    {
        nrk_kprintf( PSTR( "\r\n   Total System Uptime: "));
    2270:	8c e5       	ldi	r24, 0x5C	; 92
    2272:	92 e0       	ldi	r25, 0x02	; 2
    2274:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>
        nrk_time_get(&t);
    2278:	ce 01       	movw	r24, r28
    227a:	01 96       	adiw	r24, 0x01	; 1
    227c:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <nrk_time_get>
        printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    2280:	ed b7       	in	r30, 0x3d	; 61
    2282:	fe b7       	in	r31, 0x3e	; 62
    2284:	3a 97       	sbiw	r30, 0x0a	; 10
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	fe bf       	out	0x3e, r31	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	ed bf       	out	0x3d, r30	; 61
    2290:	8d b6       	in	r8, 0x3d	; 61
    2292:	9e b6       	in	r9, 0x3e	; 62
    2294:	08 94       	sec
    2296:	81 1c       	adc	r8, r1
    2298:	91 1c       	adc	r9, r1
    229a:	37 e5       	ldi	r19, 0x57	; 87
    229c:	a3 2e       	mov	r10, r19
    229e:	32 e0       	ldi	r19, 0x02	; 2
    22a0:	b3 2e       	mov	r11, r19
    22a2:	b2 82       	std	Z+2, r11	; 0x02
    22a4:	a1 82       	std	Z+1, r10	; 0x01
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	9a 81       	ldd	r25, Y+2	; 0x02
    22aa:	ab 81       	ldd	r26, Y+3	; 0x03
    22ac:	bc 81       	ldd	r27, Y+4	; 0x04
    22ae:	f4 01       	movw	r30, r8
    22b0:	82 83       	std	Z+2, r24	; 0x02
    22b2:	93 83       	std	Z+3, r25	; 0x03
    22b4:	a4 83       	std	Z+4, r26	; 0x04
    22b6:	b5 83       	std	Z+5, r27	; 0x05
    22b8:	6d 81       	ldd	r22, Y+5	; 0x05
    22ba:	7e 81       	ldd	r23, Y+6	; 0x06
    22bc:	8f 81       	ldd	r24, Y+7	; 0x07
    22be:	98 85       	ldd	r25, Y+8	; 0x08
    22c0:	20 e4       	ldi	r18, 0x40	; 64
    22c2:	c2 2e       	mov	r12, r18
    22c4:	22 e4       	ldi	r18, 0x42	; 66
    22c6:	d2 2e       	mov	r13, r18
    22c8:	2f e0       	ldi	r18, 0x0F	; 15
    22ca:	e2 2e       	mov	r14, r18
    22cc:	f1 2c       	mov	r15, r1
    22ce:	a7 01       	movw	r20, r14
    22d0:	96 01       	movw	r18, r12
    22d2:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    22d6:	d4 01       	movw	r26, r8
    22d8:	16 96       	adiw	r26, 0x06	; 6
    22da:	2d 93       	st	X+, r18
    22dc:	3d 93       	st	X+, r19
    22de:	4d 93       	st	X+, r20
    22e0:	5c 93       	st	X, r21
    22e2:	19 97       	sbiw	r26, 0x09	; 9
    22e4:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
        nrk_kprintf( PSTR( "\r\n   Idle Task Deep Sleep Time: "));
    22e8:	ed b7       	in	r30, 0x3d	; 61
    22ea:	fe b7       	in	r31, 0x3e	; 62
    22ec:	3a 96       	adiw	r30, 0x0a	; 10
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	fe bf       	out	0x3e, r31	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	ed bf       	out	0x3d, r30	; 61
    22f8:	8b e3       	ldi	r24, 0x3B	; 59
    22fa:	92 e0       	ldi	r25, 0x02	; 2
    22fc:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>
        //t=_nrk_ticks_to_time(_nrk_stats_sleep_time);
        //printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
        printf( "%lu secs %lu ms", _nrk_stats_sleep_time.secs, _nrk_stats_sleep_time.nano_secs/NANOS_PER_MS);
    2300:	8d b7       	in	r24, 0x3d	; 61
    2302:	9e b7       	in	r25, 0x3e	; 62
    2304:	0a 97       	sbiw	r24, 0x0a	; 10
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	9e bf       	out	0x3e, r25	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	8d bf       	out	0x3d, r24	; 61
    2310:	8d b6       	in	r8, 0x3d	; 61
    2312:	9e b6       	in	r9, 0x3e	; 62
    2314:	08 94       	sec
    2316:	81 1c       	adc	r8, r1
    2318:	91 1c       	adc	r9, r1
    231a:	ad b7       	in	r26, 0x3d	; 61
    231c:	be b7       	in	r27, 0x3e	; 62
    231e:	12 96       	adiw	r26, 0x02	; 2
    2320:	bc 92       	st	X, r11
    2322:	ae 92       	st	-X, r10
    2324:	11 97       	sbiw	r26, 0x01	; 1
    2326:	80 91 ec 05 	lds	r24, 0x05EC
    232a:	90 91 ed 05 	lds	r25, 0x05ED
    232e:	a0 91 ee 05 	lds	r26, 0x05EE
    2332:	b0 91 ef 05 	lds	r27, 0x05EF
    2336:	f4 01       	movw	r30, r8
    2338:	82 83       	std	Z+2, r24	; 0x02
    233a:	93 83       	std	Z+3, r25	; 0x03
    233c:	a4 83       	std	Z+4, r26	; 0x04
    233e:	b5 83       	std	Z+5, r27	; 0x05
    2340:	60 91 f0 05 	lds	r22, 0x05F0
    2344:	70 91 f1 05 	lds	r23, 0x05F1
    2348:	80 91 f2 05 	lds	r24, 0x05F2
    234c:	90 91 f3 05 	lds	r25, 0x05F3
    2350:	a7 01       	movw	r20, r14
    2352:	96 01       	movw	r18, r12
    2354:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    2358:	d4 01       	movw	r26, r8
    235a:	16 96       	adiw	r26, 0x06	; 6
    235c:	2d 93       	st	X+, r18
    235e:	3d 93       	st	X+, r19
    2360:	4d 93       	st	X+, r20
    2362:	5c 93       	st	X, r21
    2364:	19 97       	sbiw	r26, 0x09	; 9
    2366:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    236a:	ed b7       	in	r30, 0x3d	; 61
    236c:	fe b7       	in	r31, 0x3e	; 62
    236e:	3a 96       	adiw	r30, 0x0a	; 10
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	fe bf       	out	0x3e, r31	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	ed bf       	out	0x3d, r30	; 61
    }
    nrk_kprintf( PSTR( "\r\n   Total CPU: "));
    237a:	8a e2       	ldi	r24, 0x2A	; 42
    237c:	92 e0       	ldi	r25, 0x02	; 2
    237e:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].total_ticks);
    2382:	e1 2f       	mov	r30, r17
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	cf 01       	movw	r24, r30
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	a5 e0       	ldi	r26, 0x05	; 5
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31
    2392:	aa 95       	dec	r26
    2394:	e1 f7       	brne	.-8      	; 0x238e <nrk_stats_display_pid+0x17e>
    2396:	e8 1b       	sub	r30, r24
    2398:	f9 0b       	sbc	r31, r25
    239a:	ec 5f       	subi	r30, 0xFC	; 252
    239c:	f9 4f       	sbci	r31, 0xF9	; 249
    239e:	60 81       	ld	r22, Z
    23a0:	71 81       	ldd	r23, Z+1	; 0x01
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	0e 94 93 20 	call	0x4126	; 0x4126 <_nrk_ticks_to_time>
    23aa:	29 87       	std	Y+9, r18	; 0x09
    23ac:	3a 87       	std	Y+10, r19	; 0x0a
    23ae:	4b 87       	std	Y+11, r20	; 0x0b
    23b0:	5c 87       	std	Y+12, r21	; 0x0c
    23b2:	6d 87       	std	Y+13, r22	; 0x0d
    23b4:	7e 87       	std	Y+14, r23	; 0x0e
    23b6:	8f 87       	std	Y+15, r24	; 0x0f
    23b8:	98 8b       	std	Y+16, r25	; 0x10
    23ba:	de 01       	movw	r26, r28
    23bc:	11 96       	adiw	r26, 0x01	; 1
    23be:	fe 01       	movw	r30, r28
    23c0:	39 96       	adiw	r30, 0x09	; 9
    23c2:	88 e0       	ldi	r24, 0x08	; 8
    23c4:	01 90       	ld	r0, Z+
    23c6:	0d 92       	st	X+, r0
    23c8:	81 50       	subi	r24, 0x01	; 1
    23ca:	e1 f7       	brne	.-8      	; 0x23c4 <nrk_stats_display_pid+0x1b4>
    printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    23cc:	8d b7       	in	r24, 0x3d	; 61
    23ce:	9e b7       	in	r25, 0x3e	; 62
    23d0:	0a 97       	sbiw	r24, 0x0a	; 10
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	9e bf       	out	0x3e, r25	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	8d bf       	out	0x3d, r24	; 61
    23dc:	cd b6       	in	r12, 0x3d	; 61
    23de:	de b6       	in	r13, 0x3e	; 62
    23e0:	08 94       	sec
    23e2:	c1 1c       	adc	r12, r1
    23e4:	d1 1c       	adc	r13, r1
    23e6:	87 e5       	ldi	r24, 0x57	; 87
    23e8:	92 e0       	ldi	r25, 0x02	; 2
    23ea:	ad b7       	in	r26, 0x3d	; 61
    23ec:	be b7       	in	r27, 0x3e	; 62
    23ee:	12 96       	adiw	r26, 0x02	; 2
    23f0:	9c 93       	st	X, r25
    23f2:	8e 93       	st	-X, r24
    23f4:	11 97       	sbiw	r26, 0x01	; 1
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	ab 81       	ldd	r26, Y+3	; 0x03
    23fc:	bc 81       	ldd	r27, Y+4	; 0x04
    23fe:	f6 01       	movw	r30, r12
    2400:	82 83       	std	Z+2, r24	; 0x02
    2402:	93 83       	std	Z+3, r25	; 0x03
    2404:	a4 83       	std	Z+4, r26	; 0x04
    2406:	b5 83       	std	Z+5, r27	; 0x05
    2408:	6d 81       	ldd	r22, Y+5	; 0x05
    240a:	7e 81       	ldd	r23, Y+6	; 0x06
    240c:	8f 81       	ldd	r24, Y+7	; 0x07
    240e:	98 85       	ldd	r25, Y+8	; 0x08
    2410:	20 e4       	ldi	r18, 0x40	; 64
    2412:	32 e4       	ldi	r19, 0x42	; 66
    2414:	4f e0       	ldi	r20, 0x0F	; 15
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    241c:	d6 01       	movw	r26, r12
    241e:	16 96       	adiw	r26, 0x06	; 6
    2420:	2d 93       	st	X+, r18
    2422:	3d 93       	st	X+, r19
    2424:	4d 93       	st	X+, r20
    2426:	5c 93       	st	X, r21
    2428:	19 97       	sbiw	r26, 0x09	; 9
    242a:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    nrk_kprintf( PSTR( "\r\n   Time [Min,Last,Max]: "));
    242e:	ed b7       	in	r30, 0x3d	; 61
    2430:	fe b7       	in	r31, 0x3e	; 62
    2432:	3a 96       	adiw	r30, 0x0a	; 10
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	fe bf       	out	0x3e, r31	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	ed bf       	out	0x3d, r30	; 61
    243e:	8f e0       	ldi	r24, 0x0F	; 15
    2440:	92 e0       	ldi	r25, 0x02	; 2
    2442:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].min_exec_ticks);
    2446:	e1 2f       	mov	r30, r17
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	cf 01       	movw	r24, r30
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	65 e0       	ldi	r22, 0x05	; 5
    2452:	ee 0f       	add	r30, r30
    2454:	ff 1f       	adc	r31, r31
    2456:	6a 95       	dec	r22
    2458:	e1 f7       	brne	.-8      	; 0x2452 <nrk_stats_display_pid+0x242>
    245a:	e8 1b       	sub	r30, r24
    245c:	f9 0b       	sbc	r31, r25
    245e:	ec 5f       	subi	r30, 0xFC	; 252
    2460:	f9 4f       	sbci	r31, 0xF9	; 249
    2462:	64 81       	ldd	r22, Z+4	; 0x04
    2464:	75 81       	ldd	r23, Z+5	; 0x05
    2466:	86 81       	ldd	r24, Z+6	; 0x06
    2468:	97 81       	ldd	r25, Z+7	; 0x07
    246a:	0e 94 93 20 	call	0x4126	; 0x4126 <_nrk_ticks_to_time>
    246e:	29 87       	std	Y+9, r18	; 0x09
    2470:	3a 87       	std	Y+10, r19	; 0x0a
    2472:	4b 87       	std	Y+11, r20	; 0x0b
    2474:	5c 87       	std	Y+12, r21	; 0x0c
    2476:	6d 87       	std	Y+13, r22	; 0x0d
    2478:	7e 87       	std	Y+14, r23	; 0x0e
    247a:	8f 87       	std	Y+15, r24	; 0x0f
    247c:	98 8b       	std	Y+16, r25	; 0x10
    247e:	de 01       	movw	r26, r28
    2480:	11 96       	adiw	r26, 0x01	; 1
    2482:	fe 01       	movw	r30, r28
    2484:	39 96       	adiw	r30, 0x09	; 9
    2486:	88 e0       	ldi	r24, 0x08	; 8
    2488:	01 90       	ld	r0, Z+
    248a:	0d 92       	st	X+, r0
    248c:	81 50       	subi	r24, 0x01	; 1
    248e:	e1 f7       	brne	.-8      	; 0x2488 <nrk_stats_display_pid+0x278>
    printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
    2490:	8d b7       	in	r24, 0x3d	; 61
    2492:	9e b7       	in	r25, 0x3e	; 62
    2494:	0a 97       	sbiw	r24, 0x0a	; 10
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	9e bf       	out	0x3e, r25	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	8d bf       	out	0x3d, r24	; 61
    24a0:	cd b6       	in	r12, 0x3d	; 61
    24a2:	de b6       	in	r13, 0x3e	; 62
    24a4:	08 94       	sec
    24a6:	c1 1c       	adc	r12, r1
    24a8:	d1 1c       	adc	r13, r1
    24aa:	87 e6       	ldi	r24, 0x67	; 103
    24ac:	92 e0       	ldi	r25, 0x02	; 2
    24ae:	ad b7       	in	r26, 0x3d	; 61
    24b0:	be b7       	in	r27, 0x3e	; 62
    24b2:	12 96       	adiw	r26, 0x02	; 2
    24b4:	9c 93       	st	X, r25
    24b6:	8e 93       	st	-X, r24
    24b8:	11 97       	sbiw	r26, 0x01	; 1
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	9a 81       	ldd	r25, Y+2	; 0x02
    24be:	ab 81       	ldd	r26, Y+3	; 0x03
    24c0:	bc 81       	ldd	r27, Y+4	; 0x04
    24c2:	f6 01       	movw	r30, r12
    24c4:	82 83       	std	Z+2, r24	; 0x02
    24c6:	93 83       	std	Z+3, r25	; 0x03
    24c8:	a4 83       	std	Z+4, r26	; 0x04
    24ca:	b5 83       	std	Z+5, r27	; 0x05
    24cc:	6d 81       	ldd	r22, Y+5	; 0x05
    24ce:	7e 81       	ldd	r23, Y+6	; 0x06
    24d0:	8f 81       	ldd	r24, Y+7	; 0x07
    24d2:	98 85       	ldd	r25, Y+8	; 0x08
    24d4:	20 e4       	ldi	r18, 0x40	; 64
    24d6:	32 e4       	ldi	r19, 0x42	; 66
    24d8:	4f e0       	ldi	r20, 0x0F	; 15
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    24e0:	d6 01       	movw	r26, r12
    24e2:	16 96       	adiw	r26, 0x06	; 6
    24e4:	2d 93       	st	X+, r18
    24e6:	3d 93       	st	X+, r19
    24e8:	4d 93       	st	X+, r20
    24ea:	5c 93       	st	X, r21
    24ec:	19 97       	sbiw	r26, 0x09	; 9
    24ee:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].last_exec_ticks);
    24f2:	ed b7       	in	r30, 0x3d	; 61
    24f4:	fe b7       	in	r31, 0x3e	; 62
    24f6:	3a 96       	adiw	r30, 0x0a	; 10
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	fe bf       	out	0x3e, r31	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	ed bf       	out	0x3d, r30	; 61
    2502:	e1 2f       	mov	r30, r17
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	cf 01       	movw	r24, r30
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	45 e0       	ldi	r20, 0x05	; 5
    250e:	ee 0f       	add	r30, r30
    2510:	ff 1f       	adc	r31, r31
    2512:	4a 95       	dec	r20
    2514:	e1 f7       	brne	.-8      	; 0x250e <nrk_stats_display_pid+0x2fe>
    2516:	e8 1b       	sub	r30, r24
    2518:	f9 0b       	sbc	r31, r25
    251a:	ec 5f       	subi	r30, 0xFC	; 252
    251c:	f9 4f       	sbci	r31, 0xF9	; 249
    251e:	64 85       	ldd	r22, Z+12	; 0x0c
    2520:	75 85       	ldd	r23, Z+13	; 0x0d
    2522:	86 85       	ldd	r24, Z+14	; 0x0e
    2524:	97 85       	ldd	r25, Z+15	; 0x0f
    2526:	0e 94 93 20 	call	0x4126	; 0x4126 <_nrk_ticks_to_time>
    252a:	29 87       	std	Y+9, r18	; 0x09
    252c:	3a 87       	std	Y+10, r19	; 0x0a
    252e:	4b 87       	std	Y+11, r20	; 0x0b
    2530:	5c 87       	std	Y+12, r21	; 0x0c
    2532:	6d 87       	std	Y+13, r22	; 0x0d
    2534:	7e 87       	std	Y+14, r23	; 0x0e
    2536:	8f 87       	std	Y+15, r24	; 0x0f
    2538:	98 8b       	std	Y+16, r25	; 0x10
    253a:	de 01       	movw	r26, r28
    253c:	11 96       	adiw	r26, 0x01	; 1
    253e:	fe 01       	movw	r30, r28
    2540:	39 96       	adiw	r30, 0x09	; 9
    2542:	88 e0       	ldi	r24, 0x08	; 8
    2544:	01 90       	ld	r0, Z+
    2546:	0d 92       	st	X+, r0
    2548:	81 50       	subi	r24, 0x01	; 1
    254a:	e1 f7       	brne	.-8      	; 0x2544 <nrk_stats_display_pid+0x334>
    printf( "%lu secs %lu ms, ", t.secs, t.nano_secs/NANOS_PER_MS );
    254c:	8d b7       	in	r24, 0x3d	; 61
    254e:	9e b7       	in	r25, 0x3e	; 62
    2550:	0a 97       	sbiw	r24, 0x0a	; 10
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	9e bf       	out	0x3e, r25	; 62
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	8d bf       	out	0x3d, r24	; 61
    255c:	cd b6       	in	r12, 0x3d	; 61
    255e:	de b6       	in	r13, 0x3e	; 62
    2560:	08 94       	sec
    2562:	c1 1c       	adc	r12, r1
    2564:	d1 1c       	adc	r13, r1
    2566:	87 e6       	ldi	r24, 0x67	; 103
    2568:	92 e0       	ldi	r25, 0x02	; 2
    256a:	ad b7       	in	r26, 0x3d	; 61
    256c:	be b7       	in	r27, 0x3e	; 62
    256e:	12 96       	adiw	r26, 0x02	; 2
    2570:	9c 93       	st	X, r25
    2572:	8e 93       	st	-X, r24
    2574:	11 97       	sbiw	r26, 0x01	; 1
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	ab 81       	ldd	r26, Y+3	; 0x03
    257c:	bc 81       	ldd	r27, Y+4	; 0x04
    257e:	f6 01       	movw	r30, r12
    2580:	82 83       	std	Z+2, r24	; 0x02
    2582:	93 83       	std	Z+3, r25	; 0x03
    2584:	a4 83       	std	Z+4, r26	; 0x04
    2586:	b5 83       	std	Z+5, r27	; 0x05
    2588:	6d 81       	ldd	r22, Y+5	; 0x05
    258a:	7e 81       	ldd	r23, Y+6	; 0x06
    258c:	8f 81       	ldd	r24, Y+7	; 0x07
    258e:	98 85       	ldd	r25, Y+8	; 0x08
    2590:	20 e4       	ldi	r18, 0x40	; 64
    2592:	32 e4       	ldi	r19, 0x42	; 66
    2594:	4f e0       	ldi	r20, 0x0F	; 15
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    259c:	d6 01       	movw	r26, r12
    259e:	16 96       	adiw	r26, 0x06	; 6
    25a0:	2d 93       	st	X+, r18
    25a2:	3d 93       	st	X+, r19
    25a4:	4d 93       	st	X+, r20
    25a6:	5c 93       	st	X, r21
    25a8:	19 97       	sbiw	r26, 0x09	; 9
    25aa:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    t=_nrk_ticks_to_time(cur_task_stats[pid].max_exec_ticks);
    25ae:	ed b7       	in	r30, 0x3d	; 61
    25b0:	fe b7       	in	r31, 0x3e	; 62
    25b2:	3a 96       	adiw	r30, 0x0a	; 10
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	fe bf       	out	0x3e, r31	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	ed bf       	out	0x3d, r30	; 61
    25be:	e1 2f       	mov	r30, r17
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	cf 01       	movw	r24, r30
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	25 e0       	ldi	r18, 0x05	; 5
    25ca:	ee 0f       	add	r30, r30
    25cc:	ff 1f       	adc	r31, r31
    25ce:	2a 95       	dec	r18
    25d0:	e1 f7       	brne	.-8      	; 0x25ca <nrk_stats_display_pid+0x3ba>
    25d2:	e8 1b       	sub	r30, r24
    25d4:	f9 0b       	sbc	r31, r25
    25d6:	ec 5f       	subi	r30, 0xFC	; 252
    25d8:	f9 4f       	sbci	r31, 0xF9	; 249
    25da:	60 85       	ldd	r22, Z+8	; 0x08
    25dc:	71 85       	ldd	r23, Z+9	; 0x09
    25de:	82 85       	ldd	r24, Z+10	; 0x0a
    25e0:	93 85       	ldd	r25, Z+11	; 0x0b
    25e2:	0e 94 93 20 	call	0x4126	; 0x4126 <_nrk_ticks_to_time>
    25e6:	29 87       	std	Y+9, r18	; 0x09
    25e8:	3a 87       	std	Y+10, r19	; 0x0a
    25ea:	4b 87       	std	Y+11, r20	; 0x0b
    25ec:	5c 87       	std	Y+12, r21	; 0x0c
    25ee:	6d 87       	std	Y+13, r22	; 0x0d
    25f0:	7e 87       	std	Y+14, r23	; 0x0e
    25f2:	8f 87       	std	Y+15, r24	; 0x0f
    25f4:	98 8b       	std	Y+16, r25	; 0x10
    25f6:	de 01       	movw	r26, r28
    25f8:	11 96       	adiw	r26, 0x01	; 1
    25fa:	fe 01       	movw	r30, r28
    25fc:	39 96       	adiw	r30, 0x09	; 9
    25fe:	88 e0       	ldi	r24, 0x08	; 8
    2600:	01 90       	ld	r0, Z+
    2602:	0d 92       	st	X+, r0
    2604:	81 50       	subi	r24, 0x01	; 1
    2606:	e1 f7       	brne	.-8      	; 0x2600 <nrk_stats_display_pid+0x3f0>
    printf( "%lu secs %lu ms", t.secs, t.nano_secs/NANOS_PER_MS );
    2608:	8d b7       	in	r24, 0x3d	; 61
    260a:	9e b7       	in	r25, 0x3e	; 62
    260c:	0a 97       	sbiw	r24, 0x0a	; 10
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	9e bf       	out	0x3e, r25	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	8d bf       	out	0x3d, r24	; 61
    2618:	cd b6       	in	r12, 0x3d	; 61
    261a:	de b6       	in	r13, 0x3e	; 62
    261c:	08 94       	sec
    261e:	c1 1c       	adc	r12, r1
    2620:	d1 1c       	adc	r13, r1
    2622:	87 e5       	ldi	r24, 0x57	; 87
    2624:	92 e0       	ldi	r25, 0x02	; 2
    2626:	ad b7       	in	r26, 0x3d	; 61
    2628:	be b7       	in	r27, 0x3e	; 62
    262a:	12 96       	adiw	r26, 0x02	; 2
    262c:	9c 93       	st	X, r25
    262e:	8e 93       	st	-X, r24
    2630:	11 97       	sbiw	r26, 0x01	; 1
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	ab 81       	ldd	r26, Y+3	; 0x03
    2638:	bc 81       	ldd	r27, Y+4	; 0x04
    263a:	f6 01       	movw	r30, r12
    263c:	82 83       	std	Z+2, r24	; 0x02
    263e:	93 83       	std	Z+3, r25	; 0x03
    2640:	a4 83       	std	Z+4, r26	; 0x04
    2642:	b5 83       	std	Z+5, r27	; 0x05
    2644:	6d 81       	ldd	r22, Y+5	; 0x05
    2646:	7e 81       	ldd	r23, Y+6	; 0x06
    2648:	8f 81       	ldd	r24, Y+7	; 0x07
    264a:	98 85       	ldd	r25, Y+8	; 0x08
    264c:	20 e4       	ldi	r18, 0x40	; 64
    264e:	32 e4       	ldi	r19, 0x42	; 66
    2650:	4f e0       	ldi	r20, 0x0F	; 15
    2652:	50 e0       	ldi	r21, 0x00	; 0
    2654:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    2658:	d6 01       	movw	r26, r12
    265a:	16 96       	adiw	r26, 0x06	; 6
    265c:	2d 93       	st	X+, r18
    265e:	3d 93       	st	X+, r19
    2660:	4d 93       	st	X+, r20
    2662:	5c 93       	st	X, r21
    2664:	19 97       	sbiw	r26, 0x09	; 9
    2666:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    nrk_kprintf( PSTR( "\r\n   Swap-ins: "));
    266a:	ed b7       	in	r30, 0x3d	; 61
    266c:	fe b7       	in	r31, 0x3e	; 62
    266e:	3a 96       	adiw	r30, 0x0a	; 10
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	fe bf       	out	0x3e, r31	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	ed bf       	out	0x3d, r30	; 61
    267a:	8f ef       	ldi	r24, 0xFF	; 255
    267c:	91 e0       	ldi	r25, 0x01	; 1
    267e:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>
    printf( "%lu",cur_task_stats[pid].swapped_in );
    2682:	00 d0       	rcall	.+0      	; 0x2684 <nrk_stats_display_pid+0x474>
    2684:	00 d0       	rcall	.+0      	; 0x2686 <nrk_stats_display_pid+0x476>
    2686:	00 d0       	rcall	.+0      	; 0x2688 <nrk_stats_display_pid+0x478>
    2688:	89 e7       	ldi	r24, 0x79	; 121
    268a:	c8 2e       	mov	r12, r24
    268c:	82 e0       	ldi	r24, 0x02	; 2
    268e:	d8 2e       	mov	r13, r24
    2690:	ad b7       	in	r26, 0x3d	; 61
    2692:	be b7       	in	r27, 0x3e	; 62
    2694:	12 96       	adiw	r26, 0x02	; 2
    2696:	dc 92       	st	X, r13
    2698:	ce 92       	st	-X, r12
    269a:	11 97       	sbiw	r26, 0x01	; 1
    269c:	e1 2f       	mov	r30, r17
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	cf 01       	movw	r24, r30
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	a5 e0       	ldi	r26, 0x05	; 5
    26a8:	ee 0f       	add	r30, r30
    26aa:	ff 1f       	adc	r31, r31
    26ac:	aa 95       	dec	r26
    26ae:	e1 f7       	brne	.-8      	; 0x26a8 <nrk_stats_display_pid+0x498>
    26b0:	e8 1b       	sub	r30, r24
    26b2:	f9 0b       	sbc	r31, r25
    26b4:	ec 5f       	subi	r30, 0xFC	; 252
    26b6:	f9 4f       	sbci	r31, 0xF9	; 249
    26b8:	80 89       	ldd	r24, Z+16	; 0x10
    26ba:	91 89       	ldd	r25, Z+17	; 0x11
    26bc:	a2 89       	ldd	r26, Z+18	; 0x12
    26be:	b3 89       	ldd	r27, Z+19	; 0x13
    26c0:	ed b7       	in	r30, 0x3d	; 61
    26c2:	fe b7       	in	r31, 0x3e	; 62
    26c4:	83 83       	std	Z+3, r24	; 0x03
    26c6:	94 83       	std	Z+4, r25	; 0x04
    26c8:	a5 83       	std	Z+5, r26	; 0x05
    26ca:	b6 83       	std	Z+6, r27	; 0x06
    26cc:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    nrk_kprintf( PSTR( "\r\n   Preemptions: "));
    26d0:	8d b7       	in	r24, 0x3d	; 61
    26d2:	9e b7       	in	r25, 0x3e	; 62
    26d4:	06 96       	adiw	r24, 0x06	; 6
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	9e bf       	out	0x3e, r25	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	8d bf       	out	0x3d, r24	; 61
    26e0:	8c ee       	ldi	r24, 0xEC	; 236
    26e2:	91 e0       	ldi	r25, 0x01	; 1
    26e4:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>
    printf( "%lu",cur_task_stats[pid].preempted);
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <nrk_stats_display_pid+0x4da>
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <nrk_stats_display_pid+0x4dc>
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <nrk_stats_display_pid+0x4de>
    26ee:	ad b7       	in	r26, 0x3d	; 61
    26f0:	be b7       	in	r27, 0x3e	; 62
    26f2:	12 96       	adiw	r26, 0x02	; 2
    26f4:	dc 92       	st	X, r13
    26f6:	ce 92       	st	-X, r12
    26f8:	11 97       	sbiw	r26, 0x01	; 1
    26fa:	e1 2f       	mov	r30, r17
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	cf 01       	movw	r24, r30
    2700:	88 0f       	add	r24, r24
    2702:	99 1f       	adc	r25, r25
    2704:	65 e0       	ldi	r22, 0x05	; 5
    2706:	ee 0f       	add	r30, r30
    2708:	ff 1f       	adc	r31, r31
    270a:	6a 95       	dec	r22
    270c:	e1 f7       	brne	.-8      	; 0x2706 <nrk_stats_display_pid+0x4f6>
    270e:	e8 1b       	sub	r30, r24
    2710:	f9 0b       	sbc	r31, r25
    2712:	ec 5f       	subi	r30, 0xFC	; 252
    2714:	f9 4f       	sbci	r31, 0xF9	; 249
    2716:	80 8d       	ldd	r24, Z+24	; 0x18
    2718:	91 8d       	ldd	r25, Z+25	; 0x19
    271a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    271c:	b3 8d       	ldd	r27, Z+27	; 0x1b
    271e:	ed b7       	in	r30, 0x3d	; 61
    2720:	fe b7       	in	r31, 0x3e	; 62
    2722:	83 83       	std	Z+3, r24	; 0x03
    2724:	94 83       	std	Z+4, r25	; 0x04
    2726:	a5 83       	std	Z+5, r26	; 0x05
    2728:	b6 83       	std	Z+6, r27	; 0x06
    272a:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    nrk_kprintf( PSTR( "\r\n   Kernel Violations: "));
    272e:	8d b7       	in	r24, 0x3d	; 61
    2730:	9e b7       	in	r25, 0x3e	; 62
    2732:	06 96       	adiw	r24, 0x06	; 6
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	9e bf       	out	0x3e, r25	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	8d bf       	out	0x3d, r24	; 61
    273e:	83 ed       	ldi	r24, 0xD3	; 211
    2740:	91 e0       	ldi	r25, 0x01	; 1
    2742:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>
    printf( "%u",cur_task_stats[pid].violations);
    2746:	00 d0       	rcall	.+0      	; 0x2748 <nrk_stats_display_pid+0x538>
    2748:	00 d0       	rcall	.+0      	; 0x274a <nrk_stats_display_pid+0x53a>
    274a:	ad b7       	in	r26, 0x3d	; 61
    274c:	be b7       	in	r27, 0x3e	; 62
    274e:	11 96       	adiw	r26, 0x01	; 1
    2750:	5d e7       	ldi	r21, 0x7D	; 125
    2752:	c5 2e       	mov	r12, r21
    2754:	52 e0       	ldi	r21, 0x02	; 2
    2756:	d5 2e       	mov	r13, r21
    2758:	ed b7       	in	r30, 0x3d	; 61
    275a:	fe b7       	in	r31, 0x3e	; 62
    275c:	d2 82       	std	Z+2, r13	; 0x02
    275e:	c1 82       	std	Z+1, r12	; 0x01
    2760:	e1 2f       	mov	r30, r17
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	cf 01       	movw	r24, r30
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	35 e0       	ldi	r19, 0x05	; 5
    276c:	ee 0f       	add	r30, r30
    276e:	ff 1f       	adc	r31, r31
    2770:	3a 95       	dec	r19
    2772:	e1 f7       	brne	.-8      	; 0x276c <nrk_stats_display_pid+0x55c>
    2774:	e8 1b       	sub	r30, r24
    2776:	f9 0b       	sbc	r31, r25
    2778:	ec 5f       	subi	r30, 0xFC	; 252
    277a:	f9 4f       	sbci	r31, 0xF9	; 249
    277c:	84 8d       	ldd	r24, Z+28	; 0x1c
    277e:	12 96       	adiw	r26, 0x02	; 2
    2780:	8c 93       	st	X, r24
    2782:	12 97       	sbiw	r26, 0x02	; 2
    2784:	13 96       	adiw	r26, 0x03	; 3
    2786:	1c 92       	st	X, r1
    2788:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    nrk_kprintf( PSTR( "\r\n   Overflow Error Status: "));
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	86 eb       	ldi	r24, 0xB6	; 182
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>
    printf( "%u",cur_task_stats[pid].overflow);
    279c:	00 d0       	rcall	.+0      	; 0x279e <nrk_stats_display_pid+0x58e>
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <nrk_stats_display_pid+0x590>
    27a0:	ad b7       	in	r26, 0x3d	; 61
    27a2:	be b7       	in	r27, 0x3e	; 62
    27a4:	11 96       	adiw	r26, 0x01	; 1
    27a6:	ed b7       	in	r30, 0x3d	; 61
    27a8:	fe b7       	in	r31, 0x3e	; 62
    27aa:	d2 82       	std	Z+2, r13	; 0x02
    27ac:	c1 82       	std	Z+1, r12	; 0x01
    27ae:	e1 2f       	mov	r30, r17
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	cf 01       	movw	r24, r30
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	15 e0       	ldi	r17, 0x05	; 5
    27ba:	ee 0f       	add	r30, r30
    27bc:	ff 1f       	adc	r31, r31
    27be:	1a 95       	dec	r17
    27c0:	e1 f7       	brne	.-8      	; 0x27ba <nrk_stats_display_pid+0x5aa>
    27c2:	e8 1b       	sub	r30, r24
    27c4:	f9 0b       	sbc	r31, r25
    27c6:	ec 5f       	subi	r30, 0xFC	; 252
    27c8:	f9 4f       	sbci	r31, 0xF9	; 249
    27ca:	85 8d       	ldd	r24, Z+29	; 0x1d
    27cc:	12 96       	adiw	r26, 0x02	; 2
    27ce:	8c 93       	st	X, r24
    27d0:	12 97       	sbiw	r26, 0x02	; 2
    27d2:	13 96       	adiw	r26, 0x03	; 3
    27d4:	1c 92       	st	X, r1
    27d6:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    nrk_kprintf( PSTR("\r\n") );
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	83 eb       	ldi	r24, 0xB3	; 179
    27e4:	91 e0       	ldi	r25, 0x01	; 1
    27e6:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>

}
    27ea:	60 96       	adiw	r28, 0x10	; 16
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	f8 94       	cli
    27f0:	de bf       	out	0x3e, r29	; 62
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	cd bf       	out	0x3d, r28	; 61
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	1f 91       	pop	r17
    27fc:	ff 90       	pop	r15
    27fe:	ef 90       	pop	r14
    2800:	df 90       	pop	r13
    2802:	cf 90       	pop	r12
    2804:	bf 90       	pop	r11
    2806:	af 90       	pop	r10
    2808:	9f 90       	pop	r9
    280a:	8f 90       	pop	r8
    280c:	08 95       	ret

0000280e <nrk_stats_display_all>:


void nrk_stats_display_all()
{
    uint8_t i;
    nrk_kprintf( PSTR( "\r\nNano-RK Task Statistics:\r\n" ));
    280e:	86 e9       	ldi	r24, 0x96	; 150
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>

    for(i=0; i<NRK_MAX_TASKS; i++ )
        nrk_stats_display_pid(i);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	0e 94 08 11 	call	0x2210	; 0x2210 <nrk_stats_display_pid>
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	0e 94 08 11 	call	0x2210	; 0x2210 <nrk_stats_display_pid>
    2822:	82 e0       	ldi	r24, 0x02	; 2
    2824:	0e 94 08 11 	call	0x2210	; 0x2210 <nrk_stats_display_pid>
    2828:	83 e0       	ldi	r24, 0x03	; 3
    282a:	0e 94 08 11 	call	0x2210	; 0x2210 <nrk_stats_display_pid>
    282e:	84 e0       	ldi	r24, 0x04	; 4
    2830:	0e 94 08 11 	call	0x2210	; 0x2210 <nrk_stats_display_pid>
}
    2834:	08 95       	ret

00002836 <nrk_stats_get>:


int8_t nrk_stats_get(uint8_t pid, nrk_task_stat_t *t)
{
    2836:	fb 01       	movw	r30, r22
    if(pid>=NRK_MAX_TASKS) return NRK_ERROR;
    2838:	85 30       	cpi	r24, 0x05	; 5
    283a:	08 f0       	brcs	.+2      	; 0x283e <nrk_stats_get+0x8>
    283c:	cb c0       	rjmp	.+406    	; 0x29d4 <nrk_stats_get+0x19e>

    t->total_ticks=cur_task_stats[pid].total_ticks;
    283e:	a8 2f       	mov	r26, r24
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	9d 01       	movw	r18, r26
    2844:	22 0f       	add	r18, r18
    2846:	33 1f       	adc	r19, r19
    2848:	55 e0       	ldi	r21, 0x05	; 5
    284a:	aa 0f       	add	r26, r26
    284c:	bb 1f       	adc	r27, r27
    284e:	5a 95       	dec	r21
    2850:	e1 f7       	brne	.-8      	; 0x284a <nrk_stats_get+0x14>
    2852:	a2 1b       	sub	r26, r18
    2854:	b3 0b       	sbc	r27, r19
    2856:	ac 5f       	subi	r26, 0xFC	; 252
    2858:	b9 4f       	sbci	r27, 0xF9	; 249
    285a:	2d 91       	ld	r18, X+
    285c:	3d 91       	ld	r19, X+
    285e:	4d 91       	ld	r20, X+
    2860:	5c 91       	ld	r21, X
    2862:	20 83       	st	Z, r18
    2864:	31 83       	std	Z+1, r19	; 0x01
    2866:	42 83       	std	Z+2, r20	; 0x02
    2868:	53 83       	std	Z+3, r21	; 0x03
    t->min_exec_ticks=cur_task_stats[pid].min_exec_ticks;
    286a:	a8 2f       	mov	r26, r24
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	9d 01       	movw	r18, r26
    2870:	22 0f       	add	r18, r18
    2872:	33 1f       	adc	r19, r19
    2874:	95 e0       	ldi	r25, 0x05	; 5
    2876:	aa 0f       	add	r26, r26
    2878:	bb 1f       	adc	r27, r27
    287a:	9a 95       	dec	r25
    287c:	e1 f7       	brne	.-8      	; 0x2876 <nrk_stats_get+0x40>
    287e:	a2 1b       	sub	r26, r18
    2880:	b3 0b       	sbc	r27, r19
    2882:	ac 5f       	subi	r26, 0xFC	; 252
    2884:	b9 4f       	sbci	r27, 0xF9	; 249
    2886:	14 96       	adiw	r26, 0x04	; 4
    2888:	2d 91       	ld	r18, X+
    288a:	3d 91       	ld	r19, X+
    288c:	4d 91       	ld	r20, X+
    288e:	5c 91       	ld	r21, X
    2890:	17 97       	sbiw	r26, 0x07	; 7
    2892:	24 83       	std	Z+4, r18	; 0x04
    2894:	35 83       	std	Z+5, r19	; 0x05
    2896:	46 83       	std	Z+6, r20	; 0x06
    2898:	57 83       	std	Z+7, r21	; 0x07
    t->max_exec_ticks=cur_task_stats[pid].max_exec_ticks;
    289a:	a8 2f       	mov	r26, r24
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	9d 01       	movw	r18, r26
    28a0:	22 0f       	add	r18, r18
    28a2:	33 1f       	adc	r19, r19
    28a4:	65 e0       	ldi	r22, 0x05	; 5
    28a6:	aa 0f       	add	r26, r26
    28a8:	bb 1f       	adc	r27, r27
    28aa:	6a 95       	dec	r22
    28ac:	e1 f7       	brne	.-8      	; 0x28a6 <nrk_stats_get+0x70>
    28ae:	a2 1b       	sub	r26, r18
    28b0:	b3 0b       	sbc	r27, r19
    28b2:	ac 5f       	subi	r26, 0xFC	; 252
    28b4:	b9 4f       	sbci	r27, 0xF9	; 249
    28b6:	18 96       	adiw	r26, 0x08	; 8
    28b8:	2d 91       	ld	r18, X+
    28ba:	3d 91       	ld	r19, X+
    28bc:	4d 91       	ld	r20, X+
    28be:	5c 91       	ld	r21, X
    28c0:	1b 97       	sbiw	r26, 0x0b	; 11
    28c2:	20 87       	std	Z+8, r18	; 0x08
    28c4:	31 87       	std	Z+9, r19	; 0x09
    28c6:	42 87       	std	Z+10, r20	; 0x0a
    28c8:	53 87       	std	Z+11, r21	; 0x0b
    t->last_exec_ticks=cur_task_stats[pid].last_exec_ticks;
    28ca:	a8 2f       	mov	r26, r24
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	9d 01       	movw	r18, r26
    28d0:	22 0f       	add	r18, r18
    28d2:	33 1f       	adc	r19, r19
    28d4:	45 e0       	ldi	r20, 0x05	; 5
    28d6:	aa 0f       	add	r26, r26
    28d8:	bb 1f       	adc	r27, r27
    28da:	4a 95       	dec	r20
    28dc:	e1 f7       	brne	.-8      	; 0x28d6 <nrk_stats_get+0xa0>
    28de:	a2 1b       	sub	r26, r18
    28e0:	b3 0b       	sbc	r27, r19
    28e2:	ac 5f       	subi	r26, 0xFC	; 252
    28e4:	b9 4f       	sbci	r27, 0xF9	; 249
    28e6:	1c 96       	adiw	r26, 0x0c	; 12
    28e8:	2d 91       	ld	r18, X+
    28ea:	3d 91       	ld	r19, X+
    28ec:	4d 91       	ld	r20, X+
    28ee:	5c 91       	ld	r21, X
    28f0:	1f 97       	sbiw	r26, 0x0f	; 15
    28f2:	24 87       	std	Z+12, r18	; 0x0c
    28f4:	35 87       	std	Z+13, r19	; 0x0d
    28f6:	46 87       	std	Z+14, r20	; 0x0e
    28f8:	57 87       	std	Z+15, r21	; 0x0f
    t->swapped_in=cur_task_stats[pid].swapped_in;
    28fa:	a8 2f       	mov	r26, r24
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	9d 01       	movw	r18, r26
    2900:	22 0f       	add	r18, r18
    2902:	33 1f       	adc	r19, r19
    2904:	75 e0       	ldi	r23, 0x05	; 5
    2906:	aa 0f       	add	r26, r26
    2908:	bb 1f       	adc	r27, r27
    290a:	7a 95       	dec	r23
    290c:	e1 f7       	brne	.-8      	; 0x2906 <nrk_stats_get+0xd0>
    290e:	a2 1b       	sub	r26, r18
    2910:	b3 0b       	sbc	r27, r19
    2912:	ac 5f       	subi	r26, 0xFC	; 252
    2914:	b9 4f       	sbci	r27, 0xF9	; 249
    2916:	50 96       	adiw	r26, 0x10	; 16
    2918:	2d 91       	ld	r18, X+
    291a:	3d 91       	ld	r19, X+
    291c:	4d 91       	ld	r20, X+
    291e:	5c 91       	ld	r21, X
    2920:	53 97       	sbiw	r26, 0x13	; 19
    2922:	20 8b       	std	Z+16, r18	; 0x10
    2924:	31 8b       	std	Z+17, r19	; 0x11
    2926:	42 8b       	std	Z+18, r20	; 0x12
    2928:	53 8b       	std	Z+19, r21	; 0x13
    t->cur_ticks=cur_task_stats[pid].cur_ticks;
    292a:	a8 2f       	mov	r26, r24
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	9d 01       	movw	r18, r26
    2930:	22 0f       	add	r18, r18
    2932:	33 1f       	adc	r19, r19
    2934:	55 e0       	ldi	r21, 0x05	; 5
    2936:	aa 0f       	add	r26, r26
    2938:	bb 1f       	adc	r27, r27
    293a:	5a 95       	dec	r21
    293c:	e1 f7       	brne	.-8      	; 0x2936 <nrk_stats_get+0x100>
    293e:	a2 1b       	sub	r26, r18
    2940:	b3 0b       	sbc	r27, r19
    2942:	ac 5f       	subi	r26, 0xFC	; 252
    2944:	b9 4f       	sbci	r27, 0xF9	; 249
    2946:	54 96       	adiw	r26, 0x14	; 20
    2948:	2d 91       	ld	r18, X+
    294a:	3d 91       	ld	r19, X+
    294c:	4d 91       	ld	r20, X+
    294e:	5c 91       	ld	r21, X
    2950:	57 97       	sbiw	r26, 0x17	; 23
    2952:	24 8b       	std	Z+20, r18	; 0x14
    2954:	35 8b       	std	Z+21, r19	; 0x15
    2956:	46 8b       	std	Z+22, r20	; 0x16
    2958:	57 8b       	std	Z+23, r21	; 0x17
    t->preempted=cur_task_stats[pid].preempted;
    295a:	a8 2f       	mov	r26, r24
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	9d 01       	movw	r18, r26
    2960:	22 0f       	add	r18, r18
    2962:	33 1f       	adc	r19, r19
    2964:	95 e0       	ldi	r25, 0x05	; 5
    2966:	aa 0f       	add	r26, r26
    2968:	bb 1f       	adc	r27, r27
    296a:	9a 95       	dec	r25
    296c:	e1 f7       	brne	.-8      	; 0x2966 <nrk_stats_get+0x130>
    296e:	a2 1b       	sub	r26, r18
    2970:	b3 0b       	sbc	r27, r19
    2972:	ac 5f       	subi	r26, 0xFC	; 252
    2974:	b9 4f       	sbci	r27, 0xF9	; 249
    2976:	58 96       	adiw	r26, 0x18	; 24
    2978:	2d 91       	ld	r18, X+
    297a:	3d 91       	ld	r19, X+
    297c:	4d 91       	ld	r20, X+
    297e:	5c 91       	ld	r21, X
    2980:	5b 97       	sbiw	r26, 0x1b	; 27
    2982:	20 8f       	std	Z+24, r18	; 0x18
    2984:	31 8f       	std	Z+25, r19	; 0x19
    2986:	42 8f       	std	Z+26, r20	; 0x1a
    2988:	53 8f       	std	Z+27, r21	; 0x1b
    t->violations=cur_task_stats[pid].violations;
    298a:	a8 2f       	mov	r26, r24
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	9d 01       	movw	r18, r26
    2990:	22 0f       	add	r18, r18
    2992:	33 1f       	adc	r19, r19
    2994:	65 e0       	ldi	r22, 0x05	; 5
    2996:	aa 0f       	add	r26, r26
    2998:	bb 1f       	adc	r27, r27
    299a:	6a 95       	dec	r22
    299c:	e1 f7       	brne	.-8      	; 0x2996 <nrk_stats_get+0x160>
    299e:	a2 1b       	sub	r26, r18
    29a0:	b3 0b       	sbc	r27, r19
    29a2:	ac 5f       	subi	r26, 0xFC	; 252
    29a4:	b9 4f       	sbci	r27, 0xF9	; 249
    29a6:	5c 96       	adiw	r26, 0x1c	; 28
    29a8:	9c 91       	ld	r25, X
    29aa:	94 8f       	std	Z+28, r25	; 0x1c
    t->overflow=cur_task_stats[pid].overflow;
    29ac:	a8 2f       	mov	r26, r24
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	cd 01       	movw	r24, r26
    29b2:	88 0f       	add	r24, r24
    29b4:	99 1f       	adc	r25, r25
    29b6:	45 e0       	ldi	r20, 0x05	; 5
    29b8:	aa 0f       	add	r26, r26
    29ba:	bb 1f       	adc	r27, r27
    29bc:	4a 95       	dec	r20
    29be:	e1 f7       	brne	.-8      	; 0x29b8 <nrk_stats_get+0x182>
    29c0:	a8 1b       	sub	r26, r24
    29c2:	b9 0b       	sbc	r27, r25
    29c4:	ac 5f       	subi	r26, 0xFC	; 252
    29c6:	b9 4f       	sbci	r27, 0xF9	; 249
    29c8:	5d 96       	adiw	r26, 0x1d	; 29
    29ca:	8c 91       	ld	r24, X
    29cc:	5d 97       	sbiw	r26, 0x1d	; 29
    29ce:	85 8f       	std	Z+29, r24	; 0x1d

    return NRK_OK;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	08 95       	ret
}


int8_t nrk_stats_get(uint8_t pid, nrk_task_stat_t *t)
{
    if(pid>=NRK_MAX_TASKS) return NRK_ERROR;
    29d4:	8f ef       	ldi	r24, 0xFF	; 255
    t->preempted=cur_task_stats[pid].preempted;
    t->violations=cur_task_stats[pid].violations;
    t->overflow=cur_task_stats[pid].overflow;

    return NRK_OK;
}
    29d6:	08 95       	ret

000029d8 <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    29d8:	e0 91 01 06 	lds	r30, 0x0601
    29dc:	f0 91 02 06 	lds	r31, 0x0602
    29e0:	84 87       	std	Z+12, r24	; 0x0c
}
    29e2:	08 95       	ret

000029e4 <nrk_errno_get>:

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    29e4:	e0 91 01 06 	lds	r30, 0x0601
    29e8:	f0 91 02 06 	lds	r31, 0x0602
}
    29ec:	84 85       	ldd	r24, Z+12	; 0x0c
    29ee:	08 95       	ret

000029f0 <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    29f0:	20 91 89 04 	lds	r18, 0x0489
    29f4:	22 23       	and	r18, r18
    29f6:	41 f0       	breq	.+16     	; 0x2a08 <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    29f8:	fb 01       	movw	r30, r22
    29fa:	20 83       	st	Z, r18
    *task_id = error_task;
    29fc:	20 91 dc 03 	lds	r18, 0x03DC
    2a00:	fc 01       	movw	r30, r24
    2a02:	20 83       	st	Z, r18
    return 1;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    2a0a:	08 95       	ret

00002a0c <pause>:
    }

}

void pause()
{
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	0f 92       	push	r0
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2a16:	19 82       	std	Y+1, r1	; 0x01
    2a18:	07 c0       	rjmp	.+14     	; 0x2a28 <pause+0x1c>
        nrk_spin_wait_us (2000);
    2a1a:	80 ed       	ldi	r24, 0xD0	; 208
    2a1c:	97 e0       	ldi	r25, 0x07	; 7
    2a1e:	0e 94 1d 24 	call	0x483a	; 0x483a <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	8f 5f       	subi	r24, 0xFF	; 255
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	84 36       	cpi	r24, 0x64	; 100
    2a2c:	b0 f3       	brcs	.-20     	; 0x2a1a <pause+0xe>
        nrk_spin_wait_us (2000);
}
    2a2e:	0f 90       	pop	r0
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <blink_dot>:
    pause();
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    2a36:	82 e0       	ldi	r24, 0x02	; 2
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <nrk_led_set>
    pause();
    2a3e:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pause>
    nrk_led_clr(GREEN_LED);
    2a42:	82 e0       	ldi	r24, 0x02	; 2
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_led_clr>
    pause();
    2a4a:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pause>
}
    2a4e:	08 95       	ret

00002a50 <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    2a50:	82 e0       	ldi	r24, 0x02	; 2
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <nrk_led_set>
    pause();
    2a58:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pause>
    pause();
    2a5c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pause>
    pause();
    2a60:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pause>
    nrk_led_clr(GREEN_LED);
    2a64:	82 e0       	ldi	r24, 0x02	; 2
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_led_clr>
    pause();
    2a6c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pause>
}
    2a70:	08 95       	ret

00002a72 <blink_morse_code_error>:
    pause();
}


void blink_morse_code_error( uint8_t number )
{
    2a72:	ff 92       	push	r15
    2a74:	0f 93       	push	r16
    2a76:	1f 93       	push	r17
    2a78:	df 93       	push	r29
    2a7a:	cf 93       	push	r28
    2a7c:	00 d0       	rcall	.+0      	; 0x2a7e <blink_morse_code_error+0xc>
    2a7e:	0f 92       	push	r0
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <blink_morse_code_error+0x14>
    2a86:	00 d0       	rcall	.+0      	; 0x2a88 <blink_morse_code_error+0x16>
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <blink_morse_code_error+0x18>
    2a8a:	ed b7       	in	r30, 0x3d	; 61
    2a8c:	fe b7       	in	r31, 0x3e	; 62
    2a8e:	31 96       	adiw	r30, 0x01	; 1
    2a90:	8e 01       	movw	r16, r28
    2a92:	0f 5f       	subi	r16, 0xFF	; 255
    2a94:	1f 4f       	sbci	r17, 0xFF	; 255
    2a96:	ad b7       	in	r26, 0x3d	; 61
    2a98:	be b7       	in	r27, 0x3e	; 62
    2a9a:	12 96       	adiw	r26, 0x02	; 2
    2a9c:	1c 93       	st	X, r17
    2a9e:	0e 93       	st	-X, r16
    2aa0:	11 97       	sbiw	r26, 0x01	; 1
    2aa2:	20 e8       	ldi	r18, 0x80	; 128
    2aa4:	32 e0       	ldi	r19, 0x02	; 2
    2aa6:	33 83       	std	Z+3, r19	; 0x03
    2aa8:	22 83       	std	Z+2, r18	; 0x02
    2aaa:	84 83       	std	Z+4, r24	; 0x04
    2aac:	15 82       	std	Z+5, r1	; 0x05
    2aae:	0e 94 2f 31 	call	0x625e	; 0x625e <sprintf>

    for(i=0; i<strlen(str); i++ )
    2ab2:	ed b7       	in	r30, 0x3d	; 61
    2ab4:	fe b7       	in	r31, 0x3e	; 62
    2ab6:	36 96       	adiw	r30, 0x06	; 6
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	fe bf       	out	0x3e, r31	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	ed bf       	out	0x3d, r30	; 61
    2ac2:	ff 24       	eor	r15, r15
    2ac4:	72 c0       	rjmp	.+228    	; 0x2baa <blink_morse_code_error+0x138>
    {
        switch( str[i])
    2ac6:	80 0f       	add	r24, r16
    2ac8:	91 1f       	adc	r25, r17
    2aca:	dc 01       	movw	r26, r24
    2acc:	8c 91       	ld	r24, X
    2ace:	84 33       	cpi	r24, 0x34	; 52
    2ad0:	d1 f1       	breq	.+116    	; 0x2b46 <blink_morse_code_error+0xd4>
    2ad2:	85 33       	cpi	r24, 0x35	; 53
    2ad4:	70 f4       	brcc	.+28     	; 0x2af2 <blink_morse_code_error+0x80>
    2ad6:	81 33       	cpi	r24, 0x31	; 49
    2ad8:	f9 f0       	breq	.+62     	; 0x2b18 <blink_morse_code_error+0xa6>
    2ada:	82 33       	cpi	r24, 0x32	; 50
    2adc:	20 f4       	brcc	.+8      	; 0x2ae6 <blink_morse_code_error+0x74>
    2ade:	80 33       	cpi	r24, 0x30	; 48
    2ae0:	09 f0       	breq	.+2      	; 0x2ae4 <blink_morse_code_error+0x72>
    2ae2:	5c c0       	rjmp	.+184    	; 0x2b9c <blink_morse_code_error+0x12a>
    2ae4:	16 c0       	rjmp	.+44     	; 0x2b12 <blink_morse_code_error+0xa0>
    2ae6:	82 33       	cpi	r24, 0x32	; 50
    2ae8:	11 f1       	breq	.+68     	; 0x2b2e <blink_morse_code_error+0xbc>
    2aea:	83 33       	cpi	r24, 0x33	; 51
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <blink_morse_code_error+0x7e>
    2aee:	56 c0       	rjmp	.+172    	; 0x2b9c <blink_morse_code_error+0x12a>
    2af0:	23 c0       	rjmp	.+70     	; 0x2b38 <blink_morse_code_error+0xc6>
    2af2:	87 33       	cpi	r24, 0x37	; 55
    2af4:	c9 f1       	breq	.+114    	; 0x2b68 <blink_morse_code_error+0xf6>
    2af6:	88 33       	cpi	r24, 0x38	; 56
    2af8:	30 f4       	brcc	.+12     	; 0x2b06 <blink_morse_code_error+0x94>
    2afa:	85 33       	cpi	r24, 0x35	; 53
    2afc:	69 f1       	breq	.+90     	; 0x2b58 <blink_morse_code_error+0xe6>
    2afe:	86 33       	cpi	r24, 0x36	; 54
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <blink_morse_code_error+0x92>
    2b02:	4c c0       	rjmp	.+152    	; 0x2b9c <blink_morse_code_error+0x12a>
    2b04:	2c c0       	rjmp	.+88     	; 0x2b5e <blink_morse_code_error+0xec>
    2b06:	88 33       	cpi	r24, 0x38	; 56
    2b08:	b1 f1       	breq	.+108    	; 0x2b76 <blink_morse_code_error+0x104>
    2b0a:	89 33       	cpi	r24, 0x39	; 57
    2b0c:	09 f0       	breq	.+2      	; 0x2b10 <blink_morse_code_error+0x9e>
    2b0e:	46 c0       	rjmp	.+140    	; 0x2b9c <blink_morse_code_error+0x12a>
    2b10:	3b c0       	rjmp	.+118    	; 0x2b88 <blink_morse_code_error+0x116>
        {
        case '0':
            blink_dash();
    2b12:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <blink_morse_code_error+0xaa>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    2b18:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
            blink_dash();
    2b1c:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dash();
    2b20:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dash();
    2b24:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dash();
    2b28:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            break;
    2b2c:	37 c0       	rjmp	.+110    	; 0x2b9c <blink_morse_code_error+0x12a>
        case '2':
            blink_dot();
    2b2e:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
            blink_dot();
    2b32:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
    2b36:	f4 cf       	rjmp	.-24     	; 0x2b20 <blink_morse_code_error+0xae>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    2b38:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
            blink_dot();
    2b3c:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
            blink_dot();
    2b40:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
    2b44:	ef cf       	rjmp	.-34     	; 0x2b24 <blink_morse_code_error+0xb2>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    2b46:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
            blink_dot();
    2b4a:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
            blink_dot();
    2b4e:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
            blink_dot();
    2b52:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
    2b56:	e8 cf       	rjmp	.-48     	; 0x2b28 <blink_morse_code_error+0xb6>
            blink_dash();
            break;
        case '5':
            blink_dot();
    2b58:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <blink_morse_code_error+0xf0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    2b5e:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dot();
    2b62:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
    2b66:	04 c0       	rjmp	.+8      	; 0x2b70 <blink_morse_code_error+0xfe>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    2b68:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dash();
    2b6c:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dot();
    2b70:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
    2b74:	06 c0       	rjmp	.+12     	; 0x2b82 <blink_morse_code_error+0x110>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    2b76:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dash();
    2b7a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dash();
    2b7e:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dot();
    2b82:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
    2b86:	08 c0       	rjmp	.+16     	; 0x2b98 <blink_morse_code_error+0x126>
            blink_dot();
            break;
        case '9':
            blink_dash();
    2b88:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dash();
    2b8c:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dash();
    2b90:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dash();
    2b94:	0e 94 28 15 	call	0x2a50	; 0x2a50 <blink_dash>
            blink_dot();
    2b98:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <blink_dot>
            break;
        }
        pause();
    2b9c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pause>
        pause();
    2ba0:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pause>
        pause();
    2ba4:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    2ba8:	f3 94       	inc	r15
    2baa:	f8 01       	movw	r30, r16
    2bac:	01 90       	ld	r0, Z+
    2bae:	00 20       	and	r0, r0
    2bb0:	e9 f7       	brne	.-6      	; 0x2bac <blink_morse_code_error+0x13a>
    2bb2:	31 97       	sbiw	r30, 0x01	; 1
    2bb4:	e0 1b       	sub	r30, r16
    2bb6:	f1 0b       	sbc	r31, r17
    2bb8:	8f 2d       	mov	r24, r15
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	8e 17       	cp	r24, r30
    2bbe:	9f 07       	cpc	r25, r31
    2bc0:	08 f4       	brcc	.+2      	; 0x2bc4 <blink_morse_code_error+0x152>
    2bc2:	81 cf       	rjmp	.-254    	; 0x2ac6 <blink_morse_code_error+0x54>
        pause();
        pause();
        pause();
    }

}
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	1f 91       	pop	r17
    2bd0:	0f 91       	pop	r16
    2bd2:	ff 90       	pop	r15
    2bd4:	08 95       	ret

00002bd6 <nrk_error_print>:
    *task_id = error_task;
    return 1;
}

int8_t nrk_error_print ()
{
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    int8_t t=0,i=0;
    if (error_num == 0)
    2bda:	80 91 89 04 	lds	r24, 0x0489
    2bde:	88 23       	and	r24, r24
    2be0:	19 f4       	brne	.+6      	; 0x2be8 <nrk_error_print+0x12>
    }

#endif  /*  */
    error_num = 0;
    return t;
}
    2be2:	1f 91       	pop	r17
    2be4:	0f 91       	pop	r16
    2be6:	08 95       	ret
    int8_t t=0,i=0;
    if (error_num == 0)
        return 0;

#ifdef NRK_HALT_ON_ERROR
    nrk_int_disable ();
    2be8:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
#ifdef NRK_WATCHDOG
    nrk_watchdog_disable();
    2bec:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <nrk_watchdog_disable>
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    2bf0:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    2bf4:	8e ea       	ldi	r24, 0xAE	; 174
    2bf6:	94 e0       	ldi	r25, 0x04	; 4
    2bf8:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>
        printf ("%d", error_task);
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <nrk_error_print+0x28>
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <nrk_error_print+0x2a>
    2c00:	ed b7       	in	r30, 0x3d	; 61
    2c02:	fe b7       	in	r31, 0x3e	; 62
    2c04:	31 96       	adiw	r30, 0x01	; 1
    2c06:	80 e8       	ldi	r24, 0x80	; 128
    2c08:	92 e0       	ldi	r25, 0x02	; 2
    2c0a:	ad b7       	in	r26, 0x3d	; 61
    2c0c:	be b7       	in	r27, 0x3e	; 62
    2c0e:	12 96       	adiw	r26, 0x02	; 2
    2c10:	9c 93       	st	X, r25
    2c12:	8e 93       	st	-X, r24
    2c14:	11 97       	sbiw	r26, 0x01	; 1
    2c16:	80 91 dc 03 	lds	r24, 0x03DC
    2c1a:	82 83       	std	Z+2, r24	; 0x02
    2c1c:	13 82       	std	Z+3, r1	; 0x03
    2c1e:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
        nrk_kprintf (PSTR ("): "));
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	8a ea       	ldi	r24, 0xAA	; 170
    2c2c:	94 e0       	ldi	r25, 0x04	; 4
    2c2e:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    2c32:	80 91 89 04 	lds	r24, 0x0489
    2c36:	88 31       	cpi	r24, 0x18	; 24
    2c38:	10 f0       	brcs	.+4      	; 0x2c3e <nrk_error_print+0x68>
            error_num = NRK_UNKOWN;
    2c3a:	10 92 89 04 	sts	0x0489, r1
        switch (error_num)
    2c3e:	80 91 89 04 	lds	r24, 0x0489
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	86 31       	cpi	r24, 0x16	; 22
    2c48:	91 05       	cpc	r25, r1
    2c4a:	08 f0       	brcs	.+2      	; 0x2c4e <nrk_error_print+0x78>
    2c4c:	4b c0       	rjmp	.+150    	; 0x2ce4 <nrk_error_print+0x10e>
    2c4e:	80 57       	subi	r24, 0x70	; 112
    2c50:	9f 4f       	sbci	r25, 0xFF	; 255
    2c52:	fc 01       	movw	r30, r24
    2c54:	ee 0f       	add	r30, r30
    2c56:	ff 1f       	adc	r31, r31
    2c58:	05 90       	lpm	r0, Z+
    2c5a:	f4 91       	lpm	r31, Z+
    2c5c:	e0 2d       	mov	r30, r0
    2c5e:	09 94       	ijmp
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    2c60:	8e e6       	ldi	r24, 0x6E	; 110
    2c62:	94 e0       	ldi	r25, 0x04	; 4
    2c64:	41 c0       	rjmp	.+130    	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    2c66:	87 e4       	ldi	r24, 0x47	; 71
    2c68:	94 e0       	ldi	r25, 0x04	; 4
    2c6a:	3e c0       	rjmp	.+124    	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    2c6c:	83 e3       	ldi	r24, 0x33	; 51
    2c6e:	94 e0       	ldi	r25, 0x04	; 4
    2c70:	3b c0       	rjmp	.+118    	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    2c72:	8d e1       	ldi	r24, 0x1D	; 29
    2c74:	94 e0       	ldi	r25, 0x04	; 4
    2c76:	38 c0       	rjmp	.+112    	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    2c78:	82 e0       	ldi	r24, 0x02	; 2
    2c7a:	94 e0       	ldi	r25, 0x04	; 4
    2c7c:	35 c0       	rjmp	.+106    	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    2c7e:	8c ee       	ldi	r24, 0xEC	; 236
    2c80:	93 e0       	ldi	r25, 0x03	; 3
    2c82:	32 c0       	rjmp	.+100    	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2c84:	84 ed       	ldi	r24, 0xD4	; 212
    2c86:	93 e0       	ldi	r25, 0x03	; 3
    2c88:	2f c0       	rjmp	.+94     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    2c8a:	81 ec       	ldi	r24, 0xC1	; 193
    2c8c:	93 e0       	ldi	r25, 0x03	; 3
    2c8e:	2c c0       	rjmp	.+88     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    2c90:	8e ea       	ldi	r24, 0xAE	; 174
    2c92:	93 e0       	ldi	r25, 0x03	; 3
    2c94:	29 c0       	rjmp	.+82     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2c96:	80 e9       	ldi	r24, 0x90	; 144
    2c98:	93 e0       	ldi	r25, 0x03	; 3
    2c9a:	26 c0       	rjmp	.+76     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    2c9c:	8b e6       	ldi	r24, 0x6B	; 107
    2c9e:	93 e0       	ldi	r25, 0x03	; 3
    2ca0:	23 c0       	rjmp	.+70     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    2ca2:	8f e5       	ldi	r24, 0x5F	; 95
    2ca4:	93 e0       	ldi	r25, 0x03	; 3
    2ca6:	20 c0       	rjmp	.+64     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    2ca8:	84 e4       	ldi	r24, 0x44	; 68
    2caa:	93 e0       	ldi	r25, 0x03	; 3
    2cac:	1d c0       	rjmp	.+58     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    2cae:	85 e3       	ldi	r24, 0x35	; 53
    2cb0:	93 e0       	ldi	r25, 0x03	; 3
    2cb2:	1a c0       	rjmp	.+52     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    2cb4:	81 e2       	ldi	r24, 0x21	; 33
    2cb6:	93 e0       	ldi	r25, 0x03	; 3
    2cb8:	17 c0       	rjmp	.+46     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    2cba:	80 e1       	ldi	r24, 0x10	; 16
    2cbc:	93 e0       	ldi	r25, 0x03	; 3
    2cbe:	14 c0       	rjmp	.+40     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    2cc0:	8c ef       	ldi	r24, 0xFC	; 252
    2cc2:	92 e0       	ldi	r25, 0x02	; 2
    2cc4:	11 c0       	rjmp	.+34     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    2cc6:	8c ed       	ldi	r24, 0xDC	; 220
    2cc8:	92 e0       	ldi	r25, 0x02	; 2
    2cca:	0e c0       	rjmp	.+28     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    2ccc:	84 ec       	ldi	r24, 0xC4	; 196
    2cce:	92 e0       	ldi	r25, 0x02	; 2
    2cd0:	0b c0       	rjmp	.+22     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2cd2:	89 ea       	ldi	r24, 0xA9	; 169
    2cd4:	92 e0       	ldi	r25, 0x02	; 2
    2cd6:	08 c0       	rjmp	.+16     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    2cd8:	88 e9       	ldi	r24, 0x98	; 152
    2cda:	92 e0       	ldi	r25, 0x02	; 2
    2cdc:	05 c0       	rjmp	.+10     	; 0x2ce8 <nrk_error_print+0x112>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2cde:	89 e8       	ldi	r24, 0x89	; 137
    2ce0:	92 e0       	ldi	r25, 0x02	; 2
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <nrk_error_print+0x112>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    2ce4:	82 e8       	ldi	r24, 0x82	; 130
    2ce6:	92 e0       	ldi	r25, 0x02	; 2
    2ce8:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>
        }
        putchar ('\r');
    2cec:	60 91 c3 06 	lds	r22, 0x06C3
    2cf0:	70 91 c4 06 	lds	r23, 0x06C4
    2cf4:	8d e0       	ldi	r24, 0x0D	; 13
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <fputc>
        putchar ('\n');
    2cfc:	60 91 c3 06 	lds	r22, 0x06C3
    2d00:	70 91 c4 06 	lds	r23, 0x06C4
    2d04:	8a e0       	ldi	r24, 0x0A	; 10
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <fputc>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    2d0c:	10 e0       	ldi	r17, 0x00	; 0
    2d0e:	1f c0       	rjmp	.+62     	; 0x2d4e <nrk_error_print+0x178>
        {
            nrk_led_set (2);
    2d10:	82 e0       	ldi	r24, 0x02	; 2
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <nrk_led_set>
            nrk_led_clr (3);
    2d18:	83 e0       	ldi	r24, 0x03	; 3
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_led_clr>
    2d20:	04 e6       	ldi	r16, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2d22:	88 ee       	ldi	r24, 0xE8	; 232
    2d24:	93 e0       	ldi	r25, 0x03	; 3
    2d26:	0e 94 1d 24 	call	0x483a	; 0x483a <nrk_spin_wait_us>
    2d2a:	01 50       	subi	r16, 0x01	; 1
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    2d2c:	d1 f7       	brne	.-12     	; 0x2d22 <nrk_error_print+0x14c>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    2d2e:	83 e0       	ldi	r24, 0x03	; 3
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <nrk_led_set>
            nrk_led_clr (2);
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_led_clr>
    2d3e:	04 e6       	ldi	r16, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2d40:	88 ee       	ldi	r24, 0xE8	; 232
    2d42:	93 e0       	ldi	r25, 0x03	; 3
    2d44:	0e 94 1d 24 	call	0x483a	; 0x483a <nrk_spin_wait_us>
    2d48:	01 50       	subi	r16, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    2d4a:	d1 f7       	brne	.-12     	; 0x2d40 <nrk_error_print+0x16a>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    2d4c:	1f 5f       	subi	r17, 0xFF	; 255
    2d4e:	14 31       	cpi	r17, 0x14	; 20
    2d50:	fc f2       	brlt	.-66     	; 0x2d10 <nrk_error_print+0x13a>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    2d52:	83 e0       	ldi	r24, 0x03	; 3
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_led_clr>
        nrk_led_clr (2);
    2d5a:	82 e0       	ldi	r24, 0x02	; 2
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_led_clr>
        blink_morse_code_error( error_task );
    2d62:	80 91 dc 03 	lds	r24, 0x03DC
    2d66:	0e 94 39 15 	call	0x2a72	; 0x2a72 <blink_morse_code_error>
        pause();
    2d6a:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pause>
        nrk_led_set(2);
    2d6e:	82 e0       	ldi	r24, 0x02	; 2
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <nrk_led_set>
        pause();
    2d76:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pause>
        nrk_led_clr(2);
    2d7a:	82 e0       	ldi	r24, 0x02	; 2
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_led_clr>
        pause();
    2d82:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <pause>
        blink_morse_code_error( error_num);
    2d86:	80 91 89 04 	lds	r24, 0x0489
    2d8a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <blink_morse_code_error>
#endif  /*  */

#ifdef NRK_HALT_ON_ERROR
    while (1)
    {
        for(i=0; i<20; i++ )
    2d8e:	10 e0       	ldi	r17, 0x00	; 0
    2d90:	bf cf       	rjmp	.-130    	; 0x2d10 <nrk_error_print+0x13a>

00002d92 <nrk_kernel_error_add>:
    nrk_error_print ();
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    2d92:	ef 92       	push	r14
    2d94:	ff 92       	push	r15
    2d96:	0f 93       	push	r16
    2d98:	1f 93       	push	r17
    2d9a:	18 2f       	mov	r17, r24
    2d9c:	e6 2e       	mov	r14, r22
    error_num = n;
    2d9e:	80 93 89 04 	sts	0x0489, r24
    error_task = task;
    2da2:	60 93 dc 03 	sts	0x03DC, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2da6:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <nrk_error_print>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    2daa:	00 e0       	ldi	r16, 0x00	; 0
    2dac:	21 c0       	rjmp	.+66     	; 0x2df0 <nrk_kernel_error_add+0x5e>
        {
            nrk_led_set (2);
    2dae:	82 e0       	ldi	r24, 0x02	; 2
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <nrk_led_set>
            nrk_led_clr (3);
    2db6:	83 e0       	ldi	r24, 0x03	; 3
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_led_clr>
    2dbe:	94 e6       	ldi	r25, 0x64	; 100
    2dc0:	f9 2e       	mov	r15, r25
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2dc2:	88 ee       	ldi	r24, 0xE8	; 232
    2dc4:	93 e0       	ldi	r25, 0x03	; 3
    2dc6:	0e 94 1d 24 	call	0x483a	; 0x483a <nrk_spin_wait_us>
    2dca:	fa 94       	dec	r15
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    2dcc:	d1 f7       	brne	.-12     	; 0x2dc2 <nrk_kernel_error_add+0x30>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    2dce:	83 e0       	ldi	r24, 0x03	; 3
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <nrk_led_set>
            nrk_led_clr (2);
    2dd6:	82 e0       	ldi	r24, 0x02	; 2
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_led_clr>
    2dde:	84 e6       	ldi	r24, 0x64	; 100
    2de0:	f8 2e       	mov	r15, r24
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2de2:	88 ee       	ldi	r24, 0xE8	; 232
    2de4:	93 e0       	ldi	r25, 0x03	; 3
    2de6:	0e 94 1d 24 	call	0x483a	; 0x483a <nrk_spin_wait_us>
    2dea:	fa 94       	dec	r15
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    2dec:	d1 f7       	brne	.-12     	; 0x2de2 <nrk_kernel_error_add+0x50>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    2dee:	0f 5f       	subi	r16, 0xFF	; 255
    2df0:	04 31       	cpi	r16, 0x14	; 20
    2df2:	e8 f2       	brcs	.-70     	; 0x2dae <nrk_kernel_error_add+0x1c>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    2df4:	83 e0       	ldi	r24, 0x03	; 3
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_led_clr>
        nrk_led_clr (2);
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <nrk_led_clr>
        blink_morse_code_error( task );
    2e04:	8e 2d       	mov	r24, r14
    2e06:	0e 94 39 15 	call	0x2a72	; 0x2a72 <blink_morse_code_error>
        blink_morse_code_error( n );
    2e0a:	81 2f       	mov	r24, r17
    2e0c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <blink_morse_code_error>
    uint8_t t;
    uint8_t i;

    while (1)
    {
        for(i=0; i<20; i++ )
    2e10:	00 e0       	ldi	r16, 0x00	; 0
    2e12:	cd cf       	rjmp	.-102    	; 0x2dae <nrk_kernel_error_add+0x1c>

00002e14 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    2e14:	80 93 89 04 	sts	0x0489, r24
    error_task = nrk_cur_task_TCB->task_ID;
    2e18:	e0 91 01 06 	lds	r30, 0x0601
    2e1c:	f0 91 02 06 	lds	r31, 0x0602
    2e20:	80 85       	ldd	r24, Z+8	; 0x08
    2e22:	80 93 dc 03 	sts	0x03DC, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2e26:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <nrk_error_print>
#endif  /*  */
}
    2e2a:	08 95       	ret

00002e2c <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2e2c:	6f 92       	push	r6
    2e2e:	7f 92       	push	r7
    2e30:	8f 92       	push	r8
    2e32:	9f 92       	push	r9
    2e34:	af 92       	push	r10
    2e36:	bf 92       	push	r11
    2e38:	cf 92       	push	r12
    2e3a:	df 92       	push	r13
    2e3c:	ef 92       	push	r14
    2e3e:	ff 92       	push	r15
    2e40:	0f 93       	push	r16
    2e42:	1f 93       	push	r17
    2e44:	cf 93       	push	r28
    2e46:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2e48:	8a eb       	ldi	r24, 0xBA	; 186
    2e4a:	94 e0       	ldi	r25, 0x04	; 4
    2e4c:	0e 94 57 07 	call	0xeae	; 0xeae <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2e50:	00 d0       	rcall	.+0      	; 0x2e52 <dump_stack_info+0x26>
    2e52:	00 d0       	rcall	.+0      	; 0x2e54 <dump_stack_info+0x28>
    2e54:	83 e8       	ldi	r24, 0x83	; 131
    2e56:	92 e0       	ldi	r25, 0x02	; 2
    2e58:	ad b7       	in	r26, 0x3d	; 61
    2e5a:	be b7       	in	r27, 0x3e	; 62
    2e5c:	12 96       	adiw	r26, 0x02	; 2
    2e5e:	9c 93       	st	X, r25
    2e60:	8e 93       	st	-X, r24
    2e62:	11 97       	sbiw	r26, 0x01	; 1
    2e64:	e0 91 01 06 	lds	r30, 0x0601
    2e68:	f0 91 02 06 	lds	r31, 0x0602
    2e6c:	80 85       	ldd	r24, Z+8	; 0x08
    2e6e:	99 27       	eor	r25, r25
    2e70:	87 fd       	sbrc	r24, 7
    2e72:	90 95       	com	r25
    2e74:	14 96       	adiw	r26, 0x04	; 4
    2e76:	9c 93       	st	X, r25
    2e78:	8e 93       	st	-X, r24
    2e7a:	13 97       	sbiw	r26, 0x03	; 3
    2e7c:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2e80:	e0 91 01 06 	lds	r30, 0x0601
    2e84:	f0 91 02 06 	lds	r31, 0x0602
    2e88:	c2 81       	ldd	r28, Z+2	; 0x02
    2e8a:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    2e8c:	8c e8       	ldi	r24, 0x8C	; 140
    2e8e:	92 e0       	ldi	r25, 0x02	; 2
    2e90:	ed b7       	in	r30, 0x3d	; 61
    2e92:	fe b7       	in	r31, 0x3e	; 62
    2e94:	92 83       	std	Z+2, r25	; 0x02
    2e96:	81 83       	std	Z+1, r24	; 0x01
    2e98:	d4 83       	std	Z+4, r29	; 0x04
    2e9a:	c3 83       	std	Z+3, r28	; 0x03
    2e9c:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    printf( "canary = %x ",*stkc );
    2ea0:	ed b7       	in	r30, 0x3d	; 61
    2ea2:	fe b7       	in	r31, 0x3e	; 62
    2ea4:	31 96       	adiw	r30, 0x01	; 1
    2ea6:	69 e9       	ldi	r22, 0x99	; 153
    2ea8:	e6 2e       	mov	r14, r22
    2eaa:	62 e0       	ldi	r22, 0x02	; 2
    2eac:	f6 2e       	mov	r15, r22
    2eae:	ad b7       	in	r26, 0x3d	; 61
    2eb0:	be b7       	in	r27, 0x3e	; 62
    2eb2:	12 96       	adiw	r26, 0x02	; 2
    2eb4:	fc 92       	st	X, r15
    2eb6:	ee 92       	st	-X, r14
    2eb8:	11 97       	sbiw	r26, 0x01	; 1
    2eba:	88 81       	ld	r24, Y
    2ebc:	82 83       	std	Z+2, r24	; 0x02
    2ebe:	13 82       	std	Z+3, r1	; 0x03
    2ec0:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    2ec4:	56 ea       	ldi	r21, 0xA6	; 166
    2ec6:	c5 2e       	mov	r12, r21
    2ec8:	52 e0       	ldi	r21, 0x02	; 2
    2eca:	d5 2e       	mov	r13, r21
    2ecc:	ed b7       	in	r30, 0x3d	; 61
    2ece:	fe b7       	in	r31, 0x3e	; 62
    2ed0:	d2 82       	std	Z+2, r13	; 0x02
    2ed2:	c1 82       	std	Z+1, r12	; 0x01
    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    printf( "canary = %x ",*stkc );
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    2ed4:	e0 91 01 06 	lds	r30, 0x0601
    2ed8:	f0 91 02 06 	lds	r31, 0x0602
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    2edc:	80 81       	ld	r24, Z
    2ede:	91 81       	ldd	r25, Z+1	; 0x01
    2ee0:	ad b7       	in	r26, 0x3d	; 61
    2ee2:	be b7       	in	r27, 0x3e	; 62
    2ee4:	14 96       	adiw	r26, 0x04	; 4
    2ee6:	9c 93       	st	X, r25
    2ee8:	8e 93       	st	-X, r24
    2eea:	13 97       	sbiw	r26, 0x03	; 3
    2eec:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    2ef0:	40 eb       	ldi	r20, 0xB0	; 176
    2ef2:	a4 2e       	mov	r10, r20
    2ef4:	42 e0       	ldi	r20, 0x02	; 2
    2ef6:	b4 2e       	mov	r11, r20
    2ef8:	ed b7       	in	r30, 0x3d	; 61
    2efa:	fe b7       	in	r31, 0x3e	; 62
    2efc:	b2 82       	std	Z+2, r11	; 0x02
    2efe:	a1 82       	std	Z+1, r10	; 0x01
    2f00:	80 91 01 06 	lds	r24, 0x0601
    2f04:	90 91 02 06 	lds	r25, 0x0602
    2f08:	94 83       	std	Z+4, r25	; 0x04
    2f0a:	83 83       	std	Z+3, r24	; 0x03
    2f0c:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    2f10:	0e e3       	ldi	r16, 0x3E	; 62
    2f12:	15 e0       	ldi	r17, 0x05	; 5
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	c0 e0       	ldi	r28, 0x00	; 0
    2f1e:	d0 e0       	ldi	r29, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2f20:	30 ec       	ldi	r19, 0xC0	; 192
    2f22:	63 2e       	mov	r6, r19
    2f24:	32 e0       	ldi	r19, 0x02	; 2
    2f26:	73 2e       	mov	r7, r19
        printf( "canary = %x ",*stkc );
    2f28:	47 01       	movw	r8, r14
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2f2a:	c6 01       	movw	r24, r12
    2f2c:	dc 2c       	mov	r13, r12
    2f2e:	c9 2e       	mov	r12, r25
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2f30:	c5 01       	movw	r24, r10
    2f32:	ba 2c       	mov	r11, r10
    2f34:	a9 2e       	mov	r10, r25
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2f36:	d8 01       	movw	r26, r16
    2f38:	12 96       	adiw	r26, 0x02	; 2
    2f3a:	ed 90       	ld	r14, X+
    2f3c:	fc 90       	ld	r15, X
    2f3e:	13 97       	sbiw	r26, 0x03	; 3
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <dump_stack_info+0x116>
    2f42:	00 d0       	rcall	.+0      	; 0x2f44 <dump_stack_info+0x118>
    2f44:	00 d0       	rcall	.+0      	; 0x2f46 <dump_stack_info+0x11a>
    2f46:	ed b7       	in	r30, 0x3d	; 61
    2f48:	fe b7       	in	r31, 0x3e	; 62
    2f4a:	31 96       	adiw	r30, 0x01	; 1
    2f4c:	ad b7       	in	r26, 0x3d	; 61
    2f4e:	be b7       	in	r27, 0x3e	; 62
    2f50:	12 96       	adiw	r26, 0x02	; 2
    2f52:	7c 92       	st	X, r7
    2f54:	6e 92       	st	-X, r6
    2f56:	11 97       	sbiw	r26, 0x01	; 1
    2f58:	d3 83       	std	Z+3, r29	; 0x03
    2f5a:	c2 83       	std	Z+2, r28	; 0x02
    2f5c:	f5 82       	std	Z+5, r15	; 0x05
    2f5e:	e4 82       	std	Z+4, r14	; 0x04
    2f60:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
        printf( "canary = %x ",*stkc );
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	ed b7       	in	r30, 0x3d	; 61
    2f6a:	fe b7       	in	r31, 0x3e	; 62
    2f6c:	31 96       	adiw	r30, 0x01	; 1
    2f6e:	ad b7       	in	r26, 0x3d	; 61
    2f70:	be b7       	in	r27, 0x3e	; 62
    2f72:	11 96       	adiw	r26, 0x01	; 1
    2f74:	8c 92       	st	X, r8
    2f76:	11 97       	sbiw	r26, 0x01	; 1
    2f78:	12 96       	adiw	r26, 0x02	; 2
    2f7a:	9c 92       	st	X, r9
    2f7c:	d7 01       	movw	r26, r14
    2f7e:	8c 91       	ld	r24, X
    2f80:	82 83       	std	Z+2, r24	; 0x02
    2f82:	13 82       	std	Z+3, r1	; 0x03
    2f84:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2f88:	ed b7       	in	r30, 0x3d	; 61
    2f8a:	fe b7       	in	r31, 0x3e	; 62
    2f8c:	d1 82       	std	Z+1, r13	; 0x01
    2f8e:	c2 82       	std	Z+2, r12	; 0x02
    2f90:	d8 01       	movw	r26, r16
    2f92:	8d 91       	ld	r24, X+
    2f94:	9c 91       	ld	r25, X
    2f96:	94 83       	std	Z+4, r25	; 0x04
    2f98:	83 83       	std	Z+3, r24	; 0x03
    2f9a:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2f9e:	ed b7       	in	r30, 0x3d	; 61
    2fa0:	fe b7       	in	r31, 0x3e	; 62
    2fa2:	b1 82       	std	Z+1, r11	; 0x01
    2fa4:	a2 82       	std	Z+2, r10	; 0x02
    2fa6:	ce 01       	movw	r24, r28
    2fa8:	25 e0       	ldi	r18, 0x05	; 5
    2faa:	88 0f       	add	r24, r24
    2fac:	99 1f       	adc	r25, r25
    2fae:	2a 95       	dec	r18
    2fb0:	e1 f7       	brne	.-8      	; 0x2faa <dump_stack_info+0x17e>
    2fb2:	8c 0f       	add	r24, r28
    2fb4:	9d 1f       	adc	r25, r29
    2fb6:	82 5c       	subi	r24, 0xC2	; 194
    2fb8:	9a 4f       	sbci	r25, 0xFA	; 250
    2fba:	94 83       	std	Z+4, r25	; 0x04
    2fbc:	83 83       	std	Z+3, r24	; 0x03
    2fbe:	0e 94 1d 31 	call	0x623a	; 0x623a <printf>
    2fc2:	21 96       	adiw	r28, 0x01	; 1
    2fc4:	0f 5d       	subi	r16, 0xDF	; 223
    2fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	c5 30       	cpi	r28, 0x05	; 5
    2fd2:	d1 05       	cpc	r29, r1
    2fd4:	09 f0       	breq	.+2      	; 0x2fd8 <dump_stack_info+0x1ac>
    2fd6:	af cf       	rjmp	.-162    	; 0x2f36 <dump_stack_info+0x10a>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	1f 91       	pop	r17
    2fde:	0f 91       	pop	r16
    2fe0:	ff 90       	pop	r15
    2fe2:	ef 90       	pop	r14
    2fe4:	df 90       	pop	r13
    2fe6:	cf 90       	pop	r12
    2fe8:	bf 90       	pop	r11
    2fea:	af 90       	pop	r10
    2fec:	9f 90       	pop	r9
    2fee:	8f 90       	pop	r8
    2ff0:	7f 90       	pop	r7
    2ff2:	6f 90       	pop	r6
    2ff4:	08 95       	ret

00002ff6 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    2ffa:	e0 91 01 06 	lds	r30, 0x0601
    2ffe:	f0 91 02 06 	lds	r31, 0x0602
    3002:	c2 81       	ldd	r28, Z+2	; 0x02
    3004:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3006:	88 81       	ld	r24, Y
    3008:	85 35       	cpi	r24, 0x55	; 85
    300a:	39 f0       	breq	.+14     	; 0x301a <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    300c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    3016:	85 e5       	ldi	r24, 0x55	; 85
    3018:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    301a:	e0 91 01 06 	lds	r30, 0x0601
    301e:	f0 91 02 06 	lds	r31, 0x0602
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3022:	80 81       	ld	r24, Z
    3024:	91 81       	ldd	r25, Z+1	; 0x01
    3026:	22 e2       	ldi	r18, 0x22	; 34
    3028:	80 30       	cpi	r24, 0x00	; 0
    302a:	92 07       	cpc	r25, r18
    302c:	28 f0       	brcs	.+10     	; 0x3038 <nrk_stack_check+0x42>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    302e:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3032:	82 e1       	ldi	r24, 0x12	; 18
    3034:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <nrk_error_add>




#endif
}
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	08 95       	ret

0000303e <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    303e:	99 27       	eor	r25, r25
    3040:	87 fd       	sbrc	r24, 7
    3042:	90 95       	com	r25
    3044:	fc 01       	movw	r30, r24
    3046:	75 e0       	ldi	r23, 0x05	; 5
    3048:	ee 0f       	add	r30, r30
    304a:	ff 1f       	adc	r31, r31
    304c:	7a 95       	dec	r23
    304e:	e1 f7       	brne	.-8      	; 0x3048 <nrk_stack_check_pid+0xa>
    3050:	e8 0f       	add	r30, r24
    3052:	f9 1f       	adc	r31, r25
    3054:	e2 5c       	subi	r30, 0xC2	; 194
    3056:	fa 4f       	sbci	r31, 0xFA	; 250
    3058:	a2 81       	ldd	r26, Z+2	; 0x02
    305a:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    305c:	8c 91       	ld	r24, X
    305e:	85 35       	cpi	r24, 0x55	; 85
    3060:	19 f0       	breq	.+6      	; 0x3068 <nrk_stack_check_pid+0x2a>
    {
        *stkc=STK_CANARY_VAL;
    3062:	85 e5       	ldi	r24, 0x55	; 85
    3064:	8c 93       	st	X, r24
    3066:	09 c0       	rjmp	.+18     	; 0x307a <nrk_stack_check_pid+0x3c>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3068:	80 81       	ld	r24, Z
    306a:	91 81       	ldd	r25, Z+1	; 0x01
    306c:	22 e2       	ldi	r18, 0x22	; 34
    306e:	80 30       	cpi	r24, 0x00	; 0
    3070:	92 07       	cpc	r25, r18
    3072:	28 f0       	brcs	.+10     	; 0x307e <nrk_stack_check_pid+0x40>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3074:	82 e1       	ldi	r24, 0x12	; 18
    3076:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <nrk_error_add>
        return NRK_ERROR;
    307a:	8f ef       	ldi	r24, 0xFF	; 255
    307c:	08 95       	ret
    }
#endif
    return NRK_OK;
    307e:	81 e0       	ldi	r24, 0x01	; 1
}
    3080:	08 95       	ret

00003082 <nrk_signal_create>:
int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    3082:	60 91 01 04 	lds	r22, 0x0401
    3086:	70 91 02 04 	lds	r23, 0x0402
    308a:	80 91 03 04 	lds	r24, 0x0403
    308e:	90 91 04 04 	lds	r25, 0x0404
    3092:	e0 e0       	ldi	r30, 0x00	; 0
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	9b 01       	movw	r18, r22
    3098:	ac 01       	movw	r20, r24
    309a:	0e 2e       	mov	r0, r30
    309c:	04 c0       	rjmp	.+8      	; 0x30a6 <nrk_signal_create+0x24>
    309e:	56 95       	lsr	r21
    30a0:	47 95       	ror	r20
    30a2:	37 95       	ror	r19
    30a4:	27 95       	ror	r18
    30a6:	0a 94       	dec	r0
    30a8:	d2 f7       	brpl	.-12     	; 0x309e <nrk_signal_create+0x1c>
    30aa:	20 fd       	sbrc	r18, 0
    30ac:	1a c0       	rjmp	.+52     	; 0x30e2 <nrk_signal_create+0x60>
		{    
			_nrk_signal_list|=SIG(i);
    30ae:	21 e0       	ldi	r18, 0x01	; 1
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e0       	ldi	r20, 0x00	; 0
    30b4:	50 e0       	ldi	r21, 0x00	; 0
    30b6:	0e 2e       	mov	r0, r30
    30b8:	04 c0       	rjmp	.+8      	; 0x30c2 <nrk_signal_create+0x40>
    30ba:	22 0f       	add	r18, r18
    30bc:	33 1f       	adc	r19, r19
    30be:	44 1f       	adc	r20, r20
    30c0:	55 1f       	adc	r21, r21
    30c2:	0a 94       	dec	r0
    30c4:	d2 f7       	brpl	.-12     	; 0x30ba <nrk_signal_create+0x38>
    30c6:	26 2b       	or	r18, r22
    30c8:	37 2b       	or	r19, r23
    30ca:	48 2b       	or	r20, r24
    30cc:	59 2b       	or	r21, r25
    30ce:	20 93 01 04 	sts	0x0401, r18
    30d2:	30 93 02 04 	sts	0x0402, r19
    30d6:	40 93 03 04 	sts	0x0403, r20
    30da:	50 93 04 04 	sts	0x0404, r21
			return i;
    30de:	8e 2f       	mov	r24, r30
    30e0:	08 95       	ret
    30e2:	31 96       	adiw	r30, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    30e4:	e0 32       	cpi	r30, 0x20	; 32
    30e6:	f1 05       	cpc	r31, r1
    30e8:	b1 f6       	brne	.-84     	; 0x3096 <nrk_signal_create+0x14>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    30ea:	8f ef       	ldi	r24, 0xFF	; 255


}
    30ec:	08 95       	ret

000030ee <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    30ee:	e0 91 01 06 	lds	r30, 0x0601
    30f2:	f0 91 02 06 	lds	r31, 0x0602


}

uint32_t nrk_signal_get_registered_mask()
{
    30f6:	65 85       	ldd	r22, Z+13	; 0x0d
    30f8:	76 85       	ldd	r23, Z+14	; 0x0e
        return nrk_cur_task_TCB->registered_signal_mask;
}
    30fa:	87 85       	ldd	r24, Z+15	; 0x0f
    30fc:	90 89       	ldd	r25, Z+16	; 0x10
    30fe:	08 95       	ret

00003100 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    3100:	df 92       	push	r13
    3102:	ef 92       	push	r14
    3104:	ff 92       	push	r15
    3106:	0f 93       	push	r16
    3108:	1f 93       	push	r17
    310a:	d8 2e       	mov	r13, r24
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	e8 2e       	mov	r14, r24
    3110:	f1 2c       	mov	r15, r1
    3112:	01 2d       	mov	r16, r1
    3114:	11 2d       	mov	r17, r1
    3116:	0d 2c       	mov	r0, r13
    3118:	04 c0       	rjmp	.+8      	; 0x3122 <nrk_signal_delete+0x22>
    311a:	ee 0c       	add	r14, r14
    311c:	ff 1c       	adc	r15, r15
    311e:	00 1f       	adc	r16, r16
    3120:	11 1f       	adc	r17, r17
    3122:	0a 94       	dec	r0
    3124:	d2 f7       	brpl	.-12     	; 0x311a <nrk_signal_delete+0x1a>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3126:	80 91 01 04 	lds	r24, 0x0401
    312a:	90 91 02 04 	lds	r25, 0x0402
    312e:	a0 91 03 04 	lds	r26, 0x0403
    3132:	b0 91 04 04 	lds	r27, 0x0404
    3136:	8e 21       	and	r24, r14
    3138:	9f 21       	and	r25, r15
    313a:	a0 23       	and	r26, r16
    313c:	b1 23       	and	r27, r17
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	a1 05       	cpc	r26, r1
    3142:	b1 05       	cpc	r27, r1
    3144:	09 f4       	brne	.+2      	; 0x3148 <nrk_signal_delete+0x48>
    3146:	5d c0       	rjmp	.+186    	; 0x3202 <nrk_signal_delete+0x102>

	nrk_int_disable();
    3148:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
    314c:	e5 e4       	ldi	r30, 0x45	; 69
    314e:	f5 e0       	ldi	r31, 0x05	; 5
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3150:	a8 01       	movw	r20, r16
    3152:	97 01       	movw	r18, r14
    3154:	20 95       	com	r18
    3156:	30 95       	com	r19
    3158:	40 95       	com	r20
    315a:	50 95       	com	r21
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    315c:	63 e0       	ldi	r22, 0x03	; 3

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    315e:	81 81       	ldd	r24, Z+1	; 0x01
    3160:	8f 3f       	cpi	r24, 0xFF	; 255
    3162:	39 f1       	breq	.+78     	; 0x31b2 <nrk_signal_delete+0xb2>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    3164:	86 81       	ldd	r24, Z+6	; 0x06
    3166:	97 81       	ldd	r25, Z+7	; 0x07
    3168:	a0 85       	ldd	r26, Z+8	; 0x08
    316a:	b1 85       	ldd	r27, Z+9	; 0x09
    316c:	8e 15       	cp	r24, r14
    316e:	9f 05       	cpc	r25, r15
    3170:	a0 07       	cpc	r26, r16
    3172:	b1 07       	cpc	r27, r17
    3174:	31 f4       	brne	.+12     	; 0x3182 <nrk_signal_delete+0x82>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3176:	12 86       	std	Z+10, r1	; 0x0a
    3178:	13 86       	std	Z+11, r1	; 0x0b
    317a:	14 86       	std	Z+12, r1	; 0x0c
    317c:	15 86       	std	Z+13, r1	; 0x0d
			nrk_task_TCB[task_ID].event_suspend=0;
    317e:	10 82       	st	Z, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3180:	62 83       	std	Z+2, r22	; 0x02
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3182:	86 81       	ldd	r24, Z+6	; 0x06
    3184:	97 81       	ldd	r25, Z+7	; 0x07
    3186:	a0 85       	ldd	r26, Z+8	; 0x08
    3188:	b1 85       	ldd	r27, Z+9	; 0x09
    318a:	82 23       	and	r24, r18
    318c:	93 23       	and	r25, r19
    318e:	a4 23       	and	r26, r20
    3190:	b5 23       	and	r27, r21
    3192:	86 83       	std	Z+6, r24	; 0x06
    3194:	97 83       	std	Z+7, r25	; 0x07
    3196:	a0 87       	std	Z+8, r26	; 0x08
    3198:	b1 87       	std	Z+9, r27	; 0x09
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    319a:	82 85       	ldd	r24, Z+10	; 0x0a
    319c:	93 85       	ldd	r25, Z+11	; 0x0b
    319e:	a4 85       	ldd	r26, Z+12	; 0x0c
    31a0:	b5 85       	ldd	r27, Z+13	; 0x0d
    31a2:	82 23       	and	r24, r18
    31a4:	93 23       	and	r25, r19
    31a6:	a4 23       	and	r26, r20
    31a8:	b5 23       	and	r27, r21
    31aa:	82 87       	std	Z+10, r24	; 0x0a
    31ac:	93 87       	std	Z+11, r25	; 0x0b
    31ae:	a4 87       	std	Z+12, r26	; 0x0c
    31b0:	b5 87       	std	Z+13, r27	; 0x0d
    31b2:	b1 96       	adiw	r30, 0x21	; 33
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    31b4:	85 e0       	ldi	r24, 0x05	; 5
    31b6:	ea 3e       	cpi	r30, 0xEA	; 234
    31b8:	f8 07       	cpc	r31, r24
    31ba:	89 f6       	brne	.-94     	; 0x315e <nrk_signal_delete+0x5e>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    31bc:	2e ef       	ldi	r18, 0xFE	; 254
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	4f ef       	ldi	r20, 0xFF	; 255
    31c2:	5f ef       	ldi	r21, 0xFF	; 255
    31c4:	04 c0       	rjmp	.+8      	; 0x31ce <nrk_signal_delete+0xce>
    31c6:	22 0f       	add	r18, r18
    31c8:	33 1f       	adc	r19, r19
    31ca:	44 1f       	adc	r20, r20
    31cc:	55 1f       	adc	r21, r21
    31ce:	da 94       	dec	r13
    31d0:	d2 f7       	brpl	.-12     	; 0x31c6 <nrk_signal_delete+0xc6>
    31d2:	80 91 01 04 	lds	r24, 0x0401
    31d6:	90 91 02 04 	lds	r25, 0x0402
    31da:	a0 91 03 04 	lds	r26, 0x0403
    31de:	b0 91 04 04 	lds	r27, 0x0404
    31e2:	82 23       	and	r24, r18
    31e4:	93 23       	and	r25, r19
    31e6:	a4 23       	and	r26, r20
    31e8:	b5 23       	and	r27, r21
    31ea:	80 93 01 04 	sts	0x0401, r24
    31ee:	90 93 02 04 	sts	0x0402, r25
    31f2:	a0 93 03 04 	sts	0x0403, r26
    31f6:	b0 93 04 04 	sts	0x0404, r27
	nrk_int_enable();
    31fa:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>

	return NRK_OK;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	01 c0       	rjmp	.+2      	; 0x3204 <nrk_signal_delete+0x104>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3202:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    3204:	1f 91       	pop	r17
    3206:	0f 91       	pop	r16
    3208:	ff 90       	pop	r15
    320a:	ef 90       	pop	r14
    320c:	df 90       	pop	r13
    320e:	08 95       	ret

00003210 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    3210:	ef 92       	push	r14
    3212:	ff 92       	push	r15
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    3218:	21 e0       	ldi	r18, 0x01	; 1
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e0       	ldi	r20, 0x00	; 0
    321e:	50 e0       	ldi	r21, 0x00	; 0
    3220:	04 c0       	rjmp	.+8      	; 0x322a <nrk_signal_unregister+0x1a>
    3222:	22 0f       	add	r18, r18
    3224:	33 1f       	adc	r19, r19
    3226:	44 1f       	adc	r20, r20
    3228:	55 1f       	adc	r21, r21
    322a:	8a 95       	dec	r24
    322c:	d2 f7       	brpl	.-12     	; 0x3222 <nrk_signal_unregister+0x12>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    322e:	e0 91 01 06 	lds	r30, 0x0601
    3232:	f0 91 02 06 	lds	r31, 0x0602
    3236:	85 85       	ldd	r24, Z+13	; 0x0d
    3238:	96 85       	ldd	r25, Z+14	; 0x0e
    323a:	a7 85       	ldd	r26, Z+15	; 0x0f
    323c:	b0 89       	ldd	r27, Z+16	; 0x10
    323e:	79 01       	movw	r14, r18
    3240:	8a 01       	movw	r16, r20
    3242:	e8 22       	and	r14, r24
    3244:	f9 22       	and	r15, r25
    3246:	0a 23       	and	r16, r26
    3248:	1b 23       	and	r17, r27
    324a:	e1 14       	cp	r14, r1
    324c:	f1 04       	cpc	r15, r1
    324e:	01 05       	cpc	r16, r1
    3250:	11 05       	cpc	r17, r1
    3252:	d1 f0       	breq	.+52     	; 0x3288 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    3254:	20 95       	com	r18
    3256:	30 95       	com	r19
    3258:	40 95       	com	r20
    325a:	50 95       	com	r21
    325c:	82 23       	and	r24, r18
    325e:	93 23       	and	r25, r19
    3260:	a4 23       	and	r26, r20
    3262:	b5 23       	and	r27, r21
    3264:	85 87       	std	Z+13, r24	; 0x0d
    3266:	96 87       	std	Z+14, r25	; 0x0e
    3268:	a7 87       	std	Z+15, r26	; 0x0f
    326a:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    326c:	81 89       	ldd	r24, Z+17	; 0x11
    326e:	92 89       	ldd	r25, Z+18	; 0x12
    3270:	a3 89       	ldd	r26, Z+19	; 0x13
    3272:	b4 89       	ldd	r27, Z+20	; 0x14
    3274:	82 23       	and	r24, r18
    3276:	93 23       	and	r25, r19
    3278:	a4 23       	and	r26, r20
    327a:	b5 23       	and	r27, r21
    327c:	81 8b       	std	Z+17, r24	; 0x11
    327e:	92 8b       	std	Z+18, r25	; 0x12
    3280:	a3 8b       	std	Z+19, r26	; 0x13
    3282:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	01 c0       	rjmp	.+2      	; 0x328a <nrk_signal_unregister+0x7a>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    3288:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    328a:	1f 91       	pop	r17
    328c:	0f 91       	pop	r16
    328e:	ff 90       	pop	r15
    3290:	ef 90       	pop	r14
    3292:	08 95       	ret

00003294 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    3294:	20 91 01 04 	lds	r18, 0x0401
    3298:	30 91 02 04 	lds	r19, 0x0402
    329c:	40 91 03 04 	lds	r20, 0x0403
    32a0:	50 91 04 04 	lds	r21, 0x0404
    32a4:	08 2e       	mov	r0, r24
    32a6:	04 c0       	rjmp	.+8      	; 0x32b0 <nrk_signal_register+0x1c>
    32a8:	56 95       	lsr	r21
    32aa:	47 95       	ror	r20
    32ac:	37 95       	ror	r19
    32ae:	27 95       	ror	r18
    32b0:	0a 94       	dec	r0
    32b2:	d2 f7       	brpl	.-12     	; 0x32a8 <nrk_signal_register+0x14>
    32b4:	21 70       	andi	r18, 0x01	; 1
    32b6:	30 70       	andi	r19, 0x00	; 0
    32b8:	21 15       	cp	r18, r1
    32ba:	31 05       	cpc	r19, r1
    32bc:	e9 f0       	breq	.+58     	; 0x32f8 <nrk_signal_register+0x64>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    32be:	e0 91 01 06 	lds	r30, 0x0601
    32c2:	f0 91 02 06 	lds	r31, 0x0602
    32c6:	21 e0       	ldi	r18, 0x01	; 1
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	50 e0       	ldi	r21, 0x00	; 0
    32ce:	04 c0       	rjmp	.+8      	; 0x32d8 <nrk_signal_register+0x44>
    32d0:	22 0f       	add	r18, r18
    32d2:	33 1f       	adc	r19, r19
    32d4:	44 1f       	adc	r20, r20
    32d6:	55 1f       	adc	r21, r21
    32d8:	8a 95       	dec	r24
    32da:	d2 f7       	brpl	.-12     	; 0x32d0 <nrk_signal_register+0x3c>
    32dc:	85 85       	ldd	r24, Z+13	; 0x0d
    32de:	96 85       	ldd	r25, Z+14	; 0x0e
    32e0:	a7 85       	ldd	r26, Z+15	; 0x0f
    32e2:	b0 89       	ldd	r27, Z+16	; 0x10
    32e4:	82 2b       	or	r24, r18
    32e6:	93 2b       	or	r25, r19
    32e8:	a4 2b       	or	r26, r20
    32ea:	b5 2b       	or	r27, r21
    32ec:	85 87       	std	Z+13, r24	; 0x0d
    32ee:	96 87       	std	Z+14, r25	; 0x0e
    32f0:	a7 87       	std	Z+15, r26	; 0x0f
    32f2:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	08 95       	ret
	}
            
	return NRK_ERROR;
    32f8:	8f ef       	ldi	r24, 0xFF	; 255
}
    32fa:	08 95       	ret

000032fc <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    32fc:	ef 92       	push	r14
    32fe:	ff 92       	push	r15
    3300:	0f 93       	push	r16
    3302:	1f 93       	push	r17
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	0f 92       	push	r0
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    330e:	91 e0       	ldi	r25, 0x01	; 1
    3310:	e9 2e       	mov	r14, r25
    3312:	f1 2c       	mov	r15, r1
    3314:	01 2d       	mov	r16, r1
    3316:	11 2d       	mov	r17, r1
    3318:	04 c0       	rjmp	.+8      	; 0x3322 <nrk_event_signal+0x26>
    331a:	ee 0c       	add	r14, r14
    331c:	ff 1c       	adc	r15, r15
    331e:	00 1f       	adc	r16, r16
    3320:	11 1f       	adc	r17, r17
    3322:	8a 95       	dec	r24
    3324:	d2 f7       	brpl	.-12     	; 0x331a <nrk_event_signal+0x1e>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3326:	80 91 01 04 	lds	r24, 0x0401
    332a:	90 91 02 04 	lds	r25, 0x0402
    332e:	a0 91 03 04 	lds	r26, 0x0403
    3332:	b0 91 04 04 	lds	r27, 0x0404
    3336:	8e 21       	and	r24, r14
    3338:	9f 21       	and	r25, r15
    333a:	a0 23       	and	r26, r16
    333c:	b1 23       	and	r27, r17
    333e:	00 97       	sbiw	r24, 0x00	; 0
    3340:	a1 05       	cpc	r26, r1
    3342:	b1 05       	cpc	r27, r1
    3344:	11 f4       	brne	.+4      	; 0x334a <nrk_event_signal+0x4e>
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	3f c0       	rjmp	.+126    	; 0x33c8 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    334a:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
    334e:	e5 e4       	ldi	r30, 0x45	; 69
    3350:	f5 e0       	ldi	r31, 0x05	; 5

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3352:	20 e0       	ldi	r18, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3354:	33 e0       	ldi	r19, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    3356:	80 81       	ld	r24, Z
    3358:	81 30       	cpi	r24, 0x01	; 1
    335a:	a9 f4       	brne	.+42     	; 0x3386 <nrk_event_signal+0x8a>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    335c:	82 85       	ldd	r24, Z+10	; 0x0a
    335e:	93 85       	ldd	r25, Z+11	; 0x0b
    3360:	a4 85       	ldd	r26, Z+12	; 0x0c
    3362:	b5 85       	ldd	r27, Z+13	; 0x0d
    3364:	8e 21       	and	r24, r14
    3366:	9f 21       	and	r25, r15
    3368:	a0 23       	and	r26, r16
    336a:	b1 23       	and	r27, r17
    336c:	00 97       	sbiw	r24, 0x00	; 0
    336e:	a1 05       	cpc	r26, r1
    3370:	b1 05       	cpc	r27, r1
    3372:	49 f0       	breq	.+18     	; 0x3386 <nrk_event_signal+0x8a>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3374:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3376:	17 86       	std	Z+15, r1	; 0x0f
    3378:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    337a:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    337c:	e2 86       	std	Z+10, r14	; 0x0a
    337e:	f3 86       	std	Z+11, r15	; 0x0b
    3380:	04 87       	std	Z+12, r16	; 0x0c
    3382:	15 87       	std	Z+13, r17	; 0x0d
					event_occured=1;
    3384:	21 e0       	ldi	r18, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3386:	80 81       	ld	r24, Z
    3388:	82 30       	cpi	r24, 0x02	; 2
    338a:	91 f4       	brne	.+36     	; 0x33b0 <nrk_event_signal+0xb4>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    338c:	82 85       	ldd	r24, Z+10	; 0x0a
    338e:	93 85       	ldd	r25, Z+11	; 0x0b
    3390:	a4 85       	ldd	r26, Z+12	; 0x0c
    3392:	b5 85       	ldd	r27, Z+13	; 0x0d
    3394:	8e 15       	cp	r24, r14
    3396:	9f 05       	cpc	r25, r15
    3398:	a0 07       	cpc	r26, r16
    339a:	b1 07       	cpc	r27, r17
    339c:	49 f4       	brne	.+18     	; 0x33b0 <nrk_event_signal+0xb4>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    339e:	32 83       	std	Z+2, r19	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    33a0:	17 86       	std	Z+15, r1	; 0x0f
    33a2:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    33a4:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    33a6:	12 86       	std	Z+10, r1	; 0x0a
    33a8:	13 86       	std	Z+11, r1	; 0x0b
    33aa:	14 86       	std	Z+12, r1	; 0x0c
    33ac:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    33ae:	21 e0       	ldi	r18, 0x01	; 1
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
					nrk_task_TCB[task_ID].next_wakeup=0;
					nrk_task_TCB[task_ID].event_suspend=0;
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    33b0:	b1 96       	adiw	r30, 0x21	; 33
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    33b2:	85 e0       	ldi	r24, 0x05	; 5
    33b4:	ea 3e       	cpi	r30, 0xEA	; 234
    33b6:	f8 07       	cpc	r31, r24
    33b8:	71 f6       	brne	.-100    	; 0x3356 <nrk_event_signal+0x5a>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    33ba:	29 83       	std	Y+1, r18	; 0x01
    33bc:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>
	if(event_occured)
    33c0:	29 81       	ldd	r18, Y+1	; 0x01
    33c2:	22 23       	and	r18, r18
    33c4:	29 f4       	brne	.+10     	; 0x33d0 <nrk_event_signal+0xd4>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    33c6:	82 e0       	ldi	r24, 0x02	; 2
    33c8:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_nrk_errno_set>
	return NRK_ERROR;
    33cc:	8f ef       	ldi	r24, 0xFF	; 255
    33ce:	01 c0       	rjmp	.+2      	; 0x33d2 <nrk_event_signal+0xd6>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    33d0:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    33d2:	0f 90       	pop	r0
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	ff 90       	pop	r15
    33de:	ef 90       	pop	r14
    33e0:	08 95       	ret

000033e2 <nrk_event_wait>:

uint32_t nrk_event_wait(uint32_t event_mask)
{

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    33e2:	e0 91 01 06 	lds	r30, 0x0601
    33e6:	f0 91 02 06 	lds	r31, 0x0602
    33ea:	25 85       	ldd	r18, Z+13	; 0x0d
    33ec:	36 85       	ldd	r19, Z+14	; 0x0e
    33ee:	47 85       	ldd	r20, Z+15	; 0x0f
    33f0:	50 89       	ldd	r21, Z+16	; 0x10
    33f2:	26 23       	and	r18, r22
    33f4:	37 23       	and	r19, r23
    33f6:	48 23       	and	r20, r24
    33f8:	59 23       	and	r21, r25
    33fa:	21 15       	cp	r18, r1
    33fc:	31 05       	cpc	r19, r1
    33fe:	41 05       	cpc	r20, r1
    3400:	51 05       	cpc	r21, r1
    3402:	21 f1       	breq	.+72     	; 0x344c <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    3404:	61 8b       	std	Z+17, r22	; 0x11
    3406:	72 8b       	std	Z+18, r23	; 0x12
    3408:	83 8b       	std	Z+19, r24	; 0x13
    340a:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    340c:	21 e0       	ldi	r18, 0x01	; 1
    340e:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    3410:	00 90 e9 05 	lds	r0, 0x05E9
    3414:	04 c0       	rjmp	.+8      	; 0x341e <nrk_event_wait+0x3c>
    3416:	96 95       	lsr	r25
    3418:	87 95       	ror	r24
    341a:	77 95       	ror	r23
    341c:	67 95       	ror	r22
    341e:	0a 94       	dec	r0
    3420:	d2 f7       	brpl	.-12     	; 0x3416 <nrk_event_wait+0x34>
    3422:	61 70       	andi	r22, 0x01	; 1
    3424:	70 70       	andi	r23, 0x00	; 0
    3426:	61 15       	cp	r22, r1
    3428:	71 05       	cpc	r23, r1
    342a:	19 f0       	breq	.+6      	; 0x3432 <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    342c:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <nrk_wait_until_nw>
    3430:	04 c0       	rjmp	.+8      	; 0x343a <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    343a:	e0 91 01 06 	lds	r30, 0x0601
    343e:	f0 91 02 06 	lds	r31, 0x0602
    3442:	21 89       	ldd	r18, Z+17	; 0x11
    3444:	32 89       	ldd	r19, Z+18	; 0x12
    3446:	43 89       	ldd	r20, Z+19	; 0x13
    3448:	54 89       	ldd	r21, Z+20	; 0x14
    344a:	03 c0       	rjmp	.+6      	; 0x3452 <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	a9 01       	movw	r20, r18
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    3452:	b9 01       	movw	r22, r18
    3454:	ca 01       	movw	r24, r20
    3456:	08 95       	ret

00003458 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	08 95       	ret

0000345e <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    345e:	25 e0       	ldi	r18, 0x05	; 5
    3460:	85 3e       	cpi	r24, 0xE5	; 229
    3462:	92 07       	cpc	r25, r18
    3464:	11 f4       	brne	.+4      	; 0x346a <nrk_get_resource_index+0xc>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	08 95       	ret
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
    346a:	8f ef       	ldi	r24, 0xFF	; 255
}
    346c:	08 95       	ret

0000346e <nrk_sem_delete>:
return NRK_OK;
}

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    346e:	0e 94 2f 1a 	call	0x345e	; 0x345e <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3472:	8f 3f       	cpi	r24, 0xFF	; 255
    3474:	11 f4       	brne	.+4      	; 0x347a <nrk_sem_delete+0xc>
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	03 c0       	rjmp	.+6      	; 0x3480 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    347a:	81 30       	cpi	r24, 0x01	; 1
    347c:	29 f4       	brne	.+10     	; 0x3488 <nrk_sem_delete+0x1a>
    347e:	82 e0       	ldi	r24, 0x02	; 2
    3480:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_nrk_errno_set>
    3484:	8f ef       	ldi	r24, 0xFF	; 255
    3486:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3488:	99 27       	eor	r25, r25
    348a:	87 fd       	sbrc	r24, 7
    348c:	90 95       	com	r25
    348e:	fc 01       	movw	r30, r24
    3490:	ee 0f       	add	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	e8 0f       	add	r30, r24
    3496:	f9 1f       	adc	r31, r25
    3498:	eb 51       	subi	r30, 0x1B	; 27
    349a:	fa 4f       	sbci	r31, 0xFA	; 250
    349c:	8f ef       	ldi	r24, 0xFF	; 255
    349e:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    34a0:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    34a2:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    34a4:	80 91 00 06 	lds	r24, 0x0600
    34a8:	81 50       	subi	r24, 0x01	; 1
    34aa:	80 93 00 06 	sts	0x0600, r24
return NRK_OK;
    34ae:	81 e0       	ldi	r24, 0x01	; 1
}
    34b0:	08 95       	ret

000034b2 <nrk_sem_post>:
}



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    34b2:	0f 93       	push	r16
    34b4:	1f 93       	push	r17
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	0f 92       	push	r0
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    34c0:	0e 94 2f 1a 	call	0x345e	; 0x345e <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    34c4:	8f 3f       	cpi	r24, 0xFF	; 255
    34c6:	11 f4       	brne	.+4      	; 0x34cc <nrk_sem_post+0x1a>
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	03 c0       	rjmp	.+6      	; 0x34d2 <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    34cc:	81 30       	cpi	r24, 0x01	; 1
    34ce:	29 f4       	brne	.+10     	; 0x34da <nrk_sem_post+0x28>
    34d0:	82 e0       	ldi	r24, 0x02	; 2
    34d2:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_nrk_errno_set>
    34d6:	8f ef       	ldi	r24, 0xFF	; 255
    34d8:	43 c0       	rjmp	.+134    	; 0x3560 <nrk_sem_post+0xae>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    34da:	28 2f       	mov	r18, r24
    34dc:	33 27       	eor	r19, r19
    34de:	27 fd       	sbrc	r18, 7
    34e0:	30 95       	com	r19
    34e2:	89 01       	movw	r16, r18
    34e4:	00 0f       	add	r16, r16
    34e6:	11 1f       	adc	r17, r17
    34e8:	02 0f       	add	r16, r18
    34ea:	13 1f       	adc	r17, r19
    34ec:	0b 51       	subi	r16, 0x1B	; 27
    34ee:	1a 4f       	sbci	r17, 0xFA	; 250
    34f0:	d8 01       	movw	r26, r16
    34f2:	12 96       	adiw	r26, 0x02	; 2
    34f4:	2c 91       	ld	r18, X
    34f6:	12 97       	sbiw	r26, 0x02	; 2
    34f8:	9c 91       	ld	r25, X
    34fa:	29 17       	cp	r18, r25
    34fc:	84 f5       	brge	.+96     	; 0x355e <nrk_sem_post+0xac>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    34fe:	89 83       	std	Y+1, r24	; 0x01
    3500:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>

		nrk_sem_list[id].value++;
    3504:	f8 01       	movw	r30, r16
    3506:	92 81       	ldd	r25, Z+2	; 0x02
    3508:	9f 5f       	subi	r25, 0xFF	; 255
    350a:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    350c:	e0 91 01 06 	lds	r30, 0x0601
    3510:	f0 91 02 06 	lds	r31, 0x0602
    3514:	14 82       	std	Z+4, r1	; 0x04
    3516:	e5 e4       	ldi	r30, 0x45	; 69
    3518:	f5 e0       	ldi	r31, 0x05	; 5

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	99 27       	eor	r25, r25
    351e:	87 fd       	sbrc	r24, 7
    3520:	90 95       	com	r25
    3522:	a9 2f       	mov	r26, r25
    3524:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3526:	63 e0       	ldi	r22, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3528:	20 81       	ld	r18, Z
    352a:	22 30       	cpi	r18, 0x02	; 2
    352c:	89 f4       	brne	.+34     	; 0x3550 <nrk_sem_post+0x9e>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    352e:	22 85       	ldd	r18, Z+10	; 0x0a
    3530:	33 85       	ldd	r19, Z+11	; 0x0b
    3532:	44 85       	ldd	r20, Z+12	; 0x0c
    3534:	55 85       	ldd	r21, Z+13	; 0x0d
    3536:	28 17       	cp	r18, r24
    3538:	39 07       	cpc	r19, r25
    353a:	4a 07       	cpc	r20, r26
    353c:	5b 07       	cpc	r21, r27
    353e:	41 f4       	brne	.+16     	; 0x3550 <nrk_sem_post+0x9e>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3540:	62 83       	std	Z+2, r22	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3542:	17 86       	std	Z+15, r1	; 0x0f
    3544:	16 86       	std	Z+14, r1	; 0x0e
					nrk_task_TCB[task_ID].event_suspend=0;
    3546:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3548:	12 86       	std	Z+10, r1	; 0x0a
    354a:	13 86       	std	Z+11, r1	; 0x0b
    354c:	14 86       	std	Z+12, r1	; 0x0c
    354e:	15 86       	std	Z+13, r1	; 0x0d
    3550:	b1 96       	adiw	r30, 0x21	; 33
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3552:	25 e0       	ldi	r18, 0x05	; 5
    3554:	ea 3e       	cpi	r30, 0xEA	; 234
    3556:	f2 07       	cpc	r31, r18
    3558:	39 f7       	brne	.-50     	; 0x3528 <nrk_sem_post+0x76>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    355a:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>
	}
		
return NRK_OK;
    355e:	81 e0       	ldi	r24, 0x01	; 1
}
    3560:	0f 90       	pop	r0
    3562:	cf 91       	pop	r28
    3564:	df 91       	pop	r29
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <nrk_sem_pend>:
}



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	df 93       	push	r29
    3572:	cf 93       	push	r28
    3574:	0f 92       	push	r0
    3576:	cd b7       	in	r28, 0x3d	; 61
    3578:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    357a:	0e 94 2f 1a 	call	0x345e	; 0x345e <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    357e:	8f 3f       	cpi	r24, 0xFF	; 255
    3580:	11 f4       	brne	.+4      	; 0x3586 <nrk_sem_pend+0x1a>
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	03 c0       	rjmp	.+6      	; 0x358c <nrk_sem_pend+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3586:	81 30       	cpi	r24, 0x01	; 1
    3588:	29 f4       	brne	.+10     	; 0x3594 <nrk_sem_pend+0x28>
    358a:	82 e0       	ldi	r24, 0x02	; 2
    358c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_nrk_errno_set>
    3590:	8f ef       	ldi	r24, 0xFF	; 255
    3592:	40 c0       	rjmp	.+128    	; 0x3614 <nrk_sem_pend+0xa8>
	
	nrk_int_disable();
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	08 2f       	mov	r16, r24
    359e:	11 27       	eor	r17, r17
    35a0:	07 fd       	sbrc	r16, 7
    35a2:	10 95       	com	r17
    35a4:	f8 01       	movw	r30, r16
    35a6:	ee 0f       	add	r30, r30
    35a8:	ff 1f       	adc	r31, r31
    35aa:	e0 0f       	add	r30, r16
    35ac:	f1 1f       	adc	r31, r17
    35ae:	eb 51       	subi	r30, 0x1B	; 27
    35b0:	fa 4f       	sbci	r31, 0xFA	; 250
    35b2:	92 81       	ldd	r25, Z+2	; 0x02
    35b4:	99 23       	and	r25, r25
    35b6:	b1 f4       	brne	.+44     	; 0x35e4 <nrk_sem_pend+0x78>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    35b8:	e0 91 01 06 	lds	r30, 0x0601
    35bc:	f0 91 02 06 	lds	r31, 0x0602
    35c0:	97 81       	ldd	r25, Z+7	; 0x07
    35c2:	92 60       	ori	r25, 0x02	; 2
    35c4:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    35c6:	99 27       	eor	r25, r25
    35c8:	87 fd       	sbrc	r24, 7
    35ca:	90 95       	com	r25
    35cc:	a9 2f       	mov	r26, r25
    35ce:	b9 2f       	mov	r27, r25
    35d0:	81 8b       	std	Z+17, r24	; 0x11
    35d2:	92 8b       	std	Z+18, r25	; 0x12
    35d4:	a3 8b       	std	Z+19, r26	; 0x13
    35d6:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    35d8:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>
		nrk_wait_until_ticks(0);
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    35e4:	f8 01       	movw	r30, r16
    35e6:	ee 0f       	add	r30, r30
    35e8:	ff 1f       	adc	r31, r31
    35ea:	e0 0f       	add	r30, r16
    35ec:	f1 1f       	adc	r31, r17
    35ee:	eb 51       	subi	r30, 0x1B	; 27
    35f0:	fa 4f       	sbci	r31, 0xFA	; 250
    35f2:	82 81       	ldd	r24, Z+2	; 0x02
    35f4:	81 50       	subi	r24, 0x01	; 1
    35f6:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    35f8:	a0 91 01 06 	lds	r26, 0x0601
    35fc:	b0 91 02 06 	lds	r27, 0x0602
    3600:	81 81       	ldd	r24, Z+1	; 0x01
    3602:	1b 96       	adiw	r26, 0x0b	; 11
    3604:	8c 93       	st	X, r24
    3606:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	14 96       	adiw	r26, 0x04	; 4
    360c:	8c 93       	st	X, r24
	nrk_int_enable();
    360e:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>

	return NRK_OK;
    3612:	81 e0       	ldi	r24, 0x01	; 1
}
    3614:	0f 90       	pop	r0
    3616:	cf 91       	pop	r28
    3618:	df 91       	pop	r29
    361a:	1f 91       	pop	r17
    361c:	0f 91       	pop	r16
    361e:	08 95       	ret

00003620 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3620:	0e 94 2f 1a 	call	0x345e	; 0x345e <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3624:	8f 3f       	cpi	r24, 0xFF	; 255
    3626:	11 f4       	brne	.+4      	; 0x362c <nrk_sem_query+0xc>
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	03 c0       	rjmp	.+6      	; 0x3632 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    362c:	81 30       	cpi	r24, 0x01	; 1
    362e:	29 f4       	brne	.+10     	; 0x363a <nrk_sem_query+0x1a>
    3630:	82 e0       	ldi	r24, 0x02	; 2
    3632:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <_nrk_errno_set>
    3636:	8f ef       	ldi	r24, 0xFF	; 255
    3638:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    363a:	99 27       	eor	r25, r25
    363c:	87 fd       	sbrc	r24, 7
    363e:	90 95       	com	r25
    3640:	fc 01       	movw	r30, r24
    3642:	ee 0f       	add	r30, r30
    3644:	ff 1f       	adc	r31, r31
    3646:	e8 0f       	add	r30, r24
    3648:	f9 1f       	adc	r31, r25
    364a:	eb 51       	subi	r30, 0x1B	; 27
    364c:	fa 4f       	sbci	r31, 0xFA	; 250
    364e:	82 81       	ldd	r24, Z+2	; 0x02
}
    3650:	08 95       	ret

00003652 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    3652:	e0 91 f6 05 	lds	r30, 0x05F6
    3656:	f0 91 f7 05 	lds	r31, 0x05F7
}
    365a:	80 81       	ld	r24, Z
    365c:	08 95       	ret

0000365e <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    365e:	e0 91 f6 05 	lds	r30, 0x05F6
    3662:	f0 91 f7 05 	lds	r31, 0x05F7
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3666:	03 c0       	rjmp	.+6      	; 0x366e <nrk_print_readyQ+0x10>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    3668:	03 80       	ldd	r0, Z+3	; 0x03
    366a:	f4 81       	ldd	r31, Z+4	; 0x04
    366c:	e0 2d       	mov	r30, r0
void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    366e:	30 97       	sbiw	r30, 0x00	; 0
    3670:	d9 f7       	brne	.-10     	; 0x3668 <nrk_print_readyQ+0xa>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    3672:	08 95       	ret

00003674 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3674:	df 92       	push	r13
    3676:	ef 92       	push	r14
    3678:	ff 92       	push	r15
    367a:	0f 93       	push	r16
    367c:	1f 93       	push	r17
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    3682:	e0 91 3c 05 	lds	r30, 0x053C
    3686:	f0 91 3d 05 	lds	r31, 0x053D
    368a:	30 97       	sbiw	r30, 0x00	; 0
    368c:	09 f4       	brne	.+2      	; 0x3690 <nrk_add_to_readyQ+0x1c>
    368e:	9b c0       	rjmp	.+310    	; 0x37c6 <nrk_add_to_readyQ+0x152>
    {
        return;
    }


    NextNode = _head_node;
    3690:	40 91 f6 05 	lds	r20, 0x05F6
    3694:	50 91 f7 05 	lds	r21, 0x05F7
    CurNode = _free_node;

    if (_head_node != NULL)
    3698:	41 15       	cp	r20, r1
    369a:	51 05       	cpc	r21, r1
    369c:	09 f4       	brne	.+2      	; 0x36a0 <nrk_add_to_readyQ+0x2c>
    369e:	57 c0       	rjmp	.+174    	; 0x374e <nrk_add_to_readyQ+0xda>
    36a0:	da 01       	movw	r26, r20

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    36a2:	68 2f       	mov	r22, r24
    36a4:	77 27       	eor	r23, r23
    36a6:	67 fd       	sbrc	r22, 7
    36a8:	70 95       	com	r23
    36aa:	9b 01       	movw	r18, r22
    36ac:	15 e0       	ldi	r17, 0x05	; 5
    36ae:	22 0f       	add	r18, r18
    36b0:	33 1f       	adc	r19, r19
    36b2:	1a 95       	dec	r17
    36b4:	e1 f7       	brne	.-8      	; 0x36ae <nrk_add_to_readyQ+0x3a>
    36b6:	26 0f       	add	r18, r22
    36b8:	37 1f       	adc	r19, r23
    36ba:	22 5c       	subi	r18, 0xC2	; 194
    36bc:	3a 4f       	sbci	r19, 0xFA	; 250
    36be:	b9 01       	movw	r22, r18
    36c0:	66 5f       	subi	r22, 0xF6	; 246
    36c2:	7f 4f       	sbci	r23, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    36c4:	89 01       	movw	r16, r18
    36c6:	0c 5f       	subi	r16, 0xFC	; 252
    36c8:	1f 4f       	sbci	r17, 0xFF	; 255
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    36ca:	9b e0       	ldi	r25, 0x0B	; 11
    36cc:	e9 2e       	mov	r14, r25
    36ce:	f1 2c       	mov	r15, r1
    36d0:	e2 0e       	add	r14, r18
    36d2:	f3 1e       	adc	r15, r19
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    36d4:	2c 91       	ld	r18, X
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	e9 01       	movw	r28, r18
    36da:	95 e0       	ldi	r25, 0x05	; 5
    36dc:	cc 0f       	add	r28, r28
    36de:	dd 1f       	adc	r29, r29
    36e0:	9a 95       	dec	r25
    36e2:	e1 f7       	brne	.-8      	; 0x36dc <nrk_add_to_readyQ+0x68>
    36e4:	c2 0f       	add	r28, r18
    36e6:	d3 1f       	adc	r29, r19
    36e8:	c2 5c       	subi	r28, 0xC2	; 194
    36ea:	da 4f       	sbci	r29, 0xFA	; 250
    36ec:	9c 81       	ldd	r25, Y+4	; 0x04
    36ee:	99 23       	and	r25, r25
    36f0:	29 f0       	breq	.+10     	; 0x36fc <nrk_add_to_readyQ+0x88>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    36f2:	db 84       	ldd	r13, Y+11	; 0x0b
    36f4:	eb 01       	movw	r28, r22
    36f6:	98 81       	ld	r25, Y
    36f8:	d9 16       	cp	r13, r25
    36fa:	58 f1       	brcs	.+86     	; 0x3752 <nrk_add_to_readyQ+0xde>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    36fc:	e8 01       	movw	r28, r16
    36fe:	98 81       	ld	r25, Y
    3700:	99 23       	and	r25, r25
    3702:	79 f0       	breq	.+30     	; 0x3722 <nrk_add_to_readyQ+0xae>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3704:	e9 01       	movw	r28, r18
    3706:	95 e0       	ldi	r25, 0x05	; 5
    3708:	cc 0f       	add	r28, r28
    370a:	dd 1f       	adc	r29, r29
    370c:	9a 95       	dec	r25
    370e:	e1 f7       	brne	.-8      	; 0x3708 <nrk_add_to_readyQ+0x94>
    3710:	c2 0f       	add	r28, r18
    3712:	d3 1f       	adc	r29, r19
    3714:	c2 5c       	subi	r28, 0xC2	; 194
    3716:	da 4f       	sbci	r29, 0xFA	; 250
    3718:	da 84       	ldd	r13, Y+10	; 0x0a
    371a:	e7 01       	movw	r28, r14
    371c:	98 81       	ld	r25, Y
    371e:	d9 16       	cp	r13, r25
    3720:	c0 f0       	brcs	.+48     	; 0x3752 <nrk_add_to_readyQ+0xde>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3722:	e9 01       	movw	r28, r18
    3724:	95 e0       	ldi	r25, 0x05	; 5
    3726:	cc 0f       	add	r28, r28
    3728:	dd 1f       	adc	r29, r29
    372a:	9a 95       	dec	r25
    372c:	e1 f7       	brne	.-8      	; 0x3726 <nrk_add_to_readyQ+0xb2>
    372e:	c2 0f       	add	r28, r18
    3730:	d3 1f       	adc	r29, r19
    3732:	c2 5c       	subi	r28, 0xC2	; 194
    3734:	da 4f       	sbci	r29, 0xFA	; 250
    3736:	2a 85       	ldd	r18, Y+10	; 0x0a
    3738:	eb 01       	movw	r28, r22
    373a:	98 81       	ld	r25, Y
    373c:	29 17       	cp	r18, r25
    373e:	48 f0       	brcs	.+18     	; 0x3752 <nrk_add_to_readyQ+0xde>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    3740:	13 96       	adiw	r26, 0x03	; 3
    3742:	0d 90       	ld	r0, X+
    3744:	bc 91       	ld	r27, X
    3746:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    3748:	10 97       	sbiw	r26, 0x00	; 0
    374a:	21 f6       	brne	.-120    	; 0x36d4 <nrk_add_to_readyQ+0x60>
    374c:	02 c0       	rjmp	.+4      	; 0x3752 <nrk_add_to_readyQ+0xde>


    NextNode = _head_node;
    CurNode = _free_node;

    if (_head_node != NULL)
    374e:	a0 e0       	ldi	r26, 0x00	; 0
    3750:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    3752:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    3754:	c3 81       	ldd	r28, Z+3	; 0x03
    3756:	d4 81       	ldd	r29, Z+4	; 0x04
    3758:	d0 93 3d 05 	sts	0x053D, r29
    375c:	c0 93 3c 05 	sts	0x053C, r28

    if (NextNode == _head_node)
    3760:	a4 17       	cp	r26, r20
    3762:	b5 07       	cpc	r27, r21
    3764:	b1 f4       	brne	.+44     	; 0x3792 <nrk_add_to_readyQ+0x11e>
    {
        //at start
        if (_head_node != NULL)
    3766:	10 97       	sbiw	r26, 0x00	; 0
    3768:	49 f0       	breq	.+18     	; 0x377c <nrk_add_to_readyQ+0x108>
        {
            CurNode->Next = _head_node;
    376a:	b4 83       	std	Z+4, r27	; 0x04
    376c:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    376e:	12 82       	std	Z+2, r1	; 0x02
    3770:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    3772:	12 96       	adiw	r26, 0x02	; 2
    3774:	fc 93       	st	X, r31
    3776:	ee 93       	st	-X, r30
    3778:	11 97       	sbiw	r26, 0x01	; 1
    377a:	06 c0       	rjmp	.+12     	; 0x3788 <nrk_add_to_readyQ+0x114>
        }
        else
        {
            CurNode->Next = NULL;
    377c:	14 82       	std	Z+4, r1	; 0x04
    377e:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    3780:	12 82       	std	Z+2, r1	; 0x02
    3782:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3784:	fa 83       	std	Y+2, r31	; 0x02
    3786:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    3788:	f0 93 f7 05 	sts	0x05F7, r31
    378c:	e0 93 f6 05 	sts	0x05F6, r30
    3790:	1a c0       	rjmp	.+52     	; 0x37c6 <nrk_add_to_readyQ+0x152>
    3792:	11 96       	adiw	r26, 0x01	; 1
    3794:	8d 91       	ld	r24, X+
    3796:	9c 91       	ld	r25, X
    3798:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    379a:	ac 17       	cp	r26, r28
    379c:	bd 07       	cpc	r27, r29
    379e:	59 f0       	breq	.+22     	; 0x37b6 <nrk_add_to_readyQ+0x142>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    37a0:	92 83       	std	Z+2, r25	; 0x02
    37a2:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    37a4:	b4 83       	std	Z+4, r27	; 0x04
    37a6:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    37a8:	11 96       	adiw	r26, 0x01	; 1
    37aa:	cd 91       	ld	r28, X+
    37ac:	dc 91       	ld	r29, X
    37ae:	12 97       	sbiw	r26, 0x02	; 2
    37b0:	fc 83       	std	Y+4, r31	; 0x04
    37b2:	eb 83       	std	Y+3, r30	; 0x03
    37b4:	04 c0       	rjmp	.+8      	; 0x37be <nrk_add_to_readyQ+0x14a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    37b6:	14 82       	std	Z+4, r1	; 0x04
    37b8:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    37ba:	92 83       	std	Z+2, r25	; 0x02
    37bc:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    37be:	12 96       	adiw	r26, 0x02	; 2
    37c0:	fc 93       	st	X, r31
    37c2:	ee 93       	st	-X, r30
    37c4:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    37c6:	df 91       	pop	r29
    37c8:	cf 91       	pop	r28
    37ca:	1f 91       	pop	r17
    37cc:	0f 91       	pop	r16
    37ce:	ff 90       	pop	r15
    37d0:	ef 90       	pop	r14
    37d2:	df 90       	pop	r13
    37d4:	08 95       	ret

000037d6 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    37da:	e0 91 f6 05 	lds	r30, 0x05F6
    37de:	f0 91 f7 05 	lds	r31, 0x05F7
    37e2:	30 97       	sbiw	r30, 0x00	; 0
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <nrk_rem_from_readyQ+0x12>
    37e6:	44 c0       	rjmp	.+136    	; 0x3870 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    37e8:	99 27       	eor	r25, r25
    37ea:	87 fd       	sbrc	r24, 7
    37ec:	90 95       	com	r25
    37ee:	20 81       	ld	r18, Z
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	28 17       	cp	r18, r24
    37f4:	39 07       	cpc	r19, r25
    37f6:	81 f4       	brne	.+32     	; 0x3818 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    37f8:	a3 81       	ldd	r26, Z+3	; 0x03
    37fa:	b4 81       	ldd	r27, Z+4	; 0x04
    37fc:	b0 93 f7 05 	sts	0x05F7, r27
    3800:	a0 93 f6 05 	sts	0x05F6, r26
        _head_node->Prev = NULL;
    3804:	12 96       	adiw	r26, 0x02	; 2
    3806:	1c 92       	st	X, r1
    3808:	1e 92       	st	-X, r1
    380a:	11 97       	sbiw	r26, 0x01	; 1
    380c:	18 c0       	rjmp	.+48     	; 0x383e <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    380e:	03 80       	ldd	r0, Z+3	; 0x03
    3810:	f4 81       	ldd	r31, Z+4	; 0x04
    3812:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    3814:	30 97       	sbiw	r30, 0x00	; 0
    3816:	61 f1       	breq	.+88     	; 0x3870 <nrk_rem_from_readyQ+0x9a>
    3818:	20 81       	ld	r18, Z
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	28 17       	cp	r18, r24
    381e:	39 07       	cpc	r19, r25
    3820:	b1 f7       	brne	.-20     	; 0x380e <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    3822:	c1 81       	ldd	r28, Z+1	; 0x01
    3824:	d2 81       	ldd	r29, Z+2	; 0x02
    3826:	83 81       	ldd	r24, Z+3	; 0x03
    3828:	94 81       	ldd	r25, Z+4	; 0x04
    382a:	9c 83       	std	Y+4, r25	; 0x04
    382c:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    382e:	a3 81       	ldd	r26, Z+3	; 0x03
    3830:	b4 81       	ldd	r27, Z+4	; 0x04
    3832:	10 97       	sbiw	r26, 0x00	; 0
    3834:	21 f0       	breq	.+8      	; 0x383e <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    3836:	12 96       	adiw	r26, 0x02	; 2
    3838:	dc 93       	st	X, r29
    383a:	ce 93       	st	-X, r28
    383c:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    383e:	a0 91 3c 05 	lds	r26, 0x053C
    3842:	b0 91 3d 05 	lds	r27, 0x053D
    3846:	10 97       	sbiw	r26, 0x00	; 0
    3848:	39 f4       	brne	.+14     	; 0x3858 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    384a:	f0 93 3d 05 	sts	0x053D, r31
    384e:	e0 93 3c 05 	sts	0x053C, r30
        _free_node->Next = NULL;
    3852:	14 82       	std	Z+4, r1	; 0x04
    3854:	13 82       	std	Z+3, r1	; 0x03
    3856:	0a c0       	rjmp	.+20     	; 0x386c <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    3858:	b4 83       	std	Z+4, r27	; 0x04
    385a:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    385c:	12 96       	adiw	r26, 0x02	; 2
    385e:	fc 93       	st	X, r31
    3860:	ee 93       	st	-X, r30
    3862:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    3864:	f0 93 3d 05 	sts	0x053D, r31
    3868:	e0 93 3c 05 	sts	0x053C, r30
    }
    _free_node->Prev = NULL;
    386c:	12 82       	std	Z+2, r1	; 0x02
    386e:	11 82       	std	Z+1, r1	; 0x01
}
    3870:	df 91       	pop	r29
    3872:	cf 91       	pop	r28
    3874:	08 95       	ret

00003876 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3876:	ef 92       	push	r14
    3878:	ff 92       	push	r15
    387a:	0f 93       	push	r16
    387c:	1f 93       	push	r17
    387e:	cf 93       	push	r28
    3880:	df 93       	push	r29
    3882:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    3884:	69 81       	ldd	r22, Y+1	; 0x01
    3886:	7a 81       	ldd	r23, Y+2	; 0x02
    3888:	4b 81       	ldd	r20, Y+3	; 0x03
    388a:	5c 81       	ldd	r21, Y+4	; 0x04
    388c:	8d 81       	ldd	r24, Y+5	; 0x05
    388e:	9e 81       	ldd	r25, Y+6	; 0x06
    3890:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <nrk_task_stk_init>
    3894:	bc 01       	movw	r22, r24
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    3896:	8f 81       	ldd	r24, Y+7	; 0x07
    3898:	88 23       	and	r24, r24
    389a:	69 f0       	breq	.+26     	; 0x38b6 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    389c:	4b 81       	ldd	r20, Y+3	; 0x03
    389e:	5c 81       	ldd	r21, Y+4	; 0x04
    38a0:	ce 01       	movw	r24, r28
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	00 e0       	ldi	r16, 0x00	; 0
    38a8:	10 e0       	ldi	r17, 0x00	; 0
    38aa:	ee 24       	eor	r14, r14
    38ac:	ff 24       	eor	r15, r15
    38ae:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    38b2:	1f 82       	std	Y+7, r1	; 0x07
    38b4:	13 c0       	rjmp	.+38     	; 0x38dc <nrk_activate_task+0x66>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    38b6:	88 81       	ld	r24, Y
    38b8:	99 27       	eor	r25, r25
    38ba:	87 fd       	sbrc	r24, 7
    38bc:	90 95       	com	r25
    38be:	fc 01       	movw	r30, r24
    38c0:	25 e0       	ldi	r18, 0x05	; 5
    38c2:	ee 0f       	add	r30, r30
    38c4:	ff 1f       	adc	r31, r31
    38c6:	2a 95       	dec	r18
    38c8:	e1 f7       	brne	.-8      	; 0x38c2 <nrk_activate_task+0x4c>
    38ca:	e8 0f       	add	r30, r24
    38cc:	f9 1f       	adc	r31, r25
    38ce:	e2 5c       	subi	r30, 0xC2	; 194
    38d0:	fa 4f       	sbci	r31, 0xFA	; 250
    38d2:	81 85       	ldd	r24, Z+9	; 0x09
    38d4:	83 30       	cpi	r24, 0x03	; 3
    38d6:	d1 f4       	brne	.+52     	; 0x390c <nrk_activate_task+0x96>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    38d8:	71 83       	std	Z+1, r23	; 0x01
    38da:	60 83       	st	Z, r22
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    38dc:	88 81       	ld	r24, Y
    38de:	99 27       	eor	r25, r25
    38e0:	87 fd       	sbrc	r24, 7
    38e2:	90 95       	com	r25
    38e4:	fc 01       	movw	r30, r24
    38e6:	05 e0       	ldi	r16, 0x05	; 5
    38e8:	ee 0f       	add	r30, r30
    38ea:	ff 1f       	adc	r31, r31
    38ec:	0a 95       	dec	r16
    38ee:	e1 f7       	brne	.-8      	; 0x38e8 <nrk_activate_task+0x72>
    38f0:	e8 0f       	add	r30, r24
    38f2:	f9 1f       	adc	r31, r25
    38f4:	e2 5c       	subi	r30, 0xC2	; 194
    38f6:	fa 4f       	sbci	r31, 0xFA	; 250
    38f8:	85 89       	ldd	r24, Z+21	; 0x15
    38fa:	96 89       	ldd	r25, Z+22	; 0x16
    38fc:	00 97       	sbiw	r24, 0x00	; 0
    38fe:	41 f4       	brne	.+16     	; 0x3910 <nrk_activate_task+0x9a>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    3900:	82 e0       	ldi	r24, 0x02	; 2
    3902:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    3904:	88 81       	ld	r24, Y
    3906:	0e 94 3a 1b 	call	0x3674	; 0x3674 <nrk_add_to_readyQ>
    390a:	02 c0       	rjmp	.+4      	; 0x3910 <nrk_activate_task+0x9a>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    390c:	8f ef       	ldi	r24, 0xFF	; 255
    390e:	01 c0       	rjmp	.+2      	; 0x3912 <nrk_activate_task+0x9c>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    3910:	81 e0       	ldi	r24, 0x01	; 1
}
    3912:	df 91       	pop	r29
    3914:	cf 91       	pop	r28
    3916:	1f 91       	pop	r17
    3918:	0f 91       	pop	r16
    391a:	ff 90       	pop	r15
    391c:	ef 90       	pop	r14
    391e:	08 95       	ret

00003920 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    3920:	1f 93       	push	r17
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
    392a:	28 97       	sbiw	r28, 0x08	; 8
    392c:	0f b6       	in	r0, 0x3f	; 63
    392e:	f8 94       	cli
    3930:	de bf       	out	0x3e, r29	; 62
    3932:	0f be       	out	0x3f, r0	; 63
    3934:	cd bf       	out	0x3d, r28	; 61
    3936:	29 83       	std	Y+1, r18	; 0x01
    3938:	3a 83       	std	Y+2, r19	; 0x02
    393a:	4b 83       	std	Y+3, r20	; 0x03
    393c:	5c 83       	std	Y+4, r21	; 0x04
    393e:	6d 83       	std	Y+5, r22	; 0x05
    3940:	7e 83       	std	Y+6, r23	; 0x06
    3942:	8f 83       	std	Y+7, r24	; 0x07
    3944:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    3946:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    394a:	0e 94 65 25 	call	0x4aca	; 0x4aca <_nrk_os_timer_get>
    394e:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks (&t);
    3950:	ce 01       	movw	r24, r28
    3952:	01 96       	adiw	r24, 0x01	; 1
    3954:	0e 94 04 20 	call	0x4008	; 0x4008 <_nrk_time_to_ticks>
    3958:	9c 01       	movw	r18, r24
    if (nw <= TIME_PAD)
    395a:	83 30       	cpi	r24, 0x03	; 3
    395c:	91 05       	cpc	r25, r1
    395e:	60 f0       	brcs	.+24     	; 0x3978 <nrk_set_next_wakeup+0x58>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3960:	e0 91 01 06 	lds	r30, 0x0601
    3964:	f0 91 02 06 	lds	r31, 0x0602
    3968:	21 0f       	add	r18, r17
    396a:	31 1d       	adc	r19, r1
    396c:	36 8b       	std	Z+22, r19	; 0x16
    396e:	25 8b       	std	Z+21, r18	; 0x15
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    3970:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>

    return NRK_OK;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	01 c0       	rjmp	.+2      	; 0x397a <nrk_set_next_wakeup+0x5a>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks (&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    3978:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    397a:	28 96       	adiw	r28, 0x08	; 8
    397c:	0f b6       	in	r0, 0x3f	; 63
    397e:	f8 94       	cli
    3980:	de bf       	out	0x3e, r29	; 62
    3982:	0f be       	out	0x3f, r0	; 63
    3984:	cd bf       	out	0x3d, r28	; 61
    3986:	cf 91       	pop	r28
    3988:	df 91       	pop	r29
    398a:	1f 91       	pop	r17
    398c:	08 95       	ret

0000398e <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    398e:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    3992:	e0 91 01 06 	lds	r30, 0x0601
    3996:	f0 91 02 06 	lds	r31, 0x0602
    399a:	85 81       	ldd	r24, Z+5	; 0x05
    399c:	88 23       	and	r24, r24
    399e:	b9 f7       	brne	.-18     	; 0x398e <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    39a0:	08 95       	ret

000039a2 <nrk_wait>:
    return NRK_OK;
}


int8_t nrk_wait (nrk_time_t t)
{
    39a2:	ff 92       	push	r15
    39a4:	0f 93       	push	r16
    39a6:	1f 93       	push	r17
    39a8:	df 93       	push	r29
    39aa:	cf 93       	push	r28
    39ac:	cd b7       	in	r28, 0x3d	; 61
    39ae:	de b7       	in	r29, 0x3e	; 62
    39b0:	28 97       	sbiw	r28, 0x08	; 8
    39b2:	0f b6       	in	r0, 0x3f	; 63
    39b4:	f8 94       	cli
    39b6:	de bf       	out	0x3e, r29	; 62
    39b8:	0f be       	out	0x3f, r0	; 63
    39ba:	cd bf       	out	0x3d, r28	; 61
    39bc:	29 83       	std	Y+1, r18	; 0x01
    39be:	3a 83       	std	Y+2, r19	; 0x02
    39c0:	4b 83       	std	Y+3, r20	; 0x03
    39c2:	5c 83       	std	Y+4, r21	; 0x04
    39c4:	6d 83       	std	Y+5, r22	; 0x05
    39c6:	7e 83       	std	Y+6, r23	; 0x06
    39c8:	8f 83       	std	Y+7, r24	; 0x07
    39ca:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;

    nrk_stack_check ();
    39cc:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <nrk_stack_check>

    nrk_int_disable ();
    39d0:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    39d4:	e0 91 01 06 	lds	r30, 0x0601
    39d8:	f0 91 02 06 	lds	r31, 0x0602
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	90 a3       	std	Z+32, r25	; 0x20
    39e6:	87 8f       	std	Z+31, r24	; 0x1f
    timer = _nrk_os_timer_get ();
    39e8:	0e 94 65 25 	call	0x4aca	; 0x4aca <_nrk_os_timer_get>
    39ec:	f8 2e       	mov	r15, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks (&t);
    39ee:	ce 01       	movw	r24, r28
    39f0:	01 96       	adiw	r24, 0x01	; 1
    39f2:	0e 94 04 20 	call	0x4008	; 0x4008 <_nrk_time_to_ticks>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    39f6:	e0 91 01 06 	lds	r30, 0x0601
    39fa:	f0 91 02 06 	lds	r31, 0x0602
    39fe:	0f 2d       	mov	r16, r15
    3a00:	10 e0       	ldi	r17, 0x00	; 0
    3a02:	98 01       	movw	r18, r16
    3a04:	28 0f       	add	r18, r24
    3a06:	39 1f       	adc	r19, r25
    3a08:	36 8b       	std	Z+22, r19	; 0x16
    3a0a:	25 8b       	std	Z+21, r18	; 0x15
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3a0c:	8f 2d       	mov	r24, r15
    3a0e:	88 3f       	cpi	r24, 0xF8	; 248
    3a10:	78 f4       	brcc	.+30     	; 0x3a30 <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3a12:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_nrk_get_next_wakeup>
    3a16:	0f 5f       	subi	r16, 0xFF	; 255
    3a18:	1f 4f       	sbci	r17, 0xFF	; 255
    3a1a:	28 2f       	mov	r18, r24
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	02 17       	cp	r16, r18
    3a20:	13 07       	cpc	r17, r19
    3a22:	34 f4       	brge	.+12     	; 0x3a30 <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    3a24:	8f 2d       	mov	r24, r15
    3a26:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3a28:	80 93 88 04 	sts	0x0488, r24
            _nrk_set_next_wakeup (timer);
    3a2c:	0e 94 00 25 	call	0x4a00	; 0x4a00 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    3a30:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    3a34:	0e 94 c7 1c 	call	0x398e	; 0x398e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	28 96       	adiw	r28, 0x08	; 8
    3a3c:	0f b6       	in	r0, 0x3f	; 63
    3a3e:	f8 94       	cli
    3a40:	de bf       	out	0x3e, r29	; 62
    3a42:	0f be       	out	0x3f, r0	; 63
    3a44:	cd bf       	out	0x3d, r28	; 61
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	1f 91       	pop	r17
    3a4c:	0f 91       	pop	r16
    3a4e:	ff 90       	pop	r15
    3a50:	08 95       	ret

00003a52 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    3a52:	1f 93       	push	r17
    uint8_t timer;
    nrk_int_disable ();
    3a54:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3a58:	e0 91 01 06 	lds	r30, 0x0601
    3a5c:	f0 91 02 06 	lds	r31, 0x0602
    3a60:	81 e0       	ldi	r24, 0x01	; 1
    3a62:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    3a64:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    3a66:	0e 94 65 25 	call	0x4aca	; 0x4aca <_nrk_os_timer_get>
    3a6a:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3a6c:	88 3f       	cpi	r24, 0xF8	; 248
    3a6e:	88 f4       	brcc	.+34     	; 0x3a92 <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3a70:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_nrk_get_next_wakeup>
    3a74:	21 2f       	mov	r18, r17
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	2f 5f       	subi	r18, 0xFF	; 255
    3a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a7c:	48 2f       	mov	r20, r24
    3a7e:	50 e0       	ldi	r21, 0x00	; 0
    3a80:	24 17       	cp	r18, r20
    3a82:	35 07       	cpc	r19, r21
    3a84:	34 f4       	brge	.+12     	; 0x3a92 <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    3a86:	81 2f       	mov	r24, r17
    3a88:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3a8a:	80 93 88 04 	sts	0x0488, r24
            _nrk_set_next_wakeup (timer);
    3a8e:	0e 94 00 25 	call	0x4a00	; 0x4a00 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3a92:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3a96:	0e 94 c7 1c 	call	0x398e	; 0x398e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	1f 91       	pop	r17
    3a9e:	08 95       	ret

00003aa0 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    3aa0:	1f 93       	push	r17
    3aa2:	cf 93       	push	r28
    3aa4:	df 93       	push	r29
    3aa6:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    3aa8:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3aac:	e0 91 01 06 	lds	r30, 0x0601
    3ab0:	f0 91 02 06 	lds	r31, 0x0602
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    3ab8:	d6 8b       	std	Z+22, r29	; 0x16
    3aba:	c5 8b       	std	Z+21, r28	; 0x15
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    3abc:	0e 94 65 25 	call	0x4aca	; 0x4aca <_nrk_os_timer_get>
    3ac0:	18 2f       	mov	r17, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3ac2:	88 3f       	cpi	r24, 0xF8	; 248
    3ac4:	88 f4       	brcc	.+34     	; 0x3ae8 <nrk_wait_until_ticks+0x48>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3ac6:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_nrk_get_next_wakeup>
    3aca:	21 2f       	mov	r18, r17
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	2f 5f       	subi	r18, 0xFF	; 255
    3ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad2:	48 2f       	mov	r20, r24
    3ad4:	50 e0       	ldi	r21, 0x00	; 0
    3ad6:	24 17       	cp	r18, r20
    3ad8:	35 07       	cpc	r19, r21
    3ada:	34 f4       	brge	.+12     	; 0x3ae8 <nrk_wait_until_ticks+0x48>
        {
            timer += TIME_PAD;
    3adc:	81 2f       	mov	r24, r17
    3ade:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3ae0:	80 93 88 04 	sts	0x0488, r24
            _nrk_set_next_wakeup (timer);
    3ae4:	0e 94 00 25 	call	0x4a00	; 0x4a00 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3ae8:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3aec:	0e 94 c7 1c 	call	0x398e	; 0x398e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	df 91       	pop	r29
    3af4:	cf 91       	pop	r28
    3af6:	1f 91       	pop	r17
    3af8:	08 95       	ret

00003afa <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    3afa:	ef 92       	push	r14
    3afc:	ff 92       	push	r15
    3afe:	0f 93       	push	r16
    3b00:	1f 93       	push	r17
    3b02:	df 93       	push	r29
    3b04:	cf 93       	push	r28
    3b06:	0f 92       	push	r0
    3b08:	cd b7       	in	r28, 0x3d	; 61
    3b0a:	de b7       	in	r29, 0x3e	; 62
    3b0c:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    3b0e:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3b12:	e0 91 01 06 	lds	r30, 0x0601
    3b16:	f0 91 02 06 	lds	r31, 0x0602
    3b1a:	81 e0       	ldi	r24, 0x01	; 1
    3b1c:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3b1e:	0e 94 65 25 	call	0x4aca	; 0x4aca <_nrk_os_timer_get>
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    3b22:	e0 91 01 06 	lds	r30, 0x0601
    3b26:	f0 91 02 06 	lds	r31, 0x0602
    3b2a:	e8 2e       	mov	r14, r24
    3b2c:	ff 24       	eor	r15, r15
    3b2e:	0e 0d       	add	r16, r14
    3b30:	1f 1d       	adc	r17, r15
    3b32:	16 8b       	std	Z+22, r17	; 0x16
    3b34:	05 8b       	std	Z+21, r16	; 0x15

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3b36:	88 3f       	cpi	r24, 0xF8	; 248
    3b38:	90 f4       	brcc	.+36     	; 0x3b5e <nrk_wait_ticks+0x64>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3b3a:	89 83       	std	Y+1, r24	; 0x01
    3b3c:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_nrk_get_next_wakeup>
    3b40:	08 94       	sec
    3b42:	e1 1c       	adc	r14, r1
    3b44:	f1 1c       	adc	r15, r1
    3b46:	28 2f       	mov	r18, r24
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	99 81       	ldd	r25, Y+1	; 0x01
    3b4c:	e2 16       	cp	r14, r18
    3b4e:	f3 06       	cpc	r15, r19
    3b50:	34 f4       	brge	.+12     	; 0x3b5e <nrk_wait_ticks+0x64>
        {
            timer += TIME_PAD;
    3b52:	89 2f       	mov	r24, r25
    3b54:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3b56:	80 93 88 04 	sts	0x0488, r24
            _nrk_set_next_wakeup (timer);
    3b5a:	0e 94 00 25 	call	0x4a00	; 0x4a00 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3b5e:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3b62:	0e 94 c7 1c 	call	0x398e	; 0x398e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	0f 90       	pop	r0
    3b6a:	cf 91       	pop	r28
    3b6c:	df 91       	pop	r29
    3b6e:	1f 91       	pop	r17
    3b70:	0f 91       	pop	r16
    3b72:	ff 90       	pop	r15
    3b74:	ef 90       	pop	r14
    3b76:	08 95       	ret

00003b78 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    3b78:	1f 93       	push	r17
    3b7a:	cf 93       	push	r28
    3b7c:	df 93       	push	r29
    3b7e:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    3b80:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <nrk_stack_check>

    if (p == 0)
    3b84:	20 97       	sbiw	r28, 0x00	; 0
    3b86:	11 f4       	brne	.+4      	; 0x3b8c <nrk_wait_until_next_n_periods+0x14>
        p = 1;
    3b88:	c1 e0       	ldi	r28, 0x01	; 1
    3b8a:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3b8c:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3b90:	e0 91 01 06 	lds	r30, 0x0601
    3b94:	f0 91 02 06 	lds	r31, 0x0602
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    3b9c:	d0 a3       	std	Z+32, r29	; 0x20
    3b9e:	c7 8f       	std	Z+31, r28	; 0x1f
    timer = _nrk_os_timer_get ();
    3ba0:	0e 94 65 25 	call	0x4aca	; 0x4aca <_nrk_os_timer_get>
    3ba4:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    3ba6:	88 3f       	cpi	r24, 0xF8	; 248
    3ba8:	88 f4       	brcc	.+34     	; 0x3bcc <nrk_wait_until_next_n_periods+0x54>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3baa:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_nrk_get_next_wakeup>
    3bae:	21 2f       	mov	r18, r17
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	2f 5f       	subi	r18, 0xFF	; 255
    3bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    3bb6:	48 2f       	mov	r20, r24
    3bb8:	50 e0       	ldi	r21, 0x00	; 0
    3bba:	24 17       	cp	r18, r20
    3bbc:	35 07       	cpc	r19, r21
    3bbe:	34 f4       	brge	.+12     	; 0x3bcc <nrk_wait_until_next_n_periods+0x54>
        {
            timer += TIME_PAD;
    3bc0:	81 2f       	mov	r24, r17
    3bc2:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;
    3bc4:	80 93 88 04 	sts	0x0488, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3bc8:	0e 94 00 25 	call	0x4a00	; 0x4a00 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3bcc:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3bd0:	0e 94 c7 1c 	call	0x398e	; 0x398e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	08 95       	ret

00003bde <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    3bde:	1f 93       	push	r17
    uint8_t timer;

    nrk_stack_check ();
    3be0:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3be4:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    3be8:	e0 91 01 06 	lds	r30, 0x0601
    3bec:	f0 91 02 06 	lds	r31, 0x0602
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	90 a3       	std	Z+32, r25	; 0x20
    3bf6:	87 8f       	std	Z+31, r24	; 0x1f
    nrk_cur_task_TCB->suspend_flag = 1;
    3bf8:	81 e0       	ldi	r24, 0x01	; 1
    3bfa:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3bfc:	0e 94 65 25 	call	0x4aca	; 0x4aca <_nrk_os_timer_get>
    3c00:	18 2f       	mov	r17, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3c02:	88 3f       	cpi	r24, 0xF8	; 248
    3c04:	88 f4       	brcc	.+34     	; 0x3c28 <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3c06:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_nrk_get_next_wakeup>
    3c0a:	21 2f       	mov	r18, r17
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	2f 5f       	subi	r18, 0xFF	; 255
    3c10:	3f 4f       	sbci	r19, 0xFF	; 255
    3c12:	48 2f       	mov	r20, r24
    3c14:	50 e0       	ldi	r21, 0x00	; 0
    3c16:	24 17       	cp	r18, r20
    3c18:	35 07       	cpc	r19, r21
    3c1a:	34 f4       	brge	.+12     	; 0x3c28 <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    3c1c:	81 2f       	mov	r24, r17
    3c1e:	8e 5f       	subi	r24, 0xFE	; 254
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    3c20:	80 93 88 04 	sts	0x0488, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3c24:	0e 94 00 25 	call	0x4a00	; 0x4a00 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3c28:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3c2c:	0e 94 c7 1c 	call	0x398e	; 0x398e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	1f 91       	pop	r17
    3c34:	08 95       	ret

00003c36 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    3c36:	e0 91 01 06 	lds	r30, 0x0601
    3c3a:	f0 91 02 06 	lds	r31, 0x0602
    3c3e:	80 85       	ldd	r24, Z+8	; 0x08
    3c40:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    3c44:	e0 91 01 06 	lds	r30, 0x0601
    3c48:	f0 91 02 06 	lds	r31, 0x0602
    3c4c:	84 e0       	ldi	r24, 0x04	; 4
    3c4e:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    3c50:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <nrk_wait_until_next_period>
    return NRK_OK;
}
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	08 95       	ret

00003c58 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    3c58:	8f 92       	push	r8
    3c5a:	9f 92       	push	r9
    3c5c:	af 92       	push	r10
    3c5e:	bf 92       	push	r11
    3c60:	cf 92       	push	r12
    3c62:	df 92       	push	r13
    3c64:	ef 92       	push	r14
    3c66:	ff 92       	push	r15
    3c68:	0f 93       	push	r16
    3c6a:	1f 93       	push	r17
    3c6c:	df 93       	push	r29
    3c6e:	cf 93       	push	r28
    3c70:	cd b7       	in	r28, 0x3d	; 61
    3c72:	de b7       	in	r29, 0x3e	; 62
    3c74:	60 97       	sbiw	r28, 0x10	; 16
    3c76:	0f b6       	in	r0, 0x3f	; 63
    3c78:	f8 94       	cli
    3c7a:	de bf       	out	0x3e, r29	; 62
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	cd bf       	out	0x3d, r28	; 61
    3c80:	29 87       	std	Y+9, r18	; 0x09
    3c82:	3a 87       	std	Y+10, r19	; 0x0a
    3c84:	4b 87       	std	Y+11, r20	; 0x0b
    3c86:	5c 87       	std	Y+12, r21	; 0x0c
    3c88:	6d 87       	std	Y+13, r22	; 0x0d
    3c8a:	7e 87       	std	Y+14, r23	; 0x0e
    3c8c:	8f 87       	std	Y+15, r24	; 0x0f
    3c8e:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    3c90:	ce 01       	movw	r24, r28
    3c92:	01 96       	adiw	r24, 0x01	; 1
    3c94:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    3c98:	ce 01       	movw	r24, r28
    3c9a:	09 96       	adiw	r24, 0x09	; 9
    3c9c:	09 85       	ldd	r16, Y+9	; 0x09
    3c9e:	1a 85       	ldd	r17, Y+10	; 0x0a
    3ca0:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ca2:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ca4:	4d 85       	ldd	r20, Y+13	; 0x0d
    3ca6:	5e 85       	ldd	r21, Y+14	; 0x0e
    3ca8:	6f 85       	ldd	r22, Y+15	; 0x0f
    3caa:	78 89       	ldd	r23, Y+16	; 0x10
    3cac:	89 80       	ldd	r8, Y+1	; 0x01
    3cae:	9a 80       	ldd	r9, Y+2	; 0x02
    3cb0:	ab 80       	ldd	r10, Y+3	; 0x03
    3cb2:	bc 80       	ldd	r11, Y+4	; 0x04
    3cb4:	cd 80       	ldd	r12, Y+5	; 0x05
    3cb6:	de 80       	ldd	r13, Y+6	; 0x06
    3cb8:	ef 80       	ldd	r14, Y+7	; 0x07
    3cba:	f8 84       	ldd	r15, Y+8	; 0x08
    3cbc:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    3cc0:	8f 3f       	cpi	r24, 0xFF	; 255
    3cc2:	61 f0       	breq	.+24     	; 0x3cdc <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    3cc4:	29 85       	ldd	r18, Y+9	; 0x09
    3cc6:	3a 85       	ldd	r19, Y+10	; 0x0a
    3cc8:	4b 85       	ldd	r20, Y+11	; 0x0b
    3cca:	5c 85       	ldd	r21, Y+12	; 0x0c
    3ccc:	6d 85       	ldd	r22, Y+13	; 0x0d
    3cce:	7e 85       	ldd	r23, Y+14	; 0x0e
    3cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cd2:	98 89       	ldd	r25, Y+16	; 0x10
    3cd4:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <nrk_wait>

    return NRK_OK;
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	01 c0       	rjmp	.+2      	; 0x3cde <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    3cdc:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    3cde:	60 96       	adiw	r28, 0x10	; 16
    3ce0:	0f b6       	in	r0, 0x3f	; 63
    3ce2:	f8 94       	cli
    3ce4:	de bf       	out	0x3e, r29	; 62
    3ce6:	0f be       	out	0x3f, r0	; 63
    3ce8:	cd bf       	out	0x3d, r28	; 61
    3cea:	cf 91       	pop	r28
    3cec:	df 91       	pop	r29
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	ff 90       	pop	r15
    3cf4:	ef 90       	pop	r14
    3cf6:	df 90       	pop	r13
    3cf8:	cf 90       	pop	r12
    3cfa:	bf 90       	pop	r11
    3cfc:	af 90       	pop	r10
    3cfe:	9f 90       	pop	r9
    3d00:	8f 90       	pop	r8
    3d02:	08 95       	ret

00003d04 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    3d04:	e0 91 01 06 	lds	r30, 0x0601
    3d08:	f0 91 02 06 	lds	r31, 0x0602
}
    3d0c:	80 85       	ldd	r24, Z+8	; 0x08
    3d0e:	08 95       	ret

00003d10 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    3d10:	ef 92       	push	r14
    3d12:	ff 92       	push	r15
    3d14:	0f 93       	push	r16
    3d16:	1f 93       	push	r17
    3d18:	cf 93       	push	r28
    3d1a:	df 93       	push	r29
    3d1c:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    3d1e:	1c 82       	std	Y+4, r1	; 0x04
    3d20:	1d 82       	std	Y+5, r1	; 0x05
    3d22:	1e 82       	std	Y+6, r1	; 0x06
    3d24:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    3d26:	80 91 f8 05 	lds	r24, 0x05F8
    3d2a:	90 91 f9 05 	lds	r25, 0x05F9
    3d2e:	a0 91 fa 05 	lds	r26, 0x05FA
    3d32:	b0 91 fb 05 	lds	r27, 0x05FB
    3d36:	88 83       	st	Y, r24
    3d38:	99 83       	std	Y+1, r25	; 0x01
    3d3a:	aa 83       	std	Y+2, r26	; 0x02
    3d3c:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    3d3e:	e0 90 fc 05 	lds	r14, 0x05FC
    3d42:	f0 90 fd 05 	lds	r15, 0x05FD
    3d46:	00 91 fe 05 	lds	r16, 0x05FE
    3d4a:	10 91 ff 05 	lds	r17, 0x05FF
    3d4e:	ec 82       	std	Y+4, r14	; 0x04
    3d50:	fd 82       	std	Y+5, r15	; 0x05
    3d52:	0e 83       	std	Y+6, r16	; 0x06
    3d54:	1f 83       	std	Y+7, r17	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    3d56:	0e 94 65 25 	call	0x4aca	; 0x4aca <_nrk_os_timer_get>
    3d5a:	68 2f       	mov	r22, r24
    3d5c:	70 e0       	ldi	r23, 0x00	; 0
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	23 eb       	ldi	r18, 0xB3	; 179
    3d64:	36 ee       	ldi	r19, 0xE6	; 230
    3d66:	4e e0       	ldi	r20, 0x0E	; 14
    3d68:	50 e0       	ldi	r21, 0x00	; 0
    3d6a:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    3d6e:	6e 0d       	add	r22, r14
    3d70:	7f 1d       	adc	r23, r15
    3d72:	80 1f       	adc	r24, r16
    3d74:	91 1f       	adc	r25, r17
    3d76:	6c 83       	std	Y+4, r22	; 0x04
    3d78:	7d 83       	std	Y+5, r23	; 0x05
    3d7a:	8e 83       	std	Y+6, r24	; 0x06
    3d7c:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3d7e:	13 c0       	rjmp	.+38     	; 0x3da6 <nrk_time_get+0x96>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    3d80:	80 50       	subi	r24, 0x00	; 0
    3d82:	9a 4c       	sbci	r25, 0xCA	; 202
    3d84:	aa 49       	sbci	r26, 0x9A	; 154
    3d86:	bb 43       	sbci	r27, 0x3B	; 59
    3d88:	8c 83       	std	Y+4, r24	; 0x04
    3d8a:	9d 83       	std	Y+5, r25	; 0x05
    3d8c:	ae 83       	std	Y+6, r26	; 0x06
    3d8e:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    3d90:	88 81       	ld	r24, Y
    3d92:	99 81       	ldd	r25, Y+1	; 0x01
    3d94:	aa 81       	ldd	r26, Y+2	; 0x02
    3d96:	bb 81       	ldd	r27, Y+3	; 0x03
    3d98:	01 96       	adiw	r24, 0x01	; 1
    3d9a:	a1 1d       	adc	r26, r1
    3d9c:	b1 1d       	adc	r27, r1
    3d9e:	88 83       	st	Y, r24
    3da0:	99 83       	std	Y+1, r25	; 0x01
    3da2:	aa 83       	std	Y+2, r26	; 0x02
    3da4:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3da6:	8c 81       	ldd	r24, Y+4	; 0x04
    3da8:	9d 81       	ldd	r25, Y+5	; 0x05
    3daa:	ae 81       	ldd	r26, Y+6	; 0x06
    3dac:	bf 81       	ldd	r27, Y+7	; 0x07
    3dae:	80 30       	cpi	r24, 0x00	; 0
    3db0:	2a ec       	ldi	r18, 0xCA	; 202
    3db2:	92 07       	cpc	r25, r18
    3db4:	2a e9       	ldi	r18, 0x9A	; 154
    3db6:	a2 07       	cpc	r26, r18
    3db8:	2b e3       	ldi	r18, 0x3B	; 59
    3dba:	b2 07       	cpc	r27, r18
    3dbc:	08 f7       	brcc	.-62     	; 0x3d80 <nrk_time_get+0x70>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    t->secs++;
    }

}
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	1f 91       	pop	r17
    3dc4:	0f 91       	pop	r16
    3dc6:	ff 90       	pop	r15
    3dc8:	ef 90       	pop	r14
    3dca:	08 95       	ret

00003dcc <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    3dcc:	8f 92       	push	r8
    3dce:	9f 92       	push	r9
    3dd0:	af 92       	push	r10
    3dd2:	bf 92       	push	r11
    3dd4:	cf 92       	push	r12
    3dd6:	df 92       	push	r13
    3dd8:	ef 92       	push	r14
    3dda:	ff 92       	push	r15
    3ddc:	0f 93       	push	r16
    3dde:	1f 93       	push	r17
    3de0:	df 93       	push	r29
    3de2:	cf 93       	push	r28
    3de4:	cd b7       	in	r28, 0x3d	; 61
    3de6:	de b7       	in	r29, 0x3e	; 62
    3de8:	60 97       	sbiw	r28, 0x10	; 16
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	de bf       	out	0x3e, r29	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	cd bf       	out	0x3d, r28	; 61
    3df4:	fc 01       	movw	r30, r24
    3df6:	09 83       	std	Y+1, r16	; 0x01
    3df8:	1a 83       	std	Y+2, r17	; 0x02
    3dfa:	2b 83       	std	Y+3, r18	; 0x03
    3dfc:	3c 83       	std	Y+4, r19	; 0x04
    3dfe:	4d 83       	std	Y+5, r20	; 0x05
    3e00:	5e 83       	std	Y+6, r21	; 0x06
    3e02:	6f 83       	std	Y+7, r22	; 0x07
    3e04:	78 87       	std	Y+8, r23	; 0x08
    3e06:	89 86       	std	Y+9, r8	; 0x09
    3e08:	9a 86       	std	Y+10, r9	; 0x0a
    3e0a:	ab 86       	std	Y+11, r10	; 0x0b
    3e0c:	bc 86       	std	Y+12, r11	; 0x0c
    3e0e:	cd 86       	std	Y+13, r12	; 0x0d
    3e10:	de 86       	std	Y+14, r13	; 0x0e
    3e12:	ef 86       	std	Y+15, r14	; 0x0f
    3e14:	f8 8a       	std	Y+16, r15	; 0x10
	return NRK_OK;
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
    3e16:	e9 80       	ldd	r14, Y+1	; 0x01
    3e18:	fa 80       	ldd	r15, Y+2	; 0x02
    3e1a:	0b 81       	ldd	r16, Y+3	; 0x03
    3e1c:	1c 81       	ldd	r17, Y+4	; 0x04
    3e1e:	2d 81       	ldd	r18, Y+5	; 0x05
    3e20:	3e 81       	ldd	r19, Y+6	; 0x06
    3e22:	4f 81       	ldd	r20, Y+7	; 0x07
    3e24:	58 85       	ldd	r21, Y+8	; 0x08
    3e26:	a9 84       	ldd	r10, Y+9	; 0x09
    3e28:	ba 84       	ldd	r11, Y+10	; 0x0a
    3e2a:	cb 84       	ldd	r12, Y+11	; 0x0b
    3e2c:	dc 84       	ldd	r13, Y+12	; 0x0c
    3e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e32:	af 85       	ldd	r26, Y+15	; 0x0f
    3e34:	b8 89       	ldd	r27, Y+16	; 0x10
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    3e36:	ea 14       	cp	r14, r10
    3e38:	fb 04       	cpc	r15, r11
    3e3a:	0c 05       	cpc	r16, r12
    3e3c:	1d 05       	cpc	r17, r13
    3e3e:	08 f4       	brcc	.+2      	; 0x3e42 <nrk_time_sub+0x76>
    3e40:	40 c0       	rjmp	.+128    	; 0x3ec2 <nrk_time_sub+0xf6>
if(low.secs==high.secs)
    3e42:	ae 14       	cp	r10, r14
    3e44:	bf 04       	cpc	r11, r15
    3e46:	c0 06       	cpc	r12, r16
    3e48:	d1 06       	cpc	r13, r17
    3e4a:	91 f4       	brne	.+36     	; 0x3e70 <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3e4c:	28 17       	cp	r18, r24
    3e4e:	39 07       	cpc	r19, r25
    3e50:	4a 07       	cpc	r20, r26
    3e52:	5b 07       	cpc	r21, r27
    3e54:	b0 f1       	brcs	.+108    	; 0x3ec2 <nrk_time_sub+0xf6>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3e56:	28 1b       	sub	r18, r24
    3e58:	39 0b       	sbc	r19, r25
    3e5a:	4a 0b       	sbc	r20, r26
    3e5c:	5b 0b       	sbc	r21, r27
    3e5e:	24 83       	std	Z+4, r18	; 0x04
    3e60:	35 83       	std	Z+5, r19	; 0x05
    3e62:	46 83       	std	Z+6, r20	; 0x06
    3e64:	57 83       	std	Z+7, r21	; 0x07
	result->secs=0;
    3e66:	10 82       	st	Z, r1
    3e68:	11 82       	std	Z+1, r1	; 0x01
    3e6a:	12 82       	std	Z+2, r1	; 0x02
    3e6c:	13 82       	std	Z+3, r1	; 0x03
    3e6e:	27 c0       	rjmp	.+78     	; 0x3ebe <nrk_time_sub+0xf2>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3e70:	28 17       	cp	r18, r24
    3e72:	39 07       	cpc	r19, r25
    3e74:	4a 07       	cpc	r20, r26
    3e76:	5b 07       	cpc	r21, r27
    3e78:	90 f4       	brcc	.+36     	; 0x3e9e <nrk_time_sub+0xd2>
{
	high.secs--;
    3e7a:	08 94       	sec
    3e7c:	e1 08       	sbc	r14, r1
    3e7e:	f1 08       	sbc	r15, r1
    3e80:	01 09       	sbc	r16, r1
    3e82:	11 09       	sbc	r17, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3e84:	ea 18       	sub	r14, r10
    3e86:	fb 08       	sbc	r15, r11
    3e88:	0c 09       	sbc	r16, r12
    3e8a:	1d 09       	sbc	r17, r13
    3e8c:	e0 82       	st	Z, r14
    3e8e:	f1 82       	std	Z+1, r15	; 0x01
    3e90:	02 83       	std	Z+2, r16	; 0x02
    3e92:	13 83       	std	Z+3, r17	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    3e94:	20 50       	subi	r18, 0x00	; 0
    3e96:	36 43       	sbci	r19, 0x36	; 54
    3e98:	45 46       	sbci	r20, 0x65	; 101
    3e9a:	54 4c       	sbci	r21, 0xC4	; 196
    3e9c:	08 c0       	rjmp	.+16     	; 0x3eae <nrk_time_sub+0xe2>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3e9e:	ea 18       	sub	r14, r10
    3ea0:	fb 08       	sbc	r15, r11
    3ea2:	0c 09       	sbc	r16, r12
    3ea4:	1d 09       	sbc	r17, r13
    3ea6:	e0 82       	st	Z, r14
    3ea8:	f1 82       	std	Z+1, r15	; 0x01
    3eaa:	02 83       	std	Z+2, r16	; 0x02
    3eac:	13 83       	std	Z+3, r17	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3eae:	28 1b       	sub	r18, r24
    3eb0:	39 0b       	sbc	r19, r25
    3eb2:	4a 0b       	sbc	r20, r26
    3eb4:	5b 0b       	sbc	r21, r27
    3eb6:	24 83       	std	Z+4, r18	; 0x04
    3eb8:	35 83       	std	Z+5, r19	; 0x05
    3eba:	46 83       	std	Z+6, r20	; 0x06
    3ebc:	57 83       	std	Z+7, r21	; 0x07
return NRK_OK;
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	01 c0       	rjmp	.+2      	; 0x3ec4 <nrk_time_sub+0xf8>
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
if(low.secs==high.secs)
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3ec2:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    3ec4:	60 96       	adiw	r28, 0x10	; 16
    3ec6:	0f b6       	in	r0, 0x3f	; 63
    3ec8:	f8 94       	cli
    3eca:	de bf       	out	0x3e, r29	; 62
    3ecc:	0f be       	out	0x3f, r0	; 63
    3ece:	cd bf       	out	0x3d, r28	; 61
    3ed0:	cf 91       	pop	r28
    3ed2:	df 91       	pop	r29
    3ed4:	1f 91       	pop	r17
    3ed6:	0f 91       	pop	r16
    3ed8:	ff 90       	pop	r15
    3eda:	ef 90       	pop	r14
    3edc:	df 90       	pop	r13
    3ede:	cf 90       	pop	r12
    3ee0:	bf 90       	pop	r11
    3ee2:	af 90       	pop	r10
    3ee4:	9f 90       	pop	r9
    3ee6:	8f 90       	pop	r8
    3ee8:	08 95       	ret

00003eea <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    3eea:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    3eec:	14 c0       	rjmp	.+40     	; 0x3f16 <nrk_time_compact_nanos+0x2c>
    {
    t->nano_secs-=NANOS_PER_SEC;
    3eee:	20 50       	subi	r18, 0x00	; 0
    3ef0:	3a 4c       	sbci	r19, 0xCA	; 202
    3ef2:	4a 49       	sbci	r20, 0x9A	; 154
    3ef4:	5b 43       	sbci	r21, 0x3B	; 59
    3ef6:	24 83       	std	Z+4, r18	; 0x04
    3ef8:	35 83       	std	Z+5, r19	; 0x05
    3efa:	46 83       	std	Z+6, r20	; 0x06
    3efc:	57 83       	std	Z+7, r21	; 0x07
    t->secs++;
    3efe:	20 81       	ld	r18, Z
    3f00:	31 81       	ldd	r19, Z+1	; 0x01
    3f02:	42 81       	ldd	r20, Z+2	; 0x02
    3f04:	53 81       	ldd	r21, Z+3	; 0x03
    3f06:	2f 5f       	subi	r18, 0xFF	; 255
    3f08:	3f 4f       	sbci	r19, 0xFF	; 255
    3f0a:	4f 4f       	sbci	r20, 0xFF	; 255
    3f0c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f0e:	20 83       	st	Z, r18
    3f10:	31 83       	std	Z+1, r19	; 0x01
    3f12:	42 83       	std	Z+2, r20	; 0x02
    3f14:	53 83       	std	Z+3, r21	; 0x03
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
  while(t->nano_secs>=NANOS_PER_SEC)
    3f16:	24 81       	ldd	r18, Z+4	; 0x04
    3f18:	35 81       	ldd	r19, Z+5	; 0x05
    3f1a:	46 81       	ldd	r20, Z+6	; 0x06
    3f1c:	57 81       	ldd	r21, Z+7	; 0x07
    3f1e:	20 30       	cpi	r18, 0x00	; 0
    3f20:	8a ec       	ldi	r24, 0xCA	; 202
    3f22:	38 07       	cpc	r19, r24
    3f24:	8a e9       	ldi	r24, 0x9A	; 154
    3f26:	48 07       	cpc	r20, r24
    3f28:	8b e3       	ldi	r24, 0x3B	; 59
    3f2a:	58 07       	cpc	r21, r24
    3f2c:	00 f7       	brcc	.-64     	; 0x3eee <nrk_time_compact_nanos+0x4>
    {
    t->nano_secs-=NANOS_PER_SEC;
    t->secs++;
    }
}
    3f2e:	08 95       	ret

00003f30 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3f30:	8f 92       	push	r8
    3f32:	9f 92       	push	r9
    3f34:	af 92       	push	r10
    3f36:	bf 92       	push	r11
    3f38:	cf 92       	push	r12
    3f3a:	df 92       	push	r13
    3f3c:	ef 92       	push	r14
    3f3e:	ff 92       	push	r15
    3f40:	0f 93       	push	r16
    3f42:	1f 93       	push	r17
    3f44:	df 93       	push	r29
    3f46:	cf 93       	push	r28
    3f48:	cd b7       	in	r28, 0x3d	; 61
    3f4a:	de b7       	in	r29, 0x3e	; 62
    3f4c:	60 97       	sbiw	r28, 0x10	; 16
    3f4e:	0f b6       	in	r0, 0x3f	; 63
    3f50:	f8 94       	cli
    3f52:	de bf       	out	0x3e, r29	; 62
    3f54:	0f be       	out	0x3f, r0	; 63
    3f56:	cd bf       	out	0x3d, r28	; 61
    3f58:	09 83       	std	Y+1, r16	; 0x01
    3f5a:	1a 83       	std	Y+2, r17	; 0x02
    3f5c:	2b 83       	std	Y+3, r18	; 0x03
    3f5e:	3c 83       	std	Y+4, r19	; 0x04
    3f60:	4d 83       	std	Y+5, r20	; 0x05
    3f62:	5e 83       	std	Y+6, r21	; 0x06
    3f64:	6f 83       	std	Y+7, r22	; 0x07
    3f66:	78 87       	std	Y+8, r23	; 0x08
    3f68:	89 86       	std	Y+9, r8	; 0x09
    3f6a:	9a 86       	std	Y+10, r9	; 0x0a
    3f6c:	ab 86       	std	Y+11, r10	; 0x0b
    3f6e:	bc 86       	std	Y+12, r11	; 0x0c
    3f70:	cd 86       	std	Y+13, r12	; 0x0d
    3f72:	de 86       	std	Y+14, r13	; 0x0e
    3f74:	ef 86       	std	Y+15, r14	; 0x0f
    3f76:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3f78:	29 85       	ldd	r18, Y+9	; 0x09
    3f7a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f7c:	4b 85       	ldd	r20, Y+11	; 0x0b
    3f7e:	5c 85       	ldd	r21, Y+12	; 0x0c
    3f80:	e9 80       	ldd	r14, Y+1	; 0x01
    3f82:	fa 80       	ldd	r15, Y+2	; 0x02
    3f84:	0b 81       	ldd	r16, Y+3	; 0x03
    3f86:	1c 81       	ldd	r17, Y+4	; 0x04
    3f88:	2e 0d       	add	r18, r14
    3f8a:	3f 1d       	adc	r19, r15
    3f8c:	40 1f       	adc	r20, r16
    3f8e:	51 1f       	adc	r21, r17
    3f90:	fc 01       	movw	r30, r24
    3f92:	20 83       	st	Z, r18
    3f94:	31 83       	std	Z+1, r19	; 0x01
    3f96:	42 83       	std	Z+2, r20	; 0x02
    3f98:	53 83       	std	Z+3, r21	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3f9a:	2d 85       	ldd	r18, Y+13	; 0x0d
    3f9c:	3e 85       	ldd	r19, Y+14	; 0x0e
    3f9e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3fa0:	58 89       	ldd	r21, Y+16	; 0x10
    3fa2:	ed 80       	ldd	r14, Y+5	; 0x05
    3fa4:	fe 80       	ldd	r15, Y+6	; 0x06
    3fa6:	0f 81       	ldd	r16, Y+7	; 0x07
    3fa8:	18 85       	ldd	r17, Y+8	; 0x08
    3faa:	2e 0d       	add	r18, r14
    3fac:	3f 1d       	adc	r19, r15
    3fae:	40 1f       	adc	r20, r16
    3fb0:	51 1f       	adc	r21, r17
    3fb2:	24 83       	std	Z+4, r18	; 0x04
    3fb4:	35 83       	std	Z+5, r19	; 0x05
    3fb6:	46 83       	std	Z+6, r20	; 0x06
    3fb8:	57 83       	std	Z+7, r21	; 0x07
nrk_time_compact_nanos(result);
    3fba:	0e 94 75 1f 	call	0x3eea	; 0x3eea <nrk_time_compact_nanos>
return NRK_OK;
}
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	60 96       	adiw	r28, 0x10	; 16
    3fc2:	0f b6       	in	r0, 0x3f	; 63
    3fc4:	f8 94       	cli
    3fc6:	de bf       	out	0x3e, r29	; 62
    3fc8:	0f be       	out	0x3f, r0	; 63
    3fca:	cd bf       	out	0x3d, r28	; 61
    3fcc:	cf 91       	pop	r28
    3fce:	df 91       	pop	r29
    3fd0:	1f 91       	pop	r17
    3fd2:	0f 91       	pop	r16
    3fd4:	ff 90       	pop	r15
    3fd6:	ef 90       	pop	r14
    3fd8:	df 90       	pop	r13
    3fda:	cf 90       	pop	r12
    3fdc:	bf 90       	pop	r11
    3fde:	af 90       	pop	r10
    3fe0:	9f 90       	pop	r9
    3fe2:	8f 90       	pop	r8
    3fe4:	08 95       	ret

00003fe6 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    3fe6:	60 93 f8 05 	sts	0x05F8, r22
    3fea:	70 93 f9 05 	sts	0x05F9, r23
    3fee:	80 93 fa 05 	sts	0x05FA, r24
    3ff2:	90 93 fb 05 	sts	0x05FB, r25
  nrk_system_time.nano_secs=nano_secs;
    3ff6:	20 93 fc 05 	sts	0x05FC, r18
    3ffa:	30 93 fd 05 	sts	0x05FD, r19
    3ffe:	40 93 fe 05 	sts	0x05FE, r20
    4002:	50 93 ff 05 	sts	0x05FF, r21
}
    4006:	08 95       	ret

00004008 <_nrk_time_to_ticks>:

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    4008:	8f 92       	push	r8
    400a:	9f 92       	push	r9
    400c:	af 92       	push	r10
    400e:	bf 92       	push	r11
    4010:	cf 92       	push	r12
    4012:	df 92       	push	r13
    4014:	ef 92       	push	r14
    4016:	ff 92       	push	r15
    4018:	0f 93       	push	r16
    401a:	1f 93       	push	r17
    401c:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    401e:	20 81       	ld	r18, Z
    4020:	31 81       	ldd	r19, Z+1	; 0x01
    4022:	42 81       	ldd	r20, Z+2	; 0x02
    4024:	53 81       	ldd	r21, Z+3	; 0x03
    4026:	64 81       	ldd	r22, Z+4	; 0x04
    4028:	75 81       	ldd	r23, Z+5	; 0x05
    402a:	86 81       	ldd	r24, Z+6	; 0x06
    402c:	97 81       	ldd	r25, Z+7	; 0x07
    402e:	21 15       	cp	r18, r1
    4030:	31 05       	cpc	r19, r1
    4032:	41 05       	cpc	r20, r1
    4034:	51 05       	cpc	r21, r1
    4036:	09 f4       	brne	.+2      	; 0x403a <_nrk_time_to_ticks+0x32>
    4038:	61 c0       	rjmp	.+194    	; 0x40fc <_nrk_time_to_ticks+0xf4>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    403a:	22 34       	cpi	r18, 0x42	; 66
    403c:	31 05       	cpc	r19, r1
    403e:	41 05       	cpc	r20, r1
    4040:	51 05       	cpc	r21, r1
    4042:	08 f0       	brcs	.+2      	; 0x4046 <_nrk_time_to_ticks+0x3e>
    4044:	62 c0       	rjmp	.+196    	; 0x410a <_nrk_time_to_ticks+0x102>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    4046:	5b 01       	movw	r10, r22
    4048:	6c 01       	movw	r12, r24
    404a:	ee 24       	eor	r14, r14
    404c:	ff 24       	eor	r15, r15
    404e:	87 01       	movw	r16, r14
    4050:	60 e0       	ldi	r22, 0x00	; 0
    4052:	38 c0       	rjmp	.+112    	; 0x40c4 <_nrk_time_to_ticks+0xbc>
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4054:	8a 2c       	mov	r8, r10
    4056:	ab 2d       	mov	r26, r11
    4058:	a6 53       	subi	r26, 0x36	; 54
    405a:	f1 e0       	ldi	r31, 0x01	; 1
    405c:	ab 15       	cp	r26, r11
    405e:	08 f0       	brcs	.+2      	; 0x4062 <_nrk_time_to_ticks+0x5a>
    4060:	f0 e0       	ldi	r31, 0x00	; 0
    4062:	8c 2d       	mov	r24, r12
    4064:	86 56       	subi	r24, 0x66	; 102
    4066:	91 e0       	ldi	r25, 0x01	; 1
    4068:	8c 15       	cp	r24, r12
    406a:	08 f0       	brcs	.+2      	; 0x406e <_nrk_time_to_ticks+0x66>
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	f8 0f       	add	r31, r24
    4070:	71 e0       	ldi	r23, 0x01	; 1
    4072:	f8 17       	cp	r31, r24
    4074:	08 f0       	brcs	.+2      	; 0x4078 <_nrk_time_to_ticks+0x70>
    4076:	70 e0       	ldi	r23, 0x00	; 0
    4078:	97 2b       	or	r25, r23
    407a:	7d 2d       	mov	r23, r13
    407c:	75 5c       	subi	r23, 0xC5	; 197
    407e:	e1 e0       	ldi	r30, 0x01	; 1
    4080:	7d 15       	cp	r23, r13
    4082:	08 f0       	brcs	.+2      	; 0x4086 <_nrk_time_to_ticks+0x7e>
    4084:	e0 e0       	ldi	r30, 0x00	; 0
    4086:	97 0f       	add	r25, r23
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	97 17       	cp	r25, r23
    408c:	08 f0       	brcs	.+2      	; 0x4090 <_nrk_time_to_ticks+0x88>
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	8e 2b       	or	r24, r30
    4092:	8e 0d       	add	r24, r14
    4094:	e1 e0       	ldi	r30, 0x01	; 1
    4096:	8e 15       	cp	r24, r14
    4098:	08 f0       	brcs	.+2      	; 0x409c <_nrk_time_to_ticks+0x94>
    409a:	e0 e0       	ldi	r30, 0x00	; 0
    409c:	ef 0d       	add	r30, r15
    409e:	71 e0       	ldi	r23, 0x01	; 1
    40a0:	ef 15       	cp	r30, r15
    40a2:	08 f0       	brcs	.+2      	; 0x40a6 <_nrk_time_to_ticks+0x9e>
    40a4:	70 e0       	ldi	r23, 0x00	; 0
    40a6:	70 0f       	add	r23, r16
    40a8:	b1 e0       	ldi	r27, 0x01	; 1
    40aa:	70 17       	cp	r23, r16
    40ac:	08 f0       	brcs	.+2      	; 0x40b0 <_nrk_time_to_ticks+0xa8>
    40ae:	b0 e0       	ldi	r27, 0x00	; 0
    40b0:	b1 0f       	add	r27, r17
    40b2:	a8 2c       	mov	r10, r8
    40b4:	ba 2e       	mov	r11, r26
    40b6:	cf 2e       	mov	r12, r31
    40b8:	d9 2e       	mov	r13, r25
    40ba:	e8 2e       	mov	r14, r24
    40bc:	fe 2e       	mov	r15, r30
    40be:	07 2f       	mov	r16, r23
    40c0:	1b 2f       	mov	r17, r27
    40c2:	6f 5f       	subi	r22, 0xFF	; 255
    40c4:	86 2f       	mov	r24, r22
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	a0 e0       	ldi	r26, 0x00	; 0
    40ca:	b0 e0       	ldi	r27, 0x00	; 0
    40cc:	82 17       	cp	r24, r18
    40ce:	93 07       	cpc	r25, r19
    40d0:	a4 07       	cpc	r26, r20
    40d2:	b5 07       	cpc	r27, r21
    40d4:	08 f4       	brcc	.+2      	; 0x40d8 <_nrk_time_to_ticks+0xd0>
    40d6:	be cf       	rjmp	.-132    	; 0x4054 <_nrk_time_to_ticks+0x4c>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    40d8:	95 01       	movw	r18, r10
    40da:	a6 01       	movw	r20, r12
    40dc:	b7 01       	movw	r22, r14
    40de:	c8 01       	movw	r24, r16
    40e0:	a3 eb       	ldi	r26, 0xB3	; 179
    40e2:	aa 2e       	mov	r10, r26
    40e4:	f6 ee       	ldi	r31, 0xE6	; 230
    40e6:	bf 2e       	mov	r11, r31
    40e8:	ee e0       	ldi	r30, 0x0E	; 14
    40ea:	ce 2e       	mov	r12, r30
    40ec:	dd 24       	eor	r13, r13
    40ee:	ee 24       	eor	r14, r14
    40f0:	ff 24       	eor	r15, r15
    40f2:	00 e0       	ldi	r16, 0x00	; 0
    40f4:	10 e0       	ldi	r17, 0x00	; 0
    40f6:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__udivdi3>
    40fa:	09 c0       	rjmp	.+18     	; 0x410e <_nrk_time_to_ticks+0x106>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    40fc:	23 eb       	ldi	r18, 0xB3	; 179
    40fe:	36 ee       	ldi	r19, 0xE6	; 230
    4100:	4e e0       	ldi	r20, 0x0E	; 14
    4102:	50 e0       	ldi	r21, 0x00	; 0
    4104:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    4108:	02 c0       	rjmp	.+4      	; 0x410e <_nrk_time_to_ticks+0x106>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    410e:	c9 01       	movw	r24, r18
    4110:	1f 91       	pop	r17
    4112:	0f 91       	pop	r16
    4114:	ff 90       	pop	r15
    4116:	ef 90       	pop	r14
    4118:	df 90       	pop	r13
    411a:	cf 90       	pop	r12
    411c:	bf 90       	pop	r11
    411e:	af 90       	pop	r10
    4120:	9f 90       	pop	r9
    4122:	8f 90       	pop	r8
    4124:	08 95       	ret

00004126 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    4126:	ef 92       	push	r14
    4128:	ff 92       	push	r15
    412a:	0f 93       	push	r16
    412c:	1f 93       	push	r17
    412e:	df 93       	push	r29
    4130:	cf 93       	push	r28
    4132:	cd b7       	in	r28, 0x3d	; 61
    4134:	de b7       	in	r29, 0x3e	; 62
    4136:	28 97       	sbiw	r28, 0x08	; 8
    4138:	0f b6       	in	r0, 0x3f	; 63
    413a:	f8 94       	cli
    413c:	de bf       	out	0x3e, r29	; 62
    413e:	0f be       	out	0x3f, r0	; 63
    4140:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    4142:	7b 01       	movw	r14, r22
    4144:	8c 01       	movw	r16, r24
    4146:	ba e0       	ldi	r27, 0x0A	; 10
    4148:	16 95       	lsr	r17
    414a:	07 95       	ror	r16
    414c:	f7 94       	ror	r15
    414e:	e7 94       	ror	r14
    4150:	ba 95       	dec	r27
    4152:	d1 f7       	brne	.-12     	; 0x4148 <_nrk_ticks_to_time+0x22>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    4154:	e9 82       	std	Y+1, r14	; 0x01
    4156:	fa 82       	std	Y+2, r15	; 0x02
    4158:	0b 83       	std	Y+3, r16	; 0x03
    415a:	1c 83       	std	Y+4, r17	; 0x04
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    415c:	73 70       	andi	r23, 0x03	; 3
    415e:	80 70       	andi	r24, 0x00	; 0
    4160:	90 70       	andi	r25, 0x00	; 0
    4162:	23 eb       	ldi	r18, 0xB3	; 179
    4164:	36 ee       	ldi	r19, 0xE6	; 230
    4166:	4e e0       	ldi	r20, 0x0E	; 14
    4168:	50 e0       	ldi	r21, 0x00	; 0
    416a:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    416e:	6d 83       	std	Y+5, r22	; 0x05
    4170:	7e 83       	std	Y+6, r23	; 0x06
    4172:	8f 83       	std	Y+7, r24	; 0x07
    4174:	98 87       	std	Y+8, r25	; 0x08
    4176:	2e 2d       	mov	r18, r14
    4178:	3a 81       	ldd	r19, Y+2	; 0x02
    417a:	4b 81       	ldd	r20, Y+3	; 0x03
    417c:	5c 81       	ldd	r21, Y+4	; 0x04

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
}
    417e:	28 96       	adiw	r28, 0x08	; 8
    4180:	0f b6       	in	r0, 0x3f	; 63
    4182:	f8 94       	cli
    4184:	de bf       	out	0x3e, r29	; 62
    4186:	0f be       	out	0x3f, r0	; 63
    4188:	cd bf       	out	0x3d, r28	; 61
    418a:	cf 91       	pop	r28
    418c:	df 91       	pop	r29
    418e:	1f 91       	pop	r17
    4190:	0f 91       	pop	r16
    4192:	ff 90       	pop	r15
    4194:	ef 90       	pop	r14
    4196:	08 95       	ret

00004198 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    4198:	8f 92       	push	r8
    419a:	9f 92       	push	r9
    419c:	af 92       	push	r10
    419e:	bf 92       	push	r11
    41a0:	cf 92       	push	r12
    41a2:	df 92       	push	r13
    41a4:	ef 92       	push	r14
    41a6:	ff 92       	push	r15
    41a8:	0f 93       	push	r16
    41aa:	1f 93       	push	r17
    41ac:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    41ae:	20 81       	ld	r18, Z
    41b0:	31 81       	ldd	r19, Z+1	; 0x01
    41b2:	42 81       	ldd	r20, Z+2	; 0x02
    41b4:	53 81       	ldd	r21, Z+3	; 0x03
    41b6:	64 81       	ldd	r22, Z+4	; 0x04
    41b8:	75 81       	ldd	r23, Z+5	; 0x05
    41ba:	86 81       	ldd	r24, Z+6	; 0x06
    41bc:	97 81       	ldd	r25, Z+7	; 0x07
    41be:	21 15       	cp	r18, r1
    41c0:	31 05       	cpc	r19, r1
    41c2:	41 05       	cpc	r20, r1
    41c4:	51 05       	cpc	r21, r1
    41c6:	09 f4       	brne	.+2      	; 0x41ca <_nrk_time_to_ticks_long+0x32>
    41c8:	5b c0       	rjmp	.+182    	; 0x4280 <__stack+0x81>
{
   tmp=t->nano_secs;
    41ca:	5b 01       	movw	r10, r22
    41cc:	6c 01       	movw	r12, r24
    41ce:	ee 24       	eor	r14, r14
    41d0:	ff 24       	eor	r15, r15
    41d2:	87 01       	movw	r16, r14
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    41d4:	60 e0       	ldi	r22, 0x00	; 0
    41d6:	38 c0       	rjmp	.+112    	; 0x4248 <__stack+0x49>
    41d8:	8a 2c       	mov	r8, r10
    41da:	ab 2d       	mov	r26, r11
    41dc:	a6 53       	subi	r26, 0x36	; 54
    41de:	f1 e0       	ldi	r31, 0x01	; 1
    41e0:	ab 15       	cp	r26, r11
    41e2:	08 f0       	brcs	.+2      	; 0x41e6 <_nrk_time_to_ticks_long+0x4e>
    41e4:	f0 e0       	ldi	r31, 0x00	; 0
    41e6:	8c 2d       	mov	r24, r12
    41e8:	86 56       	subi	r24, 0x66	; 102
    41ea:	91 e0       	ldi	r25, 0x01	; 1
    41ec:	8c 15       	cp	r24, r12
    41ee:	08 f0       	brcs	.+2      	; 0x41f2 <_nrk_time_to_ticks_long+0x5a>
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	f8 0f       	add	r31, r24
    41f4:	71 e0       	ldi	r23, 0x01	; 1
    41f6:	f8 17       	cp	r31, r24
    41f8:	08 f0       	brcs	.+2      	; 0x41fc <_nrk_time_to_ticks_long+0x64>
    41fa:	70 e0       	ldi	r23, 0x00	; 0
    41fc:	97 2b       	or	r25, r23
    41fe:	7d 2d       	mov	r23, r13
    4200:	75 5c       	subi	r23, 0xC5	; 197
    4202:	e1 e0       	ldi	r30, 0x01	; 1
    4204:	7d 15       	cp	r23, r13
    4206:	08 f0       	brcs	.+2      	; 0x420a <__stack+0xb>
    4208:	e0 e0       	ldi	r30, 0x00	; 0
    420a:	97 0f       	add	r25, r23
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	97 17       	cp	r25, r23
    4210:	08 f0       	brcs	.+2      	; 0x4214 <__stack+0x15>
    4212:	80 e0       	ldi	r24, 0x00	; 0
    4214:	8e 2b       	or	r24, r30
    4216:	8e 0d       	add	r24, r14
    4218:	e1 e0       	ldi	r30, 0x01	; 1
    421a:	8e 15       	cp	r24, r14
    421c:	08 f0       	brcs	.+2      	; 0x4220 <__stack+0x21>
    421e:	e0 e0       	ldi	r30, 0x00	; 0
    4220:	ef 0d       	add	r30, r15
    4222:	71 e0       	ldi	r23, 0x01	; 1
    4224:	ef 15       	cp	r30, r15
    4226:	08 f0       	brcs	.+2      	; 0x422a <__stack+0x2b>
    4228:	70 e0       	ldi	r23, 0x00	; 0
    422a:	70 0f       	add	r23, r16
    422c:	b1 e0       	ldi	r27, 0x01	; 1
    422e:	70 17       	cp	r23, r16
    4230:	08 f0       	brcs	.+2      	; 0x4234 <__stack+0x35>
    4232:	b0 e0       	ldi	r27, 0x00	; 0
    4234:	b1 0f       	add	r27, r17
    4236:	a8 2c       	mov	r10, r8
    4238:	ba 2e       	mov	r11, r26
    423a:	cf 2e       	mov	r12, r31
    423c:	d9 2e       	mov	r13, r25
    423e:	e8 2e       	mov	r14, r24
    4240:	fe 2e       	mov	r15, r30
    4242:	07 2f       	mov	r16, r23
    4244:	1b 2f       	mov	r17, r27
    4246:	6f 5f       	subi	r22, 0xFF	; 255
    4248:	86 2f       	mov	r24, r22
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	a0 e0       	ldi	r26, 0x00	; 0
    424e:	b0 e0       	ldi	r27, 0x00	; 0
    4250:	82 17       	cp	r24, r18
    4252:	93 07       	cpc	r25, r19
    4254:	a4 07       	cpc	r26, r20
    4256:	b5 07       	cpc	r27, r21
    4258:	08 f4       	brcc	.+2      	; 0x425c <__stack+0x5d>
    425a:	be cf       	rjmp	.-132    	; 0x41d8 <_nrk_time_to_ticks_long+0x40>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    425c:	95 01       	movw	r18, r10
    425e:	a6 01       	movw	r20, r12
    4260:	b7 01       	movw	r22, r14
    4262:	c8 01       	movw	r24, r16
    4264:	e3 eb       	ldi	r30, 0xB3	; 179
    4266:	ae 2e       	mov	r10, r30
    4268:	06 ee       	ldi	r16, 0xE6	; 230
    426a:	b0 2e       	mov	r11, r16
    426c:	1e e0       	ldi	r17, 0x0E	; 14
    426e:	c1 2e       	mov	r12, r17
    4270:	dd 24       	eor	r13, r13
    4272:	ee 24       	eor	r14, r14
    4274:	ff 24       	eor	r15, r15
    4276:	00 e0       	ldi	r16, 0x00	; 0
    4278:	10 e0       	ldi	r17, 0x00	; 0
    427a:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <__udivdi3>
    427e:	06 c0       	rjmp	.+12     	; 0x428c <__stack+0x8d>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4280:	23 eb       	ldi	r18, 0xB3	; 179
    4282:	36 ee       	ldi	r19, 0xE6	; 230
    4284:	4e e0       	ldi	r20, 0x0E	; 14
    4286:	50 e0       	ldi	r21, 0x00	; 0
    4288:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    428c:	b9 01       	movw	r22, r18
    428e:	ca 01       	movw	r24, r20
}
return ticks;
}
    4290:	1f 91       	pop	r17
    4292:	0f 91       	pop	r16
    4294:	ff 90       	pop	r15
    4296:	ef 90       	pop	r14
    4298:	df 90       	pop	r13
    429a:	cf 90       	pop	r12
    429c:	bf 90       	pop	r11
    429e:	af 90       	pop	r10
    42a0:	9f 90       	pop	r9
    42a2:	8f 90       	pop	r8
    42a4:	08 95       	ret

000042a6 <nrk_idle_task>:
#include <nrk_platform_time.h>
#include <nrk_scheduler.h>
#include <stdio.h>

void nrk_idle_task()
{
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    42aa:	01 e0       	ldi	r16, 0x01	; 1
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    42ac:	12 e0       	ldi	r17, 0x02	; 2
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    42ae:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    42b2:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <_nrk_get_next_wakeup>
    42b6:	8b 30       	cpi	r24, 0x0B	; 11
    42b8:	28 f4       	brcc	.+10     	; 0x42c4 <nrk_idle_task+0x1e>
    {
	    _nrk_cpu_state=CPU_IDLE;
    42ba:	00 93 f5 05 	sts	0x05F5, r16
	    nrk_idle();
    42be:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <nrk_idle>
    42c2:	08 c0       	rjmp	.+16     	; 0x42d4 <nrk_idle_task+0x2e>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    42c4:	8a e0       	ldi	r24, 0x0A	; 10
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	0e 94 1d 24 	call	0x483a	; 0x483a <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    42cc:	10 93 f5 05 	sts	0x05F5, r17
	    nrk_sleep();
    42d0:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    42d4:	80 91 8a 04 	lds	r24, 0x048A
    42d8:	85 35       	cpi	r24, 0x55	; 85
    42da:	19 f0       	breq	.+6      	; 0x42e2 <nrk_idle_task+0x3c>
    42dc:	88 e0       	ldi	r24, 0x08	; 8
    42de:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    42e2:	80 91 7e 21 	lds	r24, 0x217E
    42e6:	85 35       	cpi	r24, 0x55	; 85
    42e8:	11 f3       	breq	.-60     	; 0x42ae <nrk_idle_task+0x8>
    42ea:	88 e0       	ldi	r24, 0x08	; 8
    42ec:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <nrk_error_add>
    42f0:	de cf       	rjmp	.-68     	; 0x42ae <nrk_idle_task+0x8>

000042f2 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    42f2:	2f 92       	push	r2
    42f4:	3f 92       	push	r3
    42f6:	4f 92       	push	r4
    42f8:	5f 92       	push	r5
    42fa:	6f 92       	push	r6
    42fc:	7f 92       	push	r7
    42fe:	8f 92       	push	r8
    4300:	9f 92       	push	r9
    4302:	af 92       	push	r10
    4304:	bf 92       	push	r11
    4306:	cf 92       	push	r12
    4308:	df 92       	push	r13
    430a:	ef 92       	push	r14
    430c:	ff 92       	push	r15
    430e:	0f 93       	push	r16
    4310:	1f 93       	push	r17
    4312:	df 93       	push	r29
    4314:	cf 93       	push	r28
    4316:	0f 92       	push	r0
    4318:	cd b7       	in	r28, 0x3d	; 61
    431a:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    431c:	0e 94 18 24 	call	0x4830	; 0x4830 <_nrk_precision_os_timer_reset>
    nrk_int_disable();   // this should be removed...  Not needed
    4320:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    4324:	0e 94 49 24 	call	0x4892	; 0x4892 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    4328:	0e 94 51 24 	call	0x48a2	; 0x48a2 <_nrk_high_speed_timer_get>
    432c:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    432e:	8a ef       	ldi	r24, 0xFA	; 250
    4330:	0e 94 00 25 	call	0x4a00	; 0x4a00 <_nrk_set_next_wakeup>
    next_wake=60000;
    // Safety zone starts here....


#ifdef NRK_WATCHDOG
    nrk_watchdog_reset();
    4334:	0e 94 ac 27 	call	0x4f58	; 0x4f58 <nrk_watchdog_reset>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    4338:	00 91 88 04 	lds	r16, 0x0488
    433c:	60 2f       	mov	r22, r16
    433e:	70 e0       	ldi	r23, 0x00	; 0
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	23 eb       	ldi	r18, 0xB3	; 179
    4346:	36 ee       	ldi	r19, 0xE6	; 230
    4348:	4e e0       	ldi	r20, 0x0E	; 14
    434a:	50 e0       	ldi	r21, 0x00	; 0
    434c:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    4350:	6b 01       	movw	r12, r22
    4352:	7c 01       	movw	r14, r24
    4354:	80 91 fc 05 	lds	r24, 0x05FC
    4358:	90 91 fd 05 	lds	r25, 0x05FD
    435c:	a0 91 fe 05 	lds	r26, 0x05FE
    4360:	b0 91 ff 05 	lds	r27, 0x05FF
    4364:	c8 0e       	add	r12, r24
    4366:	d9 1e       	adc	r13, r25
    4368:	ea 1e       	adc	r14, r26
    436a:	fb 1e       	adc	r15, r27
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    436c:	c7 01       	movw	r24, r14
    436e:	b6 01       	movw	r22, r12
    4370:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    4374:	c6 1a       	sub	r12, r22
    4376:	d7 0a       	sbc	r13, r23
    4378:	e8 0a       	sbc	r14, r24
    437a:	f9 0a       	sbc	r15, r25
    437c:	c0 92 fc 05 	sts	0x05FC, r12
    4380:	d0 92 fd 05 	sts	0x05FD, r13
    4384:	e0 92 fe 05 	sts	0x05FE, r14
    4388:	f0 92 ff 05 	sts	0x05FF, r15

#ifdef NRK_STATS_TRACKER
    if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
    438c:	e0 91 01 06 	lds	r30, 0x0601
    4390:	f0 91 02 06 	lds	r31, 0x0602
    4394:	80 85       	ldd	r24, Z+8	; 0x08
    4396:	88 23       	and	r24, r24
    4398:	81 f5       	brne	.+96     	; 0x43fa <_nrk_scheduler+0x108>
    {
        if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
    439a:	80 91 f5 05 	lds	r24, 0x05F5
    439e:	82 30       	cpi	r24, 0x02	; 2
    43a0:	19 f4       	brne	.+6      	; 0x43a8 <_nrk_scheduler+0xb6>
    43a2:	80 2f       	mov	r24, r16
    43a4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <_nrk_stats_sleep>
        _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    43a8:	e0 91 01 06 	lds	r30, 0x0601
    43ac:	f0 91 02 06 	lds	r31, 0x0602
    43b0:	80 85       	ldd	r24, Z+8	; 0x08
    43b2:	60 91 88 04 	lds	r22, 0x0488
    43b6:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_nrk_stats_task_preempted>
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    43ba:	e0 91 01 06 	lds	r30, 0x0601
    43be:	f0 91 02 06 	lds	r31, 0x0602
    43c2:	80 85       	ldd	r24, Z+8	; 0x08
    43c4:	60 e0       	ldi	r22, 0x00	; 0
    43c6:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_nrk_stats_task_suspend>
    43ca:	80 91 f8 05 	lds	r24, 0x05F8
    43ce:	90 91 f9 05 	lds	r25, 0x05F9
    43d2:	a0 91 fa 05 	lds	r26, 0x05FA
    43d6:	b0 91 fb 05 	lds	r27, 0x05FB
    43da:	c0 90 fc 05 	lds	r12, 0x05FC
    43de:	d0 90 fd 05 	lds	r13, 0x05FD
    43e2:	e0 90 fe 05 	lds	r14, 0x05FE
    43e6:	f0 90 ff 05 	lds	r15, 0x05FF

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    43ea:	73 eb       	ldi	r23, 0xB3	; 179
    43ec:	87 2e       	mov	r8, r23
    43ee:	76 ee       	ldi	r23, 0xE6	; 230
    43f0:	97 2e       	mov	r9, r23
    43f2:	7e e0       	ldi	r23, 0x0E	; 14
    43f4:	a7 2e       	mov	r10, r23
    43f6:	b1 2c       	mov	r11, r1
    43f8:	1d c0       	rjmp	.+58     	; 0x4434 <_nrk_scheduler+0x142>
        // Add 0 time since the preempted call before set the correct value
        _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
    }
    else
    {
        if(nrk_cur_task_TCB->suspend_flag==1)
    43fa:	95 81       	ldd	r25, Z+5	; 0x05
    43fc:	99 23       	and	r25, r25
    43fe:	11 f0       	breq	.+4      	; 0x4404 <_nrk_scheduler+0x112>
            _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    4400:	60 2f       	mov	r22, r16
    4402:	e1 cf       	rjmp	.-62     	; 0x43c6 <_nrk_scheduler+0xd4>
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    4404:	60 2f       	mov	r22, r16
    4406:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <_nrk_stats_task_preempted>
    440a:	df cf       	rjmp	.-66     	; 0x43ca <_nrk_scheduler+0xd8>
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	96 e3       	ldi	r25, 0x36	; 54
    4410:	a5 e6       	ldi	r26, 0x65	; 101
    4412:	b4 ec       	ldi	r27, 0xC4	; 196
    4414:	c8 0e       	add	r12, r24
    4416:	d9 1e       	adc	r13, r25
    4418:	ea 1e       	adc	r14, r26
    441a:	fb 1e       	adc	r15, r27
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    441c:	c7 01       	movw	r24, r14
    441e:	b6 01       	movw	r22, r12
    4420:	a5 01       	movw	r20, r10
    4422:	94 01       	movw	r18, r8
    4424:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    4428:	c6 1a       	sub	r12, r22
    442a:	d7 0a       	sbc	r13, r23
    442c:	e8 0a       	sbc	r14, r24
    442e:	f9 0a       	sbc	r15, r25
    4430:	d3 01       	movw	r26, r6
    4432:	c2 01       	movw	r24, r4
    4434:	2c 01       	movw	r4, r24
    4436:	3d 01       	movw	r6, r26
    4438:	08 94       	sec
    443a:	41 1c       	adc	r4, r1
    443c:	51 1c       	adc	r5, r1
    443e:	61 1c       	adc	r6, r1
    4440:	71 1c       	adc	r7, r1
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4442:	e0 e0       	ldi	r30, 0x00	; 0
    4444:	ce 16       	cp	r12, r30
    4446:	ea ec       	ldi	r30, 0xCA	; 202
    4448:	de 06       	cpc	r13, r30
    444a:	ea e9       	ldi	r30, 0x9A	; 154
    444c:	ee 06       	cpc	r14, r30
    444e:	eb e3       	ldi	r30, 0x3B	; 59
    4450:	fe 06       	cpc	r15, r30
    4452:	e0 f6       	brcc	.-72     	; 0x440c <_nrk_scheduler+0x11a>
    4454:	80 93 f8 05 	sts	0x05F8, r24
    4458:	90 93 f9 05 	sts	0x05F9, r25
    445c:	a0 93 fa 05 	sts	0x05FA, r26
    4460:	b0 93 fb 05 	sts	0x05FB, r27
    4464:	c0 92 fc 05 	sts	0x05FC, r12
    4468:	d0 92 fd 05 	sts	0x05FD, r13
    446c:	e0 92 fe 05 	sts	0x05FE, r14
    4470:	f0 92 ff 05 	sts	0x05FF, r15
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4474:	e0 91 01 06 	lds	r30, 0x0601
    4478:	f0 91 02 06 	lds	r31, 0x0602
    447c:	85 81       	ldd	r24, Z+5	; 0x05
    447e:	88 23       	and	r24, r24
    4480:	b9 f0       	breq	.+46     	; 0x44b0 <_nrk_scheduler+0x1be>
    4482:	81 85       	ldd	r24, Z+9	; 0x09
    4484:	84 30       	cpi	r24, 0x04	; 4
    4486:	a1 f0       	breq	.+40     	; 0x44b0 <_nrk_scheduler+0x1be>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    4488:	87 81       	ldd	r24, Z+7	; 0x07
    448a:	82 30       	cpi	r24, 0x02	; 2
    448c:	29 f0       	breq	.+10     	; 0x4498 <_nrk_scheduler+0x1a6>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    448e:	88 23       	and	r24, r24
    4490:	41 f0       	breq	.+16     	; 0x44a2 <_nrk_scheduler+0x1b0>
    4492:	86 81       	ldd	r24, Z+6	; 0x06
    4494:	88 23       	and	r24, r24
    4496:	11 f4       	brne	.+4      	; 0x449c <_nrk_scheduler+0x1aa>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    4498:	85 e0       	ldi	r24, 0x05	; 5
    449a:	01 c0       	rjmp	.+2      	; 0x449e <_nrk_scheduler+0x1ac>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    449c:	83 e0       	ldi	r24, 0x03	; 3
    449e:	81 87       	std	Z+9, r24	; 0x09
    44a0:	04 c0       	rjmp	.+8      	; 0x44aa <_nrk_scheduler+0x1b8>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    44a2:	83 e0       	ldi	r24, 0x03	; 3
    44a4:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    44a6:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    44a8:	16 82       	std	Z+6, r1	; 0x06
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    44aa:	80 85       	ldd	r24, Z+8	; 0x08
    44ac:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    44b0:	e0 91 01 06 	lds	r30, 0x0601
    44b4:	f0 91 02 06 	lds	r31, 0x0602
    44b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    44ba:	96 8d       	ldd	r25, Z+30	; 0x1e
    44bc:	00 97       	sbiw	r24, 0x00	; 0
    44be:	e9 f1       	breq	.+122    	; 0x453a <_nrk_scheduler+0x248>
    44c0:	80 85       	ldd	r24, Z+8	; 0x08
    44c2:	88 23       	and	r24, r24
    44c4:	d1 f1       	breq	.+116    	; 0x453a <_nrk_scheduler+0x248>
    44c6:	91 85       	ldd	r25, Z+9	; 0x09
    44c8:	94 30       	cpi	r25, 0x04	; 4
    44ca:	b9 f1       	breq	.+110    	; 0x453a <_nrk_scheduler+0x248>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    44cc:	41 8d       	ldd	r20, Z+25	; 0x19
    44ce:	52 8d       	ldd	r21, Z+26	; 0x1a
    44d0:	20 91 88 04 	lds	r18, 0x0488
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	42 17       	cp	r20, r18
    44d8:	53 07       	cpc	r21, r19
    44da:	88 f4       	brcc	.+34     	; 0x44fe <_nrk_scheduler+0x20c>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
    44dc:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_nrk_stats_add_violation>
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    44e0:	e0 91 01 06 	lds	r30, 0x0601
    44e4:	f0 91 02 06 	lds	r31, 0x0602
    44e8:	82 e0       	ldi	r24, 0x02	; 2
    44ea:	60 85       	ldd	r22, Z+8	; 0x08
    44ec:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    44f0:	e0 91 01 06 	lds	r30, 0x0601
    44f4:	f0 91 02 06 	lds	r31, 0x0602
    44f8:	12 8e       	std	Z+26, r1	; 0x1a
    44fa:	11 8e       	std	Z+25, r1	; 0x19
    44fc:	04 c0       	rjmp	.+8      	; 0x4506 <_nrk_scheduler+0x214>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    44fe:	42 1b       	sub	r20, r18
    4500:	53 0b       	sbc	r21, r19
    4502:	52 8f       	std	Z+26, r21	; 0x1a
    4504:	41 8f       	std	Z+25, r20	; 0x19

        task_ID= nrk_cur_task_TCB->task_ID;
    4506:	e0 91 01 06 	lds	r30, 0x0601
    450a:	f0 91 02 06 	lds	r31, 0x0602
    450e:	00 85       	ldd	r16, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    4510:	21 8d       	ldd	r18, Z+25	; 0x19
    4512:	32 8d       	ldd	r19, Z+26	; 0x1a
    4514:	21 15       	cp	r18, r1
    4516:	31 05       	cpc	r19, r1
    4518:	81 f4       	brne	.+32     	; 0x453a <_nrk_scheduler+0x248>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
    451a:	80 2f       	mov	r24, r16
    451c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_nrk_stats_add_violation>
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    4520:	83 e0       	ldi	r24, 0x03	; 3
    4522:	60 2f       	mov	r22, r16
    4524:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4528:	e0 91 01 06 	lds	r30, 0x0601
    452c:	f0 91 02 06 	lds	r31, 0x0602
    4530:	83 e0       	ldi	r24, 0x03	; 3
    4532:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    4534:	80 2f       	mov	r24, r16
    4536:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <nrk_rem_from_readyQ>
    453a:	63 e4       	ldi	r22, 0x43	; 67
    453c:	66 2e       	mov	r6, r22
    453e:	65 e0       	ldi	r22, 0x05	; 5
    4540:	76 2e       	mov	r7, r22

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4542:	00 e6       	ldi	r16, 0x60	; 96
    4544:	1a ee       	ldi	r17, 0xEA	; 234
    4546:	20 e0       	ldi	r18, 0x00	; 0
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
                    nrk_task_TCB[task_ID].num_periods=1;
    4548:	51 e0       	ldi	r21, 0x01	; 1
    454a:	45 2e       	mov	r4, r21
    454c:	51 2c       	mov	r5, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    454e:	4a ef       	ldi	r20, 0xFA	; 250
    4550:	c4 2e       	mov	r12, r20
    4552:	d1 2c       	mov	r13, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    4554:	32 e0       	ldi	r19, 0x02	; 2
    4556:	f3 2e       	mov	r15, r19
            // printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4558:	91 e0       	ldi	r25, 0x01	; 1
    455a:	89 2e       	mov	r8, r25
    455c:	91 2c       	mov	r9, r1
    455e:	a1 2c       	mov	r10, r1
    4560:	b1 2c       	mov	r11, r1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    4562:	d3 01       	movw	r26, r6
    4564:	13 96       	adiw	r26, 0x03	; 3
    4566:	8c 91       	ld	r24, X
    4568:	13 97       	sbiw	r26, 0x03	; 3
    456a:	8f 3f       	cpi	r24, 0xFF	; 255
    456c:	09 f4       	brne	.+2      	; 0x4570 <_nrk_scheduler+0x27e>
    456e:	c4 c0       	rjmp	.+392    	; 0x46f8 <_nrk_scheduler+0x406>
        nrk_task_TCB[task_ID].suspend_flag=0;
    4570:	1c 92       	st	X, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    4572:	88 23       	and	r24, r24
    4574:	09 f4       	brne	.+2      	; 0x4578 <_nrk_scheduler+0x286>
    4576:	43 c0       	rjmp	.+134    	; 0x45fe <_nrk_scheduler+0x30c>
    4578:	14 96       	adiw	r26, 0x04	; 4
    457a:	8c 91       	ld	r24, X
    457c:	14 97       	sbiw	r26, 0x04	; 4
    457e:	84 30       	cpi	r24, 0x04	; 4
    4580:	f1 f1       	breq	.+124    	; 0x45fe <_nrk_scheduler+0x30c>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    4582:	50 96       	adiw	r26, 0x10	; 16
    4584:	4d 91       	ld	r20, X+
    4586:	5c 91       	ld	r21, X
    4588:	51 97       	sbiw	r26, 0x11	; 17
    458a:	80 91 88 04 	lds	r24, 0x0488
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	48 17       	cp	r20, r24
    4592:	59 07       	cpc	r21, r25
    4594:	38 f0       	brcs	.+14     	; 0x45a4 <_nrk_scheduler+0x2b2>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    4596:	48 1b       	sub	r20, r24
    4598:	59 0b       	sbc	r21, r25
    459a:	51 96       	adiw	r26, 0x11	; 17
    459c:	5c 93       	st	X, r21
    459e:	4e 93       	st	-X, r20
    45a0:	50 97       	sbiw	r26, 0x10	; 16
    45a2:	03 c0       	rjmp	.+6      	; 0x45aa <_nrk_scheduler+0x2b8>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    45a4:	f3 01       	movw	r30, r6
    45a6:	11 8a       	std	Z+17, r1	; 0x11
    45a8:	10 8a       	std	Z+16, r1	; 0x10
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    45aa:	d3 01       	movw	r26, r6
    45ac:	52 96       	adiw	r26, 0x12	; 18
    45ae:	4d 91       	ld	r20, X+
    45b0:	5c 91       	ld	r21, X
    45b2:	53 97       	sbiw	r26, 0x13	; 19
    45b4:	48 17       	cp	r20, r24
    45b6:	59 07       	cpc	r21, r25
    45b8:	38 f0       	brcs	.+14     	; 0x45c8 <_nrk_scheduler+0x2d6>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    45ba:	48 1b       	sub	r20, r24
    45bc:	59 0b       	sbc	r21, r25
    45be:	53 96       	adiw	r26, 0x13	; 19
    45c0:	5c 93       	st	X, r21
    45c2:	4e 93       	st	-X, r20
    45c4:	52 97       	sbiw	r26, 0x12	; 18
    45c6:	12 c0       	rjmp	.+36     	; 0x45ec <_nrk_scheduler+0x2fa>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    45c8:	f3 01       	movw	r30, r6
    45ca:	66 89       	ldd	r22, Z+22	; 0x16
    45cc:	77 89       	ldd	r23, Z+23	; 0x17
    45ce:	86 17       	cp	r24, r22
    45d0:	97 07       	cpc	r25, r23
    45d2:	28 f4       	brcc	.+10     	; 0x45de <_nrk_scheduler+0x2ec>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    45d4:	68 1b       	sub	r22, r24
    45d6:	79 0b       	sbc	r23, r25
    45d8:	73 8b       	std	Z+19, r23	; 0x13
    45da:	62 8b       	std	Z+18, r22	; 0x12
    45dc:	07 c0       	rjmp	.+14     	; 0x45ec <_nrk_scheduler+0x2fa>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    45de:	0e 94 25 30 	call	0x604a	; 0x604a <__udivmodhi4>
    45e2:	d3 01       	movw	r26, r6
    45e4:	53 96       	adiw	r26, 0x13	; 19
    45e6:	9c 93       	st	X, r25
    45e8:	8e 93       	st	-X, r24
    45ea:	52 97       	sbiw	r26, 0x12	; 18
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    45ec:	f3 01       	movw	r30, r6
    45ee:	82 89       	ldd	r24, Z+18	; 0x12
    45f0:	93 89       	ldd	r25, Z+19	; 0x13
    45f2:	00 97       	sbiw	r24, 0x00	; 0
    45f4:	21 f4       	brne	.+8      	; 0x45fe <_nrk_scheduler+0x30c>
    45f6:	86 89       	ldd	r24, Z+22	; 0x16
    45f8:	97 89       	ldd	r25, Z+23	; 0x17
    45fa:	93 8b       	std	Z+19, r25	; 0x13
    45fc:	82 8b       	std	Z+18, r24	; 0x12

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    45fe:	d3 01       	movw	r26, r6
    4600:	14 96       	adiw	r26, 0x04	; 4
    4602:	8c 91       	ld	r24, X
    4604:	14 97       	sbiw	r26, 0x04	; 4
    4606:	83 30       	cpi	r24, 0x03	; 3
    4608:	09 f0       	breq	.+2      	; 0x460c <_nrk_scheduler+0x31a>
    460a:	76 c0       	rjmp	.+236    	; 0x46f8 <_nrk_scheduler+0x406>
        {
            // printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    460c:	50 96       	adiw	r26, 0x10	; 16
    460e:	8d 91       	ld	r24, X+
    4610:	9c 91       	ld	r25, X
    4612:	51 97       	sbiw	r26, 0x11	; 17
    4614:	00 97       	sbiw	r24, 0x00	; 0
    4616:	09 f0       	breq	.+2      	; 0x461a <_nrk_scheduler+0x328>
    4618:	66 c0       	rjmp	.+204    	; 0x46e6 <_nrk_scheduler+0x3f4>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    461a:	12 96       	adiw	r26, 0x02	; 2
    461c:	8c 91       	ld	r24, X
    461e:	12 97       	sbiw	r26, 0x02	; 2
    4620:	88 23       	and	r24, r24
    4622:	a9 f0       	breq	.+42     	; 0x464e <_nrk_scheduler+0x35c>
    4624:	11 96       	adiw	r26, 0x01	; 1
    4626:	8c 91       	ld	r24, X
    4628:	11 97       	sbiw	r26, 0x01	; 1
    462a:	88 23       	and	r24, r24
    462c:	81 f0       	breq	.+32     	; 0x464e <_nrk_scheduler+0x35c>
    462e:	d5 01       	movw	r26, r10
    4630:	c4 01       	movw	r24, r8
    4632:	00 90 e9 05 	lds	r0, 0x05E9
    4636:	04 c0       	rjmp	.+8      	; 0x4640 <_nrk_scheduler+0x34e>
    4638:	88 0f       	add	r24, r24
    463a:	99 1f       	adc	r25, r25
    463c:	aa 1f       	adc	r26, r26
    463e:	bb 1f       	adc	r27, r27
    4640:	0a 94       	dec	r0
    4642:	d2 f7       	brpl	.-12     	; 0x4638 <_nrk_scheduler+0x346>
    4644:	f3 01       	movw	r30, r6
    4646:	84 87       	std	Z+12, r24	; 0x0c
    4648:	95 87       	std	Z+13, r25	; 0x0d
    464a:	a6 87       	std	Z+14, r26	; 0x0e
    464c:	b7 87       	std	Z+15, r27	; 0x0f
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    464e:	d3 01       	movw	r26, r6
    4650:	12 96       	adiw	r26, 0x02	; 2
    4652:	1c 92       	st	X, r1
    4654:	12 97       	sbiw	r26, 0x02	; 2
                nrk_task_TCB[task_ID].nw_flag=0;
    4656:	11 96       	adiw	r26, 0x01	; 1
    4658:	1c 92       	st	X, r1
    465a:	11 97       	sbiw	r26, 0x01	; 1
                nrk_task_TCB[task_ID].suspend_flag=0;
    465c:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    465e:	5a 96       	adiw	r26, 0x1a	; 26
    4660:	4d 91       	ld	r20, X+
    4662:	5c 91       	ld	r21, X
    4664:	5b 97       	sbiw	r26, 0x1b	; 27
    4666:	56 96       	adiw	r26, 0x16	; 22
    4668:	8d 91       	ld	r24, X+
    466a:	9c 91       	ld	r25, X
    466c:	57 97       	sbiw	r26, 0x17	; 23
    466e:	58 96       	adiw	r26, 0x18	; 24
    4670:	6d 91       	ld	r22, X+
    4672:	7c 91       	ld	r23, X
    4674:	59 97       	sbiw	r26, 0x19	; 25
    4676:	41 30       	cpi	r20, 0x01	; 1
    4678:	51 05       	cpc	r21, r1
    467a:	d9 f4       	brne	.+54     	; 0x46b2 <_nrk_scheduler+0x3c0>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    467c:	55 96       	adiw	r26, 0x15	; 21
    467e:	7c 93       	st	X, r23
    4680:	6e 93       	st	-X, r22
    4682:	54 97       	sbiw	r26, 0x14	; 20
                    nrk_task_TCB[task_ID].task_state = READY;
    4684:	14 96       	adiw	r26, 0x04	; 4
    4686:	fc 92       	st	X, r15
    4688:	14 97       	sbiw	r26, 0x04	; 4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    468a:	52 96       	adiw	r26, 0x12	; 18
    468c:	4d 91       	ld	r20, X+
    468e:	5c 91       	ld	r21, X
    4690:	53 97       	sbiw	r26, 0x13	; 19
    4692:	51 96       	adiw	r26, 0x11	; 17
    4694:	5c 93       	st	X, r21
    4696:	4e 93       	st	-X, r20
    4698:	50 97       	sbiw	r26, 0x10	; 16
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    469a:	00 97       	sbiw	r24, 0x00	; 0
    469c:	21 f4       	brne	.+8      	; 0x46a6 <_nrk_scheduler+0x3b4>
    469e:	51 96       	adiw	r26, 0x11	; 17
    46a0:	dc 92       	st	X, r13
    46a2:	ce 92       	st	-X, r12
    46a4:	50 97       	sbiw	r26, 0x10	; 16
                    nrk_add_to_readyQ(task_ID);
    46a6:	82 2f       	mov	r24, r18
    46a8:	29 83       	std	Y+1, r18	; 0x01
    46aa:	0e 94 3a 1b 	call	0x3674	; 0x3674 <nrk_add_to_readyQ>
    46ae:	29 81       	ldd	r18, Y+1	; 0x01
    46b0:	1a c0       	rjmp	.+52     	; 0x46e6 <_nrk_scheduler+0x3f4>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    46b2:	f3 01       	movw	r30, r6
    46b4:	75 8b       	std	Z+21, r23	; 0x15
    46b6:	64 8b       	std	Z+20, r22	; 0x14
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    46b8:	ba 01       	movw	r22, r20
    46ba:	61 50       	subi	r22, 0x01	; 1
    46bc:	70 40       	sbci	r23, 0x00	; 0
    46be:	68 9f       	mul	r22, r24
    46c0:	a0 01       	movw	r20, r0
    46c2:	69 9f       	mul	r22, r25
    46c4:	50 0d       	add	r21, r0
    46c6:	78 9f       	mul	r23, r24
    46c8:	50 0d       	add	r21, r0
    46ca:	11 24       	eor	r1, r1
    46cc:	51 8b       	std	Z+17, r21	; 0x11
    46ce:	40 8b       	std	Z+16, r20	; 0x10
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    46d0:	53 8b       	std	Z+19, r21	; 0x13
    46d2:	42 8b       	std	Z+18, r20	; 0x12
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    46d4:	00 97       	sbiw	r24, 0x00	; 0
    46d6:	11 f4       	brne	.+4      	; 0x46dc <_nrk_scheduler+0x3ea>
    46d8:	d1 8a       	std	Z+17, r13	; 0x11
    46da:	c0 8a       	std	Z+16, r12	; 0x10
                    nrk_task_TCB[task_ID].num_periods=1;
    46dc:	d3 01       	movw	r26, r6
    46de:	5b 96       	adiw	r26, 0x1b	; 27
    46e0:	5c 92       	st	X, r5
    46e2:	4e 92       	st	-X, r4
    46e4:	5a 97       	sbiw	r26, 0x1a	; 26
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    46e6:	f3 01       	movw	r30, r6
    46e8:	80 89       	ldd	r24, Z+16	; 0x10
    46ea:	91 89       	ldd	r25, Z+17	; 0x11
    46ec:	00 97       	sbiw	r24, 0x00	; 0
    46ee:	21 f0       	breq	.+8      	; 0x46f8 <_nrk_scheduler+0x406>
    46f0:	80 17       	cp	r24, r16
    46f2:	91 07       	cpc	r25, r17
    46f4:	08 f4       	brcc	.+2      	; 0x46f8 <_nrk_scheduler+0x406>
    46f6:	8c 01       	movw	r16, r24

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    46f8:	2f 5f       	subi	r18, 0xFF	; 255
    46fa:	81 e2       	ldi	r24, 0x21	; 33
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	68 0e       	add	r6, r24
    4700:	79 1e       	adc	r7, r25
    4702:	25 30       	cpi	r18, 0x05	; 5
    4704:	09 f0       	breq	.+2      	; 0x4708 <_nrk_scheduler+0x416>
    4706:	2d cf       	rjmp	.-422    	; 0x4562 <_nrk_scheduler+0x270>
        }
    }


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
    4708:	e0 91 01 06 	lds	r30, 0x0601
    470c:	f0 91 02 06 	lds	r31, 0x0602
    4710:	80 85       	ldd	r24, Z+8	; 0x08
    4712:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_nrk_stats_task_start>
#endif
    task_ID = nrk_get_high_ready_task_ID();
    4716:	0e 94 29 1b 	call	0x3652	; 0x3652 <nrk_get_high_ready_task_ID>
    471a:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    471c:	28 2f       	mov	r18, r24
    471e:	33 27       	eor	r19, r19
    4720:	27 fd       	sbrc	r18, 7
    4722:	30 95       	com	r19
    4724:	f9 01       	movw	r30, r18
    4726:	85 e0       	ldi	r24, 0x05	; 5
    4728:	ee 0f       	add	r30, r30
    472a:	ff 1f       	adc	r31, r31
    472c:	8a 95       	dec	r24
    472e:	e1 f7       	brne	.-8      	; 0x4728 <_nrk_scheduler+0x436>
    4730:	e2 0f       	add	r30, r18
    4732:	f3 1f       	adc	r31, r19
    4734:	e2 5c       	subi	r30, 0xC2	; 194
    4736:	fa 4f       	sbci	r31, 0xFA	; 250
    4738:	82 85       	ldd	r24, Z+10	; 0x0a
    473a:	80 93 03 06 	sts	0x0603, r24
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    473e:	f0 93 eb 05 	sts	0x05EB, r31
    4742:	e0 93 ea 05 	sts	0x05EA, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    4746:	ff 20       	and	r15, r15
    4748:	99 f0       	breq	.+38     	; 0x4770 <_nrk_scheduler+0x47e>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    474a:	25 8d       	ldd	r18, Z+29	; 0x1d
    474c:	36 8d       	ldd	r19, Z+30	; 0x1e
    474e:	21 15       	cp	r18, r1
    4750:	31 05       	cpc	r19, r1
    4752:	51 f0       	breq	.+20     	; 0x4768 <_nrk_scheduler+0x476>
    4754:	21 8d       	ldd	r18, Z+25	; 0x19
    4756:	32 8d       	ldd	r19, Z+26	; 0x1a
    4758:	2a 3f       	cpi	r18, 0xFA	; 250
    475a:	31 05       	cpc	r19, r1
    475c:	28 f4       	brcc	.+10     	; 0x4768 <_nrk_scheduler+0x476>
    475e:	20 17       	cp	r18, r16
    4760:	31 07       	cpc	r19, r17
    4762:	f8 f4       	brcc	.+62     	; 0x47a2 <_nrk_scheduler+0x4b0>
    4764:	89 01       	movw	r16, r18
    4766:	1d c0       	rjmp	.+58     	; 0x47a2 <_nrk_scheduler+0x4b0>
    4768:	0b 3f       	cpi	r16, 0xFB	; 251
    476a:	11 05       	cpc	r17, r1
    476c:	d0 f0       	brcs	.+52     	; 0x47a2 <_nrk_scheduler+0x4b0>
    476e:	14 c0       	rjmp	.+40     	; 0x4798 <_nrk_scheduler+0x4a6>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    4770:	0b 30       	cpi	r16, 0x0B	; 11
    4772:	11 05       	cpc	r17, r1
    4774:	b0 f0       	brcs	.+44     	; 0x47a2 <_nrk_scheduler+0x4b0>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    4776:	98 01       	movw	r18, r16
    4778:	2a 50       	subi	r18, 0x0A	; 10
    477a:	30 40       	sbci	r19, 0x00	; 0
    477c:	2a 3f       	cpi	r18, 0xFA	; 250
    477e:	31 05       	cpc	r19, r1
    4780:	38 f4       	brcc	.+14     	; 0x4790 <_nrk_scheduler+0x49e>
    4782:	89 01       	movw	r16, r18
    4784:	29 30       	cpi	r18, 0x09	; 9
    4786:	31 05       	cpc	r19, r1
    4788:	60 f4       	brcc	.+24     	; 0x47a2 <_nrk_scheduler+0x4b0>
    478a:	09 e0       	ldi	r16, 0x09	; 9
    478c:	10 e0       	ldi	r17, 0x00	; 0
    478e:	09 c0       	rjmp	.+18     	; 0x47a2 <_nrk_scheduler+0x4b0>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    4790:	91 e0       	ldi	r25, 0x01	; 1
    4792:	04 30       	cpi	r16, 0x04	; 4
    4794:	19 07       	cpc	r17, r25
    4796:	19 f0       	breq	.+6      	; 0x479e <_nrk_scheduler+0x4ac>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    4798:	0a ef       	ldi	r16, 0xFA	; 250
    479a:	10 e0       	ldi	r17, 0x00	; 0
    479c:	02 c0       	rjmp	.+4      	; 0x47a2 <_nrk_scheduler+0x4b0>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    479e:	00 ef       	ldi	r16, 0xF0	; 240
    47a0:	10 e0       	ldi	r17, 0x00	; 0
    //  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    47a2:	80 93 f4 05 	sts	0x05F4, r24
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    47a6:	f0 93 02 06 	sts	0x0602, r31
    47aa:	e0 93 01 06 	sts	0x0601, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    47ae:	00 93 88 04 	sts	0x0488, r16


    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    47b2:	0e 94 65 25 	call	0x4aca	; 0x4aca <_nrk_os_timer_get>
    47b6:	28 2f       	mov	r18, r24
    47b8:	30 e0       	ldi	r19, 0x00	; 0
    47ba:	2f 5f       	subi	r18, 0xFF	; 255
    47bc:	3f 4f       	sbci	r19, 0xFF	; 255
    47be:	20 17       	cp	r18, r16
    47c0:	31 07       	cpc	r19, r17
    47c2:	40 f0       	brcs	.+16     	; 0x47d4 <_nrk_scheduler+0x4e2>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    47c4:	0e 94 65 25 	call	0x4aca	; 0x4aca <_nrk_os_timer_get>
    47c8:	08 2f       	mov	r16, r24
    47ca:	10 e0       	ldi	r17, 0x00	; 0
    47cc:	0e 5f       	subi	r16, 0xFE	; 254
    47ce:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    47d0:	00 93 88 04 	sts	0x0488, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    47d4:	ff 20       	and	r15, r15
    47d6:	11 f0       	breq	.+4      	; 0x47dc <_nrk_scheduler+0x4ea>
    47d8:	10 92 f5 05 	sts	0x05F5, r1

    _nrk_set_next_wakeup(next_wake);
    47dc:	80 2f       	mov	r24, r16
    47de:	0e 94 00 25 	call	0x4a00	; 0x4a00 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    47e2:	c1 01       	movw	r24, r2
    47e4:	6e ee       	ldi	r22, 0xEE	; 238
    47e6:	72 e0       	ldi	r23, 0x02	; 2
    47e8:	0e 94 64 24 	call	0x48c8	; 0x48c8 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    47ec:	0e 94 23 28 	call	0x5046	; 0x5046 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();
    47f0:	0e 94 2f 28 	call	0x505e	; 0x505e <nrk_start_high_ready_task>

}
    47f4:	0f 90       	pop	r0
    47f6:	cf 91       	pop	r28
    47f8:	df 91       	pop	r29
    47fa:	1f 91       	pop	r17
    47fc:	0f 91       	pop	r16
    47fe:	ff 90       	pop	r15
    4800:	ef 90       	pop	r14
    4802:	df 90       	pop	r13
    4804:	cf 90       	pop	r12
    4806:	bf 90       	pop	r11
    4808:	af 90       	pop	r10
    480a:	9f 90       	pop	r9
    480c:	8f 90       	pop	r8
    480e:	7f 90       	pop	r7
    4810:	6f 90       	pop	r6
    4812:	5f 90       	pop	r5
    4814:	4f 90       	pop	r4
    4816:	3f 90       	pop	r3
    4818:	2f 90       	pop	r2
    481a:	08 95       	ret

0000481c <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    481c:	89 e0       	ldi	r24, 0x09	; 9
    481e:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    4822:	8d e8       	ldi	r24, 0x8D	; 141
    4824:	9c e3       	ldi	r25, 0x3C	; 60
    4826:	90 93 29 01 	sts	0x0129, r25
    482a:	80 93 28 01 	sts	0x0128, r24
}
    482e:	08 95       	ret

00004830 <_nrk_precision_os_timer_reset>:

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4830:	10 92 25 01 	sts	0x0125, r1
    4834:	10 92 24 01 	sts	0x0124, r1
}
    4838:	08 95       	ret

0000483a <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    4852:	01 97       	sbiw	r24, 0x01	; 1
    4854:	91 f7       	brne	.-28     	; 0x483a <nrk_spin_wait_us>

}
    4856:	08 95       	ret

00004858 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    4858:	10 92 21 01 	sts	0x0121, r1
}
    485c:	08 95       	ret

0000485e <_nrk_precision_os_timer_get>:
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
}

inline uint16_t _nrk_precision_os_timer_get()
{
    485e:	df 93       	push	r29
    4860:	cf 93       	push	r28
    4862:	00 d0       	rcall	.+0      	; 0x4864 <_nrk_precision_os_timer_get+0x6>
    4864:	cd b7       	in	r28, 0x3d	; 61
    4866:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    4868:	80 91 24 01 	lds	r24, 0x0124
    486c:	90 91 25 01 	lds	r25, 0x0125
    4870:	9a 83       	std	Y+2, r25	; 0x02
    4872:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    4874:	29 81       	ldd	r18, Y+1	; 0x01
    4876:	3a 81       	ldd	r19, Y+2	; 0x02
}
    4878:	c9 01       	movw	r24, r18
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	cf 91       	pop	r28
    4880:	df 91       	pop	r29
    4882:	08 95       	ret

00004884 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    4884:	10 92 81 00 	sts	0x0081, r1
}
    4888:	08 95       	ret

0000488a <_nrk_high_speed_timer_start>:

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	80 93 81 00 	sts	0x0081, r24
}
    4890:	08 95       	ret

00004892 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4892:	83 b5       	in	r24, 0x23	; 35
    4894:	81 60       	ori	r24, 0x01	; 1
    4896:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    4898:	10 92 85 00 	sts	0x0085, r1
    489c:	10 92 84 00 	sts	0x0084, r1
//  nrk_int_enable();
}
    48a0:	08 95       	ret

000048a2 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    48a2:	df 93       	push	r29
    48a4:	cf 93       	push	r28
    48a6:	00 d0       	rcall	.+0      	; 0x48a8 <_nrk_high_speed_timer_get+0x6>
    48a8:	cd b7       	in	r28, 0x3d	; 61
    48aa:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    48ac:	80 91 84 00 	lds	r24, 0x0084
    48b0:	90 91 85 00 	lds	r25, 0x0085
    48b4:	9a 83       	std	Y+2, r25	; 0x02
    48b6:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    48b8:	29 81       	ldd	r18, Y+1	; 0x01
    48ba:	3a 81       	ldd	r19, Y+2	; 0x02
}
    48bc:	c9 01       	movw	r24, r18
    48be:	0f 90       	pop	r0
    48c0:	0f 90       	pop	r0
    48c2:	cf 91       	pop	r28
    48c4:	df 91       	pop	r29
    48c6:	08 95       	ret

000048c8 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    48c8:	ef 92       	push	r14
    48ca:	ff 92       	push	r15
    48cc:	0f 93       	push	r16
    48ce:	1f 93       	push	r17
    48d0:	cf 93       	push	r28
    48d2:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    48d4:	ec 01       	movw	r28, r24
    48d6:	cc 0f       	add	r28, r28
    48d8:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    48da:	8f ef       	ldi	r24, 0xFF	; 255
    48dc:	c9 37       	cpi	r28, 0x79	; 121
    48de:	d8 07       	cpc	r29, r24
    48e0:	10 f0       	brcs	.+4      	; 0x48e6 <nrk_high_speed_timer_wait+0x1e>
    48e2:	c0 e0       	ldi	r28, 0x00	; 0
    48e4:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    48e6:	7e 01       	movw	r14, r28
    48e8:	00 e0       	ldi	r16, 0x00	; 0
    48ea:	10 e0       	ldi	r17, 0x00	; 0
    48ec:	80 e0       	ldi	r24, 0x00	; 0
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	e6 0e       	add	r14, r22
    48f2:	f7 1e       	adc	r15, r23
    48f4:	08 1f       	adc	r16, r24
    48f6:	19 1f       	adc	r17, r25
if(tmp>65536) 
    48f8:	91 e0       	ldi	r25, 0x01	; 1
    48fa:	e9 16       	cp	r14, r25
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	f9 06       	cpc	r15, r25
    4900:	91 e0       	ldi	r25, 0x01	; 1
    4902:	09 07       	cpc	r16, r25
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	19 07       	cpc	r17, r25
    4908:	68 f0       	brcs	.+26     	; 0x4924 <nrk_high_speed_timer_wait+0x5c>
	{
	tmp-=65536;
    490a:	80 e0       	ldi	r24, 0x00	; 0
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	af ef       	ldi	r26, 0xFF	; 255
    4910:	bf ef       	ldi	r27, 0xFF	; 255
    4912:	e8 0e       	add	r14, r24
    4914:	f9 1e       	adc	r15, r25
    4916:	0a 1f       	adc	r16, r26
    4918:	1b 1f       	adc	r17, r27
	do{}while(_nrk_high_speed_timer_get()>start);
    491a:	0e 94 51 24 	call	0x48a2	; 0x48a2 <_nrk_high_speed_timer_get>
    491e:	c8 17       	cp	r28, r24
    4920:	d9 07       	cpc	r29, r25
    4922:	d8 f3       	brcs	.-10     	; 0x491a <nrk_high_speed_timer_wait+0x52>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    4924:	0e 94 51 24 	call	0x48a2	; 0x48a2 <_nrk_high_speed_timer_get>
    4928:	8e 15       	cp	r24, r14
    492a:	9f 05       	cpc	r25, r15
    492c:	d8 f3       	brcs	.-10     	; 0x4924 <nrk_high_speed_timer_wait+0x5c>
}
    492e:	df 91       	pop	r29
    4930:	cf 91       	pop	r28
    4932:	1f 91       	pop	r17
    4934:	0f 91       	pop	r16
    4936:	ff 90       	pop	r15
    4938:	ef 90       	pop	r14
    493a:	08 95       	ret

0000493c <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    493c:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    4940:	e0 e7       	ldi	r30, 0x70	; 112
    4942:	f0 e0       	ldi	r31, 0x00	; 0
    4944:	80 81       	ld	r24, Z
    4946:	8d 7f       	andi	r24, 0xFD	; 253
    4948:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    494a:	80 81       	ld	r24, Z
    494c:	8e 7f       	andi	r24, 0xFE	; 254
    494e:	80 83       	st	Z, r24
}
    4950:	08 95       	ret

00004952 <_nrk_os_timer_set>:

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    4952:	80 93 b2 00 	sts	0x00B2, r24
}
    4956:	08 95       	ret

00004958 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    4958:	e0 e7       	ldi	r30, 0x70	; 112
    495a:	f0 e0       	ldi	r31, 0x00	; 0
    495c:	80 81       	ld	r24, Z
    495e:	83 60       	ori	r24, 0x03	; 3
    4960:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    4962:	83 e0       	ldi	r24, 0x03	; 3
    4964:	80 93 b1 00 	sts	0x00B1, r24
}
    4968:	08 95       	ret

0000496a <_nrk_os_timer_reset>:

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    496a:	83 b5       	in	r24, 0x23	; 35
    496c:	82 60       	ori	r24, 0x02	; 2
    496e:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    4970:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    4974:	10 92 dd 03 	sts	0x03DD, r1
    _nrk_prev_timer_val=0;
    4978:	10 92 88 04 	sts	0x0488, r1
}
    497c:	08 95       	ret

0000497e <_nrk_setup_timer>:

}


void _nrk_setup_timer() {
  _nrk_prev_timer_val=254;
    497e:	8e ef       	ldi	r24, 0xFE	; 254
    4980:	80 93 88 04 	sts	0x0488, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    4984:	90 e2       	ldi	r25, 0x20	; 32
    4986:	90 93 b6 00 	sts	0x00B6, r25
  OCR2A = _nrk_prev_timer_val;
    498a:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    498e:	83 e0       	ldi	r24, 0x03	; 3
    4990:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    4992:	92 e0       	ldi	r25, 0x02	; 2
    4994:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    4998:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    499c:	93 b5       	in	r25, 0x23	; 35
    499e:	92 60       	ori	r25, 0x02	; 2
    49a0:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    49a2:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    49a4:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    49a6:	83 b5       	in	r24, 0x23	; 35
    49a8:	82 60       	ori	r24, 0x02	; 2
    49aa:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    49ac:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    49b0:	81 e0       	ldi	r24, 0x01	; 1
    49b2:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    49b6:	10 92 85 00 	sts	0x0085, r1
    49ba:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    49be:	83 b5       	in	r24, 0x23	; 35
    49c0:	82 60       	ori	r24, 0x02	; 2
    49c2:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    49c4:	83 b5       	in	r24, 0x23	; 35
    49c6:	81 60       	ori	r24, 0x01	; 1
    49c8:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    49ca:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    49ce:	10 92 25 01 	sts	0x0125, r1
    49d2:	10 92 24 01 	sts	0x0124, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    49d6:	83 b5       	in	r24, 0x23	; 35
    49d8:	82 60       	ori	r24, 0x02	; 2
    49da:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    49dc:	83 b5       	in	r24, 0x23	; 35
    49de:	81 60       	ori	r24, 0x01	; 1
    49e0:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    49e2:	0e 94 b5 24 	call	0x496a	; 0x496a <_nrk_os_timer_reset>
  _nrk_precision_os_timer_reset();
    49e6:	0e 94 18 24 	call	0x4830	; 0x4830 <_nrk_precision_os_timer_reset>
  _nrk_os_timer_start();
    49ea:	0e 94 ac 24 	call	0x4958	; 0x4958 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    49ee:	0e 94 0e 24 	call	0x481c	; 0x481c <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    49f2:	10 92 dd 03 	sts	0x03DD, r1
}
    49f6:	08 95       	ret

000049f8 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    49f8:	80 91 b3 00 	lds	r24, 0x00B3
}
    49fc:	8f 5f       	subi	r24, 0xFF	; 255
    49fe:	08 95       	ret

00004a00 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    4a00:	81 50       	subi	r24, 0x01	; 1
    4a02:	80 93 b3 00 	sts	0x00B3, r24
}
    4a06:	08 95       	ret

00004a08 <nrk_timer_int_stop>:

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4a08:	88 23       	and	r24, r24
    4a0a:	11 f4       	brne	.+4      	; 0x4a10 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    4a0c:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    4a10:	8f ef       	ldi	r24, 0xFF	; 255
    4a12:	08 95       	ret

00004a14 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4a14:	88 23       	and	r24, r24
    4a16:	31 f4       	brne	.+12     	; 0x4a24 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    4a18:	10 92 95 00 	sts	0x0095, r1
    4a1c:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    4a20:	81 e0       	ldi	r24, 0x01	; 1
    4a22:	08 95       	ret
	}
return NRK_ERROR;
    4a24:	8f ef       	ldi	r24, 0xFF	; 255
}
    4a26:	08 95       	ret

00004a28 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4a28:	88 23       	and	r24, r24
    4a2a:	29 f4       	brne	.+10     	; 0x4a36 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    4a2c:	20 91 94 00 	lds	r18, 0x0094
    4a30:	30 91 95 00 	lds	r19, 0x0095
    4a34:	02 c0       	rjmp	.+4      	; 0x4a3a <nrk_timer_int_read+0x12>
	}
return 0;
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0

}
    4a3a:	c9 01       	movw	r24, r18
    4a3c:	08 95       	ret

00004a3e <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    4a3e:	88 23       	and	r24, r24
    4a40:	29 f4       	brne	.+10     	; 0x4a4c <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    4a42:	82 e0       	ldi	r24, 0x02	; 2
    4a44:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    4a48:	81 e0       	ldi	r24, 0x01	; 1
    4a4a:	08 95       	ret
	}
return NRK_ERROR;
    4a4c:	8f ef       	ldi	r24, 0xFF	; 255
}
    4a4e:	08 95       	ret

00004a50 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    4a50:	88 23       	and	r24, r24
    4a52:	b9 f5       	brne	.+110    	; 0x4ac2 <nrk_timer_int_configure+0x72>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    4a54:	cb 01       	movw	r24, r22
    4a56:	01 97       	sbiw	r24, 0x01	; 1
    4a58:	85 30       	cpi	r24, 0x05	; 5
    4a5a:	91 05       	cpc	r25, r1
    4a5c:	10 f4       	brcc	.+4      	; 0x4a62 <nrk_timer_int_configure+0x12>
    4a5e:	60 93 87 04 	sts	0x0487, r22
	TCCR3A = 0;  
    4a62:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    4a66:	88 e0       	ldi	r24, 0x08	; 8
    4a68:	80 93 91 00 	sts	0x0091, r24
  	OCR3AH = (compare_value >> 8) & 0xFF;	
    4a6c:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    4a70:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    4a74:	30 93 db 03 	sts	0x03DB, r19
    4a78:	20 93 da 03 	sts	0x03DA, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    4a7c:	80 91 87 04 	lds	r24, 0x0487
    4a80:	81 30       	cpi	r24, 0x01	; 1
    4a82:	21 f4       	brne	.+8      	; 0x4a8c <nrk_timer_int_configure+0x3c>
    4a84:	80 91 91 00 	lds	r24, 0x0091
    4a88:	81 60       	ori	r24, 0x01	; 1
    4a8a:	0b c0       	rjmp	.+22     	; 0x4aa2 <nrk_timer_int_configure+0x52>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    4a8c:	82 30       	cpi	r24, 0x02	; 2
    4a8e:	21 f4       	brne	.+8      	; 0x4a98 <nrk_timer_int_configure+0x48>
    4a90:	80 91 91 00 	lds	r24, 0x0091
    4a94:	82 60       	ori	r24, 0x02	; 2
    4a96:	05 c0       	rjmp	.+10     	; 0x4aa2 <nrk_timer_int_configure+0x52>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    4a98:	83 30       	cpi	r24, 0x03	; 3
    4a9a:	39 f4       	brne	.+14     	; 0x4aaa <nrk_timer_int_configure+0x5a>
    4a9c:	80 91 91 00 	lds	r24, 0x0091
    4aa0:	83 60       	ori	r24, 0x03	; 3
    4aa2:	80 93 91 00 	sts	0x0091, r24
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4aa6:	81 e0       	ldi	r24, 0x01	; 1
    4aa8:	08 95       	ret
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    4aaa:	84 30       	cpi	r24, 0x04	; 4
    4aac:	21 f4       	brne	.+8      	; 0x4ab6 <nrk_timer_int_configure+0x66>
    4aae:	80 91 91 00 	lds	r24, 0x0091
    4ab2:	84 60       	ori	r24, 0x04	; 4
    4ab4:	f6 cf       	rjmp	.-20     	; 0x4aa2 <nrk_timer_int_configure+0x52>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    4ab6:	85 30       	cpi	r24, 0x05	; 5
    4ab8:	31 f4       	brne	.+12     	; 0x4ac6 <nrk_timer_int_configure+0x76>
    4aba:	80 91 91 00 	lds	r24, 0x0091
    4abe:	85 60       	ori	r24, 0x05	; 5
    4ac0:	f0 cf       	rjmp	.-32     	; 0x4aa2 <nrk_timer_int_configure+0x52>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    4ac2:	8f ef       	ldi	r24, 0xFF	; 255
    4ac4:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4ac6:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    4ac8:	08 95       	ret

00004aca <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    4aca:	80 91 b2 00 	lds	r24, 0x00B2
}
    4ace:	08 95       	ret

00004ad0 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    4ad0:	1f 92       	push	r1
    4ad2:	0f 92       	push	r0
    4ad4:	0f b6       	in	r0, 0x3f	; 63
    4ad6:	0f 92       	push	r0
    4ad8:	0b b6       	in	r0, 0x3b	; 59
    4ada:	0f 92       	push	r0
    4adc:	11 24       	eor	r1, r1
    4ade:	2f 93       	push	r18
    4ae0:	3f 93       	push	r19
    4ae2:	4f 93       	push	r20
    4ae4:	5f 93       	push	r21
    4ae6:	6f 93       	push	r22
    4ae8:	7f 93       	push	r23
    4aea:	8f 93       	push	r24
    4aec:	9f 93       	push	r25
    4aee:	af 93       	push	r26
    4af0:	bf 93       	push	r27
    4af2:	ef 93       	push	r30
    4af4:	ff 93       	push	r31
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4af6:	8a e0       	ldi	r24, 0x0A	; 10
    4af8:	60 e0       	ldi	r22, 0x00	; 0
    4afa:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_kernel_error_add>
    4afe:	ff cf       	rjmp	.-2      	; 0x4afe <__vector_default+0x2e>

00004b00 <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    4b00:	0f 92       	push	r0
    4b02:	0f b6       	in	r0, 0x3f	; 63
    4b04:	0f 92       	push	r0
    4b06:	1f 92       	push	r1
    4b08:	2f 92       	push	r2
    4b0a:	3f 92       	push	r3
    4b0c:	4f 92       	push	r4
    4b0e:	5f 92       	push	r5
    4b10:	6f 92       	push	r6
    4b12:	7f 92       	push	r7
    4b14:	8f 92       	push	r8
    4b16:	9f 92       	push	r9
    4b18:	af 92       	push	r10
    4b1a:	bf 92       	push	r11
    4b1c:	cf 92       	push	r12
    4b1e:	df 92       	push	r13
    4b20:	ef 92       	push	r14
    4b22:	ff 92       	push	r15
    4b24:	0f 93       	push	r16
    4b26:	1f 93       	push	r17
    4b28:	2f 93       	push	r18
    4b2a:	3f 93       	push	r19
    4b2c:	4f 93       	push	r20
    4b2e:	5f 93       	push	r21
    4b30:	6f 93       	push	r22
    4b32:	7f 93       	push	r23
    4b34:	8f 93       	push	r24
    4b36:	9f 93       	push	r25
    4b38:	af 93       	push	r26
    4b3a:	bf 93       	push	r27
    4b3c:	cf 93       	push	r28
    4b3e:	df 93       	push	r29
    4b40:	ef 93       	push	r30
    4b42:	ff 93       	push	r31
    4b44:	a0 91 01 06 	lds	r26, 0x0601
    4b48:	b0 91 02 06 	lds	r27, 0x0602
    4b4c:	0d b6       	in	r0, 0x3d	; 61
    4b4e:	0d 92       	st	X+, r0
    4b50:	0e b6       	in	r0, 0x3e	; 62
    4b52:	0d 92       	st	X+, r0
    4b54:	1f 92       	push	r1
    4b56:	a0 91 85 04 	lds	r26, 0x0485
    4b5a:	b0 91 86 04 	lds	r27, 0x0486
    4b5e:	1e 90       	ld	r1, -X
    4b60:	be bf       	out	0x3e, r27	; 62
    4b62:	ad bf       	out	0x3d, r26	; 61
    4b64:	08 95       	ret

00004b66 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    4b66:	1f 92       	push	r1
    4b68:	0f 92       	push	r0
    4b6a:	0f b6       	in	r0, 0x3f	; 63
    4b6c:	0f 92       	push	r0
    4b6e:	0b b6       	in	r0, 0x3b	; 59
    4b70:	0f 92       	push	r0
    4b72:	11 24       	eor	r1, r1
    4b74:	2f 93       	push	r18
    4b76:	3f 93       	push	r19
    4b78:	4f 93       	push	r20
    4b7a:	5f 93       	push	r21
    4b7c:	6f 93       	push	r22
    4b7e:	7f 93       	push	r23
    4b80:	8f 93       	push	r24
    4b82:	9f 93       	push	r25
    4b84:	af 93       	push	r26
    4b86:	bf 93       	push	r27
    4b88:	ef 93       	push	r30
    4b8a:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    4b8c:	e0 91 da 03 	lds	r30, 0x03DA
    4b90:	f0 91 db 03 	lds	r31, 0x03DB
    4b94:	30 97       	sbiw	r30, 0x00	; 0
    4b96:	11 f0       	breq	.+4      	; 0x4b9c <__vector_32+0x36>
    4b98:	09 95       	icall
    4b9a:	04 c0       	rjmp	.+8      	; 0x4ba4 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4b9c:	8a e0       	ldi	r24, 0x0A	; 10
    4b9e:	60 e0       	ldi	r22, 0x00	; 0
    4ba0:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_kernel_error_add>
	return;  	
}
    4ba4:	ff 91       	pop	r31
    4ba6:	ef 91       	pop	r30
    4ba8:	bf 91       	pop	r27
    4baa:	af 91       	pop	r26
    4bac:	9f 91       	pop	r25
    4bae:	8f 91       	pop	r24
    4bb0:	7f 91       	pop	r23
    4bb2:	6f 91       	pop	r22
    4bb4:	5f 91       	pop	r21
    4bb6:	4f 91       	pop	r20
    4bb8:	3f 91       	pop	r19
    4bba:	2f 91       	pop	r18
    4bbc:	0f 90       	pop	r0
    4bbe:	0b be       	out	0x3b, r0	; 59
    4bc0:	0f 90       	pop	r0
    4bc2:	0f be       	out	0x3f, r0	; 63
    4bc4:	0f 90       	pop	r0
    4bc6:	1f 90       	pop	r1
    4bc8:	18 95       	reti

00004bca <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    4bca:	1f 92       	push	r1
    4bcc:	0f 92       	push	r0
    4bce:	0f b6       	in	r0, 0x3f	; 63
    4bd0:	0f 92       	push	r0
    4bd2:	11 24       	eor	r1, r1

	return;  	
} 
    4bd4:	0f 90       	pop	r0
    4bd6:	0f be       	out	0x3f, r0	; 63
    4bd8:	0f 90       	pop	r0
    4bda:	1f 90       	pop	r1
    4bdc:	18 95       	reti

00004bde <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    4bde:	04 b6       	in	r0, 0x34	; 52
    4be0:	03 fc       	sbrc	r0, 3
    4be2:	02 c0       	rjmp	.+4      	; 0x4be8 <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    4be4:	80 e0       	ldi	r24, 0x00	; 0
    4be6:	01 c0       	rjmp	.+2      	; 0x4bea <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    4be8:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    4bea:	04 b6       	in	r0, 0x34	; 52
    4bec:	02 fe       	sbrs	r0, 2
    4bee:	06 c0       	rjmp	.+12     	; 0x4bfc <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    4bf0:	94 b7       	in	r25, 0x34	; 52
    4bf2:	9b 7f       	andi	r25, 0xFB	; 251
    4bf4:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    4bf6:	04 b6       	in	r0, 0x34	; 52
    4bf8:	00 fe       	sbrs	r0, 0
		error|=0x04;
    4bfa:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    4bfc:	04 b6       	in	r0, 0x34	; 52
    4bfe:	01 fe       	sbrs	r0, 1
    4c00:	05 c0       	rjmp	.+10     	; 0x4c0c <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    4c02:	94 b7       	in	r25, 0x34	; 52
    4c04:	9d 7f       	andi	r25, 0xFD	; 253
    4c06:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    4c08:	82 60       	ori	r24, 0x02	; 2
    4c0a:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    4c0c:	88 23       	and	r24, r24
    4c0e:	61 f4       	brne	.+24     	; 0x4c28 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    4c10:	04 b6       	in	r0, 0x34	; 52
    4c12:	00 fe       	sbrs	r0, 0
    4c14:	04 c0       	rjmp	.+8      	; 0x4c1e <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    4c16:	94 b7       	in	r25, 0x34	; 52
    4c18:	9e 7f       	andi	r25, 0xFE	; 254
    4c1a:	94 bf       	out	0x34, r25	; 52
    4c1c:	01 c0       	rjmp	.+2      	; 0x4c20 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    4c1e:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    4c20:	90 91 b0 00 	lds	r25, 0x00B0
    4c24:	91 11       	cpse	r25, r1
    4c26:	81 60       	ori	r24, 0x01	; 1

return error;
}
    4c28:	08 95       	ret

00004c2a <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    4c2a:	88 23       	and	r24, r24
    4c2c:	11 f4       	brne	.+4      	; 0x4c32 <nrk_ext_int_enable+0x8>
    4c2e:	e8 9a       	sbi	0x1d, 0	; 29
    4c30:	39 c0       	rjmp	.+114    	; 0x4ca4 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4c32:	81 30       	cpi	r24, 0x01	; 1
    4c34:	11 f4       	brne	.+4      	; 0x4c3a <nrk_ext_int_enable+0x10>
    4c36:	e9 9a       	sbi	0x1d, 1	; 29
    4c38:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    4c3a:	82 30       	cpi	r24, 0x02	; 2
    4c3c:	11 f4       	brne	.+4      	; 0x4c42 <nrk_ext_int_enable+0x18>
    4c3e:	ea 9a       	sbi	0x1d, 2	; 29
    4c40:	31 c0       	rjmp	.+98     	; 0x4ca4 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4c42:	83 30       	cpi	r24, 0x03	; 3
    4c44:	21 f4       	brne	.+8      	; 0x4c4e <nrk_ext_int_enable+0x24>
    4c46:	80 91 6b 00 	lds	r24, 0x006B
    4c4a:	81 60       	ori	r24, 0x01	; 1
    4c4c:	29 c0       	rjmp	.+82     	; 0x4ca0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4c4e:	84 30       	cpi	r24, 0x04	; 4
    4c50:	21 f4       	brne	.+8      	; 0x4c5a <nrk_ext_int_enable+0x30>
    4c52:	80 91 6b 00 	lds	r24, 0x006B
    4c56:	82 60       	ori	r24, 0x02	; 2
    4c58:	23 c0       	rjmp	.+70     	; 0x4ca0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    4c5a:	85 30       	cpi	r24, 0x05	; 5
    4c5c:	21 f4       	brne	.+8      	; 0x4c66 <nrk_ext_int_enable+0x3c>
    4c5e:	80 91 6b 00 	lds	r24, 0x006B
    4c62:	84 60       	ori	r24, 0x04	; 4
    4c64:	1d c0       	rjmp	.+58     	; 0x4ca0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    4c66:	86 30       	cpi	r24, 0x06	; 6
    4c68:	21 f4       	brne	.+8      	; 0x4c72 <nrk_ext_int_enable+0x48>
    4c6a:	80 91 6b 00 	lds	r24, 0x006B
    4c6e:	88 60       	ori	r24, 0x08	; 8
    4c70:	17 c0       	rjmp	.+46     	; 0x4ca0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4c72:	87 30       	cpi	r24, 0x07	; 7
    4c74:	21 f4       	brne	.+8      	; 0x4c7e <nrk_ext_int_enable+0x54>
    4c76:	80 91 6b 00 	lds	r24, 0x006B
    4c7a:	80 61       	ori	r24, 0x10	; 16
    4c7c:	11 c0       	rjmp	.+34     	; 0x4ca0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    4c7e:	88 30       	cpi	r24, 0x08	; 8
    4c80:	21 f4       	brne	.+8      	; 0x4c8a <nrk_ext_int_enable+0x60>
    4c82:	80 91 6b 00 	lds	r24, 0x006B
    4c86:	80 62       	ori	r24, 0x20	; 32
    4c88:	0b c0       	rjmp	.+22     	; 0x4ca0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    4c8a:	89 30       	cpi	r24, 0x09	; 9
    4c8c:	21 f4       	brne	.+8      	; 0x4c96 <nrk_ext_int_enable+0x6c>
    4c8e:	80 91 6b 00 	lds	r24, 0x006B
    4c92:	80 64       	ori	r24, 0x40	; 64
    4c94:	05 c0       	rjmp	.+10     	; 0x4ca0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    4c96:	8a 30       	cpi	r24, 0x0A	; 10
    4c98:	39 f4       	brne	.+14     	; 0x4ca8 <nrk_ext_int_enable+0x7e>
    4c9a:	80 91 6b 00 	lds	r24, 0x006B
    4c9e:	80 68       	ori	r24, 0x80	; 128
    4ca0:	80 93 6b 00 	sts	0x006B, r24
    4ca4:	81 e0       	ldi	r24, 0x01	; 1
    4ca6:	08 95       	ret
return NRK_ERROR;
    4ca8:	8f ef       	ldi	r24, 0xFF	; 255
}
    4caa:	08 95       	ret

00004cac <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    4cac:	88 23       	and	r24, r24
    4cae:	11 f4       	brne	.+4      	; 0x4cb4 <nrk_ext_int_disable+0x8>
    4cb0:	e8 98       	cbi	0x1d, 0	; 29
    4cb2:	39 c0       	rjmp	.+114    	; 0x4d26 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4cb4:	81 30       	cpi	r24, 0x01	; 1
    4cb6:	11 f4       	brne	.+4      	; 0x4cbc <nrk_ext_int_disable+0x10>
    4cb8:	e9 98       	cbi	0x1d, 1	; 29
    4cba:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4cbc:	82 30       	cpi	r24, 0x02	; 2
    4cbe:	11 f4       	brne	.+4      	; 0x4cc4 <nrk_ext_int_disable+0x18>
    4cc0:	e9 98       	cbi	0x1d, 1	; 29
    4cc2:	31 c0       	rjmp	.+98     	; 0x4d26 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    4cc4:	83 30       	cpi	r24, 0x03	; 3
    4cc6:	21 f4       	brne	.+8      	; 0x4cd0 <nrk_ext_int_disable+0x24>
    4cc8:	80 91 6b 00 	lds	r24, 0x006B
    4ccc:	8e 7f       	andi	r24, 0xFE	; 254
    4cce:	29 c0       	rjmp	.+82     	; 0x4d22 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    4cd0:	84 30       	cpi	r24, 0x04	; 4
    4cd2:	21 f4       	brne	.+8      	; 0x4cdc <nrk_ext_int_disable+0x30>
    4cd4:	80 91 6b 00 	lds	r24, 0x006B
    4cd8:	8d 7f       	andi	r24, 0xFD	; 253
    4cda:	23 c0       	rjmp	.+70     	; 0x4d22 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    4cdc:	85 30       	cpi	r24, 0x05	; 5
    4cde:	21 f4       	brne	.+8      	; 0x4ce8 <nrk_ext_int_disable+0x3c>
    4ce0:	80 91 6b 00 	lds	r24, 0x006B
    4ce4:	8b 7f       	andi	r24, 0xFB	; 251
    4ce6:	1d c0       	rjmp	.+58     	; 0x4d22 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4ce8:	86 30       	cpi	r24, 0x06	; 6
    4cea:	21 f4       	brne	.+8      	; 0x4cf4 <nrk_ext_int_disable+0x48>
    4cec:	80 91 6b 00 	lds	r24, 0x006B
    4cf0:	87 7f       	andi	r24, 0xF7	; 247
    4cf2:	17 c0       	rjmp	.+46     	; 0x4d22 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    4cf4:	87 30       	cpi	r24, 0x07	; 7
    4cf6:	21 f4       	brne	.+8      	; 0x4d00 <nrk_ext_int_disable+0x54>
    4cf8:	80 91 6b 00 	lds	r24, 0x006B
    4cfc:	8f 7e       	andi	r24, 0xEF	; 239
    4cfe:	11 c0       	rjmp	.+34     	; 0x4d22 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    4d00:	88 30       	cpi	r24, 0x08	; 8
    4d02:	21 f4       	brne	.+8      	; 0x4d0c <nrk_ext_int_disable+0x60>
    4d04:	80 91 6b 00 	lds	r24, 0x006B
    4d08:	8f 7d       	andi	r24, 0xDF	; 223
    4d0a:	0b c0       	rjmp	.+22     	; 0x4d22 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4d0c:	89 30       	cpi	r24, 0x09	; 9
    4d0e:	21 f4       	brne	.+8      	; 0x4d18 <nrk_ext_int_disable+0x6c>
    4d10:	80 91 6b 00 	lds	r24, 0x006B
    4d14:	8f 7b       	andi	r24, 0xBF	; 191
    4d16:	05 c0       	rjmp	.+10     	; 0x4d22 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4d18:	8a 30       	cpi	r24, 0x0A	; 10
    4d1a:	39 f4       	brne	.+14     	; 0x4d2a <nrk_ext_int_disable+0x7e>
    4d1c:	80 91 6b 00 	lds	r24, 0x006B
    4d20:	8f 77       	andi	r24, 0x7F	; 127
    4d22:	80 93 6b 00 	sts	0x006B, r24
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	08 95       	ret
return NRK_ERROR;
    4d2a:	8f ef       	ldi	r24, 0xFF	; 255
}
    4d2c:	08 95       	ret

00004d2e <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    4d2e:	88 23       	and	r24, r24
    4d30:	39 f5       	brne	.+78     	; 0x4d80 <nrk_ext_int_configure+0x52>
	{
	ext_int0_callback=callback_func;
    4d32:	50 93 bc 06 	sts	0x06BC, r21
    4d36:	40 93 bb 06 	sts	0x06BB, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4d3a:	66 23       	and	r22, r22
    4d3c:	21 f4       	brne	.+8      	; 0x4d46 <nrk_ext_int_configure+0x18>
    4d3e:	80 91 69 00 	lds	r24, 0x0069
    4d42:	8c 7f       	andi	r24, 0xFC	; 252
    4d44:	66 c0       	rjmp	.+204    	; 0x4e12 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    4d46:	61 30       	cpi	r22, 0x01	; 1
    4d48:	49 f4       	brne	.+18     	; 0x4d5c <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    4d4a:	80 91 69 00 	lds	r24, 0x0069
    4d4e:	8d 7f       	andi	r24, 0xFD	; 253
    4d50:	80 93 69 00 	sts	0x0069, r24
    4d54:	80 91 69 00 	lds	r24, 0x0069
    4d58:	81 60       	ori	r24, 0x01	; 1
    4d5a:	5b c0       	rjmp	.+182    	; 0x4e12 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    4d5c:	62 30       	cpi	r22, 0x02	; 2
    4d5e:	49 f4       	brne	.+18     	; 0x4d72 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4d60:	80 91 69 00 	lds	r24, 0x0069
    4d64:	82 60       	ori	r24, 0x02	; 2
    4d66:	80 93 69 00 	sts	0x0069, r24
    4d6a:	80 91 69 00 	lds	r24, 0x0069
    4d6e:	8e 7f       	andi	r24, 0xFE	; 254
    4d70:	50 c0       	rjmp	.+160    	; 0x4e12 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    4d72:	63 30       	cpi	r22, 0x03	; 3
    4d74:	09 f0       	breq	.+2      	; 0x4d78 <nrk_ext_int_configure+0x4a>
    4d76:	62 c0       	rjmp	.+196    	; 0x4e3c <nrk_ext_int_configure+0x10e>
    4d78:	80 91 69 00 	lds	r24, 0x0069
    4d7c:	83 60       	ori	r24, 0x03	; 3
    4d7e:	49 c0       	rjmp	.+146    	; 0x4e12 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    4d80:	81 30       	cpi	r24, 0x01	; 1
    4d82:	31 f5       	brne	.+76     	; 0x4dd0 <nrk_ext_int_configure+0xa2>
	{
	ext_int1_callback=callback_func;
    4d84:	50 93 ba 06 	sts	0x06BA, r21
    4d88:	40 93 b9 06 	sts	0x06B9, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    4d8c:	66 23       	and	r22, r22
    4d8e:	21 f4       	brne	.+8      	; 0x4d98 <nrk_ext_int_configure+0x6a>
    4d90:	80 91 69 00 	lds	r24, 0x0069
    4d94:	83 7f       	andi	r24, 0xF3	; 243
    4d96:	3d c0       	rjmp	.+122    	; 0x4e12 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    4d98:	61 30       	cpi	r22, 0x01	; 1
    4d9a:	49 f4       	brne	.+18     	; 0x4dae <nrk_ext_int_configure+0x80>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    4d9c:	80 91 69 00 	lds	r24, 0x0069
    4da0:	87 7f       	andi	r24, 0xF7	; 247
    4da2:	80 93 69 00 	sts	0x0069, r24
    4da6:	80 91 69 00 	lds	r24, 0x0069
    4daa:	84 60       	ori	r24, 0x04	; 4
    4dac:	32 c0       	rjmp	.+100    	; 0x4e12 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    4dae:	62 30       	cpi	r22, 0x02	; 2
    4db0:	49 f4       	brne	.+18     	; 0x4dc4 <nrk_ext_int_configure+0x96>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    4db2:	80 91 69 00 	lds	r24, 0x0069
    4db6:	88 60       	ori	r24, 0x08	; 8
    4db8:	80 93 69 00 	sts	0x0069, r24
    4dbc:	80 91 69 00 	lds	r24, 0x0069
    4dc0:	8b 7f       	andi	r24, 0xFB	; 251
    4dc2:	27 c0       	rjmp	.+78     	; 0x4e12 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    4dc4:	63 30       	cpi	r22, 0x03	; 3
    4dc6:	d1 f5       	brne	.+116    	; 0x4e3c <nrk_ext_int_configure+0x10e>
    4dc8:	80 91 69 00 	lds	r24, 0x0069
    4dcc:	8c 60       	ori	r24, 0x0C	; 12
    4dce:	21 c0       	rjmp	.+66     	; 0x4e12 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    4dd0:	82 30       	cpi	r24, 0x02	; 2
    4dd2:	41 f5       	brne	.+80     	; 0x4e24 <nrk_ext_int_configure+0xf6>
	{
	ext_int1_callback=callback_func;
    4dd4:	50 93 ba 06 	sts	0x06BA, r21
    4dd8:	40 93 b9 06 	sts	0x06B9, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    4ddc:	66 23       	and	r22, r22
    4dde:	21 f4       	brne	.+8      	; 0x4de8 <nrk_ext_int_configure+0xba>
    4de0:	80 91 69 00 	lds	r24, 0x0069
    4de4:	8f 7c       	andi	r24, 0xCF	; 207
    4de6:	15 c0       	rjmp	.+42     	; 0x4e12 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_LEVEL_TRIGGER) 
    4de8:	61 30       	cpi	r22, 0x01	; 1
    4dea:	49 f4       	brne	.+18     	; 0x4dfe <nrk_ext_int_configure+0xd0>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    4dec:	80 91 69 00 	lds	r24, 0x0069
    4df0:	8f 7d       	andi	r24, 0xDF	; 223
    4df2:	80 93 69 00 	sts	0x0069, r24
    4df6:	80 91 69 00 	lds	r24, 0x0069
    4dfa:	80 61       	ori	r24, 0x10	; 16
    4dfc:	0a c0       	rjmp	.+20     	; 0x4e12 <nrk_ext_int_configure+0xe4>
	if(mode==NRK_FALLING_EDGE) 
    4dfe:	62 30       	cpi	r22, 0x02	; 2
    4e00:	59 f4       	brne	.+22     	; 0x4e18 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    4e02:	80 91 69 00 	lds	r24, 0x0069
    4e06:	80 62       	ori	r24, 0x20	; 32
    4e08:	80 93 69 00 	sts	0x0069, r24
    4e0c:	80 91 69 00 	lds	r24, 0x0069
    4e10:	8f 7e       	andi	r24, 0xEF	; 239
    4e12:	80 93 69 00 	sts	0x0069, r24
    4e16:	12 c0       	rjmp	.+36     	; 0x4e3c <nrk_ext_int_configure+0x10e>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    4e18:	63 30       	cpi	r22, 0x03	; 3
    4e1a:	81 f4       	brne	.+32     	; 0x4e3c <nrk_ext_int_configure+0x10e>
    4e1c:	80 91 69 00 	lds	r24, 0x0069
    4e20:	80 63       	ori	r24, 0x30	; 48
    4e22:	f7 cf       	rjmp	.-18     	; 0x4e12 <nrk_ext_int_configure+0xe4>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4e24:	83 50       	subi	r24, 0x03	; 3
    4e26:	88 30       	cpi	r24, 0x08	; 8
    4e28:	58 f4       	brcc	.+22     	; 0x4e40 <nrk_ext_int_configure+0x112>
	PCICR |= BM(PCIE0);	
    4e2a:	80 91 68 00 	lds	r24, 0x0068
    4e2e:	81 60       	ori	r24, 0x01	; 1
    4e30:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4e34:	50 93 c0 06 	sts	0x06C0, r21
    4e38:	40 93 bf 06 	sts	0x06BF, r20
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
	return NRK_OK;
    4e3c:	81 e0       	ldi	r24, 0x01	; 1
    4e3e:	08 95       	ret
if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
	PCICR |= BM(PCIE0);	
	pc_int0_callback=callback_func;
	return NRK_OK;
	}
return NRK_ERROR;
    4e40:	8f ef       	ldi	r24, 0xFF	; 255
}
    4e42:	08 95       	ret

00004e44 <__vector_9>:


SIGNAL(PCINT0_vect) {
    4e44:	1f 92       	push	r1
    4e46:	0f 92       	push	r0
    4e48:	0f b6       	in	r0, 0x3f	; 63
    4e4a:	0f 92       	push	r0
    4e4c:	0b b6       	in	r0, 0x3b	; 59
    4e4e:	0f 92       	push	r0
    4e50:	11 24       	eor	r1, r1
    4e52:	2f 93       	push	r18
    4e54:	3f 93       	push	r19
    4e56:	4f 93       	push	r20
    4e58:	5f 93       	push	r21
    4e5a:	6f 93       	push	r22
    4e5c:	7f 93       	push	r23
    4e5e:	8f 93       	push	r24
    4e60:	9f 93       	push	r25
    4e62:	af 93       	push	r26
    4e64:	bf 93       	push	r27
    4e66:	ef 93       	push	r30
    4e68:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    4e6a:	e0 91 bf 06 	lds	r30, 0x06BF
    4e6e:	f0 91 c0 06 	lds	r31, 0x06C0
    4e72:	30 97       	sbiw	r30, 0x00	; 0
    4e74:	11 f0       	breq	.+4      	; 0x4e7a <__vector_9+0x36>
    4e76:	09 95       	icall
    4e78:	04 c0       	rjmp	.+8      	; 0x4e82 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4e7a:	8a e0       	ldi	r24, 0x0A	; 10
    4e7c:	60 e0       	ldi	r22, 0x00	; 0
    4e7e:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_kernel_error_add>
	return;  	
}
    4e82:	ff 91       	pop	r31
    4e84:	ef 91       	pop	r30
    4e86:	bf 91       	pop	r27
    4e88:	af 91       	pop	r26
    4e8a:	9f 91       	pop	r25
    4e8c:	8f 91       	pop	r24
    4e8e:	7f 91       	pop	r23
    4e90:	6f 91       	pop	r22
    4e92:	5f 91       	pop	r21
    4e94:	4f 91       	pop	r20
    4e96:	3f 91       	pop	r19
    4e98:	2f 91       	pop	r18
    4e9a:	0f 90       	pop	r0
    4e9c:	0b be       	out	0x3b, r0	; 59
    4e9e:	0f 90       	pop	r0
    4ea0:	0f be       	out	0x3f, r0	; 63
    4ea2:	0f 90       	pop	r0
    4ea4:	1f 90       	pop	r1
    4ea6:	18 95       	reti

00004ea8 <__vector_1>:


SIGNAL(INT0_vect) {
    4ea8:	1f 92       	push	r1
    4eaa:	0f 92       	push	r0
    4eac:	0f b6       	in	r0, 0x3f	; 63
    4eae:	0f 92       	push	r0
    4eb0:	0b b6       	in	r0, 0x3b	; 59
    4eb2:	0f 92       	push	r0
    4eb4:	11 24       	eor	r1, r1
    4eb6:	2f 93       	push	r18
    4eb8:	3f 93       	push	r19
    4eba:	4f 93       	push	r20
    4ebc:	5f 93       	push	r21
    4ebe:	6f 93       	push	r22
    4ec0:	7f 93       	push	r23
    4ec2:	8f 93       	push	r24
    4ec4:	9f 93       	push	r25
    4ec6:	af 93       	push	r26
    4ec8:	bf 93       	push	r27
    4eca:	ef 93       	push	r30
    4ecc:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    4ece:	e0 91 bb 06 	lds	r30, 0x06BB
    4ed2:	f0 91 bc 06 	lds	r31, 0x06BC
    4ed6:	30 97       	sbiw	r30, 0x00	; 0
    4ed8:	11 f0       	breq	.+4      	; 0x4ede <__vector_1+0x36>
    4eda:	09 95       	icall
    4edc:	04 c0       	rjmp	.+8      	; 0x4ee6 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4ede:	8a e0       	ldi	r24, 0x0A	; 10
    4ee0:	60 e0       	ldi	r22, 0x00	; 0
    4ee2:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <nrk_kernel_error_add>
	return;  	
}
    4ee6:	ff 91       	pop	r31
    4ee8:	ef 91       	pop	r30
    4eea:	bf 91       	pop	r27
    4eec:	af 91       	pop	r26
    4eee:	9f 91       	pop	r25
    4ef0:	8f 91       	pop	r24
    4ef2:	7f 91       	pop	r23
    4ef4:	6f 91       	pop	r22
    4ef6:	5f 91       	pop	r21
    4ef8:	4f 91       	pop	r20
    4efa:	3f 91       	pop	r19
    4efc:	2f 91       	pop	r18
    4efe:	0f 90       	pop	r0
    4f00:	0b be       	out	0x3b, r0	; 59
    4f02:	0f 90       	pop	r0
    4f04:	0f be       	out	0x3f, r0	; 63
    4f06:	0f 90       	pop	r0
    4f08:	1f 90       	pop	r1
    4f0a:	18 95       	reti

00004f0c <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    4f0c:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4f10:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4f12:	84 b7       	in	r24, 0x34	; 52
    4f14:	87 7f       	andi	r24, 0xF7	; 247
    4f16:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4f18:	e0 e6       	ldi	r30, 0x60	; 96
    4f1a:	f0 e0       	ldi	r31, 0x00	; 0
    4f1c:	80 81       	ld	r24, Z
    4f1e:	88 61       	ori	r24, 0x18	; 24
    4f20:	80 83       	st	Z, r24
WDTCSR = 0;
    4f22:	10 82       	st	Z, r1
nrk_int_enable();
    4f24:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>
}
    4f28:	08 95       	ret

00004f2a <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    4f2a:	0e 94 0d 0c 	call	0x181a	; 0x181a <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4f2e:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4f30:	84 b7       	in	r24, 0x34	; 52
    4f32:	87 7f       	andi	r24, 0xF7	; 247
    4f34:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4f36:	e0 e6       	ldi	r30, 0x60	; 96
    4f38:	f0 e0       	ldi	r31, 0x00	; 0
    4f3a:	80 81       	ld	r24, Z
    4f3c:	88 61       	ori	r24, 0x18	; 24
    4f3e:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4f40:	8d e0       	ldi	r24, 0x0D	; 13
    4f42:	80 83       	st	Z, r24
nrk_int_enable();
    4f44:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>
}
    4f48:	08 95       	ret

00004f4a <nrk_watchdog_check>:

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4f4a:	04 b6       	in	r0, 0x34	; 52
    4f4c:	03 fc       	sbrc	r0, 3
    4f4e:	02 c0       	rjmp	.+4      	; 0x4f54 <nrk_watchdog_check+0xa>
    4f50:	81 e0       	ldi	r24, 0x01	; 1
    4f52:	08 95       	ret
return NRK_ERROR;
    4f54:	8f ef       	ldi	r24, 0xFF	; 255
}
    4f56:	08 95       	ret

00004f58 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    4f58:	a8 95       	wdr

}
    4f5a:	08 95       	ret

00004f5c <nrk_battery_save>:
        nrk_led_clr(2);
        nrk_led_clr(3);
        SET_VREG_INACTIVE();
        nrk_sleep();
#endif
}
    4f5c:	08 95       	ret

00004f5e <nrk_sleep>:

void nrk_sleep()
{

    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4f5e:	83 b7       	in	r24, 0x33	; 51
    4f60:	81 7f       	andi	r24, 0xF1	; 241
    4f62:	86 60       	ori	r24, 0x06	; 6
    4f64:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4f66:	83 b7       	in	r24, 0x33	; 51
    4f68:	81 60       	ori	r24, 0x01	; 1
    4f6a:	83 bf       	out	0x33, r24	; 51
    4f6c:	88 95       	sleep
    4f6e:	83 b7       	in	r24, 0x33	; 51
    4f70:	8e 7f       	andi	r24, 0xFE	; 254
    4f72:	83 bf       	out	0x33, r24	; 51

}
    4f74:	08 95       	ret

00004f76 <nrk_idle>:

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4f76:	83 b7       	in	r24, 0x33	; 51
    4f78:	81 7f       	andi	r24, 0xF1	; 241
    4f7a:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4f7c:	83 b7       	in	r24, 0x33	; 51
    4f7e:	81 60       	ori	r24, 0x01	; 1
    4f80:	83 bf       	out	0x33, r24	; 51
    4f82:	88 95       	sleep
    4f84:	83 b7       	in	r24, 0x33	; 51
    4f86:	8e 7f       	andi	r24, 0xFE	; 254
    4f88:	83 bf       	out	0x33, r24	; 51

}
    4f8a:	08 95       	ret

00004f8c <nrk_task_set_entry_function>:

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    4f8c:	fc 01       	movw	r30, r24
    4f8e:	76 83       	std	Z+6, r23	; 0x06
    4f90:	65 83       	std	Z+5, r22	; 0x05
}
    4f92:	08 95       	ret

00004f94 <nrk_task_set_stk>:

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4f94:	ef 92       	push	r14
    4f96:	ff 92       	push	r15
    4f98:	0f 93       	push	r16
    4f9a:	1f 93       	push	r17
    4f9c:	cf 93       	push	r28
    4f9e:	df 93       	push	r29
    4fa0:	ec 01       	movw	r28, r24
    4fa2:	8b 01       	movw	r16, r22
    4fa4:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4fa6:	40 32       	cpi	r20, 0x20	; 32
    4fa8:	51 05       	cpc	r21, r1
    4faa:	18 f4       	brcc	.+6      	; 0x4fb2 <nrk_task_set_stk+0x1e>
    4fac:	81 e1       	ldi	r24, 0x11	; 17
    4fae:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4fb2:	08 94       	sec
    4fb4:	e1 08       	sbc	r14, r1
    4fb6:	f1 08       	sbc	r15, r1
    4fb8:	e0 0e       	add	r14, r16
    4fba:	f1 1e       	adc	r15, r17
    4fbc:	fa 82       	std	Y+2, r15	; 0x02
    4fbe:	e9 82       	std	Y+1, r14	; 0x01
task->Pbos = (void *) &stk_base[0];
    4fc0:	1c 83       	std	Y+4, r17	; 0x04
    4fc2:	0b 83       	std	Y+3, r16	; 0x03

}
    4fc4:	df 91       	pop	r29
    4fc6:	cf 91       	pop	r28
    4fc8:	1f 91       	pop	r17
    4fca:	0f 91       	pop	r16
    4fcc:	ff 90       	pop	r15
    4fce:	ef 90       	pop	r14
    4fd0:	08 95       	ret

00004fd2 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    4fd2:	25 e5       	ldi	r18, 0x55	; 85
    4fd4:	fa 01       	movw	r30, r20
    4fd6:	20 83       	st	Z, r18
    stk    = (unsigned int *)ptos;          /* Load stack pointer */
    4fd8:	fb 01       	movw	r30, r22
    *(--stk) = 0x4748;   // G H                      
    *(--stk) = 0x4546;   // E F                    
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    4fda:	32 97       	sbiw	r30, 0x02	; 2
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4fdc:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    4fde:	81 83       	std	Z+1, r24	; 0x01
	
    *(--stk) = 0;
    4fe0:	12 92       	st	-Z, r1
    4fe2:	12 92       	st	-Z, r1
    *(--stk) = 0;       
    4fe4:	12 92       	st	-Z, r1
    4fe6:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4fe8:	12 92       	st	-Z, r1
    4fea:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4fec:	12 92       	st	-Z, r1
    4fee:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    4ff0:	12 92       	st	-Z, r1
    4ff2:	12 92       	st	-Z, r1
    *(--stk) = 0;                         
    4ff4:	12 92       	st	-Z, r1
    4ff6:	12 92       	st	-Z, r1
    *(--stk) = 0;                        
    4ff8:	12 92       	st	-Z, r1
    4ffa:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    4ffc:	12 92       	st	-Z, r1
    4ffe:	12 92       	st	-Z, r1

    *(--stk) = 0; 
    5000:	12 92       	st	-Z, r1
    5002:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    5004:	12 92       	st	-Z, r1
    5006:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    5008:	12 92       	st	-Z, r1
    500a:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    500c:	12 92       	st	-Z, r1
    500e:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    5010:	12 92       	st	-Z, r1
    5012:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    5014:	12 92       	st	-Z, r1
    5016:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    5018:	12 92       	st	-Z, r1
    501a:	12 92       	st	-Z, r1
    *(--stk) = 0; 
    501c:	12 92       	st	-Z, r1
    501e:	12 92       	st	-Z, r1
    *(--stk) = 0;
    5020:	12 92       	st	-Z, r1
    5022:	12 92       	st	-Z, r1


    return ((void *)stk);
}
    5024:	cf 01       	movw	r24, r30
    5026:	08 95       	ret

00005028 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    5028:	85 e5       	ldi	r24, 0x55	; 85
    502a:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    502e:	ee ef       	ldi	r30, 0xFE	; 254
    5030:	f1 e4       	ldi	r31, 0x41	; 65
    5032:	f0 93 86 04 	sts	0x0486, r31
    5036:	e0 93 85 04 	sts	0x0485, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    503a:	86 e0       	ldi	r24, 0x06	; 6
    503c:	9e e0       	ldi	r25, 0x0E	; 14
    503e:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5040:	80 93 ff 41 	sts	0x41FF, r24

}
    5044:	08 95       	ret

00005046 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5046:	86 e0       	ldi	r24, 0x06	; 6
    5048:	9e e0       	ldi	r25, 0x0E	; 14
    504a:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    504e:	80 93 ff 41 	sts	0x41FF, r24
}
    5052:	08 95       	ret

00005054 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    5054:	0e 94 bf 24 	call	0x497e	; 0x497e <_nrk_setup_timer>
  nrk_int_enable();  
    5058:	0e 94 0f 0c 	call	0x181e	; 0x181e <nrk_int_enable>
	
}
    505c:	08 95       	ret

0000505e <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    505e:	a0 91 ea 05 	lds	r26, 0x05EA
	lds r27,nrk_high_ready_TCB+1
    5062:	b0 91 eb 05 	lds	r27, 0x05EB

    	;x points to &OSTCB[x]
    
	ld r28,x+
    5066:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    5068:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    506a:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    506c:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    506e:	ff 91       	pop	r31
	pop r30
    5070:	ef 91       	pop	r30
	pop r29
    5072:	df 91       	pop	r29
	pop r28
    5074:	cf 91       	pop	r28
	pop r27
    5076:	bf 91       	pop	r27
	pop r26
    5078:	af 91       	pop	r26
	pop r25
    507a:	9f 91       	pop	r25
	pop r24			
    507c:	8f 91       	pop	r24
	pop r23
    507e:	7f 91       	pop	r23
	pop r22
    5080:	6f 91       	pop	r22
	pop r21
    5082:	5f 91       	pop	r21
	pop r20	
    5084:	4f 91       	pop	r20
	pop r19
    5086:	3f 91       	pop	r19
	pop r18	
    5088:	2f 91       	pop	r18
	pop r17
    508a:	1f 91       	pop	r17
	pop r16
    508c:	0f 91       	pop	r16
	pop r15
    508e:	ff 90       	pop	r15
	pop r14
    5090:	ef 90       	pop	r14
	pop r13
    5092:	df 90       	pop	r13
	pop r12
    5094:	cf 90       	pop	r12
	pop r11
    5096:	bf 90       	pop	r11
	pop r10
    5098:	af 90       	pop	r10
	pop r9
    509a:	9f 90       	pop	r9
	pop r8
    509c:	8f 90       	pop	r8
	pop r7
    509e:	7f 90       	pop	r7
	pop r6
    50a0:	6f 90       	pop	r6
	pop r5
    50a2:	5f 90       	pop	r5
	pop r4
    50a4:	4f 90       	pop	r4
	pop r3
    50a6:	3f 90       	pop	r3
	pop r2
    50a8:	2f 90       	pop	r2
	pop r1
    50aa:	1f 90       	pop	r1
	pop r0
    50ac:	0f 90       	pop	r0
	out __SREG__, r0
    50ae:	0f be       	out	0x3f, r0	; 63
	pop r0	
    50b0:	0f 90       	pop	r0
	   
    	reti 
    50b2:	18 95       	reti

000050b4 <__udivdi3>:
    50b4:	a8 e3       	ldi	r26, 0x38	; 56
    50b6:	b0 e0       	ldi	r27, 0x00	; 0
    50b8:	e0 e6       	ldi	r30, 0x60	; 96
    50ba:	f8 e2       	ldi	r31, 0x28	; 40
    50bc:	0c 94 5b 30 	jmp	0x60b6	; 0x60b6 <__prologue_saves__>
    50c0:	29 83       	std	Y+1, r18	; 0x01
    50c2:	3a 83       	std	Y+2, r19	; 0x02
    50c4:	4b 83       	std	Y+3, r20	; 0x03
    50c6:	5c 83       	std	Y+4, r21	; 0x04
    50c8:	6d 83       	std	Y+5, r22	; 0x05
    50ca:	7e 83       	std	Y+6, r23	; 0x06
    50cc:	8f 83       	std	Y+7, r24	; 0x07
    50ce:	98 87       	std	Y+8, r25	; 0x08
    50d0:	a9 86       	std	Y+9, r10	; 0x09
    50d2:	ba 86       	std	Y+10, r11	; 0x0a
    50d4:	cb 86       	std	Y+11, r12	; 0x0b
    50d6:	dc 86       	std	Y+12, r13	; 0x0c
    50d8:	ed 86       	std	Y+13, r14	; 0x0d
    50da:	fe 86       	std	Y+14, r15	; 0x0e
    50dc:	0f 87       	std	Y+15, r16	; 0x0f
    50de:	18 8b       	std	Y+16, r17	; 0x10
    50e0:	e9 84       	ldd	r14, Y+9	; 0x09
    50e2:	fa 84       	ldd	r15, Y+10	; 0x0a
    50e4:	0b 85       	ldd	r16, Y+11	; 0x0b
    50e6:	1c 85       	ldd	r17, Y+12	; 0x0c
    50e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    50ea:	3e 85       	ldd	r19, Y+14	; 0x0e
    50ec:	4f 85       	ldd	r20, Y+15	; 0x0f
    50ee:	58 89       	ldd	r21, Y+16	; 0x10
    50f0:	29 80       	ldd	r2, Y+1	; 0x01
    50f2:	3a 80       	ldd	r3, Y+2	; 0x02
    50f4:	4b 80       	ldd	r4, Y+3	; 0x03
    50f6:	5c 80       	ldd	r5, Y+4	; 0x04
    50f8:	2d a2       	std	Y+37, r2	; 0x25
    50fa:	3e a2       	std	Y+38, r3	; 0x26
    50fc:	4f a2       	std	Y+39, r4	; 0x27
    50fe:	58 a6       	std	Y+40, r5	; 0x28
    5100:	ad 80       	ldd	r10, Y+5	; 0x05
    5102:	be 80       	ldd	r11, Y+6	; 0x06
    5104:	cf 80       	ldd	r12, Y+7	; 0x07
    5106:	d8 84       	ldd	r13, Y+8	; 0x08
    5108:	21 15       	cp	r18, r1
    510a:	31 05       	cpc	r19, r1
    510c:	41 05       	cpc	r20, r1
    510e:	51 05       	cpc	r21, r1
    5110:	09 f0       	breq	.+2      	; 0x5114 <__udivdi3+0x60>
    5112:	be c3       	rjmp	.+1916   	; 0x5890 <__udivdi3+0x7dc>
    5114:	ae 14       	cp	r10, r14
    5116:	bf 04       	cpc	r11, r15
    5118:	c0 06       	cpc	r12, r16
    511a:	d1 06       	cpc	r13, r17
    511c:	08 f0       	brcs	.+2      	; 0x5120 <__udivdi3+0x6c>
    511e:	4f c1       	rjmp	.+670    	; 0x53be <__udivdi3+0x30a>
    5120:	20 e0       	ldi	r18, 0x00	; 0
    5122:	e2 16       	cp	r14, r18
    5124:	20 e0       	ldi	r18, 0x00	; 0
    5126:	f2 06       	cpc	r15, r18
    5128:	21 e0       	ldi	r18, 0x01	; 1
    512a:	02 07       	cpc	r16, r18
    512c:	20 e0       	ldi	r18, 0x00	; 0
    512e:	12 07       	cpc	r17, r18
    5130:	58 f4       	brcc	.+22     	; 0x5148 <__udivdi3+0x94>
    5132:	3f ef       	ldi	r19, 0xFF	; 255
    5134:	e3 16       	cp	r14, r19
    5136:	f1 04       	cpc	r15, r1
    5138:	01 05       	cpc	r16, r1
    513a:	11 05       	cpc	r17, r1
    513c:	09 f0       	breq	.+2      	; 0x5140 <__udivdi3+0x8c>
    513e:	90 f4       	brcc	.+36     	; 0x5164 <__udivdi3+0xb0>
    5140:	20 e0       	ldi	r18, 0x00	; 0
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	a9 01       	movw	r20, r18
    5146:	17 c0       	rjmp	.+46     	; 0x5176 <__udivdi3+0xc2>
    5148:	40 e0       	ldi	r20, 0x00	; 0
    514a:	e4 16       	cp	r14, r20
    514c:	40 e0       	ldi	r20, 0x00	; 0
    514e:	f4 06       	cpc	r15, r20
    5150:	40 e0       	ldi	r20, 0x00	; 0
    5152:	04 07       	cpc	r16, r20
    5154:	41 e0       	ldi	r20, 0x01	; 1
    5156:	14 07       	cpc	r17, r20
    5158:	50 f4       	brcc	.+20     	; 0x516e <__udivdi3+0xba>
    515a:	20 e1       	ldi	r18, 0x10	; 16
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	40 e0       	ldi	r20, 0x00	; 0
    5160:	50 e0       	ldi	r21, 0x00	; 0
    5162:	09 c0       	rjmp	.+18     	; 0x5176 <__udivdi3+0xc2>
    5164:	28 e0       	ldi	r18, 0x08	; 8
    5166:	30 e0       	ldi	r19, 0x00	; 0
    5168:	40 e0       	ldi	r20, 0x00	; 0
    516a:	50 e0       	ldi	r21, 0x00	; 0
    516c:	04 c0       	rjmp	.+8      	; 0x5176 <__udivdi3+0xc2>
    516e:	28 e1       	ldi	r18, 0x18	; 24
    5170:	30 e0       	ldi	r19, 0x00	; 0
    5172:	40 e0       	ldi	r20, 0x00	; 0
    5174:	50 e0       	ldi	r21, 0x00	; 0
    5176:	d8 01       	movw	r26, r16
    5178:	c7 01       	movw	r24, r14
    517a:	02 2e       	mov	r0, r18
    517c:	04 c0       	rjmp	.+8      	; 0x5186 <__udivdi3+0xd2>
    517e:	b6 95       	lsr	r27
    5180:	a7 95       	ror	r26
    5182:	97 95       	ror	r25
    5184:	87 95       	ror	r24
    5186:	0a 94       	dec	r0
    5188:	d2 f7       	brpl	.-12     	; 0x517e <__udivdi3+0xca>
    518a:	8f 52       	subi	r24, 0x2F	; 47
    518c:	9d 4f       	sbci	r25, 0xFD	; 253
    518e:	dc 01       	movw	r26, r24
    5190:	6c 91       	ld	r22, X
    5192:	80 e2       	ldi	r24, 0x20	; 32
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	a0 e0       	ldi	r26, 0x00	; 0
    5198:	b0 e0       	ldi	r27, 0x00	; 0
    519a:	82 1b       	sub	r24, r18
    519c:	93 0b       	sbc	r25, r19
    519e:	a4 0b       	sbc	r26, r20
    51a0:	b5 0b       	sbc	r27, r21
    51a2:	86 1b       	sub	r24, r22
    51a4:	91 09       	sbc	r25, r1
    51a6:	a1 09       	sbc	r26, r1
    51a8:	b1 09       	sbc	r27, r1
    51aa:	00 97       	sbiw	r24, 0x00	; 0
    51ac:	a1 05       	cpc	r26, r1
    51ae:	b1 05       	cpc	r27, r1
    51b0:	a1 f1       	breq	.+104    	; 0x521a <__udivdi3+0x166>
    51b2:	08 2e       	mov	r0, r24
    51b4:	04 c0       	rjmp	.+8      	; 0x51be <__udivdi3+0x10a>
    51b6:	ee 0c       	add	r14, r14
    51b8:	ff 1c       	adc	r15, r15
    51ba:	00 1f       	adc	r16, r16
    51bc:	11 1f       	adc	r17, r17
    51be:	0a 94       	dec	r0
    51c0:	d2 f7       	brpl	.-12     	; 0x51b6 <__udivdi3+0x102>
    51c2:	a6 01       	movw	r20, r12
    51c4:	95 01       	movw	r18, r10
    51c6:	08 2e       	mov	r0, r24
    51c8:	04 c0       	rjmp	.+8      	; 0x51d2 <__udivdi3+0x11e>
    51ca:	22 0f       	add	r18, r18
    51cc:	33 1f       	adc	r19, r19
    51ce:	44 1f       	adc	r20, r20
    51d0:	55 1f       	adc	r21, r21
    51d2:	0a 94       	dec	r0
    51d4:	d2 f7       	brpl	.-12     	; 0x51ca <__udivdi3+0x116>
    51d6:	60 e2       	ldi	r22, 0x20	; 32
    51d8:	70 e0       	ldi	r23, 0x00	; 0
    51da:	68 1b       	sub	r22, r24
    51dc:	79 0b       	sbc	r23, r25
    51de:	ad a0       	ldd	r10, Y+37	; 0x25
    51e0:	be a0       	ldd	r11, Y+38	; 0x26
    51e2:	cf a0       	ldd	r12, Y+39	; 0x27
    51e4:	d8 a4       	ldd	r13, Y+40	; 0x28
    51e6:	04 c0       	rjmp	.+8      	; 0x51f0 <__udivdi3+0x13c>
    51e8:	d6 94       	lsr	r13
    51ea:	c7 94       	ror	r12
    51ec:	b7 94       	ror	r11
    51ee:	a7 94       	ror	r10
    51f0:	6a 95       	dec	r22
    51f2:	d2 f7       	brpl	.-12     	; 0x51e8 <__udivdi3+0x134>
    51f4:	a2 2a       	or	r10, r18
    51f6:	b3 2a       	or	r11, r19
    51f8:	c4 2a       	or	r12, r20
    51fa:	d5 2a       	or	r13, r21
    51fc:	2d a0       	ldd	r2, Y+37	; 0x25
    51fe:	3e a0       	ldd	r3, Y+38	; 0x26
    5200:	4f a0       	ldd	r4, Y+39	; 0x27
    5202:	58 a4       	ldd	r5, Y+40	; 0x28
    5204:	04 c0       	rjmp	.+8      	; 0x520e <__udivdi3+0x15a>
    5206:	22 0c       	add	r2, r2
    5208:	33 1c       	adc	r3, r3
    520a:	44 1c       	adc	r4, r4
    520c:	55 1c       	adc	r5, r5
    520e:	8a 95       	dec	r24
    5210:	d2 f7       	brpl	.-12     	; 0x5206 <__udivdi3+0x152>
    5212:	2d a2       	std	Y+37, r2	; 0x25
    5214:	3e a2       	std	Y+38, r3	; 0x26
    5216:	4f a2       	std	Y+39, r4	; 0x27
    5218:	58 a6       	std	Y+40, r5	; 0x28
    521a:	38 01       	movw	r6, r16
    521c:	88 24       	eor	r8, r8
    521e:	99 24       	eor	r9, r9
    5220:	a8 01       	movw	r20, r16
    5222:	97 01       	movw	r18, r14
    5224:	40 70       	andi	r20, 0x00	; 0
    5226:	50 70       	andi	r21, 0x00	; 0
    5228:	2d 8f       	std	Y+29, r18	; 0x1d
    522a:	3e 8f       	std	Y+30, r19	; 0x1e
    522c:	4f 8f       	std	Y+31, r20	; 0x1f
    522e:	58 a3       	std	Y+32, r21	; 0x20
    5230:	c6 01       	movw	r24, r12
    5232:	b5 01       	movw	r22, r10
    5234:	a4 01       	movw	r20, r8
    5236:	93 01       	movw	r18, r6
    5238:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    523c:	22 2e       	mov	r2, r18
    523e:	53 2e       	mov	r5, r19
    5240:	44 2e       	mov	r4, r20
    5242:	35 2e       	mov	r3, r21
    5244:	69 a3       	std	Y+33, r22	; 0x21
    5246:	7a a3       	std	Y+34, r23	; 0x22
    5248:	8b a3       	std	Y+35, r24	; 0x23
    524a:	9c a3       	std	Y+36, r25	; 0x24
    524c:	c6 01       	movw	r24, r12
    524e:	b5 01       	movw	r22, r10
    5250:	a4 01       	movw	r20, r8
    5252:	93 01       	movw	r18, r6
    5254:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    5258:	82 2d       	mov	r24, r2
    525a:	95 2d       	mov	r25, r5
    525c:	a4 2d       	mov	r26, r4
    525e:	b3 2d       	mov	r27, r3
    5260:	89 8f       	std	Y+25, r24	; 0x19
    5262:	9a 8f       	std	Y+26, r25	; 0x1a
    5264:	ab 8f       	std	Y+27, r26	; 0x1b
    5266:	bc 8f       	std	Y+28, r27	; 0x1c
    5268:	bc 01       	movw	r22, r24
    526a:	cd 01       	movw	r24, r26
    526c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    526e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5270:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5272:	58 a1       	ldd	r21, Y+32	; 0x20
    5274:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    5278:	5b 01       	movw	r10, r22
    527a:	6c 01       	movw	r12, r24
    527c:	49 a1       	ldd	r20, Y+33	; 0x21
    527e:	5a a1       	ldd	r21, Y+34	; 0x22
    5280:	6b a1       	ldd	r22, Y+35	; 0x23
    5282:	7c a1       	ldd	r23, Y+36	; 0x24
    5284:	da 01       	movw	r26, r20
    5286:	99 27       	eor	r25, r25
    5288:	88 27       	eor	r24, r24
    528a:	2d a0       	ldd	r2, Y+37	; 0x25
    528c:	3e a0       	ldd	r3, Y+38	; 0x26
    528e:	4f a0       	ldd	r4, Y+39	; 0x27
    5290:	58 a4       	ldd	r5, Y+40	; 0x28
    5292:	92 01       	movw	r18, r4
    5294:	44 27       	eor	r20, r20
    5296:	55 27       	eor	r21, r21
    5298:	82 2b       	or	r24, r18
    529a:	93 2b       	or	r25, r19
    529c:	a4 2b       	or	r26, r20
    529e:	b5 2b       	or	r27, r21
    52a0:	8a 15       	cp	r24, r10
    52a2:	9b 05       	cpc	r25, r11
    52a4:	ac 05       	cpc	r26, r12
    52a6:	bd 05       	cpc	r27, r13
    52a8:	30 f5       	brcc	.+76     	; 0x52f6 <__udivdi3+0x242>
    52aa:	29 8d       	ldd	r18, Y+25	; 0x19
    52ac:	3a 8d       	ldd	r19, Y+26	; 0x1a
    52ae:	4b 8d       	ldd	r20, Y+27	; 0x1b
    52b0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    52b2:	21 50       	subi	r18, 0x01	; 1
    52b4:	30 40       	sbci	r19, 0x00	; 0
    52b6:	40 40       	sbci	r20, 0x00	; 0
    52b8:	50 40       	sbci	r21, 0x00	; 0
    52ba:	29 8f       	std	Y+25, r18	; 0x19
    52bc:	3a 8f       	std	Y+26, r19	; 0x1a
    52be:	4b 8f       	std	Y+27, r20	; 0x1b
    52c0:	5c 8f       	std	Y+28, r21	; 0x1c
    52c2:	8e 0d       	add	r24, r14
    52c4:	9f 1d       	adc	r25, r15
    52c6:	a0 1f       	adc	r26, r16
    52c8:	b1 1f       	adc	r27, r17
    52ca:	8e 15       	cp	r24, r14
    52cc:	9f 05       	cpc	r25, r15
    52ce:	a0 07       	cpc	r26, r16
    52d0:	b1 07       	cpc	r27, r17
    52d2:	88 f0       	brcs	.+34     	; 0x52f6 <__udivdi3+0x242>
    52d4:	8a 15       	cp	r24, r10
    52d6:	9b 05       	cpc	r25, r11
    52d8:	ac 05       	cpc	r26, r12
    52da:	bd 05       	cpc	r27, r13
    52dc:	60 f4       	brcc	.+24     	; 0x52f6 <__udivdi3+0x242>
    52de:	21 50       	subi	r18, 0x01	; 1
    52e0:	30 40       	sbci	r19, 0x00	; 0
    52e2:	40 40       	sbci	r20, 0x00	; 0
    52e4:	50 40       	sbci	r21, 0x00	; 0
    52e6:	29 8f       	std	Y+25, r18	; 0x19
    52e8:	3a 8f       	std	Y+26, r19	; 0x1a
    52ea:	4b 8f       	std	Y+27, r20	; 0x1b
    52ec:	5c 8f       	std	Y+28, r21	; 0x1c
    52ee:	8e 0d       	add	r24, r14
    52f0:	9f 1d       	adc	r25, r15
    52f2:	a0 1f       	adc	r26, r16
    52f4:	b1 1f       	adc	r27, r17
    52f6:	ac 01       	movw	r20, r24
    52f8:	bd 01       	movw	r22, r26
    52fa:	4a 19       	sub	r20, r10
    52fc:	5b 09       	sbc	r21, r11
    52fe:	6c 09       	sbc	r22, r12
    5300:	7d 09       	sbc	r23, r13
    5302:	5a 01       	movw	r10, r20
    5304:	6b 01       	movw	r12, r22
    5306:	cb 01       	movw	r24, r22
    5308:	ba 01       	movw	r22, r20
    530a:	a4 01       	movw	r20, r8
    530c:	93 01       	movw	r18, r6
    530e:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    5312:	22 2e       	mov	r2, r18
    5314:	53 2e       	mov	r5, r19
    5316:	44 2e       	mov	r4, r20
    5318:	35 2e       	mov	r3, r21
    531a:	69 a3       	std	Y+33, r22	; 0x21
    531c:	7a a3       	std	Y+34, r23	; 0x22
    531e:	8b a3       	std	Y+35, r24	; 0x23
    5320:	9c a3       	std	Y+36, r25	; 0x24
    5322:	c6 01       	movw	r24, r12
    5324:	b5 01       	movw	r22, r10
    5326:	a4 01       	movw	r20, r8
    5328:	93 01       	movw	r18, r6
    532a:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    532e:	a2 2c       	mov	r10, r2
    5330:	b5 2c       	mov	r11, r5
    5332:	c4 2c       	mov	r12, r4
    5334:	d3 2c       	mov	r13, r3
    5336:	c6 01       	movw	r24, r12
    5338:	b5 01       	movw	r22, r10
    533a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    533c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    533e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5340:	58 a1       	ldd	r21, Y+32	; 0x20
    5342:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    5346:	3b 01       	movw	r6, r22
    5348:	4c 01       	movw	r8, r24
    534a:	69 a1       	ldd	r22, Y+33	; 0x21
    534c:	7a a1       	ldd	r23, Y+34	; 0x22
    534e:	8b a1       	ldd	r24, Y+35	; 0x23
    5350:	9c a1       	ldd	r25, Y+36	; 0x24
    5352:	ab 01       	movw	r20, r22
    5354:	33 27       	eor	r19, r19
    5356:	22 27       	eor	r18, r18
    5358:	8d a1       	ldd	r24, Y+37	; 0x25
    535a:	9e a1       	ldd	r25, Y+38	; 0x26
    535c:	af a1       	ldd	r26, Y+39	; 0x27
    535e:	b8 a5       	ldd	r27, Y+40	; 0x28
    5360:	a0 70       	andi	r26, 0x00	; 0
    5362:	b0 70       	andi	r27, 0x00	; 0
    5364:	28 2b       	or	r18, r24
    5366:	39 2b       	or	r19, r25
    5368:	4a 2b       	or	r20, r26
    536a:	5b 2b       	or	r21, r27
    536c:	26 15       	cp	r18, r6
    536e:	37 05       	cpc	r19, r7
    5370:	48 05       	cpc	r20, r8
    5372:	59 05       	cpc	r21, r9
    5374:	c0 f4       	brcc	.+48     	; 0x53a6 <__udivdi3+0x2f2>
    5376:	08 94       	sec
    5378:	a1 08       	sbc	r10, r1
    537a:	b1 08       	sbc	r11, r1
    537c:	c1 08       	sbc	r12, r1
    537e:	d1 08       	sbc	r13, r1
    5380:	2e 0d       	add	r18, r14
    5382:	3f 1d       	adc	r19, r15
    5384:	40 1f       	adc	r20, r16
    5386:	51 1f       	adc	r21, r17
    5388:	2e 15       	cp	r18, r14
    538a:	3f 05       	cpc	r19, r15
    538c:	40 07       	cpc	r20, r16
    538e:	51 07       	cpc	r21, r17
    5390:	50 f0       	brcs	.+20     	; 0x53a6 <__udivdi3+0x2f2>
    5392:	26 15       	cp	r18, r6
    5394:	37 05       	cpc	r19, r7
    5396:	48 05       	cpc	r20, r8
    5398:	59 05       	cpc	r21, r9
    539a:	28 f4       	brcc	.+10     	; 0x53a6 <__udivdi3+0x2f2>
    539c:	08 94       	sec
    539e:	a1 08       	sbc	r10, r1
    53a0:	b1 08       	sbc	r11, r1
    53a2:	c1 08       	sbc	r12, r1
    53a4:	d1 08       	sbc	r13, r1
    53a6:	89 8d       	ldd	r24, Y+25	; 0x19
    53a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    53aa:	ab 8d       	ldd	r26, Y+27	; 0x1b
    53ac:	bc 8d       	ldd	r27, Y+28	; 0x1c
    53ae:	8c 01       	movw	r16, r24
    53b0:	ff 24       	eor	r15, r15
    53b2:	ee 24       	eor	r14, r14
    53b4:	ea 28       	or	r14, r10
    53b6:	fb 28       	or	r15, r11
    53b8:	0c 29       	or	r16, r12
    53ba:	1d 29       	or	r17, r13
    53bc:	b3 c4       	rjmp	.+2406   	; 0x5d24 <__udivdi3+0xc70>
    53be:	e1 14       	cp	r14, r1
    53c0:	f1 04       	cpc	r15, r1
    53c2:	01 05       	cpc	r16, r1
    53c4:	11 05       	cpc	r17, r1
    53c6:	59 f4       	brne	.+22     	; 0x53de <__udivdi3+0x32a>
    53c8:	61 e0       	ldi	r22, 0x01	; 1
    53ca:	70 e0       	ldi	r23, 0x00	; 0
    53cc:	80 e0       	ldi	r24, 0x00	; 0
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	a8 01       	movw	r20, r16
    53d2:	97 01       	movw	r18, r14
    53d4:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    53d8:	79 01       	movw	r14, r18
    53da:	8a 01       	movw	r16, r20
    53dc:	10 c0       	rjmp	.+32     	; 0x53fe <__udivdi3+0x34a>
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	e9 16       	cp	r14, r25
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	f9 06       	cpc	r15, r25
    53e6:	91 e0       	ldi	r25, 0x01	; 1
    53e8:	09 07       	cpc	r16, r25
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	19 07       	cpc	r17, r25
    53ee:	58 f4       	brcc	.+22     	; 0x5406 <__udivdi3+0x352>
    53f0:	af ef       	ldi	r26, 0xFF	; 255
    53f2:	ea 16       	cp	r14, r26
    53f4:	f1 04       	cpc	r15, r1
    53f6:	01 05       	cpc	r16, r1
    53f8:	11 05       	cpc	r17, r1
    53fa:	09 f0       	breq	.+2      	; 0x53fe <__udivdi3+0x34a>
    53fc:	90 f4       	brcc	.+36     	; 0x5422 <__udivdi3+0x36e>
    53fe:	20 e0       	ldi	r18, 0x00	; 0
    5400:	30 e0       	ldi	r19, 0x00	; 0
    5402:	a9 01       	movw	r20, r18
    5404:	17 c0       	rjmp	.+46     	; 0x5434 <__udivdi3+0x380>
    5406:	b0 e0       	ldi	r27, 0x00	; 0
    5408:	eb 16       	cp	r14, r27
    540a:	b0 e0       	ldi	r27, 0x00	; 0
    540c:	fb 06       	cpc	r15, r27
    540e:	b0 e0       	ldi	r27, 0x00	; 0
    5410:	0b 07       	cpc	r16, r27
    5412:	b1 e0       	ldi	r27, 0x01	; 1
    5414:	1b 07       	cpc	r17, r27
    5416:	50 f4       	brcc	.+20     	; 0x542c <__udivdi3+0x378>
    5418:	20 e1       	ldi	r18, 0x10	; 16
    541a:	30 e0       	ldi	r19, 0x00	; 0
    541c:	40 e0       	ldi	r20, 0x00	; 0
    541e:	50 e0       	ldi	r21, 0x00	; 0
    5420:	09 c0       	rjmp	.+18     	; 0x5434 <__udivdi3+0x380>
    5422:	28 e0       	ldi	r18, 0x08	; 8
    5424:	30 e0       	ldi	r19, 0x00	; 0
    5426:	40 e0       	ldi	r20, 0x00	; 0
    5428:	50 e0       	ldi	r21, 0x00	; 0
    542a:	04 c0       	rjmp	.+8      	; 0x5434 <__udivdi3+0x380>
    542c:	28 e1       	ldi	r18, 0x18	; 24
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	40 e0       	ldi	r20, 0x00	; 0
    5432:	50 e0       	ldi	r21, 0x00	; 0
    5434:	d8 01       	movw	r26, r16
    5436:	c7 01       	movw	r24, r14
    5438:	02 2e       	mov	r0, r18
    543a:	04 c0       	rjmp	.+8      	; 0x5444 <__udivdi3+0x390>
    543c:	b6 95       	lsr	r27
    543e:	a7 95       	ror	r26
    5440:	97 95       	ror	r25
    5442:	87 95       	ror	r24
    5444:	0a 94       	dec	r0
    5446:	d2 f7       	brpl	.-12     	; 0x543c <__udivdi3+0x388>
    5448:	8f 52       	subi	r24, 0x2F	; 47
    544a:	9d 4f       	sbci	r25, 0xFD	; 253
    544c:	fc 01       	movw	r30, r24
    544e:	80 81       	ld	r24, Z
    5450:	28 0f       	add	r18, r24
    5452:	31 1d       	adc	r19, r1
    5454:	41 1d       	adc	r20, r1
    5456:	51 1d       	adc	r21, r1
    5458:	80 e2       	ldi	r24, 0x20	; 32
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	a0 e0       	ldi	r26, 0x00	; 0
    545e:	b0 e0       	ldi	r27, 0x00	; 0
    5460:	82 1b       	sub	r24, r18
    5462:	93 0b       	sbc	r25, r19
    5464:	a4 0b       	sbc	r26, r20
    5466:	b5 0b       	sbc	r27, r21
    5468:	61 f4       	brne	.+24     	; 0x5482 <__udivdi3+0x3ce>
    546a:	15 01       	movw	r2, r10
    546c:	26 01       	movw	r4, r12
    546e:	2e 18       	sub	r2, r14
    5470:	3f 08       	sbc	r3, r15
    5472:	40 0a       	sbc	r4, r16
    5474:	51 0a       	sbc	r5, r17
    5476:	81 e0       	ldi	r24, 0x01	; 1
    5478:	a8 2e       	mov	r10, r24
    547a:	b1 2c       	mov	r11, r1
    547c:	c1 2c       	mov	r12, r1
    547e:	d1 2c       	mov	r13, r1
    5480:	29 c1       	rjmp	.+594    	; 0x56d4 <__udivdi3+0x620>
    5482:	08 2e       	mov	r0, r24
    5484:	04 c0       	rjmp	.+8      	; 0x548e <__udivdi3+0x3da>
    5486:	ee 0c       	add	r14, r14
    5488:	ff 1c       	adc	r15, r15
    548a:	00 1f       	adc	r16, r16
    548c:	11 1f       	adc	r17, r17
    548e:	0a 94       	dec	r0
    5490:	d2 f7       	brpl	.-12     	; 0x5486 <__udivdi3+0x3d2>
    5492:	15 01       	movw	r2, r10
    5494:	26 01       	movw	r4, r12
    5496:	02 2e       	mov	r0, r18
    5498:	04 c0       	rjmp	.+8      	; 0x54a2 <__udivdi3+0x3ee>
    549a:	56 94       	lsr	r5
    549c:	47 94       	ror	r4
    549e:	37 94       	ror	r3
    54a0:	27 94       	ror	r2
    54a2:	0a 94       	dec	r0
    54a4:	d2 f7       	brpl	.-12     	; 0x549a <__udivdi3+0x3e6>
    54a6:	29 8e       	std	Y+25, r2	; 0x19
    54a8:	3a 8e       	std	Y+26, r3	; 0x1a
    54aa:	4b 8e       	std	Y+27, r4	; 0x1b
    54ac:	5c 8e       	std	Y+28, r5	; 0x1c
    54ae:	b6 01       	movw	r22, r12
    54b0:	a5 01       	movw	r20, r10
    54b2:	08 2e       	mov	r0, r24
    54b4:	04 c0       	rjmp	.+8      	; 0x54be <__udivdi3+0x40a>
    54b6:	44 0f       	add	r20, r20
    54b8:	55 1f       	adc	r21, r21
    54ba:	66 1f       	adc	r22, r22
    54bc:	77 1f       	adc	r23, r23
    54be:	0a 94       	dec	r0
    54c0:	d2 f7       	brpl	.-12     	; 0x54b6 <__udivdi3+0x402>
    54c2:	4d 8f       	std	Y+29, r20	; 0x1d
    54c4:	5e 8f       	std	Y+30, r21	; 0x1e
    54c6:	6f 8f       	std	Y+31, r22	; 0x1f
    54c8:	78 a3       	std	Y+32, r23	; 0x20
    54ca:	2d a0       	ldd	r2, Y+37	; 0x25
    54cc:	3e a0       	ldd	r3, Y+38	; 0x26
    54ce:	4f a0       	ldd	r4, Y+39	; 0x27
    54d0:	58 a4       	ldd	r5, Y+40	; 0x28
    54d2:	04 c0       	rjmp	.+8      	; 0x54dc <__udivdi3+0x428>
    54d4:	56 94       	lsr	r5
    54d6:	47 94       	ror	r4
    54d8:	37 94       	ror	r3
    54da:	27 94       	ror	r2
    54dc:	2a 95       	dec	r18
    54de:	d2 f7       	brpl	.-12     	; 0x54d4 <__udivdi3+0x420>
    54e0:	ad 8c       	ldd	r10, Y+29	; 0x1d
    54e2:	be 8c       	ldd	r11, Y+30	; 0x1e
    54e4:	cf 8c       	ldd	r12, Y+31	; 0x1f
    54e6:	d8 a0       	ldd	r13, Y+32	; 0x20
    54e8:	a2 28       	or	r10, r2
    54ea:	b3 28       	or	r11, r3
    54ec:	c4 28       	or	r12, r4
    54ee:	d5 28       	or	r13, r5
    54f0:	ad 8e       	std	Y+29, r10	; 0x1d
    54f2:	be 8e       	std	Y+30, r11	; 0x1e
    54f4:	cf 8e       	std	Y+31, r12	; 0x1f
    54f6:	d8 a2       	std	Y+32, r13	; 0x20
    54f8:	2d a1       	ldd	r18, Y+37	; 0x25
    54fa:	3e a1       	ldd	r19, Y+38	; 0x26
    54fc:	4f a1       	ldd	r20, Y+39	; 0x27
    54fe:	58 a5       	ldd	r21, Y+40	; 0x28
    5500:	04 c0       	rjmp	.+8      	; 0x550a <__udivdi3+0x456>
    5502:	22 0f       	add	r18, r18
    5504:	33 1f       	adc	r19, r19
    5506:	44 1f       	adc	r20, r20
    5508:	55 1f       	adc	r21, r21
    550a:	8a 95       	dec	r24
    550c:	d2 f7       	brpl	.-12     	; 0x5502 <__udivdi3+0x44e>
    550e:	2d a3       	std	Y+37, r18	; 0x25
    5510:	3e a3       	std	Y+38, r19	; 0x26
    5512:	4f a3       	std	Y+39, r20	; 0x27
    5514:	58 a7       	std	Y+40, r21	; 0x28
    5516:	38 01       	movw	r6, r16
    5518:	88 24       	eor	r8, r8
    551a:	99 24       	eor	r9, r9
    551c:	b8 01       	movw	r22, r16
    551e:	a7 01       	movw	r20, r14
    5520:	60 70       	andi	r22, 0x00	; 0
    5522:	70 70       	andi	r23, 0x00	; 0
    5524:	49 a3       	std	Y+33, r20	; 0x21
    5526:	5a a3       	std	Y+34, r21	; 0x22
    5528:	6b a3       	std	Y+35, r22	; 0x23
    552a:	7c a3       	std	Y+36, r23	; 0x24
    552c:	69 8d       	ldd	r22, Y+25	; 0x19
    552e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5530:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5532:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5534:	a4 01       	movw	r20, r8
    5536:	93 01       	movw	r18, r6
    5538:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    553c:	22 2e       	mov	r2, r18
    553e:	53 2e       	mov	r5, r19
    5540:	44 2e       	mov	r4, r20
    5542:	35 2e       	mov	r3, r21
    5544:	69 a7       	std	Y+41, r22	; 0x29
    5546:	7a a7       	std	Y+42, r23	; 0x2a
    5548:	8b a7       	std	Y+43, r24	; 0x2b
    554a:	9c a7       	std	Y+44, r25	; 0x2c
    554c:	69 8d       	ldd	r22, Y+25	; 0x19
    554e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5550:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5552:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5554:	a4 01       	movw	r20, r8
    5556:	93 01       	movw	r18, r6
    5558:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    555c:	a2 2c       	mov	r10, r2
    555e:	b5 2c       	mov	r11, r5
    5560:	c4 2c       	mov	r12, r4
    5562:	d3 2c       	mov	r13, r3
    5564:	a9 8e       	std	Y+25, r10	; 0x19
    5566:	ba 8e       	std	Y+26, r11	; 0x1a
    5568:	cb 8e       	std	Y+27, r12	; 0x1b
    556a:	dc 8e       	std	Y+28, r13	; 0x1c
    556c:	c6 01       	movw	r24, r12
    556e:	b5 01       	movw	r22, r10
    5570:	29 a1       	ldd	r18, Y+33	; 0x21
    5572:	3a a1       	ldd	r19, Y+34	; 0x22
    5574:	4b a1       	ldd	r20, Y+35	; 0x23
    5576:	5c a1       	ldd	r21, Y+36	; 0x24
    5578:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    557c:	5b 01       	movw	r10, r22
    557e:	6c 01       	movw	r12, r24
    5580:	29 a4       	ldd	r2, Y+41	; 0x29
    5582:	3a a4       	ldd	r3, Y+42	; 0x2a
    5584:	4b a4       	ldd	r4, Y+43	; 0x2b
    5586:	5c a4       	ldd	r5, Y+44	; 0x2c
    5588:	d1 01       	movw	r26, r2
    558a:	99 27       	eor	r25, r25
    558c:	88 27       	eor	r24, r24
    558e:	2d 8c       	ldd	r2, Y+29	; 0x1d
    5590:	3e 8c       	ldd	r3, Y+30	; 0x1e
    5592:	4f 8c       	ldd	r4, Y+31	; 0x1f
    5594:	58 a0       	ldd	r5, Y+32	; 0x20
    5596:	92 01       	movw	r18, r4
    5598:	44 27       	eor	r20, r20
    559a:	55 27       	eor	r21, r21
    559c:	82 2b       	or	r24, r18
    559e:	93 2b       	or	r25, r19
    55a0:	a4 2b       	or	r26, r20
    55a2:	b5 2b       	or	r27, r21
    55a4:	8a 15       	cp	r24, r10
    55a6:	9b 05       	cpc	r25, r11
    55a8:	ac 05       	cpc	r26, r12
    55aa:	bd 05       	cpc	r27, r13
    55ac:	30 f5       	brcc	.+76     	; 0x55fa <__udivdi3+0x546>
    55ae:	29 8d       	ldd	r18, Y+25	; 0x19
    55b0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    55b2:	4b 8d       	ldd	r20, Y+27	; 0x1b
    55b4:	5c 8d       	ldd	r21, Y+28	; 0x1c
    55b6:	21 50       	subi	r18, 0x01	; 1
    55b8:	30 40       	sbci	r19, 0x00	; 0
    55ba:	40 40       	sbci	r20, 0x00	; 0
    55bc:	50 40       	sbci	r21, 0x00	; 0
    55be:	29 8f       	std	Y+25, r18	; 0x19
    55c0:	3a 8f       	std	Y+26, r19	; 0x1a
    55c2:	4b 8f       	std	Y+27, r20	; 0x1b
    55c4:	5c 8f       	std	Y+28, r21	; 0x1c
    55c6:	8e 0d       	add	r24, r14
    55c8:	9f 1d       	adc	r25, r15
    55ca:	a0 1f       	adc	r26, r16
    55cc:	b1 1f       	adc	r27, r17
    55ce:	8e 15       	cp	r24, r14
    55d0:	9f 05       	cpc	r25, r15
    55d2:	a0 07       	cpc	r26, r16
    55d4:	b1 07       	cpc	r27, r17
    55d6:	88 f0       	brcs	.+34     	; 0x55fa <__udivdi3+0x546>
    55d8:	8a 15       	cp	r24, r10
    55da:	9b 05       	cpc	r25, r11
    55dc:	ac 05       	cpc	r26, r12
    55de:	bd 05       	cpc	r27, r13
    55e0:	60 f4       	brcc	.+24     	; 0x55fa <__udivdi3+0x546>
    55e2:	21 50       	subi	r18, 0x01	; 1
    55e4:	30 40       	sbci	r19, 0x00	; 0
    55e6:	40 40       	sbci	r20, 0x00	; 0
    55e8:	50 40       	sbci	r21, 0x00	; 0
    55ea:	29 8f       	std	Y+25, r18	; 0x19
    55ec:	3a 8f       	std	Y+26, r19	; 0x1a
    55ee:	4b 8f       	std	Y+27, r20	; 0x1b
    55f0:	5c 8f       	std	Y+28, r21	; 0x1c
    55f2:	8e 0d       	add	r24, r14
    55f4:	9f 1d       	adc	r25, r15
    55f6:	a0 1f       	adc	r26, r16
    55f8:	b1 1f       	adc	r27, r17
    55fa:	ac 01       	movw	r20, r24
    55fc:	bd 01       	movw	r22, r26
    55fe:	4a 19       	sub	r20, r10
    5600:	5b 09       	sbc	r21, r11
    5602:	6c 09       	sbc	r22, r12
    5604:	7d 09       	sbc	r23, r13
    5606:	5a 01       	movw	r10, r20
    5608:	6b 01       	movw	r12, r22
    560a:	cb 01       	movw	r24, r22
    560c:	ba 01       	movw	r22, r20
    560e:	a4 01       	movw	r20, r8
    5610:	93 01       	movw	r18, r6
    5612:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    5616:	22 2e       	mov	r2, r18
    5618:	53 2e       	mov	r5, r19
    561a:	44 2e       	mov	r4, r20
    561c:	35 2e       	mov	r3, r21
    561e:	69 a7       	std	Y+41, r22	; 0x29
    5620:	7a a7       	std	Y+42, r23	; 0x2a
    5622:	8b a7       	std	Y+43, r24	; 0x2b
    5624:	9c a7       	std	Y+44, r25	; 0x2c
    5626:	c6 01       	movw	r24, r12
    5628:	b5 01       	movw	r22, r10
    562a:	a4 01       	movw	r20, r8
    562c:	93 01       	movw	r18, r6
    562e:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    5632:	62 2c       	mov	r6, r2
    5634:	75 2c       	mov	r7, r5
    5636:	84 2c       	mov	r8, r4
    5638:	93 2c       	mov	r9, r3
    563a:	c4 01       	movw	r24, r8
    563c:	b3 01       	movw	r22, r6
    563e:	29 a1       	ldd	r18, Y+33	; 0x21
    5640:	3a a1       	ldd	r19, Y+34	; 0x22
    5642:	4b a1       	ldd	r20, Y+35	; 0x23
    5644:	5c a1       	ldd	r21, Y+36	; 0x24
    5646:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    564a:	9b 01       	movw	r18, r22
    564c:	ac 01       	movw	r20, r24
    564e:	69 a5       	ldd	r22, Y+41	; 0x29
    5650:	7a a5       	ldd	r23, Y+42	; 0x2a
    5652:	8b a5       	ldd	r24, Y+43	; 0x2b
    5654:	9c a5       	ldd	r25, Y+44	; 0x2c
    5656:	6b 01       	movw	r12, r22
    5658:	bb 24       	eor	r11, r11
    565a:	aa 24       	eor	r10, r10
    565c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    565e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5660:	af 8d       	ldd	r26, Y+31	; 0x1f
    5662:	b8 a1       	ldd	r27, Y+32	; 0x20
    5664:	a0 70       	andi	r26, 0x00	; 0
    5666:	b0 70       	andi	r27, 0x00	; 0
    5668:	a8 2a       	or	r10, r24
    566a:	b9 2a       	or	r11, r25
    566c:	ca 2a       	or	r12, r26
    566e:	db 2a       	or	r13, r27
    5670:	a2 16       	cp	r10, r18
    5672:	b3 06       	cpc	r11, r19
    5674:	c4 06       	cpc	r12, r20
    5676:	d5 06       	cpc	r13, r21
    5678:	e0 f4       	brcc	.+56     	; 0x56b2 <__udivdi3+0x5fe>
    567a:	08 94       	sec
    567c:	61 08       	sbc	r6, r1
    567e:	71 08       	sbc	r7, r1
    5680:	81 08       	sbc	r8, r1
    5682:	91 08       	sbc	r9, r1
    5684:	ae 0c       	add	r10, r14
    5686:	bf 1c       	adc	r11, r15
    5688:	c0 1e       	adc	r12, r16
    568a:	d1 1e       	adc	r13, r17
    568c:	ae 14       	cp	r10, r14
    568e:	bf 04       	cpc	r11, r15
    5690:	c0 06       	cpc	r12, r16
    5692:	d1 06       	cpc	r13, r17
    5694:	70 f0       	brcs	.+28     	; 0x56b2 <__udivdi3+0x5fe>
    5696:	a2 16       	cp	r10, r18
    5698:	b3 06       	cpc	r11, r19
    569a:	c4 06       	cpc	r12, r20
    569c:	d5 06       	cpc	r13, r21
    569e:	48 f4       	brcc	.+18     	; 0x56b2 <__udivdi3+0x5fe>
    56a0:	08 94       	sec
    56a2:	61 08       	sbc	r6, r1
    56a4:	71 08       	sbc	r7, r1
    56a6:	81 08       	sbc	r8, r1
    56a8:	91 08       	sbc	r9, r1
    56aa:	ae 0c       	add	r10, r14
    56ac:	bf 1c       	adc	r11, r15
    56ae:	c0 1e       	adc	r12, r16
    56b0:	d1 1e       	adc	r13, r17
    56b2:	15 01       	movw	r2, r10
    56b4:	26 01       	movw	r4, r12
    56b6:	22 1a       	sub	r2, r18
    56b8:	33 0a       	sbc	r3, r19
    56ba:	44 0a       	sbc	r4, r20
    56bc:	55 0a       	sbc	r5, r21
    56be:	89 8d       	ldd	r24, Y+25	; 0x19
    56c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    56c2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    56c4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    56c6:	6c 01       	movw	r12, r24
    56c8:	bb 24       	eor	r11, r11
    56ca:	aa 24       	eor	r10, r10
    56cc:	a6 28       	or	r10, r6
    56ce:	b7 28       	or	r11, r7
    56d0:	c8 28       	or	r12, r8
    56d2:	d9 28       	or	r13, r9
    56d4:	98 01       	movw	r18, r16
    56d6:	44 27       	eor	r20, r20
    56d8:	55 27       	eor	r21, r21
    56da:	2d 8f       	std	Y+29, r18	; 0x1d
    56dc:	3e 8f       	std	Y+30, r19	; 0x1e
    56de:	4f 8f       	std	Y+31, r20	; 0x1f
    56e0:	58 a3       	std	Y+32, r21	; 0x20
    56e2:	b8 01       	movw	r22, r16
    56e4:	a7 01       	movw	r20, r14
    56e6:	60 70       	andi	r22, 0x00	; 0
    56e8:	70 70       	andi	r23, 0x00	; 0
    56ea:	49 a3       	std	Y+33, r20	; 0x21
    56ec:	5a a3       	std	Y+34, r21	; 0x22
    56ee:	6b a3       	std	Y+35, r22	; 0x23
    56f0:	7c a3       	std	Y+36, r23	; 0x24
    56f2:	c2 01       	movw	r24, r4
    56f4:	b1 01       	movw	r22, r2
    56f6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    56f8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    56fa:	4f 8d       	ldd	r20, Y+31	; 0x1f
    56fc:	58 a1       	ldd	r21, Y+32	; 0x20
    56fe:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    5702:	62 2e       	mov	r6, r18
    5704:	93 2e       	mov	r9, r19
    5706:	84 2e       	mov	r8, r20
    5708:	75 2e       	mov	r7, r21
    570a:	69 a7       	std	Y+41, r22	; 0x29
    570c:	7a a7       	std	Y+42, r23	; 0x2a
    570e:	8b a7       	std	Y+43, r24	; 0x2b
    5710:	9c a7       	std	Y+44, r25	; 0x2c
    5712:	c2 01       	movw	r24, r4
    5714:	b1 01       	movw	r22, r2
    5716:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5718:	3e 8d       	ldd	r19, Y+30	; 0x1e
    571a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    571c:	58 a1       	ldd	r21, Y+32	; 0x20
    571e:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    5722:	86 2d       	mov	r24, r6
    5724:	99 2d       	mov	r25, r9
    5726:	a8 2d       	mov	r26, r8
    5728:	b7 2d       	mov	r27, r7
    572a:	89 8f       	std	Y+25, r24	; 0x19
    572c:	9a 8f       	std	Y+26, r25	; 0x1a
    572e:	ab 8f       	std	Y+27, r26	; 0x1b
    5730:	bc 8f       	std	Y+28, r27	; 0x1c
    5732:	bc 01       	movw	r22, r24
    5734:	cd 01       	movw	r24, r26
    5736:	29 a1       	ldd	r18, Y+33	; 0x21
    5738:	3a a1       	ldd	r19, Y+34	; 0x22
    573a:	4b a1       	ldd	r20, Y+35	; 0x23
    573c:	5c a1       	ldd	r21, Y+36	; 0x24
    573e:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    5742:	3b 01       	movw	r6, r22
    5744:	4c 01       	movw	r8, r24
    5746:	29 a4       	ldd	r2, Y+41	; 0x29
    5748:	3a a4       	ldd	r3, Y+42	; 0x2a
    574a:	4b a4       	ldd	r4, Y+43	; 0x2b
    574c:	5c a4       	ldd	r5, Y+44	; 0x2c
    574e:	d1 01       	movw	r26, r2
    5750:	99 27       	eor	r25, r25
    5752:	88 27       	eor	r24, r24
    5754:	2d a0       	ldd	r2, Y+37	; 0x25
    5756:	3e a0       	ldd	r3, Y+38	; 0x26
    5758:	4f a0       	ldd	r4, Y+39	; 0x27
    575a:	58 a4       	ldd	r5, Y+40	; 0x28
    575c:	92 01       	movw	r18, r4
    575e:	44 27       	eor	r20, r20
    5760:	55 27       	eor	r21, r21
    5762:	82 2b       	or	r24, r18
    5764:	93 2b       	or	r25, r19
    5766:	a4 2b       	or	r26, r20
    5768:	b5 2b       	or	r27, r21
    576a:	86 15       	cp	r24, r6
    576c:	97 05       	cpc	r25, r7
    576e:	a8 05       	cpc	r26, r8
    5770:	b9 05       	cpc	r27, r9
    5772:	30 f5       	brcc	.+76     	; 0x57c0 <__udivdi3+0x70c>
    5774:	29 8d       	ldd	r18, Y+25	; 0x19
    5776:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5778:	4b 8d       	ldd	r20, Y+27	; 0x1b
    577a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    577c:	21 50       	subi	r18, 0x01	; 1
    577e:	30 40       	sbci	r19, 0x00	; 0
    5780:	40 40       	sbci	r20, 0x00	; 0
    5782:	50 40       	sbci	r21, 0x00	; 0
    5784:	29 8f       	std	Y+25, r18	; 0x19
    5786:	3a 8f       	std	Y+26, r19	; 0x1a
    5788:	4b 8f       	std	Y+27, r20	; 0x1b
    578a:	5c 8f       	std	Y+28, r21	; 0x1c
    578c:	8e 0d       	add	r24, r14
    578e:	9f 1d       	adc	r25, r15
    5790:	a0 1f       	adc	r26, r16
    5792:	b1 1f       	adc	r27, r17
    5794:	8e 15       	cp	r24, r14
    5796:	9f 05       	cpc	r25, r15
    5798:	a0 07       	cpc	r26, r16
    579a:	b1 07       	cpc	r27, r17
    579c:	88 f0       	brcs	.+34     	; 0x57c0 <__udivdi3+0x70c>
    579e:	86 15       	cp	r24, r6
    57a0:	97 05       	cpc	r25, r7
    57a2:	a8 05       	cpc	r26, r8
    57a4:	b9 05       	cpc	r27, r9
    57a6:	60 f4       	brcc	.+24     	; 0x57c0 <__udivdi3+0x70c>
    57a8:	21 50       	subi	r18, 0x01	; 1
    57aa:	30 40       	sbci	r19, 0x00	; 0
    57ac:	40 40       	sbci	r20, 0x00	; 0
    57ae:	50 40       	sbci	r21, 0x00	; 0
    57b0:	29 8f       	std	Y+25, r18	; 0x19
    57b2:	3a 8f       	std	Y+26, r19	; 0x1a
    57b4:	4b 8f       	std	Y+27, r20	; 0x1b
    57b6:	5c 8f       	std	Y+28, r21	; 0x1c
    57b8:	8e 0d       	add	r24, r14
    57ba:	9f 1d       	adc	r25, r15
    57bc:	a0 1f       	adc	r26, r16
    57be:	b1 1f       	adc	r27, r17
    57c0:	ac 01       	movw	r20, r24
    57c2:	bd 01       	movw	r22, r26
    57c4:	46 19       	sub	r20, r6
    57c6:	57 09       	sbc	r21, r7
    57c8:	68 09       	sbc	r22, r8
    57ca:	79 09       	sbc	r23, r9
    57cc:	3a 01       	movw	r6, r20
    57ce:	4b 01       	movw	r8, r22
    57d0:	cb 01       	movw	r24, r22
    57d2:	ba 01       	movw	r22, r20
    57d4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    57d6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    57d8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    57da:	58 a1       	ldd	r21, Y+32	; 0x20
    57dc:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    57e0:	52 2e       	mov	r5, r18
    57e2:	43 2e       	mov	r4, r19
    57e4:	34 2e       	mov	r3, r20
    57e6:	25 2e       	mov	r2, r21
    57e8:	69 a7       	std	Y+41, r22	; 0x29
    57ea:	7a a7       	std	Y+42, r23	; 0x2a
    57ec:	8b a7       	std	Y+43, r24	; 0x2b
    57ee:	9c a7       	std	Y+44, r25	; 0x2c
    57f0:	c4 01       	movw	r24, r8
    57f2:	b3 01       	movw	r22, r6
    57f4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    57f6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    57f8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    57fa:	58 a1       	ldd	r21, Y+32	; 0x20
    57fc:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    5800:	65 2c       	mov	r6, r5
    5802:	74 2c       	mov	r7, r4
    5804:	83 2c       	mov	r8, r3
    5806:	92 2c       	mov	r9, r2
    5808:	c4 01       	movw	r24, r8
    580a:	b3 01       	movw	r22, r6
    580c:	29 a1       	ldd	r18, Y+33	; 0x21
    580e:	3a a1       	ldd	r19, Y+34	; 0x22
    5810:	4b a1       	ldd	r20, Y+35	; 0x23
    5812:	5c a1       	ldd	r21, Y+36	; 0x24
    5814:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    5818:	1b 01       	movw	r2, r22
    581a:	2c 01       	movw	r4, r24
    581c:	69 a5       	ldd	r22, Y+41	; 0x29
    581e:	7a a5       	ldd	r23, Y+42	; 0x2a
    5820:	8b a5       	ldd	r24, Y+43	; 0x2b
    5822:	9c a5       	ldd	r25, Y+44	; 0x2c
    5824:	ab 01       	movw	r20, r22
    5826:	33 27       	eor	r19, r19
    5828:	22 27       	eor	r18, r18
    582a:	8d a1       	ldd	r24, Y+37	; 0x25
    582c:	9e a1       	ldd	r25, Y+38	; 0x26
    582e:	af a1       	ldd	r26, Y+39	; 0x27
    5830:	b8 a5       	ldd	r27, Y+40	; 0x28
    5832:	a0 70       	andi	r26, 0x00	; 0
    5834:	b0 70       	andi	r27, 0x00	; 0
    5836:	28 2b       	or	r18, r24
    5838:	39 2b       	or	r19, r25
    583a:	4a 2b       	or	r20, r26
    583c:	5b 2b       	or	r21, r27
    583e:	22 15       	cp	r18, r2
    5840:	33 05       	cpc	r19, r3
    5842:	44 05       	cpc	r20, r4
    5844:	55 05       	cpc	r21, r5
    5846:	c0 f4       	brcc	.+48     	; 0x5878 <__udivdi3+0x7c4>
    5848:	08 94       	sec
    584a:	61 08       	sbc	r6, r1
    584c:	71 08       	sbc	r7, r1
    584e:	81 08       	sbc	r8, r1
    5850:	91 08       	sbc	r9, r1
    5852:	2e 0d       	add	r18, r14
    5854:	3f 1d       	adc	r19, r15
    5856:	40 1f       	adc	r20, r16
    5858:	51 1f       	adc	r21, r17
    585a:	2e 15       	cp	r18, r14
    585c:	3f 05       	cpc	r19, r15
    585e:	40 07       	cpc	r20, r16
    5860:	51 07       	cpc	r21, r17
    5862:	50 f0       	brcs	.+20     	; 0x5878 <__udivdi3+0x7c4>
    5864:	22 15       	cp	r18, r2
    5866:	33 05       	cpc	r19, r3
    5868:	44 05       	cpc	r20, r4
    586a:	55 05       	cpc	r21, r5
    586c:	28 f4       	brcc	.+10     	; 0x5878 <__udivdi3+0x7c4>
    586e:	08 94       	sec
    5870:	61 08       	sbc	r6, r1
    5872:	71 08       	sbc	r7, r1
    5874:	81 08       	sbc	r8, r1
    5876:	91 08       	sbc	r9, r1
    5878:	89 8d       	ldd	r24, Y+25	; 0x19
    587a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    587c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    587e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    5880:	8c 01       	movw	r16, r24
    5882:	ff 24       	eor	r15, r15
    5884:	ee 24       	eor	r14, r14
    5886:	e6 28       	or	r14, r6
    5888:	f7 28       	or	r15, r7
    588a:	08 29       	or	r16, r8
    588c:	19 29       	or	r17, r9
    588e:	4d c2       	rjmp	.+1178   	; 0x5d2a <__udivdi3+0xc76>
    5890:	a2 16       	cp	r10, r18
    5892:	b3 06       	cpc	r11, r19
    5894:	c4 06       	cpc	r12, r20
    5896:	d5 06       	cpc	r13, r21
    5898:	08 f4       	brcc	.+2      	; 0x589c <__udivdi3+0x7e8>
    589a:	34 c2       	rjmp	.+1128   	; 0x5d04 <__udivdi3+0xc50>
    589c:	20 30       	cpi	r18, 0x00	; 0
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	39 07       	cpc	r19, r25
    58a2:	91 e0       	ldi	r25, 0x01	; 1
    58a4:	49 07       	cpc	r20, r25
    58a6:	90 e0       	ldi	r25, 0x00	; 0
    58a8:	59 07       	cpc	r21, r25
    58aa:	50 f4       	brcc	.+20     	; 0x58c0 <__udivdi3+0x80c>
    58ac:	2f 3f       	cpi	r18, 0xFF	; 255
    58ae:	31 05       	cpc	r19, r1
    58b0:	41 05       	cpc	r20, r1
    58b2:	51 05       	cpc	r21, r1
    58b4:	09 f0       	breq	.+2      	; 0x58b8 <__udivdi3+0x804>
    58b6:	90 f4       	brcc	.+36     	; 0x58dc <__udivdi3+0x828>
    58b8:	66 24       	eor	r6, r6
    58ba:	77 24       	eor	r7, r7
    58bc:	43 01       	movw	r8, r6
    58be:	19 c0       	rjmp	.+50     	; 0x58f2 <__udivdi3+0x83e>
    58c0:	20 30       	cpi	r18, 0x00	; 0
    58c2:	a0 e0       	ldi	r26, 0x00	; 0
    58c4:	3a 07       	cpc	r19, r26
    58c6:	a0 e0       	ldi	r26, 0x00	; 0
    58c8:	4a 07       	cpc	r20, r26
    58ca:	a1 e0       	ldi	r26, 0x01	; 1
    58cc:	5a 07       	cpc	r21, r26
    58ce:	60 f4       	brcc	.+24     	; 0x58e8 <__udivdi3+0x834>
    58d0:	90 e1       	ldi	r25, 0x10	; 16
    58d2:	69 2e       	mov	r6, r25
    58d4:	71 2c       	mov	r7, r1
    58d6:	81 2c       	mov	r8, r1
    58d8:	91 2c       	mov	r9, r1
    58da:	0b c0       	rjmp	.+22     	; 0x58f2 <__udivdi3+0x83e>
    58dc:	88 e0       	ldi	r24, 0x08	; 8
    58de:	68 2e       	mov	r6, r24
    58e0:	71 2c       	mov	r7, r1
    58e2:	81 2c       	mov	r8, r1
    58e4:	91 2c       	mov	r9, r1
    58e6:	05 c0       	rjmp	.+10     	; 0x58f2 <__udivdi3+0x83e>
    58e8:	b8 e1       	ldi	r27, 0x18	; 24
    58ea:	6b 2e       	mov	r6, r27
    58ec:	71 2c       	mov	r7, r1
    58ee:	81 2c       	mov	r8, r1
    58f0:	91 2c       	mov	r9, r1
    58f2:	da 01       	movw	r26, r20
    58f4:	c9 01       	movw	r24, r18
    58f6:	06 2c       	mov	r0, r6
    58f8:	04 c0       	rjmp	.+8      	; 0x5902 <__udivdi3+0x84e>
    58fa:	b6 95       	lsr	r27
    58fc:	a7 95       	ror	r26
    58fe:	97 95       	ror	r25
    5900:	87 95       	ror	r24
    5902:	0a 94       	dec	r0
    5904:	d2 f7       	brpl	.-12     	; 0x58fa <__udivdi3+0x846>
    5906:	8f 52       	subi	r24, 0x2F	; 47
    5908:	9d 4f       	sbci	r25, 0xFD	; 253
    590a:	fc 01       	movw	r30, r24
    590c:	80 81       	ld	r24, Z
    590e:	68 0e       	add	r6, r24
    5910:	71 1c       	adc	r7, r1
    5912:	81 1c       	adc	r8, r1
    5914:	91 1c       	adc	r9, r1
    5916:	80 e2       	ldi	r24, 0x20	; 32
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	a0 e0       	ldi	r26, 0x00	; 0
    591c:	b0 e0       	ldi	r27, 0x00	; 0
    591e:	86 19       	sub	r24, r6
    5920:	97 09       	sbc	r25, r7
    5922:	a8 09       	sbc	r26, r8
    5924:	b9 09       	sbc	r27, r9
    5926:	89 f4       	brne	.+34     	; 0x594a <__udivdi3+0x896>
    5928:	2a 15       	cp	r18, r10
    592a:	3b 05       	cpc	r19, r11
    592c:	4c 05       	cpc	r20, r12
    592e:	5d 05       	cpc	r21, r13
    5930:	08 f4       	brcc	.+2      	; 0x5934 <__udivdi3+0x880>
    5932:	ef c1       	rjmp	.+990    	; 0x5d12 <__udivdi3+0xc5e>
    5934:	2d a0       	ldd	r2, Y+37	; 0x25
    5936:	3e a0       	ldd	r3, Y+38	; 0x26
    5938:	4f a0       	ldd	r4, Y+39	; 0x27
    593a:	58 a4       	ldd	r5, Y+40	; 0x28
    593c:	2e 14       	cp	r2, r14
    593e:	3f 04       	cpc	r3, r15
    5940:	40 06       	cpc	r4, r16
    5942:	51 06       	cpc	r5, r17
    5944:	08 f0       	brcs	.+2      	; 0x5948 <__udivdi3+0x894>
    5946:	e5 c1       	rjmp	.+970    	; 0x5d12 <__udivdi3+0xc5e>
    5948:	dd c1       	rjmp	.+954    	; 0x5d04 <__udivdi3+0xc50>
    594a:	89 a7       	std	Y+41, r24	; 0x29
    594c:	19 01       	movw	r2, r18
    594e:	2a 01       	movw	r4, r20
    5950:	04 c0       	rjmp	.+8      	; 0x595a <__udivdi3+0x8a6>
    5952:	22 0c       	add	r2, r2
    5954:	33 1c       	adc	r3, r3
    5956:	44 1c       	adc	r4, r4
    5958:	55 1c       	adc	r5, r5
    595a:	8a 95       	dec	r24
    595c:	d2 f7       	brpl	.-12     	; 0x5952 <__udivdi3+0x89e>
    595e:	d8 01       	movw	r26, r16
    5960:	c7 01       	movw	r24, r14
    5962:	06 2c       	mov	r0, r6
    5964:	04 c0       	rjmp	.+8      	; 0x596e <__udivdi3+0x8ba>
    5966:	b6 95       	lsr	r27
    5968:	a7 95       	ror	r26
    596a:	97 95       	ror	r25
    596c:	87 95       	ror	r24
    596e:	0a 94       	dec	r0
    5970:	d2 f7       	brpl	.-12     	; 0x5966 <__udivdi3+0x8b2>
    5972:	28 2a       	or	r2, r24
    5974:	39 2a       	or	r3, r25
    5976:	4a 2a       	or	r4, r26
    5978:	5b 2a       	or	r5, r27
    597a:	a8 01       	movw	r20, r16
    597c:	97 01       	movw	r18, r14
    597e:	09 a4       	ldd	r0, Y+41	; 0x29
    5980:	04 c0       	rjmp	.+8      	; 0x598a <__udivdi3+0x8d6>
    5982:	22 0f       	add	r18, r18
    5984:	33 1f       	adc	r19, r19
    5986:	44 1f       	adc	r20, r20
    5988:	55 1f       	adc	r21, r21
    598a:	0a 94       	dec	r0
    598c:	d2 f7       	brpl	.-12     	; 0x5982 <__udivdi3+0x8ce>
    598e:	29 ab       	std	Y+49, r18	; 0x31
    5990:	3a ab       	std	Y+50, r19	; 0x32
    5992:	4b ab       	std	Y+51, r20	; 0x33
    5994:	5c ab       	std	Y+52, r21	; 0x34
    5996:	86 01       	movw	r16, r12
    5998:	75 01       	movw	r14, r10
    599a:	06 2c       	mov	r0, r6
    599c:	04 c0       	rjmp	.+8      	; 0x59a6 <__udivdi3+0x8f2>
    599e:	16 95       	lsr	r17
    59a0:	07 95       	ror	r16
    59a2:	f7 94       	ror	r15
    59a4:	e7 94       	ror	r14
    59a6:	0a 94       	dec	r0
    59a8:	d2 f7       	brpl	.-12     	; 0x599e <__udivdi3+0x8ea>
    59aa:	b6 01       	movw	r22, r12
    59ac:	a5 01       	movw	r20, r10
    59ae:	09 a4       	ldd	r0, Y+41	; 0x29
    59b0:	04 c0       	rjmp	.+8      	; 0x59ba <__udivdi3+0x906>
    59b2:	44 0f       	add	r20, r20
    59b4:	55 1f       	adc	r21, r21
    59b6:	66 1f       	adc	r22, r22
    59b8:	77 1f       	adc	r23, r23
    59ba:	0a 94       	dec	r0
    59bc:	d2 f7       	brpl	.-12     	; 0x59b2 <__udivdi3+0x8fe>
    59be:	4d 8f       	std	Y+29, r20	; 0x1d
    59c0:	5e 8f       	std	Y+30, r21	; 0x1e
    59c2:	6f 8f       	std	Y+31, r22	; 0x1f
    59c4:	78 a3       	std	Y+32, r23	; 0x20
    59c6:	6d a1       	ldd	r22, Y+37	; 0x25
    59c8:	7e a1       	ldd	r23, Y+38	; 0x26
    59ca:	8f a1       	ldd	r24, Y+39	; 0x27
    59cc:	98 a5       	ldd	r25, Y+40	; 0x28
    59ce:	04 c0       	rjmp	.+8      	; 0x59d8 <__udivdi3+0x924>
    59d0:	96 95       	lsr	r25
    59d2:	87 95       	ror	r24
    59d4:	77 95       	ror	r23
    59d6:	67 95       	ror	r22
    59d8:	6a 94       	dec	r6
    59da:	d2 f7       	brpl	.-12     	; 0x59d0 <__udivdi3+0x91c>
    59dc:	3b 01       	movw	r6, r22
    59de:	4c 01       	movw	r8, r24
    59e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59e4:	af 8d       	ldd	r26, Y+31	; 0x1f
    59e6:	b8 a1       	ldd	r27, Y+32	; 0x20
    59e8:	86 29       	or	r24, r6
    59ea:	97 29       	or	r25, r7
    59ec:	a8 29       	or	r26, r8
    59ee:	b9 29       	or	r27, r9
    59f0:	8d 8f       	std	Y+29, r24	; 0x1d
    59f2:	9e 8f       	std	Y+30, r25	; 0x1e
    59f4:	af 8f       	std	Y+31, r26	; 0x1f
    59f6:	b8 a3       	std	Y+32, r27	; 0x20
    59f8:	52 01       	movw	r10, r4
    59fa:	cc 24       	eor	r12, r12
    59fc:	dd 24       	eor	r13, r13
    59fe:	a9 a2       	std	Y+33, r10	; 0x21
    5a00:	ba a2       	std	Y+34, r11	; 0x22
    5a02:	cb a2       	std	Y+35, r12	; 0x23
    5a04:	dc a2       	std	Y+36, r13	; 0x24
    5a06:	a2 01       	movw	r20, r4
    5a08:	91 01       	movw	r18, r2
    5a0a:	40 70       	andi	r20, 0x00	; 0
    5a0c:	50 70       	andi	r21, 0x00	; 0
    5a0e:	2d ab       	std	Y+53, r18	; 0x35
    5a10:	3e ab       	std	Y+54, r19	; 0x36
    5a12:	4f ab       	std	Y+55, r20	; 0x37
    5a14:	58 af       	std	Y+56, r21	; 0x38
    5a16:	c8 01       	movw	r24, r16
    5a18:	b7 01       	movw	r22, r14
    5a1a:	a6 01       	movw	r20, r12
    5a1c:	95 01       	movw	r18, r10
    5a1e:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    5a22:	62 2e       	mov	r6, r18
    5a24:	a3 2e       	mov	r10, r19
    5a26:	d4 2e       	mov	r13, r20
    5a28:	c5 2e       	mov	r12, r21
    5a2a:	6d a7       	std	Y+45, r22	; 0x2d
    5a2c:	7e a7       	std	Y+46, r23	; 0x2e
    5a2e:	8f a7       	std	Y+47, r24	; 0x2f
    5a30:	98 ab       	std	Y+48, r25	; 0x30
    5a32:	c8 01       	movw	r24, r16
    5a34:	b7 01       	movw	r22, r14
    5a36:	29 a1       	ldd	r18, Y+33	; 0x21
    5a38:	3a a1       	ldd	r19, Y+34	; 0x22
    5a3a:	4b a1       	ldd	r20, Y+35	; 0x23
    5a3c:	5c a1       	ldd	r21, Y+36	; 0x24
    5a3e:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    5a42:	e6 2c       	mov	r14, r6
    5a44:	fa 2c       	mov	r15, r10
    5a46:	0d 2d       	mov	r16, r13
    5a48:	1c 2d       	mov	r17, r12
    5a4a:	e9 8e       	std	Y+25, r14	; 0x19
    5a4c:	fa 8e       	std	Y+26, r15	; 0x1a
    5a4e:	0b 8f       	std	Y+27, r16	; 0x1b
    5a50:	1c 8f       	std	Y+28, r17	; 0x1c
    5a52:	c8 01       	movw	r24, r16
    5a54:	b7 01       	movw	r22, r14
    5a56:	2d a9       	ldd	r18, Y+53	; 0x35
    5a58:	3e a9       	ldd	r19, Y+54	; 0x36
    5a5a:	4f a9       	ldd	r20, Y+55	; 0x37
    5a5c:	58 ad       	ldd	r21, Y+56	; 0x38
    5a5e:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    5a62:	ad a4       	ldd	r10, Y+45	; 0x2d
    5a64:	be a4       	ldd	r11, Y+46	; 0x2e
    5a66:	cf a4       	ldd	r12, Y+47	; 0x2f
    5a68:	d8 a8       	ldd	r13, Y+48	; 0x30
    5a6a:	85 01       	movw	r16, r10
    5a6c:	ff 24       	eor	r15, r15
    5a6e:	ee 24       	eor	r14, r14
    5a70:	ad 8c       	ldd	r10, Y+29	; 0x1d
    5a72:	be 8c       	ldd	r11, Y+30	; 0x1e
    5a74:	cf 8c       	ldd	r12, Y+31	; 0x1f
    5a76:	d8 a0       	ldd	r13, Y+32	; 0x20
    5a78:	96 01       	movw	r18, r12
    5a7a:	44 27       	eor	r20, r20
    5a7c:	55 27       	eor	r21, r21
    5a7e:	e2 2a       	or	r14, r18
    5a80:	f3 2a       	or	r15, r19
    5a82:	04 2b       	or	r16, r20
    5a84:	15 2b       	or	r17, r21
    5a86:	e6 16       	cp	r14, r22
    5a88:	f7 06       	cpc	r15, r23
    5a8a:	08 07       	cpc	r16, r24
    5a8c:	19 07       	cpc	r17, r25
    5a8e:	30 f5       	brcc	.+76     	; 0x5adc <__udivdi3+0xa28>
    5a90:	29 8d       	ldd	r18, Y+25	; 0x19
    5a92:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5a94:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5a96:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5a98:	21 50       	subi	r18, 0x01	; 1
    5a9a:	30 40       	sbci	r19, 0x00	; 0
    5a9c:	40 40       	sbci	r20, 0x00	; 0
    5a9e:	50 40       	sbci	r21, 0x00	; 0
    5aa0:	29 8f       	std	Y+25, r18	; 0x19
    5aa2:	3a 8f       	std	Y+26, r19	; 0x1a
    5aa4:	4b 8f       	std	Y+27, r20	; 0x1b
    5aa6:	5c 8f       	std	Y+28, r21	; 0x1c
    5aa8:	e2 0c       	add	r14, r2
    5aaa:	f3 1c       	adc	r15, r3
    5aac:	04 1d       	adc	r16, r4
    5aae:	15 1d       	adc	r17, r5
    5ab0:	e2 14       	cp	r14, r2
    5ab2:	f3 04       	cpc	r15, r3
    5ab4:	04 05       	cpc	r16, r4
    5ab6:	15 05       	cpc	r17, r5
    5ab8:	88 f0       	brcs	.+34     	; 0x5adc <__udivdi3+0xa28>
    5aba:	e6 16       	cp	r14, r22
    5abc:	f7 06       	cpc	r15, r23
    5abe:	08 07       	cpc	r16, r24
    5ac0:	19 07       	cpc	r17, r25
    5ac2:	60 f4       	brcc	.+24     	; 0x5adc <__udivdi3+0xa28>
    5ac4:	21 50       	subi	r18, 0x01	; 1
    5ac6:	30 40       	sbci	r19, 0x00	; 0
    5ac8:	40 40       	sbci	r20, 0x00	; 0
    5aca:	50 40       	sbci	r21, 0x00	; 0
    5acc:	29 8f       	std	Y+25, r18	; 0x19
    5ace:	3a 8f       	std	Y+26, r19	; 0x1a
    5ad0:	4b 8f       	std	Y+27, r20	; 0x1b
    5ad2:	5c 8f       	std	Y+28, r21	; 0x1c
    5ad4:	e2 0c       	add	r14, r2
    5ad6:	f3 1c       	adc	r15, r3
    5ad8:	04 1d       	adc	r16, r4
    5ada:	15 1d       	adc	r17, r5
    5adc:	e6 1a       	sub	r14, r22
    5ade:	f7 0a       	sbc	r15, r23
    5ae0:	08 0b       	sbc	r16, r24
    5ae2:	19 0b       	sbc	r17, r25
    5ae4:	c8 01       	movw	r24, r16
    5ae6:	b7 01       	movw	r22, r14
    5ae8:	29 a1       	ldd	r18, Y+33	; 0x21
    5aea:	3a a1       	ldd	r19, Y+34	; 0x22
    5aec:	4b a1       	ldd	r20, Y+35	; 0x23
    5aee:	5c a1       	ldd	r21, Y+36	; 0x24
    5af0:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    5af4:	a2 2e       	mov	r10, r18
    5af6:	d3 2e       	mov	r13, r19
    5af8:	c4 2e       	mov	r12, r20
    5afa:	b5 2e       	mov	r11, r21
    5afc:	6d a7       	std	Y+45, r22	; 0x2d
    5afe:	7e a7       	std	Y+46, r23	; 0x2e
    5b00:	8f a7       	std	Y+47, r24	; 0x2f
    5b02:	98 ab       	std	Y+48, r25	; 0x30
    5b04:	c8 01       	movw	r24, r16
    5b06:	b7 01       	movw	r22, r14
    5b08:	29 a1       	ldd	r18, Y+33	; 0x21
    5b0a:	3a a1       	ldd	r19, Y+34	; 0x22
    5b0c:	4b a1       	ldd	r20, Y+35	; 0x23
    5b0e:	5c a1       	ldd	r21, Y+36	; 0x24
    5b10:	0e 94 39 30 	call	0x6072	; 0x6072 <__udivmodsi4>
    5b14:	6a 2c       	mov	r6, r10
    5b16:	7d 2c       	mov	r7, r13
    5b18:	8c 2c       	mov	r8, r12
    5b1a:	9b 2c       	mov	r9, r11
    5b1c:	c4 01       	movw	r24, r8
    5b1e:	b3 01       	movw	r22, r6
    5b20:	2d a9       	ldd	r18, Y+53	; 0x35
    5b22:	3e a9       	ldd	r19, Y+54	; 0x36
    5b24:	4f a9       	ldd	r20, Y+55	; 0x37
    5b26:	58 ad       	ldd	r21, Y+56	; 0x38
    5b28:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    5b2c:	9b 01       	movw	r18, r22
    5b2e:	ac 01       	movw	r20, r24
    5b30:	ad a4       	ldd	r10, Y+45	; 0x2d
    5b32:	be a4       	ldd	r11, Y+46	; 0x2e
    5b34:	cf a4       	ldd	r12, Y+47	; 0x2f
    5b36:	d8 a8       	ldd	r13, Y+48	; 0x30
    5b38:	d5 01       	movw	r26, r10
    5b3a:	99 27       	eor	r25, r25
    5b3c:	88 27       	eor	r24, r24
    5b3e:	ad 8c       	ldd	r10, Y+29	; 0x1d
    5b40:	be 8c       	ldd	r11, Y+30	; 0x1e
    5b42:	cf 8c       	ldd	r12, Y+31	; 0x1f
    5b44:	d8 a0       	ldd	r13, Y+32	; 0x20
    5b46:	6f ef       	ldi	r22, 0xFF	; 255
    5b48:	e6 2e       	mov	r14, r22
    5b4a:	6f ef       	ldi	r22, 0xFF	; 255
    5b4c:	f6 2e       	mov	r15, r22
    5b4e:	01 2d       	mov	r16, r1
    5b50:	11 2d       	mov	r17, r1
    5b52:	ae 20       	and	r10, r14
    5b54:	bf 20       	and	r11, r15
    5b56:	c0 22       	and	r12, r16
    5b58:	d1 22       	and	r13, r17
    5b5a:	8a 29       	or	r24, r10
    5b5c:	9b 29       	or	r25, r11
    5b5e:	ac 29       	or	r26, r12
    5b60:	bd 29       	or	r27, r13
    5b62:	82 17       	cp	r24, r18
    5b64:	93 07       	cpc	r25, r19
    5b66:	a4 07       	cpc	r26, r20
    5b68:	b5 07       	cpc	r27, r21
    5b6a:	e0 f4       	brcc	.+56     	; 0x5ba4 <__udivdi3+0xaf0>
    5b6c:	08 94       	sec
    5b6e:	61 08       	sbc	r6, r1
    5b70:	71 08       	sbc	r7, r1
    5b72:	81 08       	sbc	r8, r1
    5b74:	91 08       	sbc	r9, r1
    5b76:	82 0d       	add	r24, r2
    5b78:	93 1d       	adc	r25, r3
    5b7a:	a4 1d       	adc	r26, r4
    5b7c:	b5 1d       	adc	r27, r5
    5b7e:	82 15       	cp	r24, r2
    5b80:	93 05       	cpc	r25, r3
    5b82:	a4 05       	cpc	r26, r4
    5b84:	b5 05       	cpc	r27, r5
    5b86:	70 f0       	brcs	.+28     	; 0x5ba4 <__udivdi3+0xaf0>
    5b88:	82 17       	cp	r24, r18
    5b8a:	93 07       	cpc	r25, r19
    5b8c:	a4 07       	cpc	r26, r20
    5b8e:	b5 07       	cpc	r27, r21
    5b90:	48 f4       	brcc	.+18     	; 0x5ba4 <__udivdi3+0xaf0>
    5b92:	08 94       	sec
    5b94:	61 08       	sbc	r6, r1
    5b96:	71 08       	sbc	r7, r1
    5b98:	81 08       	sbc	r8, r1
    5b9a:	91 08       	sbc	r9, r1
    5b9c:	82 0d       	add	r24, r2
    5b9e:	93 1d       	adc	r25, r3
    5ba0:	a4 1d       	adc	r26, r4
    5ba2:	b5 1d       	adc	r27, r5
    5ba4:	1c 01       	movw	r2, r24
    5ba6:	2d 01       	movw	r4, r26
    5ba8:	22 1a       	sub	r2, r18
    5baa:	33 0a       	sbc	r3, r19
    5bac:	44 0a       	sbc	r4, r20
    5bae:	55 0a       	sbc	r5, r21
    5bb0:	2d 8e       	std	Y+29, r2	; 0x1d
    5bb2:	3e 8e       	std	Y+30, r3	; 0x1e
    5bb4:	4f 8e       	std	Y+31, r4	; 0x1f
    5bb6:	58 a2       	std	Y+32, r5	; 0x20
    5bb8:	a9 8c       	ldd	r10, Y+25	; 0x19
    5bba:	ba 8c       	ldd	r11, Y+26	; 0x1a
    5bbc:	cb 8c       	ldd	r12, Y+27	; 0x1b
    5bbe:	dc 8c       	ldd	r13, Y+28	; 0x1c
    5bc0:	85 01       	movw	r16, r10
    5bc2:	ff 24       	eor	r15, r15
    5bc4:	ee 24       	eor	r14, r14
    5bc6:	e6 28       	or	r14, r6
    5bc8:	f7 28       	or	r15, r7
    5bca:	08 29       	or	r16, r8
    5bcc:	19 29       	or	r17, r9
    5bce:	af ef       	ldi	r26, 0xFF	; 255
    5bd0:	aa 2e       	mov	r10, r26
    5bd2:	af ef       	ldi	r26, 0xFF	; 255
    5bd4:	ba 2e       	mov	r11, r26
    5bd6:	c1 2c       	mov	r12, r1
    5bd8:	d1 2c       	mov	r13, r1
    5bda:	ae 20       	and	r10, r14
    5bdc:	bf 20       	and	r11, r15
    5bde:	c0 22       	and	r12, r16
    5be0:	d1 22       	and	r13, r17
    5be2:	18 01       	movw	r2, r16
    5be4:	44 24       	eor	r4, r4
    5be6:	55 24       	eor	r5, r5
    5be8:	69 a8       	ldd	r6, Y+49	; 0x31
    5bea:	7a a8       	ldd	r7, Y+50	; 0x32
    5bec:	8b a8       	ldd	r8, Y+51	; 0x33
    5bee:	9c a8       	ldd	r9, Y+52	; 0x34
    5bf0:	2f ef       	ldi	r18, 0xFF	; 255
    5bf2:	3f ef       	ldi	r19, 0xFF	; 255
    5bf4:	40 e0       	ldi	r20, 0x00	; 0
    5bf6:	50 e0       	ldi	r21, 0x00	; 0
    5bf8:	62 22       	and	r6, r18
    5bfa:	73 22       	and	r7, r19
    5bfc:	84 22       	and	r8, r20
    5bfe:	95 22       	and	r9, r21
    5c00:	69 a9       	ldd	r22, Y+49	; 0x31
    5c02:	7a a9       	ldd	r23, Y+50	; 0x32
    5c04:	8b a9       	ldd	r24, Y+51	; 0x33
    5c06:	9c a9       	ldd	r25, Y+52	; 0x34
    5c08:	ac 01       	movw	r20, r24
    5c0a:	66 27       	eor	r22, r22
    5c0c:	77 27       	eor	r23, r23
    5c0e:	49 8f       	std	Y+25, r20	; 0x19
    5c10:	5a 8f       	std	Y+26, r21	; 0x1a
    5c12:	6b 8f       	std	Y+27, r22	; 0x1b
    5c14:	7c 8f       	std	Y+28, r23	; 0x1c
    5c16:	c6 01       	movw	r24, r12
    5c18:	b5 01       	movw	r22, r10
    5c1a:	a4 01       	movw	r20, r8
    5c1c:	93 01       	movw	r18, r6
    5c1e:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    5c22:	69 a3       	std	Y+33, r22	; 0x21
    5c24:	7a a3       	std	Y+34, r23	; 0x22
    5c26:	8b a3       	std	Y+35, r24	; 0x23
    5c28:	9c a3       	std	Y+36, r25	; 0x24
    5c2a:	c6 01       	movw	r24, r12
    5c2c:	b5 01       	movw	r22, r10
    5c2e:	29 8d       	ldd	r18, Y+25	; 0x19
    5c30:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5c32:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5c34:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5c36:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    5c3a:	5b 01       	movw	r10, r22
    5c3c:	6c 01       	movw	r12, r24
    5c3e:	c2 01       	movw	r24, r4
    5c40:	b1 01       	movw	r22, r2
    5c42:	a4 01       	movw	r20, r8
    5c44:	93 01       	movw	r18, r6
    5c46:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    5c4a:	3b 01       	movw	r6, r22
    5c4c:	4c 01       	movw	r8, r24
    5c4e:	c2 01       	movw	r24, r4
    5c50:	b1 01       	movw	r22, r2
    5c52:	29 8d       	ldd	r18, Y+25	; 0x19
    5c54:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5c56:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5c58:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5c5a:	0e 94 06 30 	call	0x600c	; 0x600c <__mulsi3>
    5c5e:	9b 01       	movw	r18, r22
    5c60:	ac 01       	movw	r20, r24
    5c62:	a6 0c       	add	r10, r6
    5c64:	b7 1c       	adc	r11, r7
    5c66:	c8 1c       	adc	r12, r8
    5c68:	d9 1c       	adc	r13, r9
    5c6a:	29 a0       	ldd	r2, Y+33	; 0x21
    5c6c:	3a a0       	ldd	r3, Y+34	; 0x22
    5c6e:	4b a0       	ldd	r4, Y+35	; 0x23
    5c70:	5c a0       	ldd	r5, Y+36	; 0x24
    5c72:	c2 01       	movw	r24, r4
    5c74:	aa 27       	eor	r26, r26
    5c76:	bb 27       	eor	r27, r27
    5c78:	a8 0e       	add	r10, r24
    5c7a:	b9 1e       	adc	r11, r25
    5c7c:	ca 1e       	adc	r12, r26
    5c7e:	db 1e       	adc	r13, r27
    5c80:	a6 14       	cp	r10, r6
    5c82:	b7 04       	cpc	r11, r7
    5c84:	c8 04       	cpc	r12, r8
    5c86:	d9 04       	cpc	r13, r9
    5c88:	20 f4       	brcc	.+8      	; 0x5c92 <__udivdi3+0xbde>
    5c8a:	20 50       	subi	r18, 0x00	; 0
    5c8c:	30 40       	sbci	r19, 0x00	; 0
    5c8e:	4f 4f       	sbci	r20, 0xFF	; 255
    5c90:	5f 4f       	sbci	r21, 0xFF	; 255
    5c92:	c6 01       	movw	r24, r12
    5c94:	aa 27       	eor	r26, r26
    5c96:	bb 27       	eor	r27, r27
    5c98:	82 0f       	add	r24, r18
    5c9a:	93 1f       	adc	r25, r19
    5c9c:	a4 1f       	adc	r26, r20
    5c9e:	b5 1f       	adc	r27, r21
    5ca0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5ca2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5ca4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    5ca6:	58 a1       	ldd	r21, Y+32	; 0x20
    5ca8:	28 17       	cp	r18, r24
    5caa:	39 07       	cpc	r19, r25
    5cac:	4a 07       	cpc	r20, r26
    5cae:	5b 07       	cpc	r21, r27
    5cb0:	18 f1       	brcs	.+70     	; 0x5cf8 <__udivdi3+0xc44>
    5cb2:	82 17       	cp	r24, r18
    5cb4:	93 07       	cpc	r25, r19
    5cb6:	a4 07       	cpc	r26, r20
    5cb8:	b5 07       	cpc	r27, r21
    5cba:	a1 f5       	brne	.+104    	; 0x5d24 <__udivdi3+0xc70>
    5cbc:	65 01       	movw	r12, r10
    5cbe:	bb 24       	eor	r11, r11
    5cc0:	aa 24       	eor	r10, r10
    5cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    5cc4:	9a a1       	ldd	r25, Y+34	; 0x22
    5cc6:	ab a1       	ldd	r26, Y+35	; 0x23
    5cc8:	bc a1       	ldd	r27, Y+36	; 0x24
    5cca:	a0 70       	andi	r26, 0x00	; 0
    5ccc:	b0 70       	andi	r27, 0x00	; 0
    5cce:	a8 0e       	add	r10, r24
    5cd0:	b9 1e       	adc	r11, r25
    5cd2:	ca 1e       	adc	r12, r26
    5cd4:	db 1e       	adc	r13, r27
    5cd6:	8d a1       	ldd	r24, Y+37	; 0x25
    5cd8:	9e a1       	ldd	r25, Y+38	; 0x26
    5cda:	af a1       	ldd	r26, Y+39	; 0x27
    5cdc:	b8 a5       	ldd	r27, Y+40	; 0x28
    5cde:	09 a4       	ldd	r0, Y+41	; 0x29
    5ce0:	04 c0       	rjmp	.+8      	; 0x5cea <__udivdi3+0xc36>
    5ce2:	88 0f       	add	r24, r24
    5ce4:	99 1f       	adc	r25, r25
    5ce6:	aa 1f       	adc	r26, r26
    5ce8:	bb 1f       	adc	r27, r27
    5cea:	0a 94       	dec	r0
    5cec:	d2 f7       	brpl	.-12     	; 0x5ce2 <__udivdi3+0xc2e>
    5cee:	8a 15       	cp	r24, r10
    5cf0:	9b 05       	cpc	r25, r11
    5cf2:	ac 05       	cpc	r26, r12
    5cf4:	bd 05       	cpc	r27, r13
    5cf6:	b0 f4       	brcc	.+44     	; 0x5d24 <__udivdi3+0xc70>
    5cf8:	08 94       	sec
    5cfa:	e1 08       	sbc	r14, r1
    5cfc:	f1 08       	sbc	r15, r1
    5cfe:	01 09       	sbc	r16, r1
    5d00:	11 09       	sbc	r17, r1
    5d02:	10 c0       	rjmp	.+32     	; 0x5d24 <__udivdi3+0xc70>
    5d04:	aa 24       	eor	r10, r10
    5d06:	bb 24       	eor	r11, r11
    5d08:	65 01       	movw	r12, r10
    5d0a:	ee 24       	eor	r14, r14
    5d0c:	ff 24       	eor	r15, r15
    5d0e:	87 01       	movw	r16, r14
    5d10:	0c c0       	rjmp	.+24     	; 0x5d2a <__udivdi3+0xc76>
    5d12:	aa 24       	eor	r10, r10
    5d14:	bb 24       	eor	r11, r11
    5d16:	65 01       	movw	r12, r10
    5d18:	81 e0       	ldi	r24, 0x01	; 1
    5d1a:	e8 2e       	mov	r14, r24
    5d1c:	f1 2c       	mov	r15, r1
    5d1e:	01 2d       	mov	r16, r1
    5d20:	11 2d       	mov	r17, r1
    5d22:	03 c0       	rjmp	.+6      	; 0x5d2a <__udivdi3+0xc76>
    5d24:	aa 24       	eor	r10, r10
    5d26:	bb 24       	eor	r11, r11
    5d28:	65 01       	movw	r12, r10
    5d2a:	fe 01       	movw	r30, r28
    5d2c:	71 96       	adiw	r30, 0x11	; 17
    5d2e:	88 e0       	ldi	r24, 0x08	; 8
    5d30:	df 01       	movw	r26, r30
    5d32:	1d 92       	st	X+, r1
    5d34:	8a 95       	dec	r24
    5d36:	e9 f7       	brne	.-6      	; 0x5d32 <__udivdi3+0xc7e>
    5d38:	e9 8a       	std	Y+17, r14	; 0x11
    5d3a:	fa 8a       	std	Y+18, r15	; 0x12
    5d3c:	0b 8b       	std	Y+19, r16	; 0x13
    5d3e:	1c 8b       	std	Y+20, r17	; 0x14
    5d40:	ad 8a       	std	Y+21, r10	; 0x15
    5d42:	be 8a       	std	Y+22, r11	; 0x16
    5d44:	cf 8a       	std	Y+23, r12	; 0x17
    5d46:	d8 8e       	std	Y+24, r13	; 0x18
    5d48:	2e 2d       	mov	r18, r14
    5d4a:	3a 89       	ldd	r19, Y+18	; 0x12
    5d4c:	4b 89       	ldd	r20, Y+19	; 0x13
    5d4e:	5c 89       	ldd	r21, Y+20	; 0x14
    5d50:	6a 2d       	mov	r22, r10
    5d52:	7e 89       	ldd	r23, Y+22	; 0x16
    5d54:	8f 89       	ldd	r24, Y+23	; 0x17
    5d56:	98 8d       	ldd	r25, Y+24	; 0x18
    5d58:	e8 96       	adiw	r28, 0x38	; 56
    5d5a:	e2 e1       	ldi	r30, 0x12	; 18
    5d5c:	0c 94 77 30 	jmp	0x60ee	; 0x60ee <__epilogue_restores__>

00005d60 <vfprintf>:
    5d60:	6f 92       	push	r6
    5d62:	7f 92       	push	r7
    5d64:	8f 92       	push	r8
    5d66:	9f 92       	push	r9
    5d68:	af 92       	push	r10
    5d6a:	bf 92       	push	r11
    5d6c:	cf 92       	push	r12
    5d6e:	df 92       	push	r13
    5d70:	ef 92       	push	r14
    5d72:	ff 92       	push	r15
    5d74:	0f 93       	push	r16
    5d76:	1f 93       	push	r17
    5d78:	df 93       	push	r29
    5d7a:	cf 93       	push	r28
    5d7c:	cd b7       	in	r28, 0x3d	; 61
    5d7e:	de b7       	in	r29, 0x3e	; 62
    5d80:	2c 97       	sbiw	r28, 0x0c	; 12
    5d82:	0f b6       	in	r0, 0x3f	; 63
    5d84:	f8 94       	cli
    5d86:	de bf       	out	0x3e, r29	; 62
    5d88:	0f be       	out	0x3f, r0	; 63
    5d8a:	cd bf       	out	0x3d, r28	; 61
    5d8c:	6c 01       	movw	r12, r24
    5d8e:	3b 01       	movw	r6, r22
    5d90:	8a 01       	movw	r16, r20
    5d92:	fc 01       	movw	r30, r24
    5d94:	17 82       	std	Z+7, r1	; 0x07
    5d96:	16 82       	std	Z+6, r1	; 0x06
    5d98:	83 81       	ldd	r24, Z+3	; 0x03
    5d9a:	81 fd       	sbrc	r24, 1
    5d9c:	03 c0       	rjmp	.+6      	; 0x5da4 <vfprintf+0x44>
    5d9e:	1e c1       	rjmp	.+572    	; 0x5fdc <vfprintf+0x27c>
    5da0:	85 01       	movw	r16, r10
    5da2:	04 c0       	rjmp	.+8      	; 0x5dac <vfprintf+0x4c>
    5da4:	4e 01       	movw	r8, r28
    5da6:	08 94       	sec
    5da8:	81 1c       	adc	r8, r1
    5daa:	91 1c       	adc	r9, r1
    5dac:	f6 01       	movw	r30, r12
    5dae:	e3 80       	ldd	r14, Z+3	; 0x03
    5db0:	f3 01       	movw	r30, r6
    5db2:	e3 fc       	sbrc	r14, 3
    5db4:	85 91       	lpm	r24, Z+
    5db6:	e3 fe       	sbrs	r14, 3
    5db8:	81 91       	ld	r24, Z+
    5dba:	3f 01       	movw	r6, r30
    5dbc:	88 23       	and	r24, r24
    5dbe:	09 f4       	brne	.+2      	; 0x5dc2 <vfprintf+0x62>
    5dc0:	09 c1       	rjmp	.+530    	; 0x5fd4 <vfprintf+0x274>
    5dc2:	85 32       	cpi	r24, 0x25	; 37
    5dc4:	51 f4       	brne	.+20     	; 0x5dda <vfprintf+0x7a>
    5dc6:	e3 fc       	sbrc	r14, 3
    5dc8:	25 91       	lpm	r18, Z+
    5dca:	e3 fe       	sbrs	r14, 3
    5dcc:	21 91       	ld	r18, Z+
    5dce:	3f 01       	movw	r6, r30
    5dd0:	25 32       	cpi	r18, 0x25	; 37
    5dd2:	11 f0       	breq	.+4      	; 0x5dd8 <vfprintf+0x78>
    5dd4:	ff 24       	eor	r15, r15
    5dd6:	23 c0       	rjmp	.+70     	; 0x5e1e <vfprintf+0xbe>
    5dd8:	85 e2       	ldi	r24, 0x25	; 37
    5dda:	90 e0       	ldi	r25, 0x00	; 0
    5ddc:	b6 01       	movw	r22, r12
    5dde:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <fputc>
    5de2:	58 01       	movw	r10, r16
    5de4:	dd cf       	rjmp	.-70     	; 0x5da0 <vfprintf+0x40>
    5de6:	22 23       	and	r18, r18
    5de8:	09 f4       	brne	.+2      	; 0x5dec <vfprintf+0x8c>
    5dea:	89 c0       	rjmp	.+274    	; 0x5efe <vfprintf+0x19e>
    5dec:	80 ed       	ldi	r24, 0xD0	; 208
    5dee:	94 e0       	ldi	r25, 0x04	; 4
    5df0:	62 2f       	mov	r22, r18
    5df2:	70 e0       	ldi	r23, 0x00	; 0
    5df4:	2c 87       	std	Y+12, r18	; 0x0c
    5df6:	0e 94 92 30 	call	0x6124	; 0x6124 <strchr_P>
    5dfa:	2c 85       	ldd	r18, Y+12	; 0x0c
    5dfc:	00 97       	sbiw	r24, 0x00	; 0
    5dfe:	49 f4       	brne	.+18     	; 0x5e12 <vfprintf+0xb2>
    5e00:	23 32       	cpi	r18, 0x23	; 35
    5e02:	19 f4       	brne	.+6      	; 0x5e0a <vfprintf+0xaa>
    5e04:	f0 e1       	ldi	r31, 0x10	; 16
    5e06:	ff 2a       	or	r15, r31
    5e08:	04 c0       	rjmp	.+8      	; 0x5e12 <vfprintf+0xb2>
    5e0a:	2c 36       	cpi	r18, 0x6C	; 108
    5e0c:	69 f4       	brne	.+26     	; 0x5e28 <vfprintf+0xc8>
    5e0e:	20 e8       	ldi	r18, 0x80	; 128
    5e10:	f2 2a       	or	r15, r18
    5e12:	f3 01       	movw	r30, r6
    5e14:	e3 fc       	sbrc	r14, 3
    5e16:	25 91       	lpm	r18, Z+
    5e18:	e3 fe       	sbrs	r14, 3
    5e1a:	21 91       	ld	r18, Z+
    5e1c:	3f 01       	movw	r6, r30
    5e1e:	f7 fe       	sbrs	r15, 7
    5e20:	e2 cf       	rjmp	.-60     	; 0x5de6 <vfprintf+0x86>
    5e22:	22 23       	and	r18, r18
    5e24:	09 f4       	brne	.+2      	; 0x5e28 <vfprintf+0xc8>
    5e26:	3f c0       	rjmp	.+126    	; 0x5ea6 <vfprintf+0x146>
    5e28:	89 ec       	ldi	r24, 0xC9	; 201
    5e2a:	94 e0       	ldi	r25, 0x04	; 4
    5e2c:	62 2f       	mov	r22, r18
    5e2e:	70 e0       	ldi	r23, 0x00	; 0
    5e30:	2c 87       	std	Y+12, r18	; 0x0c
    5e32:	0e 94 92 30 	call	0x6124	; 0x6124 <strchr_P>
    5e36:	2c 85       	ldd	r18, Y+12	; 0x0c
    5e38:	00 97       	sbiw	r24, 0x00	; 0
    5e3a:	41 f0       	breq	.+16     	; 0x5e4c <vfprintf+0xec>
    5e3c:	64 e0       	ldi	r22, 0x04	; 4
    5e3e:	a6 2e       	mov	r10, r22
    5e40:	b1 2c       	mov	r11, r1
    5e42:	a0 0e       	add	r10, r16
    5e44:	b1 1e       	adc	r11, r17
    5e46:	8f e3       	ldi	r24, 0x3F	; 63
    5e48:	90 e0       	ldi	r25, 0x00	; 0
    5e4a:	0f c0       	rjmp	.+30     	; 0x5e6a <vfprintf+0x10a>
    5e4c:	23 36       	cpi	r18, 0x63	; 99
    5e4e:	29 f0       	breq	.+10     	; 0x5e5a <vfprintf+0xfa>
    5e50:	23 37       	cpi	r18, 0x73	; 115
    5e52:	89 f0       	breq	.+34     	; 0x5e76 <vfprintf+0x116>
    5e54:	23 35       	cpi	r18, 0x53	; 83
    5e56:	29 f5       	brne	.+74     	; 0x5ea2 <vfprintf+0x142>
    5e58:	0c c0       	rjmp	.+24     	; 0x5e72 <vfprintf+0x112>
    5e5a:	52 e0       	ldi	r21, 0x02	; 2
    5e5c:	a5 2e       	mov	r10, r21
    5e5e:	b1 2c       	mov	r11, r1
    5e60:	a0 0e       	add	r10, r16
    5e62:	b1 1e       	adc	r11, r17
    5e64:	f8 01       	movw	r30, r16
    5e66:	80 81       	ld	r24, Z
    5e68:	91 81       	ldd	r25, Z+1	; 0x01
    5e6a:	b6 01       	movw	r22, r12
    5e6c:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <fputc>
    5e70:	97 cf       	rjmp	.-210    	; 0x5da0 <vfprintf+0x40>
    5e72:	f1 e0       	ldi	r31, 0x01	; 1
    5e74:	ff 2a       	or	r15, r31
    5e76:	42 e0       	ldi	r20, 0x02	; 2
    5e78:	a4 2e       	mov	r10, r20
    5e7a:	b1 2c       	mov	r11, r1
    5e7c:	a0 0e       	add	r10, r16
    5e7e:	b1 1e       	adc	r11, r17
    5e80:	f8 01       	movw	r30, r16
    5e82:	00 81       	ld	r16, Z
    5e84:	11 81       	ldd	r17, Z+1	; 0x01
    5e86:	04 c0       	rjmp	.+8      	; 0x5e90 <vfprintf+0x130>
    5e88:	90 e0       	ldi	r25, 0x00	; 0
    5e8a:	b6 01       	movw	r22, r12
    5e8c:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <fputc>
    5e90:	f8 01       	movw	r30, r16
    5e92:	f0 fc       	sbrc	r15, 0
    5e94:	85 91       	lpm	r24, Z+
    5e96:	f0 fe       	sbrs	r15, 0
    5e98:	81 91       	ld	r24, Z+
    5e9a:	8f 01       	movw	r16, r30
    5e9c:	88 23       	and	r24, r24
    5e9e:	a1 f7       	brne	.-24     	; 0x5e88 <vfprintf+0x128>
    5ea0:	7f cf       	rjmp	.-258    	; 0x5da0 <vfprintf+0x40>
    5ea2:	24 36       	cpi	r18, 0x64	; 100
    5ea4:	11 f0       	breq	.+4      	; 0x5eaa <vfprintf+0x14a>
    5ea6:	29 36       	cpi	r18, 0x69	; 105
    5ea8:	51 f5       	brne	.+84     	; 0x5efe <vfprintf+0x19e>
    5eaa:	f7 fe       	sbrs	r15, 7
    5eac:	0b c0       	rjmp	.+22     	; 0x5ec4 <vfprintf+0x164>
    5eae:	34 e0       	ldi	r19, 0x04	; 4
    5eb0:	a3 2e       	mov	r10, r19
    5eb2:	b1 2c       	mov	r11, r1
    5eb4:	a0 0e       	add	r10, r16
    5eb6:	b1 1e       	adc	r11, r17
    5eb8:	f8 01       	movw	r30, r16
    5eba:	60 81       	ld	r22, Z
    5ebc:	71 81       	ldd	r23, Z+1	; 0x01
    5ebe:	82 81       	ldd	r24, Z+2	; 0x02
    5ec0:	93 81       	ldd	r25, Z+3	; 0x03
    5ec2:	0c c0       	rjmp	.+24     	; 0x5edc <vfprintf+0x17c>
    5ec4:	22 e0       	ldi	r18, 0x02	; 2
    5ec6:	a2 2e       	mov	r10, r18
    5ec8:	b1 2c       	mov	r11, r1
    5eca:	a0 0e       	add	r10, r16
    5ecc:	b1 1e       	adc	r11, r17
    5ece:	f8 01       	movw	r30, r16
    5ed0:	60 81       	ld	r22, Z
    5ed2:	71 81       	ldd	r23, Z+1	; 0x01
    5ed4:	88 27       	eor	r24, r24
    5ed6:	77 fd       	sbrc	r23, 7
    5ed8:	80 95       	com	r24
    5eda:	98 2f       	mov	r25, r24
    5edc:	ff ee       	ldi	r31, 0xEF	; 239
    5ede:	ff 22       	and	r15, r31
    5ee0:	97 ff       	sbrs	r25, 7
    5ee2:	09 c0       	rjmp	.+18     	; 0x5ef6 <vfprintf+0x196>
    5ee4:	90 95       	com	r25
    5ee6:	80 95       	com	r24
    5ee8:	70 95       	com	r23
    5eea:	61 95       	neg	r22
    5eec:	7f 4f       	sbci	r23, 0xFF	; 255
    5eee:	8f 4f       	sbci	r24, 0xFF	; 255
    5ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ef2:	20 e4       	ldi	r18, 0x40	; 64
    5ef4:	f2 2a       	or	r15, r18
    5ef6:	a4 01       	movw	r20, r8
    5ef8:	2a e0       	ldi	r18, 0x0A	; 10
    5efa:	30 e0       	ldi	r19, 0x00	; 0
    5efc:	3b c0       	rjmp	.+118    	; 0x5f74 <vfprintf+0x214>
    5efe:	20 37       	cpi	r18, 0x70	; 112
    5f00:	99 f0       	breq	.+38     	; 0x5f28 <vfprintf+0x1c8>
    5f02:	21 37       	cpi	r18, 0x71	; 113
    5f04:	30 f4       	brcc	.+12     	; 0x5f12 <vfprintf+0x1b2>
    5f06:	28 35       	cpi	r18, 0x58	; 88
    5f08:	b1 f0       	breq	.+44     	; 0x5f36 <vfprintf+0x1d6>
    5f0a:	2f 36       	cpi	r18, 0x6F	; 111
    5f0c:	09 f0       	breq	.+2      	; 0x5f10 <vfprintf+0x1b0>
    5f0e:	62 c0       	rjmp	.+196    	; 0x5fd4 <vfprintf+0x274>
    5f10:	17 c0       	rjmp	.+46     	; 0x5f40 <vfprintf+0x1e0>
    5f12:	25 37       	cpi	r18, 0x75	; 117
    5f14:	21 f0       	breq	.+8      	; 0x5f1e <vfprintf+0x1be>
    5f16:	28 37       	cpi	r18, 0x78	; 120
    5f18:	09 f0       	breq	.+2      	; 0x5f1c <vfprintf+0x1bc>
    5f1a:	5c c0       	rjmp	.+184    	; 0x5fd4 <vfprintf+0x274>
    5f1c:	07 c0       	rjmp	.+14     	; 0x5f2c <vfprintf+0x1cc>
    5f1e:	8f ee       	ldi	r24, 0xEF	; 239
    5f20:	f8 22       	and	r15, r24
    5f22:	2a e0       	ldi	r18, 0x0A	; 10
    5f24:	30 e0       	ldi	r19, 0x00	; 0
    5f26:	0e c0       	rjmp	.+28     	; 0x5f44 <vfprintf+0x1e4>
    5f28:	e0 e1       	ldi	r30, 0x10	; 16
    5f2a:	fe 2a       	or	r15, r30
    5f2c:	f4 e2       	ldi	r31, 0x24	; 36
    5f2e:	ff 2a       	or	r15, r31
    5f30:	20 e1       	ldi	r18, 0x10	; 16
    5f32:	30 e0       	ldi	r19, 0x00	; 0
    5f34:	07 c0       	rjmp	.+14     	; 0x5f44 <vfprintf+0x1e4>
    5f36:	24 e0       	ldi	r18, 0x04	; 4
    5f38:	f2 2a       	or	r15, r18
    5f3a:	20 e1       	ldi	r18, 0x10	; 16
    5f3c:	32 e0       	ldi	r19, 0x02	; 2
    5f3e:	02 c0       	rjmp	.+4      	; 0x5f44 <vfprintf+0x1e4>
    5f40:	28 e0       	ldi	r18, 0x08	; 8
    5f42:	30 e0       	ldi	r19, 0x00	; 0
    5f44:	f7 fe       	sbrs	r15, 7
    5f46:	0b c0       	rjmp	.+22     	; 0x5f5e <vfprintf+0x1fe>
    5f48:	94 e0       	ldi	r25, 0x04	; 4
    5f4a:	a9 2e       	mov	r10, r25
    5f4c:	b1 2c       	mov	r11, r1
    5f4e:	a0 0e       	add	r10, r16
    5f50:	b1 1e       	adc	r11, r17
    5f52:	f8 01       	movw	r30, r16
    5f54:	60 81       	ld	r22, Z
    5f56:	71 81       	ldd	r23, Z+1	; 0x01
    5f58:	82 81       	ldd	r24, Z+2	; 0x02
    5f5a:	93 81       	ldd	r25, Z+3	; 0x03
    5f5c:	0a c0       	rjmp	.+20     	; 0x5f72 <vfprintf+0x212>
    5f5e:	82 e0       	ldi	r24, 0x02	; 2
    5f60:	a8 2e       	mov	r10, r24
    5f62:	b1 2c       	mov	r11, r1
    5f64:	a0 0e       	add	r10, r16
    5f66:	b1 1e       	adc	r11, r17
    5f68:	f8 01       	movw	r30, r16
    5f6a:	60 81       	ld	r22, Z
    5f6c:	71 81       	ldd	r23, Z+1	; 0x01
    5f6e:	80 e0       	ldi	r24, 0x00	; 0
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	a4 01       	movw	r20, r8
    5f74:	0e 94 5f 31 	call	0x62be	; 0x62be <__ultoa_invert>
    5f78:	e8 2e       	mov	r14, r24
    5f7a:	e8 18       	sub	r14, r8
    5f7c:	0f 2d       	mov	r16, r15
    5f7e:	10 e0       	ldi	r17, 0x00	; 0
    5f80:	f6 fe       	sbrs	r15, 6
    5f82:	05 c0       	rjmp	.+10     	; 0x5f8e <vfprintf+0x22e>
    5f84:	8d e2       	ldi	r24, 0x2D	; 45
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	b6 01       	movw	r22, r12
    5f8a:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <fputc>
    5f8e:	04 ff       	sbrs	r16, 4
    5f90:	15 c0       	rjmp	.+42     	; 0x5fbc <vfprintf+0x25c>
    5f92:	fe 01       	movw	r30, r28
    5f94:	ee 0d       	add	r30, r14
    5f96:	f1 1d       	adc	r31, r1
    5f98:	80 81       	ld	r24, Z
    5f9a:	80 33       	cpi	r24, 0x30	; 48
    5f9c:	79 f0       	breq	.+30     	; 0x5fbc <vfprintf+0x25c>
    5f9e:	80 e3       	ldi	r24, 0x30	; 48
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	b6 01       	movw	r22, r12
    5fa4:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <fputc>
    5fa8:	02 ff       	sbrs	r16, 2
    5faa:	08 c0       	rjmp	.+16     	; 0x5fbc <vfprintf+0x25c>
    5fac:	c8 01       	movw	r24, r16
    5fae:	80 72       	andi	r24, 0x20	; 32
    5fb0:	90 70       	andi	r25, 0x00	; 0
    5fb2:	88 5a       	subi	r24, 0xA8	; 168
    5fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5fb6:	b6 01       	movw	r22, r12
    5fb8:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <fputc>
    5fbc:	ea 94       	dec	r14
    5fbe:	f4 01       	movw	r30, r8
    5fc0:	ee 0d       	add	r30, r14
    5fc2:	f1 1d       	adc	r31, r1
    5fc4:	80 81       	ld	r24, Z
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	b6 01       	movw	r22, r12
    5fca:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <fputc>
    5fce:	ee 20       	and	r14, r14
    5fd0:	a9 f7       	brne	.-22     	; 0x5fbc <vfprintf+0x25c>
    5fd2:	e6 ce       	rjmp	.-564    	; 0x5da0 <vfprintf+0x40>
    5fd4:	f6 01       	movw	r30, r12
    5fd6:	26 81       	ldd	r18, Z+6	; 0x06
    5fd8:	37 81       	ldd	r19, Z+7	; 0x07
    5fda:	02 c0       	rjmp	.+4      	; 0x5fe0 <vfprintf+0x280>
    5fdc:	2f ef       	ldi	r18, 0xFF	; 255
    5fde:	3f ef       	ldi	r19, 0xFF	; 255
    5fe0:	c9 01       	movw	r24, r18
    5fe2:	2c 96       	adiw	r28, 0x0c	; 12
    5fe4:	0f b6       	in	r0, 0x3f	; 63
    5fe6:	f8 94       	cli
    5fe8:	de bf       	out	0x3e, r29	; 62
    5fea:	0f be       	out	0x3f, r0	; 63
    5fec:	cd bf       	out	0x3d, r28	; 61
    5fee:	cf 91       	pop	r28
    5ff0:	df 91       	pop	r29
    5ff2:	1f 91       	pop	r17
    5ff4:	0f 91       	pop	r16
    5ff6:	ff 90       	pop	r15
    5ff8:	ef 90       	pop	r14
    5ffa:	df 90       	pop	r13
    5ffc:	cf 90       	pop	r12
    5ffe:	bf 90       	pop	r11
    6000:	af 90       	pop	r10
    6002:	9f 90       	pop	r9
    6004:	8f 90       	pop	r8
    6006:	7f 90       	pop	r7
    6008:	6f 90       	pop	r6
    600a:	08 95       	ret

0000600c <__mulsi3>:
    600c:	62 9f       	mul	r22, r18
    600e:	d0 01       	movw	r26, r0
    6010:	73 9f       	mul	r23, r19
    6012:	f0 01       	movw	r30, r0
    6014:	82 9f       	mul	r24, r18
    6016:	e0 0d       	add	r30, r0
    6018:	f1 1d       	adc	r31, r1
    601a:	64 9f       	mul	r22, r20
    601c:	e0 0d       	add	r30, r0
    601e:	f1 1d       	adc	r31, r1
    6020:	92 9f       	mul	r25, r18
    6022:	f0 0d       	add	r31, r0
    6024:	83 9f       	mul	r24, r19
    6026:	f0 0d       	add	r31, r0
    6028:	74 9f       	mul	r23, r20
    602a:	f0 0d       	add	r31, r0
    602c:	65 9f       	mul	r22, r21
    602e:	f0 0d       	add	r31, r0
    6030:	99 27       	eor	r25, r25
    6032:	72 9f       	mul	r23, r18
    6034:	b0 0d       	add	r27, r0
    6036:	e1 1d       	adc	r30, r1
    6038:	f9 1f       	adc	r31, r25
    603a:	63 9f       	mul	r22, r19
    603c:	b0 0d       	add	r27, r0
    603e:	e1 1d       	adc	r30, r1
    6040:	f9 1f       	adc	r31, r25
    6042:	bd 01       	movw	r22, r26
    6044:	cf 01       	movw	r24, r30
    6046:	11 24       	eor	r1, r1
    6048:	08 95       	ret

0000604a <__udivmodhi4>:
    604a:	aa 1b       	sub	r26, r26
    604c:	bb 1b       	sub	r27, r27
    604e:	51 e1       	ldi	r21, 0x11	; 17
    6050:	07 c0       	rjmp	.+14     	; 0x6060 <__udivmodhi4_ep>

00006052 <__udivmodhi4_loop>:
    6052:	aa 1f       	adc	r26, r26
    6054:	bb 1f       	adc	r27, r27
    6056:	a6 17       	cp	r26, r22
    6058:	b7 07       	cpc	r27, r23
    605a:	10 f0       	brcs	.+4      	; 0x6060 <__udivmodhi4_ep>
    605c:	a6 1b       	sub	r26, r22
    605e:	b7 0b       	sbc	r27, r23

00006060 <__udivmodhi4_ep>:
    6060:	88 1f       	adc	r24, r24
    6062:	99 1f       	adc	r25, r25
    6064:	5a 95       	dec	r21
    6066:	a9 f7       	brne	.-22     	; 0x6052 <__udivmodhi4_loop>
    6068:	80 95       	com	r24
    606a:	90 95       	com	r25
    606c:	bc 01       	movw	r22, r24
    606e:	cd 01       	movw	r24, r26
    6070:	08 95       	ret

00006072 <__udivmodsi4>:
    6072:	a1 e2       	ldi	r26, 0x21	; 33
    6074:	1a 2e       	mov	r1, r26
    6076:	aa 1b       	sub	r26, r26
    6078:	bb 1b       	sub	r27, r27
    607a:	fd 01       	movw	r30, r26
    607c:	0d c0       	rjmp	.+26     	; 0x6098 <__udivmodsi4_ep>

0000607e <__udivmodsi4_loop>:
    607e:	aa 1f       	adc	r26, r26
    6080:	bb 1f       	adc	r27, r27
    6082:	ee 1f       	adc	r30, r30
    6084:	ff 1f       	adc	r31, r31
    6086:	a2 17       	cp	r26, r18
    6088:	b3 07       	cpc	r27, r19
    608a:	e4 07       	cpc	r30, r20
    608c:	f5 07       	cpc	r31, r21
    608e:	20 f0       	brcs	.+8      	; 0x6098 <__udivmodsi4_ep>
    6090:	a2 1b       	sub	r26, r18
    6092:	b3 0b       	sbc	r27, r19
    6094:	e4 0b       	sbc	r30, r20
    6096:	f5 0b       	sbc	r31, r21

00006098 <__udivmodsi4_ep>:
    6098:	66 1f       	adc	r22, r22
    609a:	77 1f       	adc	r23, r23
    609c:	88 1f       	adc	r24, r24
    609e:	99 1f       	adc	r25, r25
    60a0:	1a 94       	dec	r1
    60a2:	69 f7       	brne	.-38     	; 0x607e <__udivmodsi4_loop>
    60a4:	60 95       	com	r22
    60a6:	70 95       	com	r23
    60a8:	80 95       	com	r24
    60aa:	90 95       	com	r25
    60ac:	9b 01       	movw	r18, r22
    60ae:	ac 01       	movw	r20, r24
    60b0:	bd 01       	movw	r22, r26
    60b2:	cf 01       	movw	r24, r30
    60b4:	08 95       	ret

000060b6 <__prologue_saves__>:
    60b6:	2f 92       	push	r2
    60b8:	3f 92       	push	r3
    60ba:	4f 92       	push	r4
    60bc:	5f 92       	push	r5
    60be:	6f 92       	push	r6
    60c0:	7f 92       	push	r7
    60c2:	8f 92       	push	r8
    60c4:	9f 92       	push	r9
    60c6:	af 92       	push	r10
    60c8:	bf 92       	push	r11
    60ca:	cf 92       	push	r12
    60cc:	df 92       	push	r13
    60ce:	ef 92       	push	r14
    60d0:	ff 92       	push	r15
    60d2:	0f 93       	push	r16
    60d4:	1f 93       	push	r17
    60d6:	cf 93       	push	r28
    60d8:	df 93       	push	r29
    60da:	cd b7       	in	r28, 0x3d	; 61
    60dc:	de b7       	in	r29, 0x3e	; 62
    60de:	ca 1b       	sub	r28, r26
    60e0:	db 0b       	sbc	r29, r27
    60e2:	0f b6       	in	r0, 0x3f	; 63
    60e4:	f8 94       	cli
    60e6:	de bf       	out	0x3e, r29	; 62
    60e8:	0f be       	out	0x3f, r0	; 63
    60ea:	cd bf       	out	0x3d, r28	; 61
    60ec:	09 94       	ijmp

000060ee <__epilogue_restores__>:
    60ee:	2a 88       	ldd	r2, Y+18	; 0x12
    60f0:	39 88       	ldd	r3, Y+17	; 0x11
    60f2:	48 88       	ldd	r4, Y+16	; 0x10
    60f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    60f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    60f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    60fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    60fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    60fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    6100:	b9 84       	ldd	r11, Y+9	; 0x09
    6102:	c8 84       	ldd	r12, Y+8	; 0x08
    6104:	df 80       	ldd	r13, Y+7	; 0x07
    6106:	ee 80       	ldd	r14, Y+6	; 0x06
    6108:	fd 80       	ldd	r15, Y+5	; 0x05
    610a:	0c 81       	ldd	r16, Y+4	; 0x04
    610c:	1b 81       	ldd	r17, Y+3	; 0x03
    610e:	aa 81       	ldd	r26, Y+2	; 0x02
    6110:	b9 81       	ldd	r27, Y+1	; 0x01
    6112:	ce 0f       	add	r28, r30
    6114:	d1 1d       	adc	r29, r1
    6116:	0f b6       	in	r0, 0x3f	; 63
    6118:	f8 94       	cli
    611a:	de bf       	out	0x3e, r29	; 62
    611c:	0f be       	out	0x3f, r0	; 63
    611e:	cd bf       	out	0x3d, r28	; 61
    6120:	ed 01       	movw	r28, r26
    6122:	08 95       	ret

00006124 <strchr_P>:
    6124:	fc 01       	movw	r30, r24
    6126:	05 90       	lpm	r0, Z+
    6128:	06 16       	cp	r0, r22
    612a:	21 f0       	breq	.+8      	; 0x6134 <strchr_P+0x10>
    612c:	00 20       	and	r0, r0
    612e:	d9 f7       	brne	.-10     	; 0x6126 <strchr_P+0x2>
    6130:	c0 01       	movw	r24, r0
    6132:	08 95       	ret
    6134:	31 97       	sbiw	r30, 0x01	; 1
    6136:	cf 01       	movw	r24, r30
    6138:	08 95       	ret

0000613a <memcpy>:
    613a:	fb 01       	movw	r30, r22
    613c:	dc 01       	movw	r26, r24
    613e:	02 c0       	rjmp	.+4      	; 0x6144 <memcpy+0xa>
    6140:	01 90       	ld	r0, Z+
    6142:	0d 92       	st	X+, r0
    6144:	41 50       	subi	r20, 0x01	; 1
    6146:	50 40       	sbci	r21, 0x00	; 0
    6148:	d8 f7       	brcc	.-10     	; 0x6140 <memcpy+0x6>
    614a:	08 95       	ret

0000614c <fdevopen>:
    614c:	0f 93       	push	r16
    614e:	1f 93       	push	r17
    6150:	cf 93       	push	r28
    6152:	df 93       	push	r29
    6154:	8c 01       	movw	r16, r24
    6156:	eb 01       	movw	r28, r22
    6158:	00 97       	sbiw	r24, 0x00	; 0
    615a:	11 f4       	brne	.+4      	; 0x6160 <fdevopen+0x14>
    615c:	20 97       	sbiw	r28, 0x00	; 0
    615e:	c9 f1       	breq	.+114    	; 0x61d2 <fdevopen+0x86>
    6160:	81 e0       	ldi	r24, 0x01	; 1
    6162:	90 e0       	ldi	r25, 0x00	; 0
    6164:	6e e0       	ldi	r22, 0x0E	; 14
    6166:	70 e0       	ldi	r23, 0x00	; 0
    6168:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <calloc>
    616c:	fc 01       	movw	r30, r24
    616e:	9c 01       	movw	r18, r24
    6170:	00 97       	sbiw	r24, 0x00	; 0
    6172:	89 f1       	breq	.+98     	; 0x61d6 <fdevopen+0x8a>
    6174:	80 e8       	ldi	r24, 0x80	; 128
    6176:	83 83       	std	Z+3, r24	; 0x03
    6178:	20 97       	sbiw	r28, 0x00	; 0
    617a:	71 f0       	breq	.+28     	; 0x6198 <fdevopen+0x4c>
    617c:	d3 87       	std	Z+11, r29	; 0x0b
    617e:	c2 87       	std	Z+10, r28	; 0x0a
    6180:	81 e8       	ldi	r24, 0x81	; 129
    6182:	83 83       	std	Z+3, r24	; 0x03
    6184:	80 91 c1 06 	lds	r24, 0x06C1
    6188:	90 91 c2 06 	lds	r25, 0x06C2
    618c:	00 97       	sbiw	r24, 0x00	; 0
    618e:	21 f4       	brne	.+8      	; 0x6198 <fdevopen+0x4c>
    6190:	f0 93 c2 06 	sts	0x06C2, r31
    6194:	e0 93 c1 06 	sts	0x06C1, r30
    6198:	01 15       	cp	r16, r1
    619a:	11 05       	cpc	r17, r1
    619c:	e1 f0       	breq	.+56     	; 0x61d6 <fdevopen+0x8a>
    619e:	11 87       	std	Z+9, r17	; 0x09
    61a0:	00 87       	std	Z+8, r16	; 0x08
    61a2:	83 81       	ldd	r24, Z+3	; 0x03
    61a4:	82 60       	ori	r24, 0x02	; 2
    61a6:	83 83       	std	Z+3, r24	; 0x03
    61a8:	80 91 c3 06 	lds	r24, 0x06C3
    61ac:	90 91 c4 06 	lds	r25, 0x06C4
    61b0:	00 97       	sbiw	r24, 0x00	; 0
    61b2:	89 f4       	brne	.+34     	; 0x61d6 <fdevopen+0x8a>
    61b4:	f0 93 c4 06 	sts	0x06C4, r31
    61b8:	e0 93 c3 06 	sts	0x06C3, r30
    61bc:	80 91 c5 06 	lds	r24, 0x06C5
    61c0:	90 91 c6 06 	lds	r25, 0x06C6
    61c4:	00 97       	sbiw	r24, 0x00	; 0
    61c6:	39 f4       	brne	.+14     	; 0x61d6 <fdevopen+0x8a>
    61c8:	f0 93 c6 06 	sts	0x06C6, r31
    61cc:	e0 93 c5 06 	sts	0x06C5, r30
    61d0:	02 c0       	rjmp	.+4      	; 0x61d6 <fdevopen+0x8a>
    61d2:	20 e0       	ldi	r18, 0x00	; 0
    61d4:	30 e0       	ldi	r19, 0x00	; 0
    61d6:	c9 01       	movw	r24, r18
    61d8:	df 91       	pop	r29
    61da:	cf 91       	pop	r28
    61dc:	1f 91       	pop	r17
    61de:	0f 91       	pop	r16
    61e0:	08 95       	ret

000061e2 <fputc>:
    61e2:	0f 93       	push	r16
    61e4:	1f 93       	push	r17
    61e6:	cf 93       	push	r28
    61e8:	df 93       	push	r29
    61ea:	8c 01       	movw	r16, r24
    61ec:	eb 01       	movw	r28, r22
    61ee:	8b 81       	ldd	r24, Y+3	; 0x03
    61f0:	81 ff       	sbrs	r24, 1
    61f2:	1b c0       	rjmp	.+54     	; 0x622a <fputc+0x48>
    61f4:	82 ff       	sbrs	r24, 2
    61f6:	0d c0       	rjmp	.+26     	; 0x6212 <fputc+0x30>
    61f8:	2e 81       	ldd	r18, Y+6	; 0x06
    61fa:	3f 81       	ldd	r19, Y+7	; 0x07
    61fc:	8c 81       	ldd	r24, Y+4	; 0x04
    61fe:	9d 81       	ldd	r25, Y+5	; 0x05
    6200:	28 17       	cp	r18, r24
    6202:	39 07       	cpc	r19, r25
    6204:	64 f4       	brge	.+24     	; 0x621e <fputc+0x3c>
    6206:	e8 81       	ld	r30, Y
    6208:	f9 81       	ldd	r31, Y+1	; 0x01
    620a:	01 93       	st	Z+, r16
    620c:	f9 83       	std	Y+1, r31	; 0x01
    620e:	e8 83       	st	Y, r30
    6210:	06 c0       	rjmp	.+12     	; 0x621e <fputc+0x3c>
    6212:	e8 85       	ldd	r30, Y+8	; 0x08
    6214:	f9 85       	ldd	r31, Y+9	; 0x09
    6216:	80 2f       	mov	r24, r16
    6218:	09 95       	icall
    621a:	00 97       	sbiw	r24, 0x00	; 0
    621c:	31 f4       	brne	.+12     	; 0x622a <fputc+0x48>
    621e:	8e 81       	ldd	r24, Y+6	; 0x06
    6220:	9f 81       	ldd	r25, Y+7	; 0x07
    6222:	01 96       	adiw	r24, 0x01	; 1
    6224:	9f 83       	std	Y+7, r25	; 0x07
    6226:	8e 83       	std	Y+6, r24	; 0x06
    6228:	02 c0       	rjmp	.+4      	; 0x622e <fputc+0x4c>
    622a:	0f ef       	ldi	r16, 0xFF	; 255
    622c:	1f ef       	ldi	r17, 0xFF	; 255
    622e:	c8 01       	movw	r24, r16
    6230:	df 91       	pop	r29
    6232:	cf 91       	pop	r28
    6234:	1f 91       	pop	r17
    6236:	0f 91       	pop	r16
    6238:	08 95       	ret

0000623a <printf>:
    623a:	df 93       	push	r29
    623c:	cf 93       	push	r28
    623e:	cd b7       	in	r28, 0x3d	; 61
    6240:	de b7       	in	r29, 0x3e	; 62
    6242:	fe 01       	movw	r30, r28
    6244:	35 96       	adiw	r30, 0x05	; 5
    6246:	61 91       	ld	r22, Z+
    6248:	71 91       	ld	r23, Z+
    624a:	80 91 c3 06 	lds	r24, 0x06C3
    624e:	90 91 c4 06 	lds	r25, 0x06C4
    6252:	af 01       	movw	r20, r30
    6254:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <vfprintf>
    6258:	cf 91       	pop	r28
    625a:	df 91       	pop	r29
    625c:	08 95       	ret

0000625e <sprintf>:
    625e:	0f 93       	push	r16
    6260:	1f 93       	push	r17
    6262:	df 93       	push	r29
    6264:	cf 93       	push	r28
    6266:	cd b7       	in	r28, 0x3d	; 61
    6268:	de b7       	in	r29, 0x3e	; 62
    626a:	2e 97       	sbiw	r28, 0x0e	; 14
    626c:	0f b6       	in	r0, 0x3f	; 63
    626e:	f8 94       	cli
    6270:	de bf       	out	0x3e, r29	; 62
    6272:	0f be       	out	0x3f, r0	; 63
    6274:	cd bf       	out	0x3d, r28	; 61
    6276:	0d 89       	ldd	r16, Y+21	; 0x15
    6278:	1e 89       	ldd	r17, Y+22	; 0x16
    627a:	86 e0       	ldi	r24, 0x06	; 6
    627c:	8c 83       	std	Y+4, r24	; 0x04
    627e:	1a 83       	std	Y+2, r17	; 0x02
    6280:	09 83       	std	Y+1, r16	; 0x01
    6282:	8f ef       	ldi	r24, 0xFF	; 255
    6284:	9f e7       	ldi	r25, 0x7F	; 127
    6286:	9e 83       	std	Y+6, r25	; 0x06
    6288:	8d 83       	std	Y+5, r24	; 0x05
    628a:	9e 01       	movw	r18, r28
    628c:	27 5e       	subi	r18, 0xE7	; 231
    628e:	3f 4f       	sbci	r19, 0xFF	; 255
    6290:	ce 01       	movw	r24, r28
    6292:	01 96       	adiw	r24, 0x01	; 1
    6294:	6f 89       	ldd	r22, Y+23	; 0x17
    6296:	78 8d       	ldd	r23, Y+24	; 0x18
    6298:	a9 01       	movw	r20, r18
    629a:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <vfprintf>
    629e:	ef 81       	ldd	r30, Y+7	; 0x07
    62a0:	f8 85       	ldd	r31, Y+8	; 0x08
    62a2:	e0 0f       	add	r30, r16
    62a4:	f1 1f       	adc	r31, r17
    62a6:	10 82       	st	Z, r1
    62a8:	2e 96       	adiw	r28, 0x0e	; 14
    62aa:	0f b6       	in	r0, 0x3f	; 63
    62ac:	f8 94       	cli
    62ae:	de bf       	out	0x3e, r29	; 62
    62b0:	0f be       	out	0x3f, r0	; 63
    62b2:	cd bf       	out	0x3d, r28	; 61
    62b4:	cf 91       	pop	r28
    62b6:	df 91       	pop	r29
    62b8:	1f 91       	pop	r17
    62ba:	0f 91       	pop	r16
    62bc:	08 95       	ret

000062be <__ultoa_invert>:
    62be:	fa 01       	movw	r30, r20
    62c0:	aa 27       	eor	r26, r26
    62c2:	28 30       	cpi	r18, 0x08	; 8
    62c4:	51 f1       	breq	.+84     	; 0x631a <__ultoa_invert+0x5c>
    62c6:	20 31       	cpi	r18, 0x10	; 16
    62c8:	81 f1       	breq	.+96     	; 0x632a <__ultoa_invert+0x6c>
    62ca:	e8 94       	clt
    62cc:	6f 93       	push	r22
    62ce:	6e 7f       	andi	r22, 0xFE	; 254
    62d0:	6e 5f       	subi	r22, 0xFE	; 254
    62d2:	7f 4f       	sbci	r23, 0xFF	; 255
    62d4:	8f 4f       	sbci	r24, 0xFF	; 255
    62d6:	9f 4f       	sbci	r25, 0xFF	; 255
    62d8:	af 4f       	sbci	r26, 0xFF	; 255
    62da:	b1 e0       	ldi	r27, 0x01	; 1
    62dc:	3e d0       	rcall	.+124    	; 0x635a <__ultoa_invert+0x9c>
    62de:	b4 e0       	ldi	r27, 0x04	; 4
    62e0:	3c d0       	rcall	.+120    	; 0x635a <__ultoa_invert+0x9c>
    62e2:	67 0f       	add	r22, r23
    62e4:	78 1f       	adc	r23, r24
    62e6:	89 1f       	adc	r24, r25
    62e8:	9a 1f       	adc	r25, r26
    62ea:	a1 1d       	adc	r26, r1
    62ec:	68 0f       	add	r22, r24
    62ee:	79 1f       	adc	r23, r25
    62f0:	8a 1f       	adc	r24, r26
    62f2:	91 1d       	adc	r25, r1
    62f4:	a1 1d       	adc	r26, r1
    62f6:	6a 0f       	add	r22, r26
    62f8:	71 1d       	adc	r23, r1
    62fa:	81 1d       	adc	r24, r1
    62fc:	91 1d       	adc	r25, r1
    62fe:	a1 1d       	adc	r26, r1
    6300:	20 d0       	rcall	.+64     	; 0x6342 <__ultoa_invert+0x84>
    6302:	09 f4       	brne	.+2      	; 0x6306 <__ultoa_invert+0x48>
    6304:	68 94       	set
    6306:	3f 91       	pop	r19
    6308:	2a e0       	ldi	r18, 0x0A	; 10
    630a:	26 9f       	mul	r18, r22
    630c:	11 24       	eor	r1, r1
    630e:	30 19       	sub	r19, r0
    6310:	30 5d       	subi	r19, 0xD0	; 208
    6312:	31 93       	st	Z+, r19
    6314:	de f6       	brtc	.-74     	; 0x62cc <__ultoa_invert+0xe>
    6316:	cf 01       	movw	r24, r30
    6318:	08 95       	ret
    631a:	46 2f       	mov	r20, r22
    631c:	47 70       	andi	r20, 0x07	; 7
    631e:	40 5d       	subi	r20, 0xD0	; 208
    6320:	41 93       	st	Z+, r20
    6322:	b3 e0       	ldi	r27, 0x03	; 3
    6324:	0f d0       	rcall	.+30     	; 0x6344 <__ultoa_invert+0x86>
    6326:	c9 f7       	brne	.-14     	; 0x631a <__ultoa_invert+0x5c>
    6328:	f6 cf       	rjmp	.-20     	; 0x6316 <__ultoa_invert+0x58>
    632a:	46 2f       	mov	r20, r22
    632c:	4f 70       	andi	r20, 0x0F	; 15
    632e:	40 5d       	subi	r20, 0xD0	; 208
    6330:	4a 33       	cpi	r20, 0x3A	; 58
    6332:	18 f0       	brcs	.+6      	; 0x633a <__ultoa_invert+0x7c>
    6334:	49 5d       	subi	r20, 0xD9	; 217
    6336:	31 fd       	sbrc	r19, 1
    6338:	40 52       	subi	r20, 0x20	; 32
    633a:	41 93       	st	Z+, r20
    633c:	02 d0       	rcall	.+4      	; 0x6342 <__ultoa_invert+0x84>
    633e:	a9 f7       	brne	.-22     	; 0x632a <__ultoa_invert+0x6c>
    6340:	ea cf       	rjmp	.-44     	; 0x6316 <__ultoa_invert+0x58>
    6342:	b4 e0       	ldi	r27, 0x04	; 4
    6344:	a6 95       	lsr	r26
    6346:	97 95       	ror	r25
    6348:	87 95       	ror	r24
    634a:	77 95       	ror	r23
    634c:	67 95       	ror	r22
    634e:	ba 95       	dec	r27
    6350:	c9 f7       	brne	.-14     	; 0x6344 <__ultoa_invert+0x86>
    6352:	00 97       	sbiw	r24, 0x00	; 0
    6354:	61 05       	cpc	r22, r1
    6356:	71 05       	cpc	r23, r1
    6358:	08 95       	ret
    635a:	9b 01       	movw	r18, r22
    635c:	ac 01       	movw	r20, r24
    635e:	0a 2e       	mov	r0, r26
    6360:	06 94       	lsr	r0
    6362:	57 95       	ror	r21
    6364:	47 95       	ror	r20
    6366:	37 95       	ror	r19
    6368:	27 95       	ror	r18
    636a:	ba 95       	dec	r27
    636c:	c9 f7       	brne	.-14     	; 0x6360 <__ultoa_invert+0xa2>
    636e:	62 0f       	add	r22, r18
    6370:	73 1f       	adc	r23, r19
    6372:	84 1f       	adc	r24, r20
    6374:	95 1f       	adc	r25, r21
    6376:	a0 1d       	adc	r26, r0
    6378:	08 95       	ret

0000637a <__eerd_byte_m128rfa1>:
    637a:	f9 99       	sbic	0x1f, 1	; 31
    637c:	fe cf       	rjmp	.-4      	; 0x637a <__eerd_byte_m128rfa1>
    637e:	92 bd       	out	0x22, r25	; 34
    6380:	81 bd       	out	0x21, r24	; 33
    6382:	f8 9a       	sbi	0x1f, 0	; 31
    6384:	99 27       	eor	r25, r25
    6386:	80 b5       	in	r24, 0x20	; 32
    6388:	08 95       	ret

0000638a <__eewr_byte_m128rfa1>:
    638a:	26 2f       	mov	r18, r22

0000638c <__eewr_r18_m128rfa1>:
    638c:	f9 99       	sbic	0x1f, 1	; 31
    638e:	fe cf       	rjmp	.-4      	; 0x638c <__eewr_r18_m128rfa1>
    6390:	1f ba       	out	0x1f, r1	; 31
    6392:	92 bd       	out	0x22, r25	; 34
    6394:	81 bd       	out	0x21, r24	; 33
    6396:	20 bd       	out	0x20, r18	; 32
    6398:	0f b6       	in	r0, 0x3f	; 63
    639a:	f8 94       	cli
    639c:	fa 9a       	sbi	0x1f, 2	; 31
    639e:	f9 9a       	sbi	0x1f, 1	; 31
    63a0:	0f be       	out	0x3f, r0	; 63
    63a2:	01 96       	adiw	r24, 0x01	; 1
    63a4:	08 95       	ret

000063a6 <calloc>:
    63a6:	ef 92       	push	r14
    63a8:	ff 92       	push	r15
    63aa:	0f 93       	push	r16
    63ac:	1f 93       	push	r17
    63ae:	cf 93       	push	r28
    63b0:	df 93       	push	r29
    63b2:	68 9f       	mul	r22, r24
    63b4:	80 01       	movw	r16, r0
    63b6:	69 9f       	mul	r22, r25
    63b8:	10 0d       	add	r17, r0
    63ba:	78 9f       	mul	r23, r24
    63bc:	10 0d       	add	r17, r0
    63be:	11 24       	eor	r1, r1
    63c0:	c8 01       	movw	r24, r16
    63c2:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <malloc>
    63c6:	e8 2e       	mov	r14, r24
    63c8:	e7 01       	movw	r28, r14
    63ca:	7e 01       	movw	r14, r28
    63cc:	f9 2e       	mov	r15, r25
    63ce:	e7 01       	movw	r28, r14
    63d0:	20 97       	sbiw	r28, 0x00	; 0
    63d2:	31 f0       	breq	.+12     	; 0x63e0 <calloc+0x3a>
    63d4:	8e 2d       	mov	r24, r14
    63d6:	60 e0       	ldi	r22, 0x00	; 0
    63d8:	70 e0       	ldi	r23, 0x00	; 0
    63da:	a8 01       	movw	r20, r16
    63dc:	0e 94 2b 33 	call	0x6656	; 0x6656 <memset>
    63e0:	ce 01       	movw	r24, r28
    63e2:	df 91       	pop	r29
    63e4:	cf 91       	pop	r28
    63e6:	1f 91       	pop	r17
    63e8:	0f 91       	pop	r16
    63ea:	ff 90       	pop	r15
    63ec:	ef 90       	pop	r14
    63ee:	08 95       	ret

000063f0 <malloc>:
    63f0:	cf 93       	push	r28
    63f2:	df 93       	push	r29
    63f4:	82 30       	cpi	r24, 0x02	; 2
    63f6:	91 05       	cpc	r25, r1
    63f8:	10 f4       	brcc	.+4      	; 0x63fe <malloc+0xe>
    63fa:	82 e0       	ldi	r24, 0x02	; 2
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	e0 91 c9 06 	lds	r30, 0x06C9
    6402:	f0 91 ca 06 	lds	r31, 0x06CA
    6406:	40 e0       	ldi	r20, 0x00	; 0
    6408:	50 e0       	ldi	r21, 0x00	; 0
    640a:	20 e0       	ldi	r18, 0x00	; 0
    640c:	30 e0       	ldi	r19, 0x00	; 0
    640e:	26 c0       	rjmp	.+76     	; 0x645c <malloc+0x6c>
    6410:	60 81       	ld	r22, Z
    6412:	71 81       	ldd	r23, Z+1	; 0x01
    6414:	68 17       	cp	r22, r24
    6416:	79 07       	cpc	r23, r25
    6418:	e0 f0       	brcs	.+56     	; 0x6452 <malloc+0x62>
    641a:	68 17       	cp	r22, r24
    641c:	79 07       	cpc	r23, r25
    641e:	81 f4       	brne	.+32     	; 0x6440 <malloc+0x50>
    6420:	82 81       	ldd	r24, Z+2	; 0x02
    6422:	93 81       	ldd	r25, Z+3	; 0x03
    6424:	21 15       	cp	r18, r1
    6426:	31 05       	cpc	r19, r1
    6428:	31 f0       	breq	.+12     	; 0x6436 <malloc+0x46>
    642a:	d9 01       	movw	r26, r18
    642c:	13 96       	adiw	r26, 0x03	; 3
    642e:	9c 93       	st	X, r25
    6430:	8e 93       	st	-X, r24
    6432:	12 97       	sbiw	r26, 0x02	; 2
    6434:	2b c0       	rjmp	.+86     	; 0x648c <malloc+0x9c>
    6436:	90 93 ca 06 	sts	0x06CA, r25
    643a:	80 93 c9 06 	sts	0x06C9, r24
    643e:	26 c0       	rjmp	.+76     	; 0x648c <malloc+0x9c>
    6440:	41 15       	cp	r20, r1
    6442:	51 05       	cpc	r21, r1
    6444:	19 f0       	breq	.+6      	; 0x644c <malloc+0x5c>
    6446:	64 17       	cp	r22, r20
    6448:	75 07       	cpc	r23, r21
    644a:	18 f4       	brcc	.+6      	; 0x6452 <malloc+0x62>
    644c:	ab 01       	movw	r20, r22
    644e:	e9 01       	movw	r28, r18
    6450:	df 01       	movw	r26, r30
    6452:	9f 01       	movw	r18, r30
    6454:	72 81       	ldd	r23, Z+2	; 0x02
    6456:	63 81       	ldd	r22, Z+3	; 0x03
    6458:	e7 2f       	mov	r30, r23
    645a:	f6 2f       	mov	r31, r22
    645c:	30 97       	sbiw	r30, 0x00	; 0
    645e:	c1 f6       	brne	.-80     	; 0x6410 <malloc+0x20>
    6460:	41 15       	cp	r20, r1
    6462:	51 05       	cpc	r21, r1
    6464:	01 f1       	breq	.+64     	; 0x64a6 <malloc+0xb6>
    6466:	48 1b       	sub	r20, r24
    6468:	59 0b       	sbc	r21, r25
    646a:	44 30       	cpi	r20, 0x04	; 4
    646c:	51 05       	cpc	r21, r1
    646e:	80 f4       	brcc	.+32     	; 0x6490 <malloc+0xa0>
    6470:	12 96       	adiw	r26, 0x02	; 2
    6472:	8d 91       	ld	r24, X+
    6474:	9c 91       	ld	r25, X
    6476:	13 97       	sbiw	r26, 0x03	; 3
    6478:	20 97       	sbiw	r28, 0x00	; 0
    647a:	19 f0       	breq	.+6      	; 0x6482 <malloc+0x92>
    647c:	9b 83       	std	Y+3, r25	; 0x03
    647e:	8a 83       	std	Y+2, r24	; 0x02
    6480:	04 c0       	rjmp	.+8      	; 0x648a <malloc+0x9a>
    6482:	90 93 ca 06 	sts	0x06CA, r25
    6486:	80 93 c9 06 	sts	0x06C9, r24
    648a:	fd 01       	movw	r30, r26
    648c:	32 96       	adiw	r30, 0x02	; 2
    648e:	46 c0       	rjmp	.+140    	; 0x651c <malloc+0x12c>
    6490:	fd 01       	movw	r30, r26
    6492:	e4 0f       	add	r30, r20
    6494:	f5 1f       	adc	r31, r21
    6496:	81 93       	st	Z+, r24
    6498:	91 93       	st	Z+, r25
    649a:	42 50       	subi	r20, 0x02	; 2
    649c:	50 40       	sbci	r21, 0x00	; 0
    649e:	11 96       	adiw	r26, 0x01	; 1
    64a0:	5c 93       	st	X, r21
    64a2:	4e 93       	st	-X, r20
    64a4:	3b c0       	rjmp	.+118    	; 0x651c <malloc+0x12c>
    64a6:	20 91 c7 06 	lds	r18, 0x06C7
    64aa:	30 91 c8 06 	lds	r19, 0x06C8
    64ae:	21 15       	cp	r18, r1
    64b0:	31 05       	cpc	r19, r1
    64b2:	41 f4       	brne	.+16     	; 0x64c4 <malloc+0xd4>
    64b4:	20 91 d3 03 	lds	r18, 0x03D3
    64b8:	30 91 d4 03 	lds	r19, 0x03D4
    64bc:	30 93 c8 06 	sts	0x06C8, r19
    64c0:	20 93 c7 06 	sts	0x06C7, r18
    64c4:	20 91 d5 03 	lds	r18, 0x03D5
    64c8:	30 91 d6 03 	lds	r19, 0x03D6
    64cc:	21 15       	cp	r18, r1
    64ce:	31 05       	cpc	r19, r1
    64d0:	41 f4       	brne	.+16     	; 0x64e2 <malloc+0xf2>
    64d2:	2d b7       	in	r18, 0x3d	; 61
    64d4:	3e b7       	in	r19, 0x3e	; 62
    64d6:	40 91 d1 03 	lds	r20, 0x03D1
    64da:	50 91 d2 03 	lds	r21, 0x03D2
    64de:	24 1b       	sub	r18, r20
    64e0:	35 0b       	sbc	r19, r21
    64e2:	e0 91 c7 06 	lds	r30, 0x06C7
    64e6:	f0 91 c8 06 	lds	r31, 0x06C8
    64ea:	e2 17       	cp	r30, r18
    64ec:	f3 07       	cpc	r31, r19
    64ee:	a0 f4       	brcc	.+40     	; 0x6518 <malloc+0x128>
    64f0:	2e 1b       	sub	r18, r30
    64f2:	3f 0b       	sbc	r19, r31
    64f4:	28 17       	cp	r18, r24
    64f6:	39 07       	cpc	r19, r25
    64f8:	78 f0       	brcs	.+30     	; 0x6518 <malloc+0x128>
    64fa:	ac 01       	movw	r20, r24
    64fc:	4e 5f       	subi	r20, 0xFE	; 254
    64fe:	5f 4f       	sbci	r21, 0xFF	; 255
    6500:	24 17       	cp	r18, r20
    6502:	35 07       	cpc	r19, r21
    6504:	48 f0       	brcs	.+18     	; 0x6518 <malloc+0x128>
    6506:	4e 0f       	add	r20, r30
    6508:	5f 1f       	adc	r21, r31
    650a:	50 93 c8 06 	sts	0x06C8, r21
    650e:	40 93 c7 06 	sts	0x06C7, r20
    6512:	81 93       	st	Z+, r24
    6514:	91 93       	st	Z+, r25
    6516:	02 c0       	rjmp	.+4      	; 0x651c <malloc+0x12c>
    6518:	e0 e0       	ldi	r30, 0x00	; 0
    651a:	f0 e0       	ldi	r31, 0x00	; 0
    651c:	cf 01       	movw	r24, r30
    651e:	df 91       	pop	r29
    6520:	cf 91       	pop	r28
    6522:	08 95       	ret

00006524 <free>:
    6524:	cf 93       	push	r28
    6526:	df 93       	push	r29
    6528:	00 97       	sbiw	r24, 0x00	; 0
    652a:	09 f4       	brne	.+2      	; 0x652e <free+0xa>
    652c:	91 c0       	rjmp	.+290    	; 0x6650 <free+0x12c>
    652e:	fc 01       	movw	r30, r24
    6530:	32 97       	sbiw	r30, 0x02	; 2
    6532:	13 82       	std	Z+3, r1	; 0x03
    6534:	12 82       	std	Z+2, r1	; 0x02
    6536:	60 91 c9 06 	lds	r22, 0x06C9
    653a:	70 91 ca 06 	lds	r23, 0x06CA
    653e:	61 15       	cp	r22, r1
    6540:	71 05       	cpc	r23, r1
    6542:	81 f4       	brne	.+32     	; 0x6564 <free+0x40>
    6544:	20 81       	ld	r18, Z
    6546:	31 81       	ldd	r19, Z+1	; 0x01
    6548:	28 0f       	add	r18, r24
    654a:	39 1f       	adc	r19, r25
    654c:	80 91 c7 06 	lds	r24, 0x06C7
    6550:	90 91 c8 06 	lds	r25, 0x06C8
    6554:	82 17       	cp	r24, r18
    6556:	93 07       	cpc	r25, r19
    6558:	99 f5       	brne	.+102    	; 0x65c0 <free+0x9c>
    655a:	f0 93 c8 06 	sts	0x06C8, r31
    655e:	e0 93 c7 06 	sts	0x06C7, r30
    6562:	76 c0       	rjmp	.+236    	; 0x6650 <free+0x12c>
    6564:	db 01       	movw	r26, r22
    6566:	80 e0       	ldi	r24, 0x00	; 0
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	02 c0       	rjmp	.+4      	; 0x6570 <free+0x4c>
    656c:	cd 01       	movw	r24, r26
    656e:	d9 01       	movw	r26, r18
    6570:	ae 17       	cp	r26, r30
    6572:	bf 07       	cpc	r27, r31
    6574:	48 f4       	brcc	.+18     	; 0x6588 <free+0x64>
    6576:	12 96       	adiw	r26, 0x02	; 2
    6578:	2d 91       	ld	r18, X+
    657a:	3c 91       	ld	r19, X
    657c:	13 97       	sbiw	r26, 0x03	; 3
    657e:	21 15       	cp	r18, r1
    6580:	31 05       	cpc	r19, r1
    6582:	a1 f7       	brne	.-24     	; 0x656c <free+0x48>
    6584:	cd 01       	movw	r24, r26
    6586:	21 c0       	rjmp	.+66     	; 0x65ca <free+0xa6>
    6588:	b3 83       	std	Z+3, r27	; 0x03
    658a:	a2 83       	std	Z+2, r26	; 0x02
    658c:	ef 01       	movw	r28, r30
    658e:	49 91       	ld	r20, Y+
    6590:	59 91       	ld	r21, Y+
    6592:	9e 01       	movw	r18, r28
    6594:	24 0f       	add	r18, r20
    6596:	35 1f       	adc	r19, r21
    6598:	a2 17       	cp	r26, r18
    659a:	b3 07       	cpc	r27, r19
    659c:	79 f4       	brne	.+30     	; 0x65bc <free+0x98>
    659e:	2d 91       	ld	r18, X+
    65a0:	3c 91       	ld	r19, X
    65a2:	11 97       	sbiw	r26, 0x01	; 1
    65a4:	24 0f       	add	r18, r20
    65a6:	35 1f       	adc	r19, r21
    65a8:	2e 5f       	subi	r18, 0xFE	; 254
    65aa:	3f 4f       	sbci	r19, 0xFF	; 255
    65ac:	31 83       	std	Z+1, r19	; 0x01
    65ae:	20 83       	st	Z, r18
    65b0:	12 96       	adiw	r26, 0x02	; 2
    65b2:	2d 91       	ld	r18, X+
    65b4:	3c 91       	ld	r19, X
    65b6:	13 97       	sbiw	r26, 0x03	; 3
    65b8:	33 83       	std	Z+3, r19	; 0x03
    65ba:	22 83       	std	Z+2, r18	; 0x02
    65bc:	00 97       	sbiw	r24, 0x00	; 0
    65be:	29 f4       	brne	.+10     	; 0x65ca <free+0xa6>
    65c0:	f0 93 ca 06 	sts	0x06CA, r31
    65c4:	e0 93 c9 06 	sts	0x06C9, r30
    65c8:	43 c0       	rjmp	.+134    	; 0x6650 <free+0x12c>
    65ca:	dc 01       	movw	r26, r24
    65cc:	13 96       	adiw	r26, 0x03	; 3
    65ce:	fc 93       	st	X, r31
    65d0:	ee 93       	st	-X, r30
    65d2:	12 97       	sbiw	r26, 0x02	; 2
    65d4:	4d 91       	ld	r20, X+
    65d6:	5d 91       	ld	r21, X+
    65d8:	a4 0f       	add	r26, r20
    65da:	b5 1f       	adc	r27, r21
    65dc:	ea 17       	cp	r30, r26
    65de:	fb 07       	cpc	r31, r27
    65e0:	69 f4       	brne	.+26     	; 0x65fc <free+0xd8>
    65e2:	20 81       	ld	r18, Z
    65e4:	31 81       	ldd	r19, Z+1	; 0x01
    65e6:	24 0f       	add	r18, r20
    65e8:	35 1f       	adc	r19, r21
    65ea:	2e 5f       	subi	r18, 0xFE	; 254
    65ec:	3f 4f       	sbci	r19, 0xFF	; 255
    65ee:	ec 01       	movw	r28, r24
    65f0:	39 83       	std	Y+1, r19	; 0x01
    65f2:	28 83       	st	Y, r18
    65f4:	22 81       	ldd	r18, Z+2	; 0x02
    65f6:	33 81       	ldd	r19, Z+3	; 0x03
    65f8:	3b 83       	std	Y+3, r19	; 0x03
    65fa:	2a 83       	std	Y+2, r18	; 0x02
    65fc:	e0 e0       	ldi	r30, 0x00	; 0
    65fe:	f0 e0       	ldi	r31, 0x00	; 0
    6600:	02 c0       	rjmp	.+4      	; 0x6606 <free+0xe2>
    6602:	fb 01       	movw	r30, r22
    6604:	bc 01       	movw	r22, r24
    6606:	db 01       	movw	r26, r22
    6608:	12 96       	adiw	r26, 0x02	; 2
    660a:	8d 91       	ld	r24, X+
    660c:	9c 91       	ld	r25, X
    660e:	13 97       	sbiw	r26, 0x03	; 3
    6610:	00 97       	sbiw	r24, 0x00	; 0
    6612:	b9 f7       	brne	.-18     	; 0x6602 <free+0xde>
    6614:	9b 01       	movw	r18, r22
    6616:	2e 5f       	subi	r18, 0xFE	; 254
    6618:	3f 4f       	sbci	r19, 0xFF	; 255
    661a:	8d 91       	ld	r24, X+
    661c:	9c 91       	ld	r25, X
    661e:	11 97       	sbiw	r26, 0x01	; 1
    6620:	82 0f       	add	r24, r18
    6622:	93 1f       	adc	r25, r19
    6624:	40 91 c7 06 	lds	r20, 0x06C7
    6628:	50 91 c8 06 	lds	r21, 0x06C8
    662c:	48 17       	cp	r20, r24
    662e:	59 07       	cpc	r21, r25
    6630:	79 f4       	brne	.+30     	; 0x6650 <free+0x12c>
    6632:	30 97       	sbiw	r30, 0x00	; 0
    6634:	29 f4       	brne	.+10     	; 0x6640 <free+0x11c>
    6636:	10 92 ca 06 	sts	0x06CA, r1
    663a:	10 92 c9 06 	sts	0x06C9, r1
    663e:	02 c0       	rjmp	.+4      	; 0x6644 <free+0x120>
    6640:	13 82       	std	Z+3, r1	; 0x03
    6642:	12 82       	std	Z+2, r1	; 0x02
    6644:	22 50       	subi	r18, 0x02	; 2
    6646:	30 40       	sbci	r19, 0x00	; 0
    6648:	30 93 c8 06 	sts	0x06C8, r19
    664c:	20 93 c7 06 	sts	0x06C7, r18
    6650:	df 91       	pop	r29
    6652:	cf 91       	pop	r28
    6654:	08 95       	ret

00006656 <memset>:
    6656:	dc 01       	movw	r26, r24
    6658:	01 c0       	rjmp	.+2      	; 0x665c <memset+0x6>
    665a:	6d 93       	st	X+, r22
    665c:	41 50       	subi	r20, 0x01	; 1
    665e:	50 40       	sbci	r21, 0x00	; 0
    6660:	e0 f7       	brcc	.-8      	; 0x665a <memset+0x4>
    6662:	08 95       	ret

00006664 <_exit>:
    6664:	f8 94       	cli

00006666 <__stop_program>:
    6666:	ff cf       	rjmp	.-2      	; 0x6666 <__stop_program>
