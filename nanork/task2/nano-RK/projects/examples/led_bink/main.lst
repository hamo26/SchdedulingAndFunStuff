   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 141               		.data
 142               	.LC0:
 143 0000 2564 0D0A 		.string	"%d\r\n"
 143      00
 144               	.LC1:
 145 0005 4D79 206E 		.string	"My node's address is %u\r\n"
 145      6F64 6527 
 145      7320 6164 
 145      6472 6573 
 145      7320 6973 
 146               	.LC2:
 147 001f 5461 736B 		.string	"Task1 PID=%u\r\n"
 147      3120 5049 
 147      443D 2575 
 147      0D0A 00
 148               		.text
 150               	.global	Task1
 152               	Task1:
 153               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** #include <nrk.h>
  25:main.c        **** #include <include.h>
  26:main.c        **** #include <ulib.h>
  27:main.c        **** #include <stdio.h>
  28:main.c        **** #include <hal.h>
  29:main.c        **** #include <nrk_error.h>
  30:main.c        **** #include <nrk_timer.h>
  31:main.c        **** #include <nrk_stack_check.h>
  32:main.c        **** #include <nrk_stats.h>
  33:main.c        **** 
  34:main.c        **** 
  35:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  36:main.c        **** nrk_task_type TaskOne;
  37:main.c        **** void Task1(void);
  38:main.c        **** 
  39:main.c        **** 
  40:main.c        **** void nrk_create_taskset();
  41:main.c        **** 
  42:main.c        **** int
  43:main.c        **** main ()
  44:main.c        **** {
  45:main.c        ****   nrk_setup_ports();
  46:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  47:main.c        **** 
  48:main.c        ****   nrk_init();
  49:main.c        **** 
  50:main.c        ****   nrk_time_set(0,0);
  51:main.c        ****   nrk_create_taskset ();
  52:main.c        ****   nrk_start();
  53:main.c        ****   
  54:main.c        ****   return 0;
  55:main.c        **** }
  56:main.c        **** 
  57:main.c        **** void Task1()
  58:main.c        **** {
 155               	.LM0:
 156               	.LFBB1:
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 0 */
 160               	.L__stack_usage = 0
  59:main.c        **** nrk_time_t t;
  60:main.c        **** uint16_t cnt;
  61:main.c        **** cnt=0;
  62:main.c        **** nrk_kprintf( PSTR("Nano-RK Version ") );
 162               	.LM1:
 163 0000 80E0      		ldi r24,lo8(__c.2154)
 164 0002 90E0      		ldi r25,hi8(__c.2154)
 165 0004 0E94 0000 		call nrk_kprintf
  63:main.c        **** printf( "%d\r\n",NRK_VERSION );
 167               	.LM2:
 168 0008 00D0      		rcall .
 169 000a 00D0      		rcall .
 170 000c 80E0      		ldi r24,lo8(.LC0)
 171 000e 90E0      		ldi r25,hi8(.LC0)
 172 0010 ADB7      		in r26,__SP_L__
 173 0012 BEB7      		in r27,__SP_H__
 174 0014 1296      		adiw r26,1+1
 175 0016 9C93      		st X,r25
 176 0018 8E93      		st -X,r24
 177 001a 1197      		sbiw r26,1
 178 001c 85E6      		ldi r24,lo8(101)
 179 001e 90E0      		ldi r25,hi8(101)
 180 0020 1496      		adiw r26,3+1
 181 0022 9C93      		st X,r25
 182 0024 8E93      		st -X,r24
 183 0026 1397      		sbiw r26,3
 184 0028 0E94 0000 		call printf
  64:main.c        **** 
  65:main.c        **** printf( "My node's address is %u\r\n",NODE_ADDR );
 186               	.LM3:
 187 002c 80E0      		ldi r24,lo8(.LC1)
 188 002e 90E0      		ldi r25,hi8(.LC1)
 189 0030 EDB7      		in r30,__SP_L__
 190 0032 FEB7      		in r31,__SP_H__
 191 0034 9283      		std Z+2,r25
 192 0036 8183      		std Z+1,r24
 193 0038 1482      		std Z+4,__zero_reg__
 194 003a 1382      		std Z+3,__zero_reg__
 195 003c 0E94 0000 		call printf
  66:main.c        ****   
  67:main.c        **** printf( "Task1 PID=%u\r\n",nrk_get_pid());
 197               	.LM4:
 198 0040 0F90      		pop __tmp_reg__
 199 0042 0F90      		pop __tmp_reg__
 200 0044 0F90      		pop __tmp_reg__
 201 0046 0F90      		pop __tmp_reg__
 202 0048 0E94 0000 		call nrk_get_pid
 203 004c 00D0      		rcall .
 204 004e 00D0      		rcall .
 205 0050 EDB7      		in r30,__SP_L__
 206 0052 FEB7      		in r31,__SP_H__
 207 0054 3196      		adiw r30,1
 208 0056 20E0      		ldi r18,lo8(.LC2)
 209 0058 30E0      		ldi r19,hi8(.LC2)
 210 005a ADB7      		in r26,__SP_L__
 211 005c BEB7      		in r27,__SP_H__
 212 005e 1296      		adiw r26,1+1
 213 0060 3C93      		st X,r19
 214 0062 2E93      		st -X,r18
 215 0064 1197      		sbiw r26,1
 216 0066 8283      		std Z+2,r24
 217 0068 1382      		std Z+3,__zero_reg__
 218 006a 0E94 0000 		call printf
 219 006e 0F90      		pop __tmp_reg__
 220 0070 0F90      		pop __tmp_reg__
 221 0072 0F90      		pop __tmp_reg__
 222 0074 0F90      		pop __tmp_reg__
 223               	.L2:
  68:main.c        **** 
  69:main.c        ****   while(1) {
  70:main.c        **** 	nrk_led_toggle(RED_LED);
 225               	.LM5:
 226 0076 83E0      		ldi r24,lo8(3)
 227 0078 90E0      		ldi r25,hi8(3)
 228 007a 0E94 0000 		call nrk_led_toggle
  71:main.c        **** 	nrk_led_toggle(GREEN_LED);
 230               	.LM6:
 231 007e 82E0      		ldi r24,lo8(2)
 232 0080 90E0      		ldi r25,hi8(2)
 233 0082 0E94 0000 		call nrk_led_toggle
  72:main.c        **** 	nrk_led_toggle(BLUE_LED);
 235               	.LM7:
 236 0086 81E0      		ldi r24,lo8(1)
 237 0088 90E0      		ldi r25,hi8(1)
 238 008a 0E94 0000 		call nrk_led_toggle
  73:main.c        **** 	nrk_led_toggle(ORANGE_LED);
 240               	.LM8:
 241 008e 80E0      		ldi r24,lo8(0)
 242 0090 90E0      		ldi r25,hi8(0)
 243 0092 0E94 0000 		call nrk_led_toggle
  74:main.c        **** 	nrk_wait_until_next_period();
 245               	.LM9:
 246 0096 0E94 0000 		call nrk_wait_until_next_period
 247 009a 00C0      		rjmp .L2
 249               	.Lscope1:
 251               		.stabd	78,0,0
 253               	.global	nrk_create_taskset
 255               	nrk_create_taskset:
 256               		.stabd	46,0,0
  75:main.c        ****   	}
  76:main.c        **** }
  77:main.c        **** 
  78:main.c        **** 
  79:main.c        **** void
  80:main.c        **** nrk_create_taskset()
  81:main.c        **** {
 258               	.LM10:
 259               	.LFBB2:
 260 009c CF93      		push r28
 261 009e DF93      		push r29
 262               	/* prologue: function */
 263               	/* frame size = 0 */
 264               	/* stack size = 2 */
 265               	.L__stack_usage = 2
  82:main.c        ****   nrk_task_set_entry_function( &TaskOne, Task1);
 267               	.LM11:
 268 00a0 C0E0      		ldi r28,lo8(TaskOne)
 269 00a2 D0E0      		ldi r29,hi8(TaskOne)
 270 00a4 CE01      		movw r24,r28
 271 00a6 60E0      		ldi r22,lo8(gs(Task1))
 272 00a8 70E0      		ldi r23,hi8(gs(Task1))
 273 00aa 0E94 0000 		call nrk_task_set_entry_function
  83:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 275               	.LM12:
 276 00ae CE01      		movw r24,r28
 277 00b0 60E0      		ldi r22,lo8(Stack1)
 278 00b2 70E0      		ldi r23,hi8(Stack1)
 279 00b4 40E8      		ldi r20,lo8(128)
 280 00b6 50E0      		ldi r21,hi8(128)
 281 00b8 0E94 0000 		call nrk_task_set_stk
  84:main.c        ****   TaskOne.prio = 1;
 283               	.LM13:
 284 00bc 81E0      		ldi r24,lo8(1)
 285 00be 8093 0000 		sts TaskOne+8,r24
  85:main.c        ****   TaskOne.FirstActivation = TRUE;
 287               	.LM14:
 288 00c2 8093 0000 		sts TaskOne+7,r24
  86:main.c        ****   TaskOne.Type = BASIC_TASK;
 290               	.LM15:
 291 00c6 8093 0000 		sts TaskOne+9,r24
  87:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 293               	.LM16:
 294 00ca 8093 0000 		sts TaskOne+10,r24
  88:main.c        ****   TaskOne.period.secs = 0;
 296               	.LM17:
 297 00ce 1092 0000 		sts TaskOne+11,__zero_reg__
 298 00d2 1092 0000 		sts TaskOne+11+1,__zero_reg__
 299 00d6 1092 0000 		sts TaskOne+11+2,__zero_reg__
 300 00da 1092 0000 		sts TaskOne+11+3,__zero_reg__
  89:main.c        ****   TaskOne.period.nano_secs = 250*NANOS_PER_MS;
 302               	.LM18:
 303 00de 80E8      		ldi r24,lo8(250000000)
 304 00e0 92EB      		ldi r25,hi8(250000000)
 305 00e2 A6EE      		ldi r26,hlo8(250000000)
 306 00e4 BEE0      		ldi r27,hhi8(250000000)
 307 00e6 8093 0000 		sts TaskOne+15,r24
 308 00ea 9093 0000 		sts TaskOne+15+1,r25
 309 00ee A093 0000 		sts TaskOne+15+2,r26
 310 00f2 B093 0000 		sts TaskOne+15+3,r27
  90:main.c        ****   TaskOne.cpu_reserve.secs = 1;
 312               	.LM19:
 313 00f6 81E0      		ldi r24,lo8(1)
 314 00f8 90E0      		ldi r25,hi8(1)
 315 00fa A0E0      		ldi r26,hlo8(1)
 316 00fc B0E0      		ldi r27,hhi8(1)
 317 00fe 8093 0000 		sts TaskOne+19,r24
 318 0102 9093 0000 		sts TaskOne+19+1,r25
 319 0106 A093 0000 		sts TaskOne+19+2,r26
 320 010a B093 0000 		sts TaskOne+19+3,r27
  91:main.c        ****   TaskOne.cpu_reserve.nano_secs = 50*NANOS_PER_MS;
 322               	.LM20:
 323 010e 80E8      		ldi r24,lo8(50000000)
 324 0110 90EF      		ldi r25,hi8(50000000)
 325 0112 AAEF      		ldi r26,hlo8(50000000)
 326 0114 B2E0      		ldi r27,hhi8(50000000)
 327 0116 8093 0000 		sts TaskOne+23,r24
 328 011a 9093 0000 		sts TaskOne+23+1,r25
 329 011e A093 0000 		sts TaskOne+23+2,r26
 330 0122 B093 0000 		sts TaskOne+23+3,r27
  92:main.c        ****   TaskOne.offset.secs = 0;
 332               	.LM21:
 333 0126 1092 0000 		sts TaskOne+27,__zero_reg__
 334 012a 1092 0000 		sts TaskOne+27+1,__zero_reg__
 335 012e 1092 0000 		sts TaskOne+27+2,__zero_reg__
 336 0132 1092 0000 		sts TaskOne+27+3,__zero_reg__
  93:main.c        ****   TaskOne.offset.nano_secs= 0;
 338               	.LM22:
 339 0136 1092 0000 		sts TaskOne+31,__zero_reg__
 340 013a 1092 0000 		sts TaskOne+31+1,__zero_reg__
 341 013e 1092 0000 		sts TaskOne+31+2,__zero_reg__
 342 0142 1092 0000 		sts TaskOne+31+3,__zero_reg__
  94:main.c        ****   nrk_activate_task (&TaskOne);
 344               	.LM23:
 345 0146 CE01      		movw r24,r28
 346 0148 0E94 0000 		call nrk_activate_task
 347               	/* epilogue start */
  95:main.c        **** 
  96:main.c        **** 
  97:main.c        **** 
  98:main.c        **** }
 349               	.LM24:
 350 014c DF91      		pop r29
 351 014e CF91      		pop r28
 352 0150 0895      		ret
 354               	.Lscope2:
 356               		.stabd	78,0,0
 358               	.global	main
 360               	main:
 361               		.stabd	46,0,0
  44:main.c        **** {
 363               	.LM25:
 364               	.LFBB3:
 365               	/* prologue: function */
 366               	/* frame size = 0 */
 367               	/* stack size = 0 */
 368               	.L__stack_usage = 0
  45:main.c        ****   nrk_setup_ports();
 370               	.LM26:
 371 0152 0E94 0000 		call nrk_setup_ports
  46:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 373               	.LM27:
 374 0156 87E0      		ldi r24,lo8(7)
 375 0158 90E0      		ldi r25,hi8(7)
 376 015a 0E94 0000 		call nrk_setup_uart
  48:main.c        ****   nrk_init();
 378               	.LM28:
 379 015e 0E94 0000 		call nrk_init
  50:main.c        ****   nrk_time_set(0,0);
 381               	.LM29:
 382 0162 60E0      		ldi r22,lo8(0)
 383 0164 70E0      		ldi r23,hi8(0)
 384 0166 CB01      		movw r24,r22
 385 0168 20E0      		ldi r18,lo8(0)
 386 016a 30E0      		ldi r19,hi8(0)
 387 016c A901      		movw r20,r18
 388 016e 0E94 0000 		call nrk_time_set
  51:main.c        ****   nrk_create_taskset ();
 390               	.LM30:
 391 0172 0E94 0000 		call nrk_create_taskset
  52:main.c        ****   nrk_start();
 393               	.LM31:
 394 0176 0E94 0000 		call nrk_start
  55:main.c        **** }
 396               	.LM32:
 397 017a 80E0      		ldi r24,lo8(0)
 398 017c 90E0      		ldi r25,hi8(0)
 399               	/* epilogue start */
 400 017e 0895      		ret
 402               	.Lscope3:
 404               		.stabd	78,0,0
 405               		.comm _nrk_signal_list,4,1
 406               		.comm nrk_idle_task_stk,128,1
 407               		.comm nrk_kernel_stk_ptr,2,1
 408               		.comm error_task,1,1
 409               		.comm error_num,1,1
 410               		.comm _nrk_prev_timer_val,1,1
 411               		.comm _nrk_time_trigger,1,1
 412               		.comm app_timer0_callback,2,1
 413               		.comm app_timer0_prescale,1,1
 414               		.comm cur_task_stats,150,1
 415               		.comm _nrk_stats_sleep_time,8,1
 416               		.comm Stack1,128,1
 417               		.comm TaskOne,35,1
 418               		.section	.progmem.data,"a",@progbits
 421               	__c.2154:
 422 0000 4E61 6E6F 		.string	"Nano-RK Version "
 422      2D52 4B20 
 422      5665 7273 
 422      696F 6E20 
 422      00
 436               		.text
 438               	.Letext0:
 439               	.global __do_copy_data
 440               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccxrwsoZ.s:2      *ABS*:0000003f __SREG__
     /tmp/ccxrwsoZ.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccxrwsoZ.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccxrwsoZ.s:5      *ABS*:00000034 __CCP__
     /tmp/ccxrwsoZ.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccxrwsoZ.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccxrwsoZ.s:152    .text:00000000 Task1
     /tmp/ccxrwsoZ.s:421    .progmem.data:00000000 __c.2154
     /tmp/ccxrwsoZ.s:255    .text:0000009c nrk_create_taskset
                            *COM*:00000023 TaskOne
                            *COM*:00000080 Stack1
     /tmp/ccxrwsoZ.s:360    .text:00000152 main
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000096 cur_task_stats
                            *COM*:00000008 _nrk_stats_sleep_time

UNDEFINED SYMBOLS
nrk_kprintf
printf
nrk_get_pid
nrk_led_toggle
nrk_wait_until_next_period
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
