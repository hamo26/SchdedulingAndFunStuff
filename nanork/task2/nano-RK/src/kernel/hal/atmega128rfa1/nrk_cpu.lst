   1               		.file	"nrk_cpu.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 297               	.global	nrk_battery_save
 299               	nrk_battery_save:
 300               		.stabd	46,0,0
   1:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** /******************************************************************************
   2:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  All rights reserved.
   5:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
   6:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  10:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  14:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  GNU General Public License for more details.
  18:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  19:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  22:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Contributing Authors (specific to this file):
  23:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Anthony Rowe
  24:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Zane Starr
  25:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *  Anand Eswaren
  26:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *******************************************************************************/
  27:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  28:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <include.h>
  29:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk.h>
  30:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <avr/sleep.h>
  31:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk_stack_check.h>
  32:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk_task.h>
  33:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk_defs.h>
  34:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk_cfg.h>
  35:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk_timer.h>
  36:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #include <nrk_error.h>
  37:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  38:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #define BUILD_DATE "Date: " __DATE__ "\n"
  39:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** /*
  40:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** ***************************************************************************************************
  41:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *                                        INITIALIZE A TASK'S STACK
  42:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  43:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** * Description: This function is highly processor specific.
  44:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  45:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** * Arguments  : task          is a pointer to the task code
  46:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  47:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *              pdata         is a pointer to a user supplied data area that will be passed to the t
  48:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *                            when the task first executes.
  49:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  50:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
  51:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *                            a 'free' entry on the task stack.  
  52:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *                            'ptos' contains the HIGHEST valid address of the stack.  
  53:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  54:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *              opt           specifies options that can be used to alter the behavior of OSTaskStkI
  55:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *                            We don't use have any option implemented for this project. You can jus
  56:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *                            set opt to 0
  57:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  58:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** * Returns    : Always returns the location of the new top-of-stack' once the processor registers ha
  59:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *              been placed on the stack in the proper order.
  60:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** *
  61:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** * Note(s)    : 
  62:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** ***************************************************************************************************
  63:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** */
  64:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  65:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  66:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void nrk_battery_save()
  67:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 302               	.LM0:
 303               	.LFBB1:
 304               	/* prologue: function */
 305               	/* frame size = 0 */
 306               	/* stack size = 0 */
 307               	.L__stack_usage = 0
 308               	/* epilogue start */
  68:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #ifdef NRK_BATTERY_SAVE
  69:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****  	_nrk_stop_os_timer();
  70:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         _nrk_set_next_wakeup(250);
  71:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_led_clr(0);
  72:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_led_set(1);
  73:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_led_clr(2);
  74:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_led_clr(3);
  75:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         SET_VREG_INACTIVE();
  76:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_sleep();
  77:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #endif
  78:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 310               	.LM1:
 311 0000 0895      		ret
 313               	.Lscope1:
 315               		.stabd	78,0,0
 317               	.global	nrk_sleep
 319               	nrk_sleep:
 320               		.stabd	46,0,0
  79:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  80:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void nrk_sleep()
  81:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 322               	.LM2:
 323               	.LFBB2:
 324               	/* prologue: function */
 325               	/* frame size = 0 */
 326               	/* stack size = 0 */
 327               	.L__stack_usage = 0
  82:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  83:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     set_sleep_mode (SLEEP_MODE_PWR_SAVE);
 329               	.LM3:
 330 0002 83B7      		in r24,83-32
 331 0004 817F      		andi r24,lo8(-15)
 332 0006 8660      		ori r24,lo8(6)
 333 0008 83BF      		out 83-32,r24
  84:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     sleep_mode ();
 335               	.LM4:
 336 000a 83B7      		in r24,83-32
 337 000c 8160      		ori r24,lo8(1)
 338 000e 83BF      		out 83-32,r24
 339               	/* #APP */
 340               	 ;  84 "../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c" 1
 341 0010 8895      		sleep
 342               		
 343               	 ;  0 "" 2
 344               	/* #NOAPP */
 345 0012 83B7      		in r24,83-32
 346 0014 8E7F      		andi r24,lo8(-2)
 347 0016 83BF      		out 83-32,r24
 348               	/* epilogue start */
  85:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  86:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 350               	.LM5:
 351 0018 0895      		ret
 353               	.Lscope2:
 355               		.stabd	78,0,0
 357               	.global	nrk_idle
 359               	nrk_idle:
 360               		.stabd	46,0,0
  87:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  88:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void nrk_idle()
  89:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 362               	.LM6:
 363               	.LFBB3:
 364               	/* prologue: function */
 365               	/* frame size = 0 */
 366               	/* stack size = 0 */
 367               	.L__stack_usage = 0
  90:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  91:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     set_sleep_mode( SLEEP_MODE_IDLE);
 369               	.LM7:
 370 001a 83B7      		in r24,83-32
 371 001c 817F      		andi r24,lo8(-15)
 372 001e 83BF      		out 83-32,r24
  92:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     sleep_mode ();
 374               	.LM8:
 375 0020 83B7      		in r24,83-32
 376 0022 8160      		ori r24,lo8(1)
 377 0024 83BF      		out 83-32,r24
 378               	/* #APP */
 379               	 ;  92 "../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c" 1
 380 0026 8895      		sleep
 381               		
 382               	 ;  0 "" 2
 383               	/* #NOAPP */
 384 0028 83B7      		in r24,83-32
 385 002a 8E7F      		andi r24,lo8(-2)
 386 002c 83BF      		out 83-32,r24
 387               	/* epilogue start */
  93:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  94:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 389               	.LM9:
 390 002e 0895      		ret
 392               	.Lscope3:
 394               		.stabd	78,0,0
 398               	.global	nrk_task_set_entry_function
 400               	nrk_task_set_entry_function:
 401               		.stabd	46,0,0
  95:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
  96:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void nrk_task_set_entry_function( nrk_task_type *task, void *func )
  97:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 403               	.LM10:
 404               	.LFBB4:
 405               	/* prologue: function */
 406               	/* frame size = 0 */
 407               	/* stack size = 0 */
 408               	.L__stack_usage = 0
  98:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** task->task=func;
 410               	.LM11:
 411 0030 FC01      		movw r30,r24
 412 0032 7683      		std Z+6,r23
 413 0034 6583      		std Z+5,r22
 414               	/* epilogue start */
  99:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 416               	.LM12:
 417 0036 0895      		ret
 419               	.Lscope4:
 421               		.stabd	78,0,0
 426               	.global	nrk_task_set_stk
 428               	nrk_task_set_stk:
 429               		.stabd	46,0,0
 100:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 101:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
 102:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 431               	.LM13:
 432               	.LFBB5:
 433 0038 EF92      		push r14
 434 003a FF92      		push r15
 435 003c 0F93      		push r16
 436 003e 1F93      		push r17
 437 0040 CF93      		push r28
 438 0042 DF93      		push r29
 439               	/* prologue: function */
 440               	/* frame size = 0 */
 441               	/* stack size = 6 */
 442               	.L__stack_usage = 6
 443 0044 EC01      		movw r28,r24
 444 0046 8B01      		movw r16,r22
 445 0048 7A01      		movw r14,r20
 103:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 104:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
 447               	.LM14:
 448 004a 4032      		cpi r20,32
 449 004c 5105      		cpc r21,__zero_reg__
 450 004e 00F4      		brsh .L6
 452               	.LM15:
 453 0050 81E1      		ldi r24,lo8(17)
 454 0052 0E94 0000 		call nrk_error_add
 455               	.L6:
 105:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** task->Ptos = (void *) &stk_base[stk_size-1];
 457               	.LM16:
 458 0056 0894      		sec
 459 0058 E108      		sbc r14,__zero_reg__
 460 005a F108      		sbc r15,__zero_reg__
 461 005c E00E      		add r14,r16
 462 005e F11E      		adc r15,r17
 463 0060 FA82      		std Y+2,r15
 464 0062 E982      		std Y+1,r14
 106:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** task->Pbos = (void *) &stk_base[0];
 466               	.LM17:
 467 0064 1C83      		std Y+4,r17
 468 0066 0B83      		std Y+3,r16
 469               	/* epilogue start */
 107:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 108:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 471               	.LM18:
 472 0068 DF91      		pop r29
 473 006a CF91      		pop r28
 474 006c 1F91      		pop r17
 475 006e 0F91      		pop r16
 476 0070 FF90      		pop r15
 477 0072 EF90      		pop r14
 478 0074 0895      		ret
 480               	.Lscope5:
 482               		.stabd	78,0,0
 485               	.global	nrk_task_stk_init
 487               	nrk_task_stk_init:
 488               		.stabd	46,0,0
 109:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 110:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void *nrk_task_stk_init (void (*task)(), void *ptos, void *pbos)
 111:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 490               	.LM19:
 491               	.LFBB6:
 492               	/* prologue: function */
 493               	/* frame size = 0 */
 494               	/* stack size = 0 */
 495               	.L__stack_usage = 0
 112:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     uint16_t *stk ;  // 2 bytes
 113:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     uint8_t *stkc; // 1 byte
 114:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 115:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
 116:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     stkc = (unsigned char*)stk;
 117:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
 497               	.LM20:
 498 0076 25E5      		ldi r18,lo8(85)
 499 0078 FA01      		movw r30,r20
 500 007a 2083      		st Z,r18
 118:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     stk    = (unsigned int *)ptos;          /* Load stack pointer */
 502               	.LM21:
 503 007c FB01      		movw r30,r22
 119:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     /* build a context for the new task */
 120:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     /* Where do these numbers come from? */
 121:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****    /* *(--stk) = 0x4f50;   // O P 
 122:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x4d4e;   // M N 
 123:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x4b4c;   // K L                      
 124:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x494a;   // I J                      
 125:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x4748;   // G H                      
 126:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x4546;   // E F                    
 127:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x4344;   // C D    	
 128:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0x4142;   // A B
 129:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** */
 130:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     --stk;
 505               	.LM22:
 506 007e 3297      		sbiw r30,2
 131:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     stkc = (unsigned char*)stk;	
 132:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
 508               	.LM23:
 509 0080 9083      		st Z,r25
 133:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *stkc = (unsigned char)((unsigned int)(task)%256);
 511               	.LM24:
 512 0082 8183      		std Z+1,r24
 134:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 	
 135:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;
 514               	.LM25:
 515 0084 1292      		st -Z,__zero_reg__
 516 0086 1292      		st -Z,__zero_reg__
 136:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;       
 518               	.LM26:
 519 0088 1292      		st -Z,__zero_reg__
 520 008a 1292      		st -Z,__zero_reg__
 137:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;                        
 522               	.LM27:
 523 008c 1292      		st -Z,__zero_reg__
 524 008e 1292      		st -Z,__zero_reg__
 138:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;                        
 526               	.LM28:
 527 0090 1292      		st -Z,__zero_reg__
 528 0092 1292      		st -Z,__zero_reg__
 139:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;                         
 530               	.LM29:
 531 0094 1292      		st -Z,__zero_reg__
 532 0096 1292      		st -Z,__zero_reg__
 140:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;                         
 534               	.LM30:
 535 0098 1292      		st -Z,__zero_reg__
 536 009a 1292      		st -Z,__zero_reg__
 141:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;                        
 538               	.LM31:
 539 009c 1292      		st -Z,__zero_reg__
 540 009e 1292      		st -Z,__zero_reg__
 142:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 542               	.LM32:
 543 00a0 1292      		st -Z,__zero_reg__
 544 00a2 1292      		st -Z,__zero_reg__
 143:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 144:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 546               	.LM33:
 547 00a4 1292      		st -Z,__zero_reg__
 548 00a6 1292      		st -Z,__zero_reg__
 145:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 550               	.LM34:
 551 00a8 1292      		st -Z,__zero_reg__
 552 00aa 1292      		st -Z,__zero_reg__
 146:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 554               	.LM35:
 555 00ac 1292      		st -Z,__zero_reg__
 556 00ae 1292      		st -Z,__zero_reg__
 147:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 558               	.LM36:
 559 00b0 1292      		st -Z,__zero_reg__
 560 00b2 1292      		st -Z,__zero_reg__
 148:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 562               	.LM37:
 563 00b4 1292      		st -Z,__zero_reg__
 564 00b6 1292      		st -Z,__zero_reg__
 149:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 566               	.LM38:
 567 00b8 1292      		st -Z,__zero_reg__
 568 00ba 1292      		st -Z,__zero_reg__
 150:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 570               	.LM39:
 571 00bc 1292      		st -Z,__zero_reg__
 572 00be 1292      		st -Z,__zero_reg__
 151:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0; 
 574               	.LM40:
 575 00c0 1292      		st -Z,__zero_reg__
 576 00c2 1292      		st -Z,__zero_reg__
 152:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *(--stk) = 0;
 578               	.LM41:
 579 00c4 1292      		st -Z,__zero_reg__
 580 00c6 1292      		st -Z,__zero_reg__
 153:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 154:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 155:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     return ((void *)stk);
 156:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 582               	.LM42:
 583 00c8 CF01      		movw r24,r30
 584               	/* epilogue start */
 585 00ca 0895      		ret
 587               	.Lscope6:
 589               		.stabd	78,0,0
 591               	.global	nrk_stack_pointer_init
 593               	nrk_stack_pointer_init:
 594               		.stabd	46,0,0
 157:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 158:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** inline void nrk_stack_pointer_init()
 159:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 596               	.LM43:
 597               	.LFBB7:
 598               	/* prologue: function */
 599               	/* frame size = 0 */
 600               	/* stack size = 0 */
 601               	.L__stack_usage = 0
 160:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** unsigned char *stkc;
 161:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #ifdef KERNEL_STK_ARRAY
 162:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 163:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_kernel_stk[0]=STK_CANARY_VAL;
 164:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 165:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     #else
 166:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
 167:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         *stkc = STK_CANARY_VAL;
 603               	.LM44:
 604 00cc 85E5      		ldi r24,lo8(85)
 605 00ce 8093 7E41 		sts 16766,r24
 168:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
 169:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
 607               	.LM45:
 608 00d2 EEEF      		ldi r30,lo8(16894)
 609 00d4 F1E4      		ldi r31,hi8(16894)
 610 00d6 F093 0000 		sts nrk_kernel_stk_ptr+1,r31
 611 00da E093 0000 		sts nrk_kernel_stk_ptr,r30
 170:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     #endif
 171:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 613               	.LM46:
 614 00de 80E0      		ldi r24,lo8(gs(_nrk_timer_tick))
 615 00e0 90E0      		ldi r25,hi8(gs(_nrk_timer_tick))
 616 00e2 9083      		st Z,r25
 172:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****     *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 618               	.LM47:
 619 00e4 8093 FF41 		sts 16895,r24
 620               	/* epilogue start */
 173:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 174:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 622               	.LM48:
 623 00e8 0895      		ret
 625               	.Lscope7:
 627               		.stabd	78,0,0
 629               	.global	nrk_stack_pointer_restore
 631               	nrk_stack_pointer_restore:
 632               		.stabd	46,0,0
 175:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 176:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 177:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** inline void nrk_stack_pointer_restore()
 178:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 634               	.LM49:
 635               	.LFBB8:
 636               	/* prologue: function */
 637               	/* frame size = 0 */
 638               	/* stack size = 0 */
 639               	.L__stack_usage = 0
 179:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** unsigned char *stkc;
 180:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 181:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #ifdef KERNEL_STK_ARRAY
 182:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
 183:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #else
 184:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
 185:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** #endif
 186:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
 641               	.LM50:
 642 00ea 80E0      		ldi r24,lo8(gs(_nrk_timer_tick))
 643 00ec 90E0      		ldi r25,hi8(gs(_nrk_timer_tick))
 644 00ee 9093 FE41 		sts 16894,r25
 187:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****         *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
 646               	.LM51:
 647 00f2 8093 FF41 		sts 16895,r24
 648               	/* epilogue start */
 188:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 650               	.LM52:
 651 00f6 0895      		ret
 653               	.Lscope8:
 655               		.stabd	78,0,0
 657               	.global	nrk_target_start
 659               	nrk_target_start:
 660               		.stabd	46,0,0
 189:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 190:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** /* start the target running */
 191:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** void nrk_target_start(void)
 192:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** {
 662               	.LM53:
 663               	.LFBB9:
 664               	/* prologue: function */
 665               	/* frame size = 0 */
 666               	/* stack size = 0 */
 667               	.L__stack_usage = 0
 193:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 
 194:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****   _nrk_setup_timer();
 669               	.LM54:
 670 00f8 0E94 0000 		call _nrk_setup_timer
 195:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c ****   nrk_int_enable();  
 672               	.LM55:
 673 00fc 0E94 0000 		call nrk_int_enable
 674               	/* epilogue start */
 196:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** 	
 197:../../../src/kernel/hal/atmega128rfa1/nrk_cpu.c **** }
 676               	.LM56:
 677 0100 0895      		ret
 679               	.Lscope9:
 681               		.stabd	78,0,0
 682               		.comm _nrk_signal_list,4,1
 683               		.comm nrk_idle_task_stk,128,1
 684               		.comm nrk_kernel_stk_ptr,2,1
 685               		.comm nrk_task_TCB,165,1
 686               		.comm nrk_wakeup_signal,1,1
 687               		.comm _nrk_readyQ,30,1
 688               		.comm _free_node,2,1
 689               		.comm _head_node,2,1
 690               		.comm nrk_cur_task_prio,1,1
 691               		.comm nrk_cur_task_TCB,2,1
 692               		.comm nrk_high_ready_prio,1,1
 693               		.comm nrk_high_ready_TCB,2,1
 694               		.comm _nrk_resource_cnt,1,1
 695               		.comm nrk_system_time,8,1
 696               		.comm nrk_sem_list,3,1
 697               		.comm _nrk_prev_timer_val,1,1
 698               		.comm _nrk_time_trigger,1,1
 699               		.comm app_timer0_callback,2,1
 700               		.comm app_timer0_prescale,1,1
 701               		.comm error_task,1,1
 702               		.comm error_num,1,1
 725               	.Letext0:
 726               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_cpu.c
     /tmp/ccR4OdZW.s:2      *ABS*:0000003f __SREG__
     /tmp/ccR4OdZW.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccR4OdZW.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccR4OdZW.s:5      *ABS*:00000034 __CCP__
     /tmp/ccR4OdZW.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccR4OdZW.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccR4OdZW.s:299    .text:00000000 nrk_battery_save
     /tmp/ccR4OdZW.s:319    .text:00000002 nrk_sleep
     /tmp/ccR4OdZW.s:359    .text:0000001a nrk_idle
     /tmp/ccR4OdZW.s:400    .text:00000030 nrk_task_set_entry_function
     /tmp/ccR4OdZW.s:428    .text:00000038 nrk_task_set_stk
     /tmp/ccR4OdZW.s:487    .text:00000076 nrk_task_stk_init
     /tmp/ccR4OdZW.s:593    .text:000000cc nrk_stack_pointer_init
                            *COM*:00000002 nrk_kernel_stk_ptr
     /tmp/ccR4OdZW.s:631    .text:000000ea nrk_stack_pointer_restore
     /tmp/ccR4OdZW.s:659    .text:000000f8 nrk_target_start
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:000000a5 nrk_task_TCB
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:0000001e _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:00000008 nrk_system_time
                            *COM*:00000003 nrk_sem_list
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
nrk_error_add
_nrk_timer_tick
_nrk_setup_timer
nrk_int_enable
__do_clear_bss
