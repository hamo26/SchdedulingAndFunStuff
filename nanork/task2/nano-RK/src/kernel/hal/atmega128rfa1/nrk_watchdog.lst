   1               		.file	"nrk_watchdog.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 294               	.global	nrk_watchdog_disable
 296               	nrk_watchdog_disable:
 297               		.stabd	46,0,0
   1:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** /******************************************************************************
   2:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  All rights reserved.
   5:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *
   6:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *
  10:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  This program is free software: you can redistribute it and/or modify
  11:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  it under the terms of the GNU General Public License as published by
  12:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *
  14:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  This program is distributed in the hope that it will be useful,
  15:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  GNU General Public License for more details.
  18:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *
  19:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  You should have received a copy of the GNU General Public License
  20:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *
  22:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  Contributing Authors (specific to this file):
  23:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *  Anthony Rowe
  24:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** *******************************************************************************/
  25:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  26:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** #include <include.h>
  27:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** #include <nrk_watchdog.h>
  28:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** #include <nrk_error.h>
  29:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** #include <nrk.h>
  30:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** #include <avr/wdt.h>
  31:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  32:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** void nrk_watchdog_disable()
  33:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
 299               	.LM0:
 300               	.LFBB1:
 301               	/* prologue: function */
 302               	/* frame size = 0 */
 303               	/* stack size = 0 */
 304               	.L__stack_usage = 0
  34:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_disable();
 306               	.LM1:
 307 0000 0E94 0000 		call nrk_int_disable
 308               	.LBB6:
 309               	.LBB7:
  35:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_watchdog_reset();
  36:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** MCUSR &= ~(1<<WDRF);
  37:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR |= (1<<WDCE) | (1<<WDE);
  38:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR = 0;
  39:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_enable();
  40:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** }
  41:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  42:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** void nrk_watchdog_enable()
  43:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
  44:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** // Enable watchdog with 1024K cycle timeout
  45:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** // No Interrupt Trigger
  46:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_disable();
  47:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_watchdog_reset();
  48:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** MCUSR &= ~(1<<WDRF);
  49:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR |= (1<<WDCE) | (1<<WDE);
  50:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
  51:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_enable();
  52:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** }
  53:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  54:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** int8_t nrk_watchdog_check()
  55:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
  56:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  57:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** if((MCUSR & (1<<WDRF))==0) return NRK_OK;
  58:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** return NRK_ERROR;
  59:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** }
  60:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  61:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** inline void nrk_watchdog_reset()
  62:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
  63:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** wdt_reset();
 311               	.LM2:
 312               	/* #APP */
 313               	 ;  63 "../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c" 1
 314 0004 A895      		wdr
 315               	 ;  0 "" 2
 316               	/* #NOAPP */
 317               	.LBE7:
 318               	.LBE6:
  36:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** MCUSR &= ~(1<<WDRF);
 320               	.LM3:
 321 0006 84B7      		in r24,84-32
 322 0008 877F      		andi r24,lo8(-9)
 323 000a 84BF      		out 84-32,r24
  37:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR |= (1<<WDCE) | (1<<WDE);
 325               	.LM4:
 326 000c E0E6      		ldi r30,lo8(96)
 327 000e F0E0      		ldi r31,hi8(96)
 328 0010 8081      		ld r24,Z
 329 0012 8861      		ori r24,lo8(24)
 330 0014 8083      		st Z,r24
  38:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR = 0;
 332               	.LM5:
 333 0016 1082      		st Z,__zero_reg__
  39:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_enable();
 335               	.LM6:
 336 0018 0E94 0000 		call nrk_int_enable
 337               	/* epilogue start */
  40:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** }
 339               	.LM7:
 340 001c 0895      		ret
 342               	.Lscope1:
 344               		.stabd	78,0,0
 346               	.global	nrk_watchdog_enable
 348               	nrk_watchdog_enable:
 349               		.stabd	46,0,0
  43:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
 351               	.LM8:
 352               	.LFBB2:
 353               	/* prologue: function */
 354               	/* frame size = 0 */
 355               	/* stack size = 0 */
 356               	.L__stack_usage = 0
  46:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_disable();
 358               	.LM9:
 359 001e 0E94 0000 		call nrk_int_disable
 360               	.LBB8:
 361               	.LBB9:
 363               	.LM10:
 364               	/* #APP */
 365               	 ;  63 "../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c" 1
 366 0022 A895      		wdr
 367               	 ;  0 "" 2
 368               	/* #NOAPP */
 369               	.LBE9:
 370               	.LBE8:
  48:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** MCUSR &= ~(1<<WDRF);
 372               	.LM11:
 373 0024 84B7      		in r24,84-32
 374 0026 877F      		andi r24,lo8(-9)
 375 0028 84BF      		out 84-32,r24
  49:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR |= (1<<WDCE) | (1<<WDE);
 377               	.LM12:
 378 002a E0E6      		ldi r30,lo8(96)
 379 002c F0E0      		ldi r31,hi8(96)
 380 002e 8081      		ld r24,Z
 381 0030 8861      		ori r24,lo8(24)
 382 0032 8083      		st Z,r24
  50:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
 384               	.LM13:
 385 0034 8DE0      		ldi r24,lo8(13)
 386 0036 8083      		st Z,r24
  51:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** nrk_int_enable();
 388               	.LM14:
 389 0038 0E94 0000 		call nrk_int_enable
 390               	/* epilogue start */
  52:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** }
 392               	.LM15:
 393 003c 0895      		ret
 395               	.Lscope2:
 397               		.stabd	78,0,0
 399               	.global	nrk_watchdog_check
 401               	nrk_watchdog_check:
 402               		.stabd	46,0,0
  55:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
 404               	.LM16:
 405               	.LFBB3:
 406               	/* prologue: function */
 407               	/* frame size = 0 */
 408               	/* stack size = 0 */
 409               	.L__stack_usage = 0
  57:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** if((MCUSR & (1<<WDRF))==0) return NRK_OK;
 411               	.LM17:
 412 003e 04B6      		in __tmp_reg__,84-32
 413 0040 03FC      		sbrc __tmp_reg__,3
 414 0042 00C0      		rjmp .L5
 415 0044 81E0      		ldi r24,lo8(1)
 416 0046 0895      		ret
 417               	.L5:
  58:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** return NRK_ERROR;
 419               	.LM18:
 420 0048 8FEF      		ldi r24,lo8(-1)
  59:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** }
 422               	.LM19:
 423 004a 0895      		ret
 425               	.Lscope3:
 427               		.stabd	78,0,0
 429               	.global	nrk_watchdog_reset
 431               	nrk_watchdog_reset:
 432               		.stabd	46,0,0
  62:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** {
 434               	.LM20:
 435               	.LFBB4:
 436               	/* prologue: function */
 437               	/* frame size = 0 */
 438               	/* stack size = 0 */
 439               	.L__stack_usage = 0
 441               	.LM21:
 442               	/* #APP */
 443               	 ;  63 "../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c" 1
 444 004c A895      		wdr
 445               	 ;  0 "" 2
 446               	/* epilogue start */
  64:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** 
  65:../../../src/kernel/hal/atmega128rfa1/nrk_watchdog.c **** }
 448               	.LM22:
 449               	/* #NOAPP */
 450 004e 0895      		ret
 452               	.Lscope4:
 454               		.stabd	78,0,0
 455               		.comm _nrk_signal_list,4,1
 456               		.comm error_task,1,1
 457               		.comm error_num,1,1
 458               		.comm nrk_idle_task_stk,128,1
 459               		.comm nrk_kernel_stk_ptr,2,1
 466               	.Letext0:
 467               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_watchdog.c
     /tmp/cc9Q8OtV.s:2      *ABS*:0000003f __SREG__
     /tmp/cc9Q8OtV.s:3      *ABS*:0000003e __SP_H__
     /tmp/cc9Q8OtV.s:4      *ABS*:0000003d __SP_L__
     /tmp/cc9Q8OtV.s:5      *ABS*:00000034 __CCP__
     /tmp/cc9Q8OtV.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/cc9Q8OtV.s:7      *ABS*:00000001 __zero_reg__
     /tmp/cc9Q8OtV.s:296    .text:00000000 nrk_watchdog_disable
     /tmp/cc9Q8OtV.s:348    .text:0000001e nrk_watchdog_enable
     /tmp/cc9Q8OtV.s:401    .text:0000003e nrk_watchdog_check
     /tmp/cc9Q8OtV.s:431    .text:0000004c nrk_watchdog_reset
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr

UNDEFINED SYMBOLS
nrk_int_disable
nrk_int_enable
__do_clear_bss
