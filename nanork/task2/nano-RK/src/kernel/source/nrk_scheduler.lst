   1               		.file	"nrk_scheduler.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 138               	.global	_nrk_scheduler
 140               	_nrk_scheduler:
 141               		.stabd	46,0,0
   1:..//src/kernel/source/nrk_scheduler.c **** /******************************************************************************
   2:..//src/kernel/source/nrk_scheduler.c ****  *  Nano-RK, a real-time operating system for sensor networks.
   3:..//src/kernel/source/nrk_scheduler.c ****  *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:..//src/kernel/source/nrk_scheduler.c ****  *  All rights reserved.
   5:..//src/kernel/source/nrk_scheduler.c ****  *
   6:..//src/kernel/source/nrk_scheduler.c ****  *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:..//src/kernel/source/nrk_scheduler.c ****  *  Licensing Model. If you are unsure which license to use please refer to:
   8:..//src/kernel/source/nrk_scheduler.c ****  *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:..//src/kernel/source/nrk_scheduler.c ****  *
  10:..//src/kernel/source/nrk_scheduler.c ****  *  This program is free software: you can redistribute it and/or modify
  11:..//src/kernel/source/nrk_scheduler.c ****  *  it under the terms of the GNU General Public License as published by
  12:..//src/kernel/source/nrk_scheduler.c ****  *  the Free Software Foundation, version 2.0 of the License.
  13:..//src/kernel/source/nrk_scheduler.c ****  *
  14:..//src/kernel/source/nrk_scheduler.c ****  *  This program is distributed in the hope that it will be useful,
  15:..//src/kernel/source/nrk_scheduler.c ****  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:..//src/kernel/source/nrk_scheduler.c ****  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:..//src/kernel/source/nrk_scheduler.c ****  *  GNU General Public License for more details.
  18:..//src/kernel/source/nrk_scheduler.c ****  *
  19:..//src/kernel/source/nrk_scheduler.c ****  *  You should have received a copy of the GNU General Public License
  20:..//src/kernel/source/nrk_scheduler.c ****  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:..//src/kernel/source/nrk_scheduler.c ****  *
  22:..//src/kernel/source/nrk_scheduler.c ****  *  Contributing Authors (specific to this file):
  23:..//src/kernel/source/nrk_scheduler.c ****  *  Anthony Rowe
  24:..//src/kernel/source/nrk_scheduler.c ****  *  Zane Starr
  25:..//src/kernel/source/nrk_scheduler.c ****  *  Anand Eswaren
  26:..//src/kernel/source/nrk_scheduler.c ****  *******************************************************************************/
  27:..//src/kernel/source/nrk_scheduler.c **** 
  28:..//src/kernel/source/nrk_scheduler.c **** #include <nrk.h>
  29:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_task.h>
  30:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_defs.h>
  31:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_error.h>
  32:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_events.h>
  33:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_scheduler.h>
  34:..//src/kernel/source/nrk_scheduler.c **** #include <include.h>
  35:..//src/kernel/source/nrk_scheduler.c **** #include <ulib.h>
  36:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_timer.h>
  37:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_time.h>
  38:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_cfg.h>
  39:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_cpu.h>
  40:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_watchdog.h>
  41:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_platform_time.h>
  42:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_stats.h>
  43:..//src/kernel/source/nrk_scheduler.c **** #include <nrk_sw_wdt.h>
  44:..//src/kernel/source/nrk_scheduler.c **** 
  45:..//src/kernel/source/nrk_scheduler.c **** 
  46:..//src/kernel/source/nrk_scheduler.c **** // This define was moved into nrk_platform_time.h since it needs to be different based on the clk s
  47:..//src/kernel/source/nrk_scheduler.c **** // 750 measure to 100uS
  48:..//src/kernel/source/nrk_scheduler.c **** // 800 * .125 = 100us
  49:..//src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    750
  50:..//src/kernel/source/nrk_scheduler.c **** // For rfa1:
  51:..//src/kernel/source/nrk_scheduler.c **** //#define CONTEXT_SWAP_TIME_BOUND    1500 
  52:..//src/kernel/source/nrk_scheduler.c **** 
  53:..//src/kernel/source/nrk_scheduler.c **** uint8_t t;
  54:..//src/kernel/source/nrk_scheduler.c **** void inline _nrk_scheduler()
  55:..//src/kernel/source/nrk_scheduler.c **** {
 143               	.LM0:
 144               	.LFBB1:
 145 0000 2F92      		push r2
 146 0002 3F92      		push r3
 147 0004 4F92      		push r4
 148 0006 5F92      		push r5
 149 0008 6F92      		push r6
 150 000a 7F92      		push r7
 151 000c 8F92      		push r8
 152 000e 9F92      		push r9
 153 0010 AF92      		push r10
 154 0012 BF92      		push r11
 155 0014 CF92      		push r12
 156 0016 DF92      		push r13
 157 0018 EF92      		push r14
 158 001a FF92      		push r15
 159 001c 0F93      		push r16
 160 001e 1F93      		push r17
 161 0020 DF93      		push r29
 162 0022 CF93      		push r28
 163 0024 0F92      		push __tmp_reg__
 164 0026 CDB7      		in r28,__SP_L__
 165 0028 DEB7      		in r29,__SP_H__
 166               	/* prologue: function */
 167               	/* frame size = 1 */
 168               	/* stack size = 19 */
 169               	.L__stack_usage = 19
  56:..//src/kernel/source/nrk_scheduler.c ****     int8_t task_ID;
  57:..//src/kernel/source/nrk_scheduler.c ****     uint16_t next_wake;
  58:..//src/kernel/source/nrk_scheduler.c ****     uint16_t start_time_stamp;
  59:..//src/kernel/source/nrk_scheduler.c **** 
  60:..//src/kernel/source/nrk_scheduler.c ****     _nrk_precision_os_timer_reset();
 171               	.LM1:
 172 002a 0E94 0000 		call _nrk_precision_os_timer_reset
  61:..//src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();   // this should be removed...  Not needed
 174               	.LM2:
 175 002e 0E94 0000 		call nrk_int_disable
  62:..//src/kernel/source/nrk_scheduler.c **** 
  63:..//src/kernel/source/nrk_scheduler.c **** 
  64:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
  65:..//src/kernel/source/nrk_scheduler.c ****     _nrk_high_speed_timer_reset();
 177               	.LM3:
 178 0032 0E94 0000 		call _nrk_high_speed_timer_reset
  66:..//src/kernel/source/nrk_scheduler.c ****     start_time_stamp=_nrk_high_speed_timer_get();
 180               	.LM4:
 181 0036 0E94 0000 		call _nrk_high_speed_timer_get
 182 003a 2C01      		movw r4,r24
  67:..//src/kernel/source/nrk_scheduler.c **** #endif
  68:..//src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
 184               	.LM5:
 185 003c 8AEF      		ldi r24,lo8(-6)
 186 003e 0E94 0000 		call _nrk_set_next_wakeup
  69:..//src/kernel/source/nrk_scheduler.c ****     // Set to huge number which will later get set to min
  70:..//src/kernel/source/nrk_scheduler.c **** 
  71:..//src/kernel/source/nrk_scheduler.c ****     next_wake=60000;
  72:..//src/kernel/source/nrk_scheduler.c ****     // Safety zone starts here....
  73:..//src/kernel/source/nrk_scheduler.c **** 
  74:..//src/kernel/source/nrk_scheduler.c **** 
  75:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_WATCHDOG
  76:..//src/kernel/source/nrk_scheduler.c ****     nrk_watchdog_reset();
 188               	.LM6:
 189 0042 0E94 0000 		call nrk_watchdog_reset
  77:..//src/kernel/source/nrk_scheduler.c **** #endif
  78:..//src/kernel/source/nrk_scheduler.c **** 
  79:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_SW_WDT
  80:..//src/kernel/source/nrk_scheduler.c ****     _nrk_sw_wdt_check();
  81:..//src/kernel/source/nrk_scheduler.c **** #endif
  82:..//src/kernel/source/nrk_scheduler.c **** 
  83:..//src/kernel/source/nrk_scheduler.c **** 
  84:..//src/kernel/source/nrk_scheduler.c **** 
  85:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
  86:..//src/kernel/source/nrk_scheduler.c ****     //nrk_kprintf( PSTR("*"));
  87:..//src/kernel/source/nrk_scheduler.c ****     //Check if OS tick was delayed...
  88:..//src/kernel/source/nrk_scheduler.c ****     // if(_nrk_cpu_state!=CPU_SLEEP && _nrk_os_timer_get()!=0) {
  89:..//src/kernel/source/nrk_scheduler.c ****     //		nrk_kprintf( PSTR("X" ));
  90:..//src/kernel/source/nrk_scheduler.c ****     //printf( "%u ",_nrk_os_timer_get());
  91:..//src/kernel/source/nrk_scheduler.c ****     //	}
  92:..//src/kernel/source/nrk_scheduler.c ****     //printf( "%u\r\n",_nrk_prev_timer_val);
  93:..//src/kernel/source/nrk_scheduler.c ****     if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
  94:..//src/kernel/source/nrk_scheduler.c ****         nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
  95:..//src/kernel/source/nrk_scheduler.c **** #endif
  96:..//src/kernel/source/nrk_scheduler.c ****     //while(_nrk_time_trigger>0)
  97:..//src/kernel/source/nrk_scheduler.c ****     //{
  98:..//src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
 191               	.LM7:
 192 0046 6091 0000 		lds r22,_nrk_prev_timer_val
 193 004a 70E0      		ldi r23,lo8(0)
 194 004c 80E0      		ldi r24,lo8(0)
 195 004e 90E0      		ldi r25,hi8(0)
 196 0050 23EB      		ldi r18,lo8(976563)
 197 0052 36EE      		ldi r19,hi8(976563)
 198 0054 4EE0      		ldi r20,hlo8(976563)
 199 0056 50E0      		ldi r21,hhi8(976563)
 200 0058 0E94 0000 		call __mulsi3
 201 005c 7B01      		movw r14,r22
 202 005e 8C01      		movw r16,r24
 203 0060 8091 0000 		lds r24,nrk_system_time+4
 204 0064 9091 0000 		lds r25,nrk_system_time+4+1
 205 0068 A091 0000 		lds r26,nrk_system_time+4+2
 206 006c B091 0000 		lds r27,nrk_system_time+4+3
 207 0070 E80E      		add r14,r24
 208 0072 F91E      		adc r15,r25
 209 0074 0A1F      		adc r16,r26
 210 0076 1B1F      		adc r17,r27
  99:..//src/kernel/source/nrk_scheduler.c ****     nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 212               	.LM8:
 213 0078 C801      		movw r24,r16
 214 007a B701      		movw r22,r14
 215 007c 0E94 0000 		call __udivmodsi4
 216 0080 E61A      		sub r14,r22
 217 0082 F70A      		sbc r15,r23
 218 0084 080B      		sbc r16,r24
 219 0086 190B      		sbc r17,r25
 220 0088 8091 0000 		lds r24,nrk_system_time
 221 008c 9091 0000 		lds r25,nrk_system_time+1
 222 0090 A091 0000 		lds r26,nrk_system_time+2
 223 0094 B091 0000 		lds r27,nrk_system_time+3
 100:..//src/kernel/source/nrk_scheduler.c **** 
 101:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 102:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->task_ID==NRK_IDLE_TASK_ID)
 103:..//src/kernel/source/nrk_scheduler.c ****     {
 104:..//src/kernel/source/nrk_scheduler.c ****         if(_nrk_cpu_state==CPU_SLEEP) _nrk_stats_sleep(_nrk_prev_timer_val);
 105:..//src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 106:..//src/kernel/source/nrk_scheduler.c ****         // Add 0 time since the preempted call before set the correct value
 107:..//src/kernel/source/nrk_scheduler.c ****         _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, 0);
 108:..//src/kernel/source/nrk_scheduler.c ****     }
 109:..//src/kernel/source/nrk_scheduler.c ****     else
 110:..//src/kernel/source/nrk_scheduler.c ****     {
 111:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->suspend_flag==1)
 112:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_suspend(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 113:..//src/kernel/source/nrk_scheduler.c ****         else
 114:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
 115:..//src/kernel/source/nrk_scheduler.c ****     }
 116:..//src/kernel/source/nrk_scheduler.c **** #endif
 117:..//src/kernel/source/nrk_scheduler.c **** 
 118:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 119:..//src/kernel/source/nrk_scheduler.c ****     {
 120:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 121:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.secs++;
 122:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 225               	.LM9:
 226 0098 73EB      		ldi r23,lo8(976563)
 227 009a A72E      		mov r10,r23
 228 009c 76EE      		ldi r23,hi8(976563)
 229 009e B72E      		mov r11,r23
 230 00a0 7EE0      		ldi r23,hlo8(976563)
 231 00a2 C72E      		mov r12,r23
 232 00a4 D12C      		mov r13,__zero_reg__
 118:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 234               	.LM10:
 235 00a6 00C0      		rjmp .L2
 236               	.L3:
 120:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=NANOS_PER_SEC;
 238               	.LM11:
 239 00a8 80E0      		ldi r24,lo8(-1000000000)
 240 00aa 96E3      		ldi r25,hi8(-1000000000)
 241 00ac A5E6      		ldi r26,hlo8(-1000000000)
 242 00ae B4EC      		ldi r27,hhi8(-1000000000)
 243 00b0 E80E      		add r14,r24
 244 00b2 F91E      		adc r15,r25
 245 00b4 0A1F      		adc r16,r26
 246 00b6 1B1F      		adc r17,r27
 248               	.LM12:
 249 00b8 C801      		movw r24,r16
 250 00ba B701      		movw r22,r14
 251 00bc A601      		movw r20,r12
 252 00be 9501      		movw r18,r10
 253 00c0 0E94 0000 		call __udivmodsi4
 254 00c4 E61A      		sub r14,r22
 255 00c6 F70A      		sbc r15,r23
 256 00c8 080B      		sbc r16,r24
 257 00ca 190B      		sbc r17,r25
 258 00cc D401      		movw r26,r8
 259 00ce C301      		movw r24,r6
 260               	.L2:
 262               	.LM13:
 263 00d0 3C01      		movw r6,r24
 264 00d2 4D01      		movw r8,r26
 265 00d4 0894      		sec
 266 00d6 611C      		adc r6,__zero_reg__
 267 00d8 711C      		adc r7,__zero_reg__
 268 00da 811C      		adc r8,__zero_reg__
 269 00dc 911C      		adc r9,__zero_reg__
 118:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 271               	.LM14:
 272 00de E0E0      		ldi r30,lo8(1000000000)
 273 00e0 EE16      		cp r14,r30
 274 00e2 EAEC      		ldi r30,hi8(1000000000)
 275 00e4 FE06      		cpc r15,r30
 276 00e6 EAE9      		ldi r30,hlo8(1000000000)
 277 00e8 0E07      		cpc r16,r30
 278 00ea EBE3      		ldi r30,hhi8(1000000000)
 279 00ec 1E07      		cpc r17,r30
 280 00ee 00F4      		brsh .L3
 118:..//src/kernel/source/nrk_scheduler.c ****     while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
 282               	.LM15:
 283 00f0 8093 0000 		sts nrk_system_time,r24
 284 00f4 9093 0000 		sts nrk_system_time+1,r25
 285 00f8 A093 0000 		sts nrk_system_time+2,r26
 286 00fc B093 0000 		sts nrk_system_time+3,r27
 287 0100 E092 0000 		sts nrk_system_time+4,r14
 288 0104 F092 0000 		sts nrk_system_time+4+1,r15
 289 0108 0093 0000 		sts nrk_system_time+4+2,r16
 290 010c 1093 0000 		sts nrk_system_time+4+3,r17
 123:..//src/kernel/source/nrk_scheduler.c ****     }
 124:..//src/kernel/source/nrk_scheduler.c ****     //  _nrk_time_trigger--;
 125:..//src/kernel/source/nrk_scheduler.c ****     //}
 126:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
 292               	.LM16:
 293 0110 E091 0000 		lds r30,nrk_cur_task_TCB
 294 0114 F091 0000 		lds r31,nrk_cur_task_TCB+1
 295 0118 8581      		ldd r24,Z+5
 296 011a 8823      		tst r24
 297 011c 01F0      		breq .L4
 299               	.LM17:
 300 011e 8185      		ldd r24,Z+9
 301 0120 8430      		cpi r24,lo8(4)
 302 0122 01F0      		breq .L4
 127:..//src/kernel/source/nrk_scheduler.c ****     {
 128:..//src/kernel/source/nrk_scheduler.c ****         //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 129:..//src/kernel/source/nrk_scheduler.c **** 
 130:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
 304               	.LM18:
 305 0124 8781      		ldd r24,Z+7
 306 0126 8230      		cpi r24,lo8(2)
 307 0128 01F0      		breq .L35
 308               	.L5:
 131:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 132:..//src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
 310               	.LM19:
 311 012a 8823      		tst r24
 312 012c 01F0      		breq .L7
 314               	.LM20:
 315 012e 8681      		ldd r24,Z+6
 316 0130 8823      		tst r24
 317 0132 01F4      		brne .L8
 318               	.L35:
 133:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
 320               	.LM21:
 321 0134 85E0      		ldi r24,lo8(5)
 322 0136 00C0      		rjmp .L36
 323               	.L8:
 134:..//src/kernel/source/nrk_scheduler.c ****         else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
 135:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 325               	.LM22:
 326 0138 83E0      		ldi r24,lo8(3)
 327               	.L36:
 328 013a 8187      		std Z+9,r24
 329 013c 00C0      		rjmp .L6
 330               	.L7:
 136:..//src/kernel/source/nrk_scheduler.c ****         else
 137:..//src/kernel/source/nrk_scheduler.c ****         {
 138:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 332               	.LM23:
 333 013e 83E0      		ldi r24,lo8(3)
 334 0140 8187      		std Z+9,r24
 139:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->event_suspend=0;
 336               	.LM24:
 337 0142 1782      		std Z+7,__zero_reg__
 140:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->nw_flag=0;
 339               	.LM25:
 340 0144 1682      		std Z+6,__zero_reg__
 341               	.L6:
 141:..//src/kernel/source/nrk_scheduler.c ****         }
 142:..//src/kernel/source/nrk_scheduler.c ****         nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
 343               	.LM26:
 344 0146 8085      		ldd r24,Z+8
 345 0148 0E94 0000 		call nrk_rem_from_readyQ
 346               	.L4:
 143:..//src/kernel/source/nrk_scheduler.c ****     }
 144:..//src/kernel/source/nrk_scheduler.c ****     // nrk_print_readyQ();
 145:..//src/kernel/source/nrk_scheduler.c **** 
 146:..//src/kernel/source/nrk_scheduler.c ****     // Update cpu used value for ended task
 147:..//src/kernel/source/nrk_scheduler.c ****     // If the task has used its reserve, suspend task
 148:..//src/kernel/source/nrk_scheduler.c ****     // Don't disable IdleTask which is 0
 149:..//src/kernel/source/nrk_scheduler.c ****     // Don't decrease cpu_remaining if reserve is 0 and hence disabled
 150:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_t
 348               	.LM27:
 349 014c E091 0000 		lds r30,nrk_cur_task_TCB
 350 0150 F091 0000 		lds r31,nrk_cur_task_TCB+1
 351 0154 858D      		ldd r24,Z+29
 352 0156 968D      		ldd r25,Z+30
 353 0158 0097      		sbiw r24,0
 354 015a 01F0      		breq .L9
 356               	.LM28:
 357 015c 6085      		ldd r22,Z+8
 358 015e 6623      		tst r22
 359 0160 01F0      		breq .L9
 360 0162 8185      		ldd r24,Z+9
 361 0164 8430      		cpi r24,lo8(4)
 362 0166 01F0      		breq .L9
 151:..//src/kernel/source/nrk_scheduler.c ****     {
 152:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
 364               	.LM29:
 365 0168 218D      		ldd r18,Z+25
 366 016a 328D      		ldd r19,Z+26
 367 016c 8091 0000 		lds r24,_nrk_prev_timer_val
 368 0170 90E0      		ldi r25,lo8(0)
 369 0172 2817      		cp r18,r24
 370 0174 3907      		cpc r19,r25
 371 0176 00F4      		brsh .L10
 153:..//src/kernel/source/nrk_scheduler.c ****         {
 154:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 155:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 156:..//src/kernel/source/nrk_scheduler.c **** #endif
 157:..//src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
 373               	.LM30:
 374 0178 82E0      		ldi r24,lo8(2)
 375 017a 0E94 0000 		call nrk_kernel_error_add
 158:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining=0;
 377               	.LM31:
 378 017e E091 0000 		lds r30,nrk_cur_task_TCB
 379 0182 F091 0000 		lds r31,nrk_cur_task_TCB+1
 380 0186 128E      		std Z+26,__zero_reg__
 381 0188 118E      		std Z+25,__zero_reg__
 382 018a 00C0      		rjmp .L11
 383               	.L10:
 159:..//src/kernel/source/nrk_scheduler.c ****         }
 160:..//src/kernel/source/nrk_scheduler.c ****         else
 161:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
 385               	.LM32:
 386 018c 281B      		sub r18,r24
 387 018e 390B      		sbc r19,r25
 388 0190 328F      		std Z+26,r19
 389 0192 218F      		std Z+25,r18
 390               	.L11:
 162:..//src/kernel/source/nrk_scheduler.c **** 
 163:..//src/kernel/source/nrk_scheduler.c ****         task_ID= nrk_cur_task_TCB->task_ID;
 392               	.LM33:
 393 0194 E091 0000 		lds r30,nrk_cur_task_TCB
 394 0198 F091 0000 		lds r31,nrk_cur_task_TCB+1
 395 019c 0085      		ldd r16,Z+8
 164:..//src/kernel/source/nrk_scheduler.c **** 
 165:..//src/kernel/source/nrk_scheduler.c ****         if (nrk_cur_task_TCB->cpu_remaining ==0 )
 397               	.LM34:
 398 019e 218D      		ldd r18,Z+25
 399 01a0 328D      		ldd r19,Z+26
 400 01a2 2115      		cp r18,__zero_reg__
 401 01a4 3105      		cpc r19,__zero_reg__
 402 01a6 01F4      		brne .L9
 166:..//src/kernel/source/nrk_scheduler.c ****         {
 167:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 168:..//src/kernel/source/nrk_scheduler.c ****             _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
 169:..//src/kernel/source/nrk_scheduler.c **** #endif
 170:..//src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
 404               	.LM35:
 405 01a8 83E0      		ldi r24,lo8(3)
 406 01aa 602F      		mov r22,r16
 407 01ac 0E94 0000 		call nrk_kernel_error_add
 171:..//src/kernel/source/nrk_scheduler.c ****             nrk_cur_task_TCB->task_state = SUSPENDED;
 409               	.LM36:
 410 01b0 E091 0000 		lds r30,nrk_cur_task_TCB
 411 01b4 F091 0000 		lds r31,nrk_cur_task_TCB+1
 412 01b8 83E0      		ldi r24,lo8(3)
 413 01ba 8187      		std Z+9,r24
 172:..//src/kernel/source/nrk_scheduler.c ****             nrk_rem_from_readyQ(task_ID);
 415               	.LM37:
 416 01bc 802F      		mov r24,r16
 417 01be 0E94 0000 		call nrk_rem_from_readyQ
 418               	.L9:
 420               	.LM38:
 421 01c2 60E0      		ldi r22,lo8(nrk_task_TCB+5)
 422 01c4 262E      		mov r2,r22
 423 01c6 60E0      		ldi r22,hi8(nrk_task_TCB+5)
 424 01c8 362E      		mov r3,r22
 122:..//src/kernel/source/nrk_scheduler.c ****         nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
 426               	.LM39:
 427 01ca 00E6      		ldi r16,lo8(-5536)
 428 01cc 1AEE      		ldi r17,hi8(-5536)
 429 01ce 20E0      		ldi r18,lo8(0)
 173:..//src/kernel/source/nrk_scheduler.c ****         }
 174:..//src/kernel/source/nrk_scheduler.c ****     }
 175:..//src/kernel/source/nrk_scheduler.c **** 
 176:..//src/kernel/source/nrk_scheduler.c ****     // Check I/O nrk_queues to add tasks with remaining cpu back...
 177:..//src/kernel/source/nrk_scheduler.c **** 
 178:..//src/kernel/source/nrk_scheduler.c ****     // Add eligable tasks back to the ready Queue
 179:..//src/kernel/source/nrk_scheduler.c ****     // At the same time find the next earliest wakeup
 180:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 181:..//src/kernel/source/nrk_scheduler.c ****     {
 182:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 183:..//src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 184:..//src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 185:..//src/kernel/source/nrk_scheduler.c ****         {
 186:..//src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 187:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 188:..//src/kernel/source/nrk_scheduler.c ****             else
 189:..//src/kernel/source/nrk_scheduler.c ****             {
 190:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 191:..//src/kernel/source/nrk_scheduler.c ****             }
 192:..//src/kernel/source/nrk_scheduler.c ****             // Do next period book keeping.
 193:..//src/kernel/source/nrk_scheduler.c ****             // next_period needs to be set such that the period is kept consistent even if other
 194:..//src/kernel/source/nrk_scheduler.c ****             // wait until functions are called.
 195:..//src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 196:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 197:..//src/kernel/source/nrk_scheduler.c ****             else
 198:..//src/kernel/source/nrk_scheduler.c ****             {
 199:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 200:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 201:..//src/kernel/source/nrk_scheduler.c ****                 else
 202:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 203:..//src/kernel/source/nrk_scheduler.c ****             }
 204:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 205:..//src/kernel/source/nrk_scheduler.c **** 
 206:..//src/kernel/source/nrk_scheduler.c ****         }
 207:..//src/kernel/source/nrk_scheduler.c **** 
 208:..//src/kernel/source/nrk_scheduler.c **** 
 209:..//src/kernel/source/nrk_scheduler.c ****         // Look for Next Task that Might Wakeup to interrupt current task
 210:..//src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 211:..//src/kernel/source/nrk_scheduler.c ****         {
 212:..//src/kernel/source/nrk_scheduler.c ****             // printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
 213:..//src/kernel/source/nrk_scheduler.c ****             // If a task needs to become READY, make it ready
 214:..//src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 215:..//src/kernel/source/nrk_scheduler.c ****             {
 216:..//src/kernel/source/nrk_scheduler.c ****                 // printf( "Adding back %d\n",task_ID );
 217:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 218:..//src/kernel/source/nrk_scheduler.c ****                 //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_ma
 219:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 220:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 221:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 222:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 223:..//src/kernel/source/nrk_scheduler.c ****                 {
 224:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 225:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 226:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 227:..//src/kernel/source/nrk_scheduler.c ****                     // If there is no period set, don't wakeup periodically
 228:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 229:..//src/kernel/source/nrk_scheduler.c ****                     nrk_add_to_readyQ(task_ID);
 230:..//src/kernel/source/nrk_scheduler.c ****                 }
 231:..//src/kernel/source/nrk_scheduler.c ****                 else
 232:..//src/kernel/source/nrk_scheduler.c ****                 {
 233:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 234:..//src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 235:..//src/kernel/source/nrk_scheduler.c ****                     //nrk_task_TCB[task_ID].num_periods--;
 236:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 237:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 238:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 239:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].num_periods=1;
 431               	.LM40:
 432 01d0 51E0      		ldi r21,lo8(1)
 433 01d2 652E      		mov r6,r21
 434 01d4 712C      		mov r7,__zero_reg__
 238:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 436               	.LM41:
 437 01d6 4AEF      		ldi r20,lo8(250)
 438 01d8 E42E      		mov r14,r20
 439 01da F12C      		mov r15,__zero_reg__
 225:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 441               	.LM42:
 442 01dc 32E0      		ldi r19,lo8(2)
 443 01de 932E      		mov r9,r19
 217:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 445               	.LM43:
 446 01e0 91E0      		ldi r25,lo8(1)
 447 01e2 A92E      		mov r10,r25
 448 01e4 B12C      		mov r11,__zero_reg__
 449 01e6 C12C      		mov r12,__zero_reg__
 450 01e8 D12C      		mov r13,__zero_reg__
 451               	.L24:
 182:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].task_ID==-1) continue;
 453               	.LM44:
 454 01ea D101      		movw r26,r2
 455 01ec 1396      		adiw r26,3
 456 01ee 8C91      		ld r24,X
 457 01f0 1397      		sbiw r26,3
 458 01f2 8F3F      		cpi r24,lo8(-1)
 459 01f4 01F4      		brne .+2
 460 01f6 00C0      		rjmp .L12
 183:..//src/kernel/source/nrk_scheduler.c ****         nrk_task_TCB[task_ID].suspend_flag=0;
 462               	.LM45:
 463 01f8 1C92      		st X,__zero_reg__
 184:..//src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 465               	.LM46:
 466 01fa 8823      		tst r24
 467 01fc 01F4      		brne .+2
 468 01fe 00C0      		rjmp .L13
 184:..//src/kernel/source/nrk_scheduler.c ****         if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FI
 470               	.LM47:
 471 0200 1496      		adiw r26,4
 472 0202 8C91      		ld r24,X
 473 0204 1497      		sbiw r26,4
 474 0206 8430      		cpi r24,lo8(4)
 475 0208 01F0      		breq .L13
 186:..//src/kernel/source/nrk_scheduler.c ****             if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
 477               	.LM48:
 478 020a 5096      		adiw r26,16
 479 020c 4D91      		ld r20,X+
 480 020e 5C91      		ld r21,X
 481 0210 5197      		sbiw r26,16+1
 482 0212 8091 0000 		lds r24,_nrk_prev_timer_val
 483 0216 90E0      		ldi r25,lo8(0)
 484 0218 4817      		cp r20,r24
 485 021a 5907      		cpc r21,r25
 486 021c 00F0      		brlo .L14
 187:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
 488               	.LM49:
 489 021e 481B      		sub r20,r24
 490 0220 590B      		sbc r21,r25
 491 0222 5196      		adiw r26,16+1
 492 0224 5C93      		st X,r21
 493 0226 4E93      		st -X,r20
 494 0228 5097      		sbiw r26,16
 495 022a 00C0      		rjmp .L15
 496               	.L14:
 190:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_wakeup=0;
 498               	.LM50:
 499 022c F101      		movw r30,r2
 500 022e 118A      		std Z+17,__zero_reg__
 501 0230 108A      		std Z+16,__zero_reg__
 502               	.L15:
 195:..//src/kernel/source/nrk_scheduler.c ****             if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
 504               	.LM51:
 505 0232 D101      		movw r26,r2
 506 0234 5296      		adiw r26,18
 507 0236 4D91      		ld r20,X+
 508 0238 5C91      		ld r21,X
 509 023a 5397      		sbiw r26,18+1
 510 023c 4817      		cp r20,r24
 511 023e 5907      		cpc r21,r25
 512 0240 00F0      		brlo .L16
 196:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
 514               	.LM52:
 515 0242 481B      		sub r20,r24
 516 0244 590B      		sbc r21,r25
 517 0246 5396      		adiw r26,18+1
 518 0248 5C93      		st X,r21
 519 024a 4E93      		st -X,r20
 520 024c 5297      		sbiw r26,18
 521 024e 00C0      		rjmp .L17
 522               	.L16:
 199:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
 524               	.LM53:
 525 0250 F101      		movw r30,r2
 526 0252 6689      		ldd r22,Z+22
 527 0254 7789      		ldd r23,Z+23
 528 0256 8617      		cp r24,r22
 529 0258 9707      		cpc r25,r23
 530 025a 00F4      		brsh .L18
 200:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer
 532               	.LM54:
 533 025c 681B      		sub r22,r24
 534 025e 790B      		sbc r23,r25
 535 0260 738B      		std Z+19,r23
 536 0262 628B      		std Z+18,r22
 537 0264 00C0      		rjmp .L17
 538               	.L18:
 202:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].
 540               	.LM55:
 541 0266 0E94 0000 		call __udivmodhi4
 542 026a D101      		movw r26,r2
 543 026c 5396      		adiw r26,18+1
 544 026e 9C93      		st X,r25
 545 0270 8E93      		st -X,r24
 546 0272 5297      		sbiw r26,18
 547               	.L17:
 204:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 549               	.LM56:
 550 0274 F101      		movw r30,r2
 551 0276 8289      		ldd r24,Z+18
 552 0278 9389      		ldd r25,Z+19
 553 027a 0097      		sbiw r24,0
 554 027c 01F4      		brne .L13
 204:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB
 556               	.LM57:
 557 027e 8689      		ldd r24,Z+22
 558 0280 9789      		ldd r25,Z+23
 559 0282 938B      		std Z+19,r25
 560 0284 828B      		std Z+18,r24
 561               	.L13:
 210:..//src/kernel/source/nrk_scheduler.c ****         if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
 563               	.LM58:
 564 0286 D101      		movw r26,r2
 565 0288 1496      		adiw r26,4
 566 028a 8C91      		ld r24,X
 567 028c 1497      		sbiw r26,4
 568 028e 8330      		cpi r24,lo8(3)
 569 0290 01F0      		breq .+2
 570 0292 00C0      		rjmp .L12
 214:..//src/kernel/source/nrk_scheduler.c ****             if (nrk_task_TCB[task_ID].next_wakeup == 0)
 572               	.LM59:
 573 0294 5096      		adiw r26,16
 574 0296 8D91      		ld r24,X+
 575 0298 9C91      		ld r25,X
 576 029a 5197      		sbiw r26,16+1
 577 029c 0097      		sbiw r24,0
 578 029e 01F0      		breq .+2
 579 02a0 00C0      		rjmp .L19
 217:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 581               	.LM60:
 582 02a2 1296      		adiw r26,2
 583 02a4 8C91      		ld r24,X
 584 02a6 1297      		sbiw r26,2
 585 02a8 8823      		tst r24
 586 02aa 01F0      		breq .L20
 217:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_t
 588               	.LM61:
 589 02ac 1196      		adiw r26,1
 590 02ae 8C91      		ld r24,X
 591 02b0 1197      		sbiw r26,1
 592 02b2 8823      		tst r24
 593 02b4 01F0      		breq .L20
 594 02b6 D601      		movw r26,r12
 595 02b8 C501      		movw r24,r10
 596 02ba 0090 0000 		lds r0,nrk_wakeup_signal
 597 02be 00C0      		rjmp 2f
 598 02c0 880F      	1:	lsl r24
 599 02c2 991F      		rol r25
 600 02c4 AA1F      		rol r26
 601 02c6 BB1F      		rol r27
 602 02c8 0A94      	2:	dec r0
 603 02ca 02F4      		brpl 1b
 604 02cc F101      		movw r30,r2
 605 02ce 8487      		std Z+12,r24
 606 02d0 9587      		std Z+13,r25
 607 02d2 A687      		std Z+14,r26
 608 02d4 B787      		std Z+15,r27
 609               	.L20:
 219:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].event_suspend=0;
 611               	.LM62:
 612 02d6 D101      		movw r26,r2
 613 02d8 1296      		adiw r26,2
 614 02da 1C92      		st X,__zero_reg__
 615 02dc 1297      		sbiw r26,2
 220:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].nw_flag=0;
 617               	.LM63:
 618 02de 1196      		adiw r26,1
 619 02e0 1C92      		st X,__zero_reg__
 620 02e2 1197      		sbiw r26,1
 221:..//src/kernel/source/nrk_scheduler.c ****                 nrk_task_TCB[task_ID].suspend_flag=0;
 622               	.LM64:
 623 02e4 1C92      		st X,__zero_reg__
 222:..//src/kernel/source/nrk_scheduler.c ****                 if(nrk_task_TCB[task_ID].num_periods==1)
 625               	.LM65:
 626 02e6 5A96      		adiw r26,26
 627 02e8 4D91      		ld r20,X+
 628 02ea 5C91      		ld r21,X
 629 02ec 5B97      		sbiw r26,26+1
 630 02ee 5696      		adiw r26,22
 631 02f0 8D91      		ld r24,X+
 632 02f2 9C91      		ld r25,X
 633 02f4 5797      		sbiw r26,22+1
 634 02f6 5896      		adiw r26,24
 635 02f8 6D91      		ld r22,X+
 636 02fa 7C91      		ld r23,X
 637 02fc 5997      		sbiw r26,24+1
 638 02fe 4130      		cpi r20,1
 639 0300 5105      		cpc r21,__zero_reg__
 640 0302 01F4      		brne .L21
 224:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 642               	.LM66:
 643 0304 5596      		adiw r26,20+1
 644 0306 7C93      		st X,r23
 645 0308 6E93      		st -X,r22
 646 030a 5497      		sbiw r26,20
 225:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].task_state = READY;
 648               	.LM67:
 649 030c 1496      		adiw r26,4
 650 030e 9C92      		st X,r9
 651 0310 1497      		sbiw r26,4
 226:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
 653               	.LM68:
 654 0312 5296      		adiw r26,18
 655 0314 4D91      		ld r20,X+
 656 0316 5C91      		ld r21,X
 657 0318 5397      		sbiw r26,18+1
 658 031a 5196      		adiw r26,16+1
 659 031c 5C93      		st X,r21
 660 031e 4E93      		st -X,r20
 661 0320 5097      		sbiw r26,16
 228:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 663               	.LM69:
 664 0322 0097      		sbiw r24,0
 665 0324 01F4      		brne .L22
 228:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 667               	.LM70:
 668 0326 5196      		adiw r26,16+1
 669 0328 FC92      		st X,r15
 670 032a EE92      		st -X,r14
 671 032c 5097      		sbiw r26,16
 672               	.L22:
 229:..//src/kernel/source/nrk_scheduler.c ****                     nrk_add_to_readyQ(task_ID);
 674               	.LM71:
 675 032e 822F      		mov r24,r18
 676 0330 2983      		std Y+1,r18
 677 0332 0E94 0000 		call nrk_add_to_readyQ
 678 0336 2981      		ldd r18,Y+1
 679 0338 00C0      		rjmp .L19
 680               	.L21:
 233:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
 682               	.LM72:
 683 033a F101      		movw r30,r2
 684 033c 758B      		std Z+21,r23
 685 033e 648B      		std Z+20,r22
 236:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 687               	.LM73:
 688 0340 BA01      		movw r22,r20
 689 0342 6150      		subi r22,lo8(-(-1))
 690 0344 7040      		sbci r23,hi8(-(-1))
 691 0346 689F      		mul r22,r24
 692 0348 A001      		movw r20,r0
 693 034a 699F      		mul r22,r25
 694 034c 500D      		add r21,r0
 695 034e 789F      		mul r23,r24
 696 0350 500D      		add r21,r0
 697 0352 1124      		clr r1
 698 0354 518B      		std Z+17,r21
 699 0356 408B      		std Z+16,r20
 237:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB
 701               	.LM74:
 702 0358 538B      		std Z+19,r21
 703 035a 428B      		std Z+18,r20
 238:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 705               	.LM75:
 706 035c 0097      		sbiw r24,0
 707 035e 01F4      		brne .L23
 238:..//src/kernel/source/nrk_scheduler.c ****                     if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCH
 709               	.LM76:
 710 0360 F18A      		std Z+17,r15
 711 0362 E08A      		std Z+16,r14
 712               	.L23:
 714               	.LM77:
 715 0364 D101      		movw r26,r2
 716 0366 5B96      		adiw r26,26+1
 717 0368 7C92      		st X,r7
 718 036a 6E92      		st -X,r6
 719 036c 5A97      		sbiw r26,26
 720               	.L19:
 240:..//src/kernel/source/nrk_scheduler.c ****                     //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
 241:..//src/kernel/source/nrk_scheduler.c ****                     //			nrk_task_TCB[task_ID].num_periods=1;
 242:..//src/kernel/source/nrk_scheduler.c ****                 }
 243:..//src/kernel/source/nrk_scheduler.c ****             }
 244:..//src/kernel/source/nrk_scheduler.c **** 
 245:..//src/kernel/source/nrk_scheduler.c ****             if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
 722               	.LM78:
 723 036e F101      		movw r30,r2
 724 0370 8089      		ldd r24,Z+16
 725 0372 9189      		ldd r25,Z+17
 726 0374 0097      		sbiw r24,0
 727 0376 01F0      		breq .L12
 729               	.LM79:
 730 0378 8017      		cp r24,r16
 731 037a 9107      		cpc r25,r17
 732 037c 00F4      		brsh .L12
 734               	.LM80:
 735 037e 8C01      		movw r16,r24
 736               	.L12:
 180:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 738               	.LM81:
 739 0380 2F5F      		subi r18,lo8(-(1))
 740 0382 81E2      		ldi r24,lo8(33)
 741 0384 90E0      		ldi r25,hi8(33)
 742 0386 280E      		add r2,r24
 743 0388 391E      		adc r3,r25
 744 038a 2530      		cpi r18,lo8(5)
 745 038c 01F0      		breq .+2
 746 038e 00C0      		rjmp .L24
 246:..//src/kernel/source/nrk_scheduler.c ****                     nrk_task_TCB[task_ID].next_wakeup<next_wake )
 247:..//src/kernel/source/nrk_scheduler.c ****             {
 248:..//src/kernel/source/nrk_scheduler.c ****                 // Find closest next_wake task
 249:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].next_wakeup;
 250:..//src/kernel/source/nrk_scheduler.c ****             }
 251:..//src/kernel/source/nrk_scheduler.c **** 
 252:..//src/kernel/source/nrk_scheduler.c ****         }
 253:..//src/kernel/source/nrk_scheduler.c ****     }
 254:..//src/kernel/source/nrk_scheduler.c **** 
 255:..//src/kernel/source/nrk_scheduler.c **** 
 256:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_STATS_TRACKER
 257:..//src/kernel/source/nrk_scheduler.c ****     _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
 258:..//src/kernel/source/nrk_scheduler.c **** #endif
 259:..//src/kernel/source/nrk_scheduler.c ****     task_ID = nrk_get_high_ready_task_ID();
 748               	.LM82:
 749 0390 0E94 0000 		call nrk_get_high_ready_task_ID
 750 0394 E82E      		mov r14,r24
 260:..//src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
 752               	.LM83:
 753 0396 282F      		mov r18,r24
 754 0398 3327      		clr r19
 755 039a 27FD      		sbrc r18,7
 756 039c 3095      		com r19
 757 039e F901      		movw r30,r18
 758 03a0 85E0      		ldi r24,5
 759 03a2 EE0F      	1:	lsl r30
 760 03a4 FF1F      		rol r31
 761 03a6 8A95      		dec r24
 762 03a8 01F4      		brne 1b
 763 03aa E20F      		add r30,r18
 764 03ac F31F      		adc r31,r19
 765 03ae E050      		subi r30,lo8(-(nrk_task_TCB))
 766 03b0 F040      		sbci r31,hi8(-(nrk_task_TCB))
 767 03b2 8285      		ldd r24,Z+10
 768 03b4 8093 0000 		sts nrk_high_ready_prio,r24
 261:..//src/kernel/source/nrk_scheduler.c ****     nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
 770               	.LM84:
 771 03b8 F093 0000 		sts nrk_high_ready_TCB+1,r31
 772 03bc E093 0000 		sts nrk_high_ready_TCB,r30
 262:..//src/kernel/source/nrk_scheduler.c **** 
 263:..//src/kernel/source/nrk_scheduler.c ****     // next_wake should hold next time when a suspended task might get run
 264:..//src/kernel/source/nrk_scheduler.c ****     // task_ID holds the highest priority READY task ID
 265:..//src/kernel/source/nrk_scheduler.c ****     // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time
 266:..//src/kernel/source/nrk_scheduler.c **** 
 267:..//src/kernel/source/nrk_scheduler.c ****     // Now we pick the next wakeup (either the end of the current task, or the possible resume
 268:..//src/kernel/source/nrk_scheduler.c ****     // of a suspended task)
 269:..//src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID)
 774               	.LM85:
 775 03c0 EE20      		tst r14
 776 03c2 01F0      		breq .L25
 270:..//src/kernel/source/nrk_scheduler.c ****     {
 271:..//src/kernel/source/nrk_scheduler.c ****         // You are a non-Idle Task
 272:..//src/kernel/source/nrk_scheduler.c ****         if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WA
 778               	.LM86:
 779 03c4 258D      		ldd r18,Z+29
 780 03c6 368D      		ldd r19,Z+30
 781 03c8 2115      		cp r18,__zero_reg__
 782 03ca 3105      		cpc r19,__zero_reg__
 783 03cc 01F0      		breq .L26
 785               	.LM87:
 786 03ce 218D      		ldd r18,Z+25
 787 03d0 328D      		ldd r19,Z+26
 788 03d2 2A3F      		cpi r18,250
 789 03d4 3105      		cpc r19,__zero_reg__
 790 03d6 00F4      		brsh .L26
 273:..//src/kernel/source/nrk_scheduler.c ****         {
 274:..//src/kernel/source/nrk_scheduler.c ****             if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
 792               	.LM88:
 793 03d8 2017      		cp r18,r16
 794 03da 3107      		cpc r19,r17
 795 03dc 00F4      		brsh .+2
 796 03de 00C0      		rjmp .L27
 797 03e0 00C0      		rjmp .L30
 798               	.L26:
 799 03e2 9801      		movw r18,r16
 800 03e4 0B3F      		cpi r16,251
 801 03e6 1105      		cpc r17,__zero_reg__
 802 03e8 00F4      		brsh .+2
 803 03ea 00C0      		rjmp .L27
 804 03ec 2AEF      		ldi r18,lo8(250)
 805 03ee 30E0      		ldi r19,hi8(250)
 806 03f0 00C0      		rjmp .L27
 807               	.L25:
 275:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=nrk_task_TCB[task_ID].cpu_remaining;
 276:..//src/kernel/source/nrk_scheduler.c ****         }
 277:..//src/kernel/source/nrk_scheduler.c ****         else
 278:..//src/kernel/source/nrk_scheduler.c ****         {
 279:..//src/kernel/source/nrk_scheduler.c ****             if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 280:..//src/kernel/source/nrk_scheduler.c ****         }
 281:..//src/kernel/source/nrk_scheduler.c ****     }
 282:..//src/kernel/source/nrk_scheduler.c ****     else
 283:..//src/kernel/source/nrk_scheduler.c ****     {
 284:..//src/kernel/source/nrk_scheduler.c ****         // This is the idle task
 285:..//src/kernel/source/nrk_scheduler.c ****         // Make sure you wake up from the idle task a little earlier
 286:..//src/kernel/source/nrk_scheduler.c ****         // if you would go into deep sleep...
 287:..//src/kernel/source/nrk_scheduler.c ****         // After waking from deep sleep, the next context swap must be at least
 288:..//src/kernel/source/nrk_scheduler.c ****         // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
 289:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_POWER_DOWN
 290:..//src/kernel/source/nrk_scheduler.c ****         if(next_wake>NRK_SLEEP_WAKEUP_TIME)
 291:..//src/kernel/source/nrk_scheduler.c ****         {
 292:..//src/kernel/source/nrk_scheduler.c ****             if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
 293:..//src/kernel/source/nrk_scheduler.c ****             {
 294:..//src/kernel/source/nrk_scheduler.c ****                 if(next_wake-NRK_SLEEP_WAKEUP_TIME<NRK_SLEEP_WAKEUP_TIME)
 295:..//src/kernel/source/nrk_scheduler.c ****                 {
 296:..//src/kernel/source/nrk_scheduler.c ****                     next_wake=NRK_SLEEP_WAKEUP_TIME-1;
 297:..//src/kernel/source/nrk_scheduler.c ****                 }
 298:..//src/kernel/source/nrk_scheduler.c ****                 else
 299:..//src/kernel/source/nrk_scheduler.c ****                 {
 300:..//src/kernel/source/nrk_scheduler.c ****                     next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
 301:..//src/kernel/source/nrk_scheduler.c ****                 }
 302:..//src/kernel/source/nrk_scheduler.c ****             }
 303:..//src/kernel/source/nrk_scheduler.c ****             else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
 304:..//src/kernel/source/nrk_scheduler.c ****             {
 305:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME;
 306:..//src/kernel/source/nrk_scheduler.c ****             }
 307:..//src/kernel/source/nrk_scheduler.c ****             else
 308:..//src/kernel/source/nrk_scheduler.c ****             {
 309:..//src/kernel/source/nrk_scheduler.c ****                 next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
 310:..//src/kernel/source/nrk_scheduler.c ****             }
 311:..//src/kernel/source/nrk_scheduler.c ****         }
 312:..//src/kernel/source/nrk_scheduler.c **** #endif
 313:..//src/kernel/source/nrk_scheduler.c ****     }
 314:..//src/kernel/source/nrk_scheduler.c **** 
 315:..//src/kernel/source/nrk_scheduler.c ****     /*
 316:..//src/kernel/source/nrk_scheduler.c ****     // Some code to catch the case when the scheduler wakes up
 317:..//src/kernel/source/nrk_scheduler.c ****     // from deep sleep and has to execute again before NRK_SLEEP_WAKEUP_TIME-1
 318:..//src/kernel/source/nrk_scheduler.c ****     if(_nrk_cpu_state==2 && next_wake<NRK_SLEEP_WAKEUP_TIME-1)
 319:..//src/kernel/source/nrk_scheduler.c ****     {
 320:..//src/kernel/source/nrk_scheduler.c ****     nrk_int_disable();
 321:..//src/kernel/source/nrk_scheduler.c ****     while(1)
 322:..//src/kernel/source/nrk_scheduler.c ****     {
 323:..//src/kernel/source/nrk_scheduler.c ****     nrk_spin_wait_us(60000);
 324:..//src/kernel/source/nrk_scheduler.c ****     nrk_led_toggle(RED_LED);
 325:..//src/kernel/source/nrk_scheduler.c ****     nrk_spin_wait_us(60000);
 326:..//src/kernel/source/nrk_scheduler.c ****     nrk_led_toggle(GREEN_LED);
 327:..//src/kernel/source/nrk_scheduler.c ****     printf( "crash: %d %d %d\r\n",task_ID,next_wake,_nrk_cpu_state);
 328:..//src/kernel/source/nrk_scheduler.c ****     }
 329:..//src/kernel/source/nrk_scheduler.c ****     }*/
 330:..//src/kernel/source/nrk_scheduler.c **** 
 331:..//src/kernel/source/nrk_scheduler.c **** 
 332:..//src/kernel/source/nrk_scheduler.c ****     //  If we disable power down, we still need to wakeup before the overflow
 333:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_NO_POWER_DOWN
 334:..//src/kernel/source/nrk_scheduler.c ****     if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
 809               	.LM89:
 810 03f2 0B3F      		cpi r16,251
 811 03f4 1105      		cpc r17,__zero_reg__
 812 03f6 00F0      		brlo .L30
 813 03f8 0AEF      		ldi r16,lo8(250)
 814 03fa 10E0      		ldi r17,hi8(250)
 815               	.L30:
 335:..//src/kernel/source/nrk_scheduler.c **** #endif
 336:..//src/kernel/source/nrk_scheduler.c ****     //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
 337:..//src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_prio = nrk_high_ready_prio;
 817               	.LM90:
 818 03fc 8093 0000 		sts nrk_cur_task_prio,r24
 338:..//src/kernel/source/nrk_scheduler.c ****     nrk_cur_task_TCB  = nrk_high_ready_TCB;
 820               	.LM91:
 821 0400 F093 0000 		sts nrk_cur_task_TCB+1,r31
 822 0404 E093 0000 		sts nrk_cur_task_TCB,r30
 339:..//src/kernel/source/nrk_scheduler.c **** 
 340:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 341:..//src/kernel/source/nrk_scheduler.c ****     if(nrk_high_ready_TCB==NULL)
 342:..//src/kernel/source/nrk_scheduler.c ****     {
 343:..//src/kernel/source/nrk_scheduler.c ****         nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
 344:..//src/kernel/source/nrk_scheduler.c ****     }
 345:..//src/kernel/source/nrk_scheduler.c **** #endif
 346:..//src/kernel/source/nrk_scheduler.c ****     //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());
 347:..//src/kernel/source/nrk_scheduler.c **** 
 348:..//src/kernel/source/nrk_scheduler.c ****     _nrk_prev_timer_val=next_wake;
 824               	.LM92:
 825 0408 0093 0000 		sts _nrk_prev_timer_val,r16
 349:..//src/kernel/source/nrk_scheduler.c **** 
 350:..//src/kernel/source/nrk_scheduler.c **** 
 351:..//src/kernel/source/nrk_scheduler.c ****     if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
 827               	.LM93:
 828 040c 0E94 0000 		call _nrk_os_timer_get
 829 0410 282F      		mov r18,r24
 830 0412 30E0      		ldi r19,lo8(0)
 831 0414 2F5F      		subi r18,lo8(-(1))
 832 0416 3F4F      		sbci r19,hi8(-(1))
 833 0418 2017      		cp r18,r16
 834 041a 3107      		cpc r19,r17
 835 041c 00F0      		brlo .L31
 352:..//src/kernel/source/nrk_scheduler.c ****     {
 353:..//src/kernel/source/nrk_scheduler.c ****         // FIXME: Terrible Terrible...
 354:..//src/kernel/source/nrk_scheduler.c ****         // Need to find out why this is happening...
 355:..//src/kernel/source/nrk_scheduler.c **** #ifdef NRK_KERNEL_TEST
 356:..//src/kernel/source/nrk_scheduler.c ****         // Ignore if you are the idle task coming from deep sleep
 357:..//src/kernel/source/nrk_scheduler.c ****         if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
 358:..//src/kernel/source/nrk_scheduler.c ****             nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
 359:..//src/kernel/source/nrk_scheduler.c **** #endif
 360:..//src/kernel/source/nrk_scheduler.c ****         // This is bad news, but keeps things running
 361:..//src/kernel/source/nrk_scheduler.c ****         // +2 just in case we are on the edge of the last tick
 362:..//src/kernel/source/nrk_scheduler.c ****         next_wake=_nrk_os_timer_get()+2;
 837               	.LM94:
 838 041e 0E94 0000 		call _nrk_os_timer_get
 839 0422 082F      		mov r16,r24
 840 0424 10E0      		ldi r17,lo8(0)
 841 0426 0E5F      		subi r16,lo8(-(2))
 842 0428 1F4F      		sbci r17,hi8(-(2))
 363:..//src/kernel/source/nrk_scheduler.c ****         _nrk_prev_timer_val=next_wake;
 844               	.LM95:
 845 042a 0093 0000 		sts _nrk_prev_timer_val,r16
 846               	.L31:
 364:..//src/kernel/source/nrk_scheduler.c ****     }
 365:..//src/kernel/source/nrk_scheduler.c **** 
 366:..//src/kernel/source/nrk_scheduler.c ****     if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
 848               	.LM96:
 849 042e EE20      		tst r14
 850 0430 01F0      		breq .L32
 852               	.LM97:
 853 0432 1092 0000 		sts _nrk_cpu_state,__zero_reg__
 854               	.L32:
 367:..//src/kernel/source/nrk_scheduler.c **** 
 368:..//src/kernel/source/nrk_scheduler.c ****     _nrk_set_next_wakeup(next_wake);
 856               	.LM98:
 857 0436 802F      		mov r24,r16
 858 0438 0E94 0000 		call _nrk_set_next_wakeup
 369:..//src/kernel/source/nrk_scheduler.c **** 
 370:..//src/kernel/source/nrk_scheduler.c **** #ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
 371:..//src/kernel/source/nrk_scheduler.c ****     // Bound Context Swap to 100us
 372:..//src/kernel/source/nrk_scheduler.c ****     nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
 860               	.LM99:
 861 043c C201      		movw r24,r4
 862 043e 6EEE      		ldi r22,lo8(750)
 863 0440 72E0      		ldi r23,hi8(750)
 864 0442 0E94 0000 		call nrk_high_speed_timer_wait
 373:..//src/kernel/source/nrk_scheduler.c **** #endif
 374:..//src/kernel/source/nrk_scheduler.c ****     nrk_stack_pointer_restore();
 866               	.LM100:
 867 0446 0E94 0000 		call nrk_stack_pointer_restore
 375:..//src/kernel/source/nrk_scheduler.c ****     //nrk_int_enable();
 376:..//src/kernel/source/nrk_scheduler.c ****     nrk_start_high_ready_task();
 869               	.LM101:
 870 044a 0E94 0000 		call nrk_start_high_ready_task
 871               	/* epilogue start */
 377:..//src/kernel/source/nrk_scheduler.c **** 
 378:..//src/kernel/source/nrk_scheduler.c **** }
 873               	.LM102:
 874 044e 0F90      		pop __tmp_reg__
 875 0450 CF91      		pop r28
 876 0452 DF91      		pop r29
 877 0454 1F91      		pop r17
 878 0456 0F91      		pop r16
 879 0458 FF90      		pop r15
 880 045a EF90      		pop r14
 881 045c DF90      		pop r13
 882 045e CF90      		pop r12
 883 0460 BF90      		pop r11
 884 0462 AF90      		pop r10
 885 0464 9F90      		pop r9
 886 0466 8F90      		pop r8
 887 0468 7F90      		pop r7
 888 046a 6F90      		pop r6
 889 046c 5F90      		pop r5
 890 046e 4F90      		pop r4
 891 0470 3F90      		pop r3
 892 0472 2F90      		pop r2
 893 0474 0895      		ret
 894               	.L27:
 180:..//src/kernel/source/nrk_scheduler.c ****     for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
 896               	.LM103:
 897 0476 8901      		movw r16,r18
 898 0478 00C0      		rjmp .L30
 903               	.Lscope1:
 905               		.stabd	78,0,0
 906               		.comm _nrk_signal_list,4,1
 907               		.comm nrk_idle_task_stk,128,1
 908               		.comm nrk_kernel_stk_ptr,2,1
 909               		.comm nrk_task_TCB,165,1
 910               		.comm nrk_wakeup_signal,1,1
 911               		.comm _nrk_readyQ,30,1
 912               		.comm _free_node,2,1
 913               		.comm _head_node,2,1
 914               		.comm nrk_cur_task_prio,1,1
 915               		.comm nrk_cur_task_TCB,2,1
 916               		.comm nrk_high_ready_prio,1,1
 917               		.comm nrk_high_ready_TCB,2,1
 918               		.comm _nrk_resource_cnt,1,1
 919               		.comm nrk_system_time,8,1
 920               		.comm nrk_sem_list,3,1
 921               		.comm error_task,1,1
 922               		.comm error_num,1,1
 923               		.comm _nrk_cpu_state,1,1
 924               		.comm next_next_wakeup,2,1
 925               		.comm _nrk_prev_timer_val,1,1
 926               		.comm _nrk_time_trigger,1,1
 927               		.comm app_timer0_callback,2,1
 928               		.comm app_timer0_prescale,1,1
 929               		.comm t,1,1
 955               	.Letext0:
 956               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_scheduler.c
     /tmp/ccYouv6W.s:2      *ABS*:0000003f __SREG__
     /tmp/ccYouv6W.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccYouv6W.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccYouv6W.s:5      *ABS*:00000034 __CCP__
     /tmp/ccYouv6W.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccYouv6W.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccYouv6W.s:140    .text:00000000 _nrk_scheduler
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000008 nrk_system_time
                            *COM*:00000002 nrk_cur_task_TCB
                            *COM*:000000a5 nrk_task_TCB
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:0000001e _nrk_readyQ
                            *COM*:00000002 _free_node
                            *COM*:00000002 _head_node
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:00000003 nrk_sem_list
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 t

UNDEFINED SYMBOLS
_nrk_precision_os_timer_reset
nrk_int_disable
_nrk_high_speed_timer_reset
_nrk_high_speed_timer_get
_nrk_set_next_wakeup
nrk_watchdog_reset
__mulsi3
__udivmodsi4
nrk_rem_from_readyQ
nrk_kernel_error_add
__udivmodhi4
nrk_add_to_readyQ
nrk_get_high_ready_task_ID
_nrk_os_timer_get
nrk_high_speed_timer_wait
nrk_stack_pointer_restore
nrk_start_high_ready_task
__do_clear_bss
