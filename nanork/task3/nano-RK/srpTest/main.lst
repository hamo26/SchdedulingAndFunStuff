   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 138               	.global	task_2_activity
 140               	task_2_activity:
 141               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        ****  *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        ****  *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        ****  *  All rights reserved.
   5:main.c        ****  *
   6:main.c        ****  *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        ****  *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        ****  *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        ****  *
  10:main.c        ****  *  This program is free software: you can redistribute it and/or modify
  11:main.c        ****  *  it under the terms of the GNU General Public License as published by
  12:main.c        ****  *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        ****  *
  14:main.c        ****  *  This program is distributed in the hope that it will be useful,
  15:main.c        ****  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        ****  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        ****  *  GNU General Public License for more details.
  18:main.c        ****  *
  19:main.c        ****  *  You should have received a copy of the GNU General Public License
  20:main.c        ****  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        ****  *
  22:main.c        ****  *  Contributing Authors (specific to this file):
  23:main.c        ****  *  Zane Starr
  24:main.c        ****  *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** #include <nrk.h>
  27:main.c        **** #include <include.h>
  28:main.c        **** #include <ulib.h>
  29:main.c        **** #include <stdio.h>
  30:main.c        **** #include <avr/sleep.h>
  31:main.c        **** #include <hal.h>
  32:main.c        **** #include <nrk_error.h>
  33:main.c        **** #include <nrk_events.h>
  34:main.c        **** #include <nrk_timer.h>
  35:main.c        **** //printf("Task%d has held resource %d times\r\n", n, cnt);	\
  36:main.c        **** 		printf("Task%d attempting to access semaphore %d\r\n", n, nrk_get_resource_index(semaphore));	
  37:main.c        **** //printf("Task%d holding semaphore %d\r\n", n, nrk_get_resource_index(semaphore));			\
  38:main.c        **** 			\
  39:main.c        **** //printf("Task%d released semaphore %d\r\n\n", n, nrk_get_resource_index(semaphore));			\
  40:main.c        **** 		
  41:main.c        **** /*
  42:main.c        ****    To stay inline (no pun intended) with the nano-rk direction of using guards for 
  43:main.c        ****    optimization and potential performance, we use macros rather than methods.
  44:main.c        ****    We could have created a method, but the call may be expensive and impede the performance of the 
  45:main.c        ****  */
  46:main.c        **** #define TASK(n, taskPeriod, taskExecution)                                      \
  47:main.c        ****     	NRK_STK stack_##n[NRK_APP_STACKSIZE];                               	\
  48:main.c        **** 	nrk_task_type task_##n;                                                 \
  49:main.c        **** 	uint32_t task_##n##_period = taskPeriod;                               	\
  50:main.c        **** 	uint32_t task_##n##_execution = taskExecution;                         	\
  51:main.c        **** 	void task_##n##_activity(void)                                              \
  52:main.c        **** 	{									\
  53:main.c        **** 	    uint16_t cnt;                                                       \
  54:main.c        **** 	    int8_t v;								\
  55:main.c        **** 	    int i;								\
  56:main.c        **** 	    while(1) {								\
  57:main.c        **** 		v = nrk_sem_pend(semaphoreA);					\
  58:main.c        **** 		v = nrk_sem_post(semaphoreA);					\
  59:main.c        **** 		nrk_wait_until_next_period();					\
  60:main.c        **** 		printf("\n");					\
  61:main.c        **** 	    }									\
  62:main.c        **** 	}									
  63:main.c        **** 
  64:main.c        **** /*"Instantiate" the task*/
  65:main.c        **** #define INITIALIZE_TASK(n, total_tasks)						\
  66:main.c        ****     task_##n.FirstActivation = TRUE;                                    \
  67:main.c        **** task_##n.Ptos = (void *) &stack_##n[NRK_APP_STACKSIZE];			\
  68:main.c        **** task_##n.Pbos = (void *) &stack_##n[0];					\
  69:main.c        **** task_##n.Type = BASIC_TASK;                                             \
  70:main.c        **** task_##n.task = task_##n##_activity;					\
  71:main.c        **** task_##n.SchType = PREEMPTIVE;                                          \
  72:main.c        **** task_##n.prio = n;							\
  73:main.c        **** task_##n.period.secs = task_##n##_period;                               \
  74:main.c        **** task_##n.period.nano_secs = 0;                                          \
  75:main.c        **** task_##n.cpu_reserve.secs = task_##n##_execution;                       \
  76:main.c        **** task_##n.cpu_reserve.nano_secs = 0;                                     \
  77:main.c        **** task_##n.offset.secs = 0;                                               \
  78:main.c        **** task_##n.offset.nano_secs = 0;                                          \
  79:main.c        **** nrk_activate_task(&task_##n)				
  80:main.c        **** 
  81:main.c        **** //Semaphore shared among resources.
  82:main.c        **** nrk_sem_t *semaphoreA;
  83:main.c        **** //nrk_sem_t *semaphoreB;
  84:main.c        **** 
  85:main.c        **** //"Instantiate" tasks.
  86:main.c        **** TASK(1, 4, 2);
  87:main.c        **** TASK(2, 7, 3);
 143               	.LM0:
 144               	.LFBB1:
 145               	/* prologue: function */
 146               	/* frame size = 0 */
 147               	/* stack size = 0 */
 148               	.L__stack_usage = 0
 149               	.L2:
 151               	.LM1:
 152 0000 8091 0000 		lds r24,semaphoreA
 153 0004 9091 0000 		lds r25,semaphoreA+1
 154 0008 0E94 0000 		call nrk_sem_pend
 155 000c 8091 0000 		lds r24,semaphoreA
 156 0010 9091 0000 		lds r25,semaphoreA+1
 157 0014 0E94 0000 		call nrk_sem_post
 158 0018 0E94 0000 		call nrk_wait_until_next_period
 159 001c 8AE0      		ldi r24,lo8(10)
 160 001e 90E0      		ldi r25,hi8(10)
 161 0020 0E94 0000 		call putchar
 162 0024 00C0      		rjmp .L2
 164               	.Lscope1:
 166               		.stabd	78,0,0
 168               	.global	task_1_activity
 170               	task_1_activity:
 171               		.stabd	46,0,0
  86:main.c        **** TASK(1, 4, 2);
 173               	.LM2:
 174               	.LFBB2:
 175               	/* prologue: function */
 176               	/* frame size = 0 */
 177               	/* stack size = 0 */
 178               	.L__stack_usage = 0
 179               	.L4:
  86:main.c        **** TASK(1, 4, 2);
 181               	.LM3:
 182 0026 8091 0000 		lds r24,semaphoreA
 183 002a 9091 0000 		lds r25,semaphoreA+1
 184 002e 0E94 0000 		call nrk_sem_pend
 185 0032 8091 0000 		lds r24,semaphoreA
 186 0036 9091 0000 		lds r25,semaphoreA+1
 187 003a 0E94 0000 		call nrk_sem_post
 188 003e 0E94 0000 		call nrk_wait_until_next_period
 189 0042 8AE0      		ldi r24,lo8(10)
 190 0044 90E0      		ldi r25,hi8(10)
 191 0046 0E94 0000 		call putchar
 192 004a 00C0      		rjmp .L4
 194               	.Lscope2:
 196               		.stabd	78,0,0
 197               		.data
 198               	.LC0:
 199 0000 5374 6172 		.string	"Starting up...\r"
 199      7469 6E67 
 199      2075 702E 
 199      2E2E 0D00 
 200               		.text
 202               	.global	main
 204               	main:
 205               		.stabd	46,0,0
  88:main.c        **** //TASK(3, 8, 3);
  89:main.c        **** 
  90:main.c        **** //TASK(1, 11, 2, semaphoreA);
  91:main.c        **** //TASK(2, 6, 3, semaphoreB);
  92:main.c        **** 
  93:main.c        **** 
  94:main.c        **** int main ()
  95:main.c        **** {
 207               	.LM4:
 208               	.LFBB3:
 209 004c 1F93      		push r17
 210               	/* prologue: function */
 211               	/* frame size = 0 */
 212               	/* stack size = 1 */
 213               	.L__stack_usage = 1
  96:main.c        ****     nrk_setup_ports();
 215               	.LM5:
 216 004e 0E94 0000 		call nrk_setup_ports
  97:main.c        ****     nrk_setup_uart(UART_BAUDRATE_115K2);
 218               	.LM6:
 219 0052 87E0      		ldi r24,lo8(7)
 220 0054 90E0      		ldi r25,hi8(7)
 221 0056 0E94 0000 		call nrk_setup_uart
  98:main.c        **** 
  99:main.c        ****     printf( "Starting up...\r\n" );
 223               	.LM7:
 224 005a 80E0      		ldi r24,lo8(.LC0)
 225 005c 90E0      		ldi r25,hi8(.LC0)
 226 005e 0E94 0000 		call puts
 100:main.c        **** 
 101:main.c        ****     nrk_init();
 228               	.LM8:
 229 0062 0E94 0000 		call nrk_init
 102:main.c        **** 
 103:main.c        ****     nrk_time_set(0,0);
 231               	.LM9:
 232 0066 60E0      		ldi r22,lo8(0)
 233 0068 70E0      		ldi r23,hi8(0)
 234 006a CB01      		movw r24,r22
 235 006c 20E0      		ldi r18,lo8(0)
 236 006e 30E0      		ldi r19,hi8(0)
 237 0070 A901      		movw r20,r18
 238 0072 0E94 0000 		call nrk_time_set
 104:main.c        **** 
 105:main.c        ****     //Initialize tasks 
 106:main.c        ****     INITIALIZE_TASK(1, 3);
 240               	.LM10:
 241 0076 11E0      		ldi r17,lo8(1)
 242 0078 1093 0000 		sts task_1+7,r17
 243 007c 80E0      		ldi r24,lo8(stack_1+128)
 244 007e 90E0      		ldi r25,hi8(stack_1+128)
 245 0080 9093 0000 		sts task_1+1+1,r25
 246 0084 8093 0000 		sts task_1+1,r24
 247 0088 80E0      		ldi r24,lo8(stack_1)
 248 008a 90E0      		ldi r25,hi8(stack_1)
 249 008c 9093 0000 		sts task_1+3+1,r25
 250 0090 8093 0000 		sts task_1+3,r24
 251 0094 1093 0000 		sts task_1+9,r17
 252 0098 80E0      		ldi r24,lo8(gs(task_1_activity))
 253 009a 90E0      		ldi r25,hi8(gs(task_1_activity))
 254 009c 9093 0000 		sts task_1+5+1,r25
 255 00a0 8093 0000 		sts task_1+5,r24
 256 00a4 1093 0000 		sts task_1+10,r17
 257 00a8 1093 0000 		sts task_1+8,r17
 258 00ac 8091 0000 		lds r24,task_1_period
 259 00b0 9091 0000 		lds r25,task_1_period+1
 260 00b4 A091 0000 		lds r26,task_1_period+2
 261 00b8 B091 0000 		lds r27,task_1_period+3
 262 00bc 8093 0000 		sts task_1+11,r24
 263 00c0 9093 0000 		sts task_1+11+1,r25
 264 00c4 A093 0000 		sts task_1+11+2,r26
 265 00c8 B093 0000 		sts task_1+11+3,r27
 266 00cc 1092 0000 		sts task_1+15,__zero_reg__
 267 00d0 1092 0000 		sts task_1+15+1,__zero_reg__
 268 00d4 1092 0000 		sts task_1+15+2,__zero_reg__
 269 00d8 1092 0000 		sts task_1+15+3,__zero_reg__
 270 00dc 8091 0000 		lds r24,task_1_execution
 271 00e0 9091 0000 		lds r25,task_1_execution+1
 272 00e4 A091 0000 		lds r26,task_1_execution+2
 273 00e8 B091 0000 		lds r27,task_1_execution+3
 274 00ec 8093 0000 		sts task_1+19,r24
 275 00f0 9093 0000 		sts task_1+19+1,r25
 276 00f4 A093 0000 		sts task_1+19+2,r26
 277 00f8 B093 0000 		sts task_1+19+3,r27
 278 00fc 1092 0000 		sts task_1+23,__zero_reg__
 279 0100 1092 0000 		sts task_1+23+1,__zero_reg__
 280 0104 1092 0000 		sts task_1+23+2,__zero_reg__
 281 0108 1092 0000 		sts task_1+23+3,__zero_reg__
 282 010c 1092 0000 		sts task_1+27,__zero_reg__
 283 0110 1092 0000 		sts task_1+27+1,__zero_reg__
 284 0114 1092 0000 		sts task_1+27+2,__zero_reg__
 285 0118 1092 0000 		sts task_1+27+3,__zero_reg__
 286 011c 1092 0000 		sts task_1+31,__zero_reg__
 287 0120 1092 0000 		sts task_1+31+1,__zero_reg__
 288 0124 1092 0000 		sts task_1+31+2,__zero_reg__
 289 0128 1092 0000 		sts task_1+31+3,__zero_reg__
 290 012c 80E0      		ldi r24,lo8(task_1)
 291 012e 90E0      		ldi r25,hi8(task_1)
 292 0130 0E94 0000 		call nrk_activate_task
 107:main.c        ****     INITIALIZE_TASK(2, 3);
 294               	.LM11:
 295 0134 1093 0000 		sts task_2+7,r17
 296 0138 80E0      		ldi r24,lo8(stack_2+128)
 297 013a 90E0      		ldi r25,hi8(stack_2+128)
 298 013c 9093 0000 		sts task_2+1+1,r25
 299 0140 8093 0000 		sts task_2+1,r24
 300 0144 80E0      		ldi r24,lo8(stack_2)
 301 0146 90E0      		ldi r25,hi8(stack_2)
 302 0148 9093 0000 		sts task_2+3+1,r25
 303 014c 8093 0000 		sts task_2+3,r24
 304 0150 1093 0000 		sts task_2+9,r17
 305 0154 80E0      		ldi r24,lo8(gs(task_2_activity))
 306 0156 90E0      		ldi r25,hi8(gs(task_2_activity))
 307 0158 9093 0000 		sts task_2+5+1,r25
 308 015c 8093 0000 		sts task_2+5,r24
 309 0160 1093 0000 		sts task_2+10,r17
 310 0164 82E0      		ldi r24,lo8(2)
 311 0166 8093 0000 		sts task_2+8,r24
 312 016a 8091 0000 		lds r24,task_2_period
 313 016e 9091 0000 		lds r25,task_2_period+1
 314 0172 A091 0000 		lds r26,task_2_period+2
 315 0176 B091 0000 		lds r27,task_2_period+3
 316 017a 8093 0000 		sts task_2+11,r24
 317 017e 9093 0000 		sts task_2+11+1,r25
 318 0182 A093 0000 		sts task_2+11+2,r26
 319 0186 B093 0000 		sts task_2+11+3,r27
 320 018a 1092 0000 		sts task_2+15,__zero_reg__
 321 018e 1092 0000 		sts task_2+15+1,__zero_reg__
 322 0192 1092 0000 		sts task_2+15+2,__zero_reg__
 323 0196 1092 0000 		sts task_2+15+3,__zero_reg__
 324 019a 8091 0000 		lds r24,task_2_execution
 325 019e 9091 0000 		lds r25,task_2_execution+1
 326 01a2 A091 0000 		lds r26,task_2_execution+2
 327 01a6 B091 0000 		lds r27,task_2_execution+3
 328 01aa 8093 0000 		sts task_2+19,r24
 329 01ae 9093 0000 		sts task_2+19+1,r25
 330 01b2 A093 0000 		sts task_2+19+2,r26
 331 01b6 B093 0000 		sts task_2+19+3,r27
 332 01ba 1092 0000 		sts task_2+23,__zero_reg__
 333 01be 1092 0000 		sts task_2+23+1,__zero_reg__
 334 01c2 1092 0000 		sts task_2+23+2,__zero_reg__
 335 01c6 1092 0000 		sts task_2+23+3,__zero_reg__
 336 01ca 1092 0000 		sts task_2+27,__zero_reg__
 337 01ce 1092 0000 		sts task_2+27+1,__zero_reg__
 338 01d2 1092 0000 		sts task_2+27+2,__zero_reg__
 339 01d6 1092 0000 		sts task_2+27+3,__zero_reg__
 340 01da 1092 0000 		sts task_2+31,__zero_reg__
 341 01de 1092 0000 		sts task_2+31+1,__zero_reg__
 342 01e2 1092 0000 		sts task_2+31+2,__zero_reg__
 343 01e6 1092 0000 		sts task_2+31+3,__zero_reg__
 344 01ea 80E0      		ldi r24,lo8(task_2)
 345 01ec 90E0      		ldi r25,hi8(task_2)
 346 01ee 0E94 0000 		call nrk_activate_task
 108:main.c        ****     //INITIALIZE_TASK(3, 3);
 109:main.c        ****     
 110:main.c        ****     //INITIALIZE_TASK(1, 2);
 111:main.c        ****     //INITIALIZE_TASK(2, 2);
 112:main.c        **** 
 113:main.c        ****     //instead of passing the ceiling priority, the task with the shortest period that accesses the 
 114:main.c        ****     //in this case, task1 which has a period 350*NANOS_PER_MS
 115:main.c        ****     semaphoreA = nrk_sem_create(1, 4);
 348               	.LM12:
 349 01f2 81E0      		ldi r24,lo8(1)
 350 01f4 64E0      		ldi r22,lo8(4)
 351 01f6 0E94 0000 		call nrk_sem_create
 352 01fa 9093 0000 		sts semaphoreA+1,r25
 353 01fe 8093 0000 		sts semaphoreA,r24
 116:main.c        **** //    semaphoreB = nrk_sem_create(1, 16);
 117:main.c        **** 
 118:main.c        ****     if(semaphoreA==NULL) nrk_kprintf( PSTR("Error creating sem\r\n" ));
 355               	.LM13:
 356 0202 0097      		sbiw r24,0
 357 0204 01F4      		brne .L6
 359               	.LM14:
 360 0206 80E0      		ldi r24,lo8(__c.2122)
 361 0208 90E0      		ldi r25,hi8(__c.2122)
 362 020a 0E94 0000 		call nrk_kprintf
 363               	.L6:
 119:main.c        ****     nrk_start();
 365               	.LM15:
 366 020e 0E94 0000 		call nrk_start
 120:main.c        **** 
 121:main.c        ****     return 0;
 122:main.c        **** }
 368               	.LM16:
 369 0212 80E0      		ldi r24,lo8(0)
 370 0214 90E0      		ldi r25,hi8(0)
 371               	/* epilogue start */
 372 0216 1F91      		pop r17
 373 0218 0895      		ret
 375               	.Lscope3:
 377               		.stabd	78,0,0
 378               	.global	task_1_period
 379               		.data
 382               	task_1_period:
 383 0010 04        		.byte	4
 384 0011 00        		.byte	0
 385 0012 00        		.byte	0
 386 0013 00        		.byte	0
 387               	.global	task_1_execution
 390               	task_1_execution:
 391 0014 02        		.byte	2
 392 0015 00        		.byte	0
 393 0016 00        		.byte	0
 394 0017 00        		.byte	0
 395               	.global	task_2_period
 398               	task_2_period:
 399 0018 07        		.byte	7
 400 0019 00        		.byte	0
 401 001a 00        		.byte	0
 402 001b 00        		.byte	0
 403               	.global	task_2_execution
 406               	task_2_execution:
 407 001c 03        		.byte	3
 408 001d 00        		.byte	0
 409 001e 00        		.byte	0
 410 001f 00        		.byte	0
 411               		.comm _nrk_signal_list,4,1
 412               		.comm nrk_idle_task_stk,128,1
 413               		.comm nrk_kernel_stk_ptr,2,1
 414               		.comm error_task,1,1
 415               		.comm error_num,1,1
 416               		.comm _nrk_prev_timer_val,1,1
 417               		.comm _nrk_time_trigger,1,1
 418               		.comm app_timer0_callback,2,1
 419               		.comm app_timer0_prescale,1,1
 420               		.comm semaphoreA,2,1
 421               		.comm stack_1,128,1
 422               		.comm task_1,35,1
 423               		.comm stack_2,128,1
 424               		.comm task_2,35,1
 425               		.section	.progmem.data,"a",@progbits
 428               	__c.2122:
 429 0000 4572 726F 		.string	"Error creating sem\r\n"
 429      7220 6372 
 429      6561 7469 
 429      6E67 2073 
 429      656D 0D0A 
 448               		.text
 450               	.Letext0:
 451               	.global __do_copy_data
 452               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccvf5QFc.s:2      *ABS*:0000003f __SREG__
     /tmp/ccvf5QFc.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccvf5QFc.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccvf5QFc.s:5      *ABS*:00000034 __CCP__
     /tmp/ccvf5QFc.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccvf5QFc.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccvf5QFc.s:140    .text:00000000 task_2_activity
                            *COM*:00000002 semaphoreA
     /tmp/ccvf5QFc.s:170    .text:00000026 task_1_activity
     /tmp/ccvf5QFc.s:204    .text:0000004c main
                            *COM*:00000023 task_1
                            *COM*:00000080 stack_1
     /tmp/ccvf5QFc.s:382    .data:00000010 task_1_period
     /tmp/ccvf5QFc.s:390    .data:00000014 task_1_execution
                            *COM*:00000023 task_2
                            *COM*:00000080 stack_2
     /tmp/ccvf5QFc.s:398    .data:00000018 task_2_period
     /tmp/ccvf5QFc.s:406    .data:0000001c task_2_execution
     /tmp/ccvf5QFc.s:428    .progmem.data:00000000 __c.2122
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale

UNDEFINED SYMBOLS
nrk_sem_pend
nrk_sem_post
nrk_wait_until_next_period
putchar
nrk_setup_ports
nrk_setup_uart
puts
nrk_init
nrk_time_set
nrk_activate_task
nrk_sem_create
nrk_kprintf
nrk_start
__do_copy_data
__do_clear_bss
