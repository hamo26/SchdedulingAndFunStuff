   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 137               		.data
 138               	.LC0:
 139 0000 4D79 206E 		.string	"My node's address is %d\r\n"
 139      6F64 6527 
 139      7320 6164 
 139      6472 6573 
 139      7320 6973 
 140               	.LC1:
 141 001a 5461 736B 		.string	"Task%d PID=%d\r\n"
 141      2564 2050 
 141      4944 3D25 
 141      640D 0A00 
 142               	.LC2:
 143 002a 5461 736B 		.string	"Task%d has held resource %d times\r\n"
 143      2564 2068 
 143      6173 2068 
 143      656C 6420 
 143      7265 736F 
 144               	.LC3:
 145 004e 5461 736B 		.string	"Task%d attempting to access semaphore\r\n"
 145      2564 2061 
 145      7474 656D 
 145      7074 696E 
 145      6720 746F 
 146               	.LC4:
 147 0076 5423 236E 		.string	"T##n error pend\r"
 147      2065 7272 
 147      6F72 2070 
 147      656E 640D 
 147      00
 148               	.LC5:
 149 0087 5461 736B 		.string	"Task%d holding semaphore\r\n"
 149      2564 2068 
 149      6F6C 6469 
 149      6E67 2073 
 149      656D 6170 
 150               	.LC6:
 151 00a2 5425 6420 		.string	"T%d error post\r\n"
 151      6572 726F 
 151      7220 706F 
 151      7374 0D0A 
 151      00
 152               	.LC7:
 153 00b3 5461 736B 		.string	"Task%d released semaphore\r\n\n"
 153      2564 2072 
 153      656C 6561 
 153      7365 6420 
 153      7365 6D61 
 154               		.text
 156               	.global	task_3_activity
 158               	task_3_activity:
 159               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        ****  *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        ****  *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        ****  *  All rights reserved.
   5:main.c        ****  *
   6:main.c        ****  *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        ****  *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        ****  *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        ****  *
  10:main.c        ****  *  This program is free software: you can redistribute it and/or modify
  11:main.c        ****  *  it under the terms of the GNU General Public License as published by
  12:main.c        ****  *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        ****  *
  14:main.c        ****  *  This program is distributed in the hope that it will be useful,
  15:main.c        ****  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        ****  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        ****  *  GNU General Public License for more details.
  18:main.c        ****  *
  19:main.c        ****  *  You should have received a copy of the GNU General Public License
  20:main.c        ****  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        ****  *
  22:main.c        ****  *  Contributing Authors (specific to this file):
  23:main.c        ****  *  Zane Starr
  24:main.c        ****  *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** #include <nrk.h>
  27:main.c        **** #include <include.h>
  28:main.c        **** #include <ulib.h>
  29:main.c        **** #include <stdio.h>
  30:main.c        **** #include <avr/sleep.h>
  31:main.c        **** #include <hal.h>
  32:main.c        **** #include <nrk_error.h>
  33:main.c        **** #include <nrk_events.h>
  34:main.c        **** #include <nrk_timer.h>
  35:main.c        **** 
  36:main.c        **** 
  37:main.c        **** /*
  38:main.c        ****    To stay inline (no pun intended) with the nano-rk direction of using guards for 
  39:main.c        ****    optimization and potential performance, we use macros rather than methods.
  40:main.c        ****    We could have created a method, but the call may be expensive and impede the performance of the 
  41:main.c        ****  */
  42:main.c        **** #define TASK(n, taskPeriod, taskExecution)                                      \
  43:main.c        ****     	NRK_STK stack_##n[NRK_APP_STACKSIZE];                               	\
  44:main.c        **** 	nrk_task_type task_##n;                                                 \
  45:main.c        **** 	uint32_t task_##n##_period = taskPeriod;                               	\
  46:main.c        **** 	uint32_t task_##n##_execution = taskExecution;                         	\
  47:main.c        **** 	void task_##n##_activity(void)                                              \
  48:main.c        **** 	{									\
  49:main.c        **** 	    uint16_t cnt;                                                       \
  50:main.c        **** 	    int8_t v;								\
  51:main.c        **** 	    printf( "My node's address is %d\r\n",NODE_ADDR );			\
  52:main.c        **** 	    printf( "Task%d PID=%d\r\n", n, nrk_get_pid());			\
  53:main.c        **** 	    cnt=0;								\
  54:main.c        **** 	    while(1) {								\
  55:main.c        **** 		printf( "Task%d has held resource %d times\r\n", n, cnt );	\
  56:main.c        **** 		printf("Task%d attempting to access semaphore\r\n", n);		\
  57:main.c        **** 		v = nrk_sem_pend(my_semaphore);					\
  58:main.c        **** 		if(v==NRK_ERROR) printf("T##n error pend\r\n");			\
  59:main.c        **** 		printf("Task%d holding semaphore\r\n", n);			\
  60:main.c        **** 		nrk_wait_until_next_period();					\
  61:main.c        **** 		v = nrk_sem_post(my_semaphore);					\
  62:main.c        **** 		if(v==NRK_ERROR) printf("T%d error post\r\n", n);		\
  63:main.c        **** 		printf("Task%d released semaphore\r\n\n", n);			\
  64:main.c        **** 		nrk_wait_until_next_period();					\
  65:main.c        **** 		cnt++;								\
  66:main.c        **** 	    }									\
  67:main.c        **** 	}									\
  68:main.c        **** 
  69:main.c        **** /*"Instantiate" the task*/
  70:main.c        **** #define INITIALIZE_TASK(n, total_tasks)						\
  71:main.c        ****     task_##n.FirstActivation = TRUE;                                    \
  72:main.c        **** task_##n.Ptos = (void *) &stack_##n[NRK_APP_STACKSIZE];			\
  73:main.c        **** task_##n.Pbos = (void *) &stack_##n[0];					\
  74:main.c        **** task_##n.Type = BASIC_TASK;                                             \
  75:main.c        **** task_##n.task = task_##n##_activity;					\
  76:main.c        **** task_##n.SchType = PREEMPTIVE;                                          \
  77:main.c        **** task_##n.prio = 1;							\
  78:main.c        **** task_##n.period.secs = task_##n##_period;                               \
  79:main.c        **** task_##n.period.nano_secs = 0;                                          \
  80:main.c        **** task_##n.cpu_reserve.secs = task_##n##_execution;                       \
  81:main.c        **** task_##n.cpu_reserve.nano_secs = 0;                                     \
  82:main.c        **** task_##n.offset.secs = 0;                                               \
  83:main.c        **** task_##n.offset.nano_secs = 0;                                          \
  84:main.c        **** nrk_activate_task(&task_##n)				
  85:main.c        **** 
  86:main.c        **** //Semaphore shared among resources.
  87:main.c        **** nrk_sem_t *my_semaphore;
  88:main.c        **** 
  89:main.c        **** //"Instantiate" tasks.
  90:main.c        **** TASK(1, 2, 0.5);
  91:main.c        **** TASK(2, 3, 0.5);
  92:main.c        **** TASK(3, 5, 0.5);
 161               	.LM0:
 162               	.LFBB1:
 163 0000 6F92      		push r6
 164 0002 7F92      		push r7
 165 0004 8F92      		push r8
 166 0006 9F92      		push r9
 167 0008 AF92      		push r10
 168 000a BF92      		push r11
 169 000c CF92      		push r12
 170 000e DF92      		push r13
 171 0010 EF92      		push r14
 172 0012 FF92      		push r15
 173 0014 0F93      		push r16
 174 0016 1F93      		push r17
 175 0018 CF93      		push r28
 176 001a DF93      		push r29
 177               	/* prologue: function */
 178               	/* frame size = 0 */
 179               	/* stack size = 14 */
 180               	.L__stack_usage = 14
 182               	.LM1:
 183 001c 00D0      		rcall .
 184 001e 00D0      		rcall .
 185 0020 80E0      		ldi r24,lo8(.LC0)
 186 0022 90E0      		ldi r25,hi8(.LC0)
 187 0024 ADB7      		in r26,__SP_L__
 188 0026 BEB7      		in r27,__SP_H__
 189 0028 1296      		adiw r26,1+1
 190 002a 9C93      		st X,r25
 191 002c 8E93      		st -X,r24
 192 002e 1197      		sbiw r26,1
 193 0030 1496      		adiw r26,3+1
 194 0032 1C92      		st X,__zero_reg__
 195 0034 1E92      		st -X,__zero_reg__
 196 0036 1397      		sbiw r26,3
 197 0038 0E94 0000 		call printf
 198 003c 0F90      		pop __tmp_reg__
 199 003e 0F90      		pop __tmp_reg__
 200 0040 0F90      		pop __tmp_reg__
 201 0042 0F90      		pop __tmp_reg__
 202 0044 0E94 0000 		call nrk_get_pid
 203 0048 00D0      		rcall .
 204 004a 00D0      		rcall .
 205 004c 00D0      		rcall .
 206 004e EDB7      		in r30,__SP_L__
 207 0050 FEB7      		in r31,__SP_H__
 208 0052 3196      		adiw r30,1
 209 0054 20E0      		ldi r18,lo8(.LC1)
 210 0056 30E0      		ldi r19,hi8(.LC1)
 211 0058 ADB7      		in r26,__SP_L__
 212 005a BEB7      		in r27,__SP_H__
 213 005c 1296      		adiw r26,1+1
 214 005e 3C93      		st X,r19
 215 0060 2E93      		st -X,r18
 216 0062 1197      		sbiw r26,1
 217 0064 23E0      		ldi r18,lo8(3)
 218 0066 30E0      		ldi r19,hi8(3)
 219 0068 3383      		std Z+3,r19
 220 006a 2283      		std Z+2,r18
 221 006c 8483      		std Z+4,r24
 222 006e 1582      		std Z+5,__zero_reg__
 223 0070 0E94 0000 		call printf
 224 0074 EDB7      		in r30,__SP_L__
 225 0076 FEB7      		in r31,__SP_H__
 226 0078 3696      		adiw r30,6
 227 007a 0FB6      		in __tmp_reg__,__SREG__
 228 007c F894      		cli
 229 007e FEBF      		out __SP_H__,r31
 230 0080 0FBE      		out __SREG__,__tmp_reg__
 231 0082 EDBF      		out __SP_L__,r30
 232 0084 00E0      		ldi r16,lo8(0)
 233 0086 10E0      		ldi r17,hi8(0)
 234 0088 40E0      		ldi r20,lo8(.LC2)
 235 008a E42E      		mov r14,r20
 236 008c 40E0      		ldi r20,hi8(.LC2)
 237 008e F42E      		mov r15,r20
 238 0090 C3E0      		ldi r28,lo8(3)
 239 0092 D0E0      		ldi r29,hi8(3)
 240 0094 30E0      		ldi r19,lo8(.LC3)
 241 0096 C32E      		mov r12,r19
 242 0098 30E0      		ldi r19,hi8(.LC3)
 243 009a D32E      		mov r13,r19
 244 009c 20E0      		ldi r18,lo8(.LC5)
 245 009e A22E      		mov r10,r18
 246 00a0 20E0      		ldi r18,hi8(.LC5)
 247 00a2 B22E      		mov r11,r18
 248 00a4 90E0      		ldi r25,lo8(.LC6)
 249 00a6 892E      		mov r8,r25
 250 00a8 90E0      		ldi r25,hi8(.LC6)
 251 00aa 992E      		mov r9,r25
 252 00ac 80E0      		ldi r24,lo8(.LC7)
 253 00ae 682E      		mov r6,r24
 254 00b0 80E0      		ldi r24,hi8(.LC7)
 255 00b2 782E      		mov r7,r24
 256               	.L4:
 258               	.LM2:
 259 00b4 00D0      		rcall .
 260 00b6 00D0      		rcall .
 261 00b8 00D0      		rcall .
 262 00ba EDB7      		in r30,__SP_L__
 263 00bc FEB7      		in r31,__SP_H__
 264 00be 3196      		adiw r30,1
 265 00c0 ADB7      		in r26,__SP_L__
 266 00c2 BEB7      		in r27,__SP_H__
 267 00c4 1296      		adiw r26,1+1
 268 00c6 FC92      		st X,r15
 269 00c8 EE92      		st -X,r14
 270 00ca 1197      		sbiw r26,1
 271 00cc D383      		std Z+3,r29
 272 00ce C283      		std Z+2,r28
 273 00d0 1583      		std Z+5,r17
 274 00d2 0483      		std Z+4,r16
 275 00d4 0E94 0000 		call printf
 276 00d8 0F90      		pop __tmp_reg__
 277 00da 0F90      		pop __tmp_reg__
 278 00dc EDB7      		in r30,__SP_L__
 279 00de FEB7      		in r31,__SP_H__
 280 00e0 D282      		std Z+2,r13
 281 00e2 C182      		std Z+1,r12
 282 00e4 D483      		std Z+4,r29
 283 00e6 C383      		std Z+3,r28
 284 00e8 0E94 0000 		call printf
 285 00ec 0F90      		pop __tmp_reg__
 286 00ee 0F90      		pop __tmp_reg__
 287 00f0 0F90      		pop __tmp_reg__
 288 00f2 0F90      		pop __tmp_reg__
 289 00f4 8091 0000 		lds r24,my_semaphore
 290 00f8 9091 0000 		lds r25,my_semaphore+1
 291 00fc 0E94 0000 		call nrk_sem_pend
 292 0100 8F3F      		cpi r24,lo8(-1)
 293 0102 01F4      		brne .L2
 295               	.LM3:
 296 0104 80E0      		ldi r24,lo8(.LC4)
 297 0106 90E0      		ldi r25,hi8(.LC4)
 298 0108 0E94 0000 		call puts
 299               	.L2:
 301               	.LM4:
 302 010c 00D0      		rcall .
 303 010e 00D0      		rcall .
 304 0110 ADB7      		in r26,__SP_L__
 305 0112 BEB7      		in r27,__SP_H__
 306 0114 1296      		adiw r26,1+1
 307 0116 BC92      		st X,r11
 308 0118 AE92      		st -X,r10
 309 011a 1197      		sbiw r26,1
 310 011c 1496      		adiw r26,3+1
 311 011e DC93      		st X,r29
 312 0120 CE93      		st -X,r28
 313 0122 1397      		sbiw r26,3
 314 0124 0E94 0000 		call printf
 315 0128 0F90      		pop __tmp_reg__
 316 012a 0F90      		pop __tmp_reg__
 317 012c 0F90      		pop __tmp_reg__
 318 012e 0F90      		pop __tmp_reg__
 319 0130 0E94 0000 		call nrk_wait_until_next_period
 320 0134 8091 0000 		lds r24,my_semaphore
 321 0138 9091 0000 		lds r25,my_semaphore+1
 322 013c 0E94 0000 		call nrk_sem_post
 323 0140 8F3F      		cpi r24,lo8(-1)
 324 0142 01F4      		brne .L3
 326               	.LM5:
 327 0144 00D0      		rcall .
 328 0146 00D0      		rcall .
 329 0148 EDB7      		in r30,__SP_L__
 330 014a FEB7      		in r31,__SP_H__
 331 014c 9282      		std Z+2,r9
 332 014e 8182      		std Z+1,r8
 333 0150 D483      		std Z+4,r29
 334 0152 C383      		std Z+3,r28
 335 0154 0E94 0000 		call printf
 336 0158 0F90      		pop __tmp_reg__
 337 015a 0F90      		pop __tmp_reg__
 338 015c 0F90      		pop __tmp_reg__
 339 015e 0F90      		pop __tmp_reg__
 340               	.L3:
 342               	.LM6:
 343 0160 00D0      		rcall .
 344 0162 00D0      		rcall .
 345 0164 ADB7      		in r26,__SP_L__
 346 0166 BEB7      		in r27,__SP_H__
 347 0168 1296      		adiw r26,1+1
 348 016a 7C92      		st X,r7
 349 016c 6E92      		st -X,r6
 350 016e 1197      		sbiw r26,1
 351 0170 1496      		adiw r26,3+1
 352 0172 DC93      		st X,r29
 353 0174 CE93      		st -X,r28
 354 0176 1397      		sbiw r26,3
 355 0178 0E94 0000 		call printf
 356 017c 0F90      		pop __tmp_reg__
 357 017e 0F90      		pop __tmp_reg__
 358 0180 0F90      		pop __tmp_reg__
 359 0182 0F90      		pop __tmp_reg__
 360 0184 0E94 0000 		call nrk_wait_until_next_period
 361 0188 0F5F      		subi r16,lo8(-(1))
 362 018a 1F4F      		sbci r17,hi8(-(1))
 363 018c 00C0      		rjmp .L4
 368               	.Lscope1:
 370               		.stabd	78,0,0
 372               	.global	task_2_activity
 374               	task_2_activity:
 375               		.stabd	46,0,0
  91:main.c        **** TASK(2, 3, 0.5);
 377               	.LM7:
 378               	.LFBB2:
 379 018e 6F92      		push r6
 380 0190 7F92      		push r7
 381 0192 8F92      		push r8
 382 0194 9F92      		push r9
 383 0196 AF92      		push r10
 384 0198 BF92      		push r11
 385 019a CF92      		push r12
 386 019c DF92      		push r13
 387 019e EF92      		push r14
 388 01a0 FF92      		push r15
 389 01a2 0F93      		push r16
 390 01a4 1F93      		push r17
 391 01a6 CF93      		push r28
 392 01a8 DF93      		push r29
 393               	/* prologue: function */
 394               	/* frame size = 0 */
 395               	/* stack size = 14 */
 396               	.L__stack_usage = 14
  91:main.c        **** TASK(2, 3, 0.5);
 398               	.LM8:
 399 01aa 00D0      		rcall .
 400 01ac 00D0      		rcall .
 401 01ae 80E0      		ldi r24,lo8(.LC0)
 402 01b0 90E0      		ldi r25,hi8(.LC0)
 403 01b2 ADB7      		in r26,__SP_L__
 404 01b4 BEB7      		in r27,__SP_H__
 405 01b6 1296      		adiw r26,1+1
 406 01b8 9C93      		st X,r25
 407 01ba 8E93      		st -X,r24
 408 01bc 1197      		sbiw r26,1
 409 01be 1496      		adiw r26,3+1
 410 01c0 1C92      		st X,__zero_reg__
 411 01c2 1E92      		st -X,__zero_reg__
 412 01c4 1397      		sbiw r26,3
 413 01c6 0E94 0000 		call printf
 414 01ca 0F90      		pop __tmp_reg__
 415 01cc 0F90      		pop __tmp_reg__
 416 01ce 0F90      		pop __tmp_reg__
 417 01d0 0F90      		pop __tmp_reg__
 418 01d2 0E94 0000 		call nrk_get_pid
 419 01d6 00D0      		rcall .
 420 01d8 00D0      		rcall .
 421 01da 00D0      		rcall .
 422 01dc EDB7      		in r30,__SP_L__
 423 01de FEB7      		in r31,__SP_H__
 424 01e0 3196      		adiw r30,1
 425 01e2 20E0      		ldi r18,lo8(.LC1)
 426 01e4 30E0      		ldi r19,hi8(.LC1)
 427 01e6 ADB7      		in r26,__SP_L__
 428 01e8 BEB7      		in r27,__SP_H__
 429 01ea 1296      		adiw r26,1+1
 430 01ec 3C93      		st X,r19
 431 01ee 2E93      		st -X,r18
 432 01f0 1197      		sbiw r26,1
 433 01f2 22E0      		ldi r18,lo8(2)
 434 01f4 30E0      		ldi r19,hi8(2)
 435 01f6 3383      		std Z+3,r19
 436 01f8 2283      		std Z+2,r18
 437 01fa 8483      		std Z+4,r24
 438 01fc 1582      		std Z+5,__zero_reg__
 439 01fe 0E94 0000 		call printf
 440 0202 EDB7      		in r30,__SP_L__
 441 0204 FEB7      		in r31,__SP_H__
 442 0206 3696      		adiw r30,6
 443 0208 0FB6      		in __tmp_reg__,__SREG__
 444 020a F894      		cli
 445 020c FEBF      		out __SP_H__,r31
 446 020e 0FBE      		out __SREG__,__tmp_reg__
 447 0210 EDBF      		out __SP_L__,r30
 448 0212 00E0      		ldi r16,lo8(0)
 449 0214 10E0      		ldi r17,hi8(0)
 450 0216 F0E0      		ldi r31,lo8(.LC2)
 451 0218 EF2E      		mov r14,r31
 452 021a F0E0      		ldi r31,hi8(.LC2)
 453 021c FF2E      		mov r15,r31
 454 021e C2E0      		ldi r28,lo8(2)
 455 0220 D0E0      		ldi r29,hi8(2)
 456 0222 E0E0      		ldi r30,lo8(.LC3)
 457 0224 CE2E      		mov r12,r30
 458 0226 E0E0      		ldi r30,hi8(.LC3)
 459 0228 DE2E      		mov r13,r30
 460 022a 70E0      		ldi r23,lo8(.LC5)
 461 022c A72E      		mov r10,r23
 462 022e 70E0      		ldi r23,hi8(.LC5)
 463 0230 B72E      		mov r11,r23
 464 0232 60E0      		ldi r22,lo8(.LC6)
 465 0234 862E      		mov r8,r22
 466 0236 60E0      		ldi r22,hi8(.LC6)
 467 0238 962E      		mov r9,r22
 468 023a 50E0      		ldi r21,lo8(.LC7)
 469 023c 652E      		mov r6,r21
 470 023e 50E0      		ldi r21,hi8(.LC7)
 471 0240 752E      		mov r7,r21
 472               	.L8:
  91:main.c        **** TASK(2, 3, 0.5);
 474               	.LM9:
 475 0242 00D0      		rcall .
 476 0244 00D0      		rcall .
 477 0246 00D0      		rcall .
 478 0248 EDB7      		in r30,__SP_L__
 479 024a FEB7      		in r31,__SP_H__
 480 024c 3196      		adiw r30,1
 481 024e ADB7      		in r26,__SP_L__
 482 0250 BEB7      		in r27,__SP_H__
 483 0252 1296      		adiw r26,1+1
 484 0254 FC92      		st X,r15
 485 0256 EE92      		st -X,r14
 486 0258 1197      		sbiw r26,1
 487 025a D383      		std Z+3,r29
 488 025c C283      		std Z+2,r28
 489 025e 1583      		std Z+5,r17
 490 0260 0483      		std Z+4,r16
 491 0262 0E94 0000 		call printf
 492 0266 0F90      		pop __tmp_reg__
 493 0268 0F90      		pop __tmp_reg__
 494 026a EDB7      		in r30,__SP_L__
 495 026c FEB7      		in r31,__SP_H__
 496 026e D282      		std Z+2,r13
 497 0270 C182      		std Z+1,r12
 498 0272 D483      		std Z+4,r29
 499 0274 C383      		std Z+3,r28
 500 0276 0E94 0000 		call printf
 501 027a 0F90      		pop __tmp_reg__
 502 027c 0F90      		pop __tmp_reg__
 503 027e 0F90      		pop __tmp_reg__
 504 0280 0F90      		pop __tmp_reg__
 505 0282 8091 0000 		lds r24,my_semaphore
 506 0286 9091 0000 		lds r25,my_semaphore+1
 507 028a 0E94 0000 		call nrk_sem_pend
 508 028e 8F3F      		cpi r24,lo8(-1)
 509 0290 01F4      		brne .L6
  91:main.c        **** TASK(2, 3, 0.5);
 511               	.LM10:
 512 0292 80E0      		ldi r24,lo8(.LC4)
 513 0294 90E0      		ldi r25,hi8(.LC4)
 514 0296 0E94 0000 		call puts
 515               	.L6:
  91:main.c        **** TASK(2, 3, 0.5);
 517               	.LM11:
 518 029a 00D0      		rcall .
 519 029c 00D0      		rcall .
 520 029e ADB7      		in r26,__SP_L__
 521 02a0 BEB7      		in r27,__SP_H__
 522 02a2 1296      		adiw r26,1+1
 523 02a4 BC92      		st X,r11
 524 02a6 AE92      		st -X,r10
 525 02a8 1197      		sbiw r26,1
 526 02aa 1496      		adiw r26,3+1
 527 02ac DC93      		st X,r29
 528 02ae CE93      		st -X,r28
 529 02b0 1397      		sbiw r26,3
 530 02b2 0E94 0000 		call printf
 531 02b6 0F90      		pop __tmp_reg__
 532 02b8 0F90      		pop __tmp_reg__
 533 02ba 0F90      		pop __tmp_reg__
 534 02bc 0F90      		pop __tmp_reg__
 535 02be 0E94 0000 		call nrk_wait_until_next_period
 536 02c2 8091 0000 		lds r24,my_semaphore
 537 02c6 9091 0000 		lds r25,my_semaphore+1
 538 02ca 0E94 0000 		call nrk_sem_post
 539 02ce 8F3F      		cpi r24,lo8(-1)
 540 02d0 01F4      		brne .L7
  91:main.c        **** TASK(2, 3, 0.5);
 542               	.LM12:
 543 02d2 00D0      		rcall .
 544 02d4 00D0      		rcall .
 545 02d6 EDB7      		in r30,__SP_L__
 546 02d8 FEB7      		in r31,__SP_H__
 547 02da 9282      		std Z+2,r9
 548 02dc 8182      		std Z+1,r8
 549 02de D483      		std Z+4,r29
 550 02e0 C383      		std Z+3,r28
 551 02e2 0E94 0000 		call printf
 552 02e6 0F90      		pop __tmp_reg__
 553 02e8 0F90      		pop __tmp_reg__
 554 02ea 0F90      		pop __tmp_reg__
 555 02ec 0F90      		pop __tmp_reg__
 556               	.L7:
  91:main.c        **** TASK(2, 3, 0.5);
 558               	.LM13:
 559 02ee 00D0      		rcall .
 560 02f0 00D0      		rcall .
 561 02f2 ADB7      		in r26,__SP_L__
 562 02f4 BEB7      		in r27,__SP_H__
 563 02f6 1296      		adiw r26,1+1
 564 02f8 7C92      		st X,r7
 565 02fa 6E92      		st -X,r6
 566 02fc 1197      		sbiw r26,1
 567 02fe 1496      		adiw r26,3+1
 568 0300 DC93      		st X,r29
 569 0302 CE93      		st -X,r28
 570 0304 1397      		sbiw r26,3
 571 0306 0E94 0000 		call printf
 572 030a 0F90      		pop __tmp_reg__
 573 030c 0F90      		pop __tmp_reg__
 574 030e 0F90      		pop __tmp_reg__
 575 0310 0F90      		pop __tmp_reg__
 576 0312 0E94 0000 		call nrk_wait_until_next_period
 577 0316 0F5F      		subi r16,lo8(-(1))
 578 0318 1F4F      		sbci r17,hi8(-(1))
 579 031a 00C0      		rjmp .L8
 584               	.Lscope2:
 586               		.stabd	78,0,0
 588               	.global	task_1_activity
 590               	task_1_activity:
 591               		.stabd	46,0,0
  90:main.c        **** TASK(1, 2, 0.5);
 593               	.LM14:
 594               	.LFBB3:
 595 031c 6F92      		push r6
 596 031e 7F92      		push r7
 597 0320 8F92      		push r8
 598 0322 9F92      		push r9
 599 0324 AF92      		push r10
 600 0326 BF92      		push r11
 601 0328 CF92      		push r12
 602 032a DF92      		push r13
 603 032c EF92      		push r14
 604 032e FF92      		push r15
 605 0330 0F93      		push r16
 606 0332 1F93      		push r17
 607 0334 CF93      		push r28
 608 0336 DF93      		push r29
 609               	/* prologue: function */
 610               	/* frame size = 0 */
 611               	/* stack size = 14 */
 612               	.L__stack_usage = 14
  90:main.c        **** TASK(1, 2, 0.5);
 614               	.LM15:
 615 0338 00D0      		rcall .
 616 033a 00D0      		rcall .
 617 033c 80E0      		ldi r24,lo8(.LC0)
 618 033e 90E0      		ldi r25,hi8(.LC0)
 619 0340 ADB7      		in r26,__SP_L__
 620 0342 BEB7      		in r27,__SP_H__
 621 0344 1296      		adiw r26,1+1
 622 0346 9C93      		st X,r25
 623 0348 8E93      		st -X,r24
 624 034a 1197      		sbiw r26,1
 625 034c 1496      		adiw r26,3+1
 626 034e 1C92      		st X,__zero_reg__
 627 0350 1E92      		st -X,__zero_reg__
 628 0352 1397      		sbiw r26,3
 629 0354 0E94 0000 		call printf
 630 0358 0F90      		pop __tmp_reg__
 631 035a 0F90      		pop __tmp_reg__
 632 035c 0F90      		pop __tmp_reg__
 633 035e 0F90      		pop __tmp_reg__
 634 0360 0E94 0000 		call nrk_get_pid
 635 0364 00D0      		rcall .
 636 0366 00D0      		rcall .
 637 0368 00D0      		rcall .
 638 036a EDB7      		in r30,__SP_L__
 639 036c FEB7      		in r31,__SP_H__
 640 036e 3196      		adiw r30,1
 641 0370 20E0      		ldi r18,lo8(.LC1)
 642 0372 30E0      		ldi r19,hi8(.LC1)
 643 0374 ADB7      		in r26,__SP_L__
 644 0376 BEB7      		in r27,__SP_H__
 645 0378 1296      		adiw r26,1+1
 646 037a 3C93      		st X,r19
 647 037c 2E93      		st -X,r18
 648 037e 1197      		sbiw r26,1
 649 0380 21E0      		ldi r18,lo8(1)
 650 0382 30E0      		ldi r19,hi8(1)
 651 0384 3383      		std Z+3,r19
 652 0386 2283      		std Z+2,r18
 653 0388 8483      		std Z+4,r24
 654 038a 1582      		std Z+5,__zero_reg__
 655 038c 0E94 0000 		call printf
 656 0390 EDB7      		in r30,__SP_L__
 657 0392 FEB7      		in r31,__SP_H__
 658 0394 3696      		adiw r30,6
 659 0396 0FB6      		in __tmp_reg__,__SREG__
 660 0398 F894      		cli
 661 039a FEBF      		out __SP_H__,r31
 662 039c 0FBE      		out __SREG__,__tmp_reg__
 663 039e EDBF      		out __SP_L__,r30
 664 03a0 00E0      		ldi r16,lo8(0)
 665 03a2 10E0      		ldi r17,hi8(0)
 666 03a4 20E0      		ldi r18,lo8(.LC2)
 667 03a6 E22E      		mov r14,r18
 668 03a8 20E0      		ldi r18,hi8(.LC2)
 669 03aa F22E      		mov r15,r18
 670 03ac C1E0      		ldi r28,lo8(1)
 671 03ae D0E0      		ldi r29,hi8(1)
 672 03b0 90E0      		ldi r25,lo8(.LC3)
 673 03b2 C92E      		mov r12,r25
 674 03b4 90E0      		ldi r25,hi8(.LC3)
 675 03b6 D92E      		mov r13,r25
 676 03b8 80E0      		ldi r24,lo8(.LC5)
 677 03ba A82E      		mov r10,r24
 678 03bc 80E0      		ldi r24,hi8(.LC5)
 679 03be B82E      		mov r11,r24
 680 03c0 B0E0      		ldi r27,lo8(.LC6)
 681 03c2 8B2E      		mov r8,r27
 682 03c4 B0E0      		ldi r27,hi8(.LC6)
 683 03c6 9B2E      		mov r9,r27
 684 03c8 A0E0      		ldi r26,lo8(.LC7)
 685 03ca 6A2E      		mov r6,r26
 686 03cc A0E0      		ldi r26,hi8(.LC7)
 687 03ce 7A2E      		mov r7,r26
 688               	.L12:
  90:main.c        **** TASK(1, 2, 0.5);
 690               	.LM16:
 691 03d0 00D0      		rcall .
 692 03d2 00D0      		rcall .
 693 03d4 00D0      		rcall .
 694 03d6 EDB7      		in r30,__SP_L__
 695 03d8 FEB7      		in r31,__SP_H__
 696 03da 3196      		adiw r30,1
 697 03dc ADB7      		in r26,__SP_L__
 698 03de BEB7      		in r27,__SP_H__
 699 03e0 1296      		adiw r26,1+1
 700 03e2 FC92      		st X,r15
 701 03e4 EE92      		st -X,r14
 702 03e6 1197      		sbiw r26,1
 703 03e8 D383      		std Z+3,r29
 704 03ea C283      		std Z+2,r28
 705 03ec 1583      		std Z+5,r17
 706 03ee 0483      		std Z+4,r16
 707 03f0 0E94 0000 		call printf
 708 03f4 0F90      		pop __tmp_reg__
 709 03f6 0F90      		pop __tmp_reg__
 710 03f8 EDB7      		in r30,__SP_L__
 711 03fa FEB7      		in r31,__SP_H__
 712 03fc D282      		std Z+2,r13
 713 03fe C182      		std Z+1,r12
 714 0400 D483      		std Z+4,r29
 715 0402 C383      		std Z+3,r28
 716 0404 0E94 0000 		call printf
 717 0408 0F90      		pop __tmp_reg__
 718 040a 0F90      		pop __tmp_reg__
 719 040c 0F90      		pop __tmp_reg__
 720 040e 0F90      		pop __tmp_reg__
 721 0410 8091 0000 		lds r24,my_semaphore
 722 0414 9091 0000 		lds r25,my_semaphore+1
 723 0418 0E94 0000 		call nrk_sem_pend
 724 041c 8F3F      		cpi r24,lo8(-1)
 725 041e 01F4      		brne .L10
  90:main.c        **** TASK(1, 2, 0.5);
 727               	.LM17:
 728 0420 80E0      		ldi r24,lo8(.LC4)
 729 0422 90E0      		ldi r25,hi8(.LC4)
 730 0424 0E94 0000 		call puts
 731               	.L10:
  90:main.c        **** TASK(1, 2, 0.5);
 733               	.LM18:
 734 0428 00D0      		rcall .
 735 042a 00D0      		rcall .
 736 042c ADB7      		in r26,__SP_L__
 737 042e BEB7      		in r27,__SP_H__
 738 0430 1296      		adiw r26,1+1
 739 0432 BC92      		st X,r11
 740 0434 AE92      		st -X,r10
 741 0436 1197      		sbiw r26,1
 742 0438 1496      		adiw r26,3+1
 743 043a DC93      		st X,r29
 744 043c CE93      		st -X,r28
 745 043e 1397      		sbiw r26,3
 746 0440 0E94 0000 		call printf
 747 0444 0F90      		pop __tmp_reg__
 748 0446 0F90      		pop __tmp_reg__
 749 0448 0F90      		pop __tmp_reg__
 750 044a 0F90      		pop __tmp_reg__
 751 044c 0E94 0000 		call nrk_wait_until_next_period
 752 0450 8091 0000 		lds r24,my_semaphore
 753 0454 9091 0000 		lds r25,my_semaphore+1
 754 0458 0E94 0000 		call nrk_sem_post
 755 045c 8F3F      		cpi r24,lo8(-1)
 756 045e 01F4      		brne .L11
  90:main.c        **** TASK(1, 2, 0.5);
 758               	.LM19:
 759 0460 00D0      		rcall .
 760 0462 00D0      		rcall .
 761 0464 EDB7      		in r30,__SP_L__
 762 0466 FEB7      		in r31,__SP_H__
 763 0468 9282      		std Z+2,r9
 764 046a 8182      		std Z+1,r8
 765 046c D483      		std Z+4,r29
 766 046e C383      		std Z+3,r28
 767 0470 0E94 0000 		call printf
 768 0474 0F90      		pop __tmp_reg__
 769 0476 0F90      		pop __tmp_reg__
 770 0478 0F90      		pop __tmp_reg__
 771 047a 0F90      		pop __tmp_reg__
 772               	.L11:
  90:main.c        **** TASK(1, 2, 0.5);
 774               	.LM20:
 775 047c 00D0      		rcall .
 776 047e 00D0      		rcall .
 777 0480 ADB7      		in r26,__SP_L__
 778 0482 BEB7      		in r27,__SP_H__
 779 0484 1296      		adiw r26,1+1
 780 0486 7C92      		st X,r7
 781 0488 6E92      		st -X,r6
 782 048a 1197      		sbiw r26,1
 783 048c 1496      		adiw r26,3+1
 784 048e DC93      		st X,r29
 785 0490 CE93      		st -X,r28
 786 0492 1397      		sbiw r26,3
 787 0494 0E94 0000 		call printf
 788 0498 0F90      		pop __tmp_reg__
 789 049a 0F90      		pop __tmp_reg__
 790 049c 0F90      		pop __tmp_reg__
 791 049e 0F90      		pop __tmp_reg__
 792 04a0 0E94 0000 		call nrk_wait_until_next_period
 793 04a4 0F5F      		subi r16,lo8(-(1))
 794 04a6 1F4F      		sbci r17,hi8(-(1))
 795 04a8 00C0      		rjmp .L12
 800               	.Lscope3:
 802               		.stabd	78,0,0
 803               		.data
 804               	.LC8:
 805 00d0 5374 6172 		.string	"Starting up...\r"
 805      7469 6E67 
 805      2075 702E 
 805      2E2E 0D00 
 806               		.text
 808               	.global	main
 810               	main:
 811               		.stabd	46,0,0
  93:main.c        **** 
  94:main.c        **** int main ()
  95:main.c        **** {
 813               	.LM21:
 814               	.LFBB4:
 815 04aa 1F93      		push r17
 816               	/* prologue: function */
 817               	/* frame size = 0 */
 818               	/* stack size = 1 */
 819               	.L__stack_usage = 1
  96:main.c        ****     nrk_setup_ports();
 821               	.LM22:
 822 04ac 0E94 0000 		call nrk_setup_ports
  97:main.c        ****     nrk_setup_uart(UART_BAUDRATE_115K2);
 824               	.LM23:
 825 04b0 87E0      		ldi r24,lo8(7)
 826 04b2 90E0      		ldi r25,hi8(7)
 827 04b4 0E94 0000 		call nrk_setup_uart
  98:main.c        **** 
  99:main.c        ****     printf( "Starting up...\r\n" );
 829               	.LM24:
 830 04b8 80E0      		ldi r24,lo8(.LC8)
 831 04ba 90E0      		ldi r25,hi8(.LC8)
 832 04bc 0E94 0000 		call puts
 100:main.c        **** 
 101:main.c        ****     nrk_init();
 834               	.LM25:
 835 04c0 0E94 0000 		call nrk_init
 102:main.c        **** 
 103:main.c        ****     nrk_time_set(0,0);
 837               	.LM26:
 838 04c4 60E0      		ldi r22,lo8(0)
 839 04c6 70E0      		ldi r23,hi8(0)
 840 04c8 CB01      		movw r24,r22
 841 04ca 20E0      		ldi r18,lo8(0)
 842 04cc 30E0      		ldi r19,hi8(0)
 843 04ce A901      		movw r20,r18
 844 04d0 0E94 0000 		call nrk_time_set
 104:main.c        **** 
 105:main.c        ****     //Initialize tasks 
 106:main.c        ****     INITIALIZE_TASK(1, 3);
 846               	.LM27:
 847 04d4 11E0      		ldi r17,lo8(1)
 848 04d6 1093 0000 		sts task_1+7,r17
 849 04da 80E0      		ldi r24,lo8(stack_1+128)
 850 04dc 90E0      		ldi r25,hi8(stack_1+128)
 851 04de 9093 0000 		sts task_1+1+1,r25
 852 04e2 8093 0000 		sts task_1+1,r24
 853 04e6 80E0      		ldi r24,lo8(stack_1)
 854 04e8 90E0      		ldi r25,hi8(stack_1)
 855 04ea 9093 0000 		sts task_1+3+1,r25
 856 04ee 8093 0000 		sts task_1+3,r24
 857 04f2 1093 0000 		sts task_1+9,r17
 858 04f6 80E0      		ldi r24,lo8(gs(task_1_activity))
 859 04f8 90E0      		ldi r25,hi8(gs(task_1_activity))
 860 04fa 9093 0000 		sts task_1+5+1,r25
 861 04fe 8093 0000 		sts task_1+5,r24
 862 0502 1093 0000 		sts task_1+10,r17
 863 0506 1093 0000 		sts task_1+8,r17
 864 050a 8091 0000 		lds r24,task_1_period
 865 050e 9091 0000 		lds r25,task_1_period+1
 866 0512 A091 0000 		lds r26,task_1_period+2
 867 0516 B091 0000 		lds r27,task_1_period+3
 868 051a 8093 0000 		sts task_1+11,r24
 869 051e 9093 0000 		sts task_1+11+1,r25
 870 0522 A093 0000 		sts task_1+11+2,r26
 871 0526 B093 0000 		sts task_1+11+3,r27
 872 052a 1092 0000 		sts task_1+15,__zero_reg__
 873 052e 1092 0000 		sts task_1+15+1,__zero_reg__
 874 0532 1092 0000 		sts task_1+15+2,__zero_reg__
 875 0536 1092 0000 		sts task_1+15+3,__zero_reg__
 876 053a 8091 0000 		lds r24,task_1_execution
 877 053e 9091 0000 		lds r25,task_1_execution+1
 878 0542 A091 0000 		lds r26,task_1_execution+2
 879 0546 B091 0000 		lds r27,task_1_execution+3
 880 054a 8093 0000 		sts task_1+19,r24
 881 054e 9093 0000 		sts task_1+19+1,r25
 882 0552 A093 0000 		sts task_1+19+2,r26
 883 0556 B093 0000 		sts task_1+19+3,r27
 884 055a 1092 0000 		sts task_1+23,__zero_reg__
 885 055e 1092 0000 		sts task_1+23+1,__zero_reg__
 886 0562 1092 0000 		sts task_1+23+2,__zero_reg__
 887 0566 1092 0000 		sts task_1+23+3,__zero_reg__
 888 056a 1092 0000 		sts task_1+27,__zero_reg__
 889 056e 1092 0000 		sts task_1+27+1,__zero_reg__
 890 0572 1092 0000 		sts task_1+27+2,__zero_reg__
 891 0576 1092 0000 		sts task_1+27+3,__zero_reg__
 892 057a 1092 0000 		sts task_1+31,__zero_reg__
 893 057e 1092 0000 		sts task_1+31+1,__zero_reg__
 894 0582 1092 0000 		sts task_1+31+2,__zero_reg__
 895 0586 1092 0000 		sts task_1+31+3,__zero_reg__
 896 058a 80E0      		ldi r24,lo8(task_1)
 897 058c 90E0      		ldi r25,hi8(task_1)
 898 058e 0E94 0000 		call nrk_activate_task
 107:main.c        ****     INITIALIZE_TASK(2, 3);
 900               	.LM28:
 901 0592 1093 0000 		sts task_2+7,r17
 902 0596 80E0      		ldi r24,lo8(stack_2+128)
 903 0598 90E0      		ldi r25,hi8(stack_2+128)
 904 059a 9093 0000 		sts task_2+1+1,r25
 905 059e 8093 0000 		sts task_2+1,r24
 906 05a2 80E0      		ldi r24,lo8(stack_2)
 907 05a4 90E0      		ldi r25,hi8(stack_2)
 908 05a6 9093 0000 		sts task_2+3+1,r25
 909 05aa 8093 0000 		sts task_2+3,r24
 910 05ae 1093 0000 		sts task_2+9,r17
 911 05b2 80E0      		ldi r24,lo8(gs(task_2_activity))
 912 05b4 90E0      		ldi r25,hi8(gs(task_2_activity))
 913 05b6 9093 0000 		sts task_2+5+1,r25
 914 05ba 8093 0000 		sts task_2+5,r24
 915 05be 1093 0000 		sts task_2+10,r17
 916 05c2 1093 0000 		sts task_2+8,r17
 917 05c6 8091 0000 		lds r24,task_2_period
 918 05ca 9091 0000 		lds r25,task_2_period+1
 919 05ce A091 0000 		lds r26,task_2_period+2
 920 05d2 B091 0000 		lds r27,task_2_period+3
 921 05d6 8093 0000 		sts task_2+11,r24
 922 05da 9093 0000 		sts task_2+11+1,r25
 923 05de A093 0000 		sts task_2+11+2,r26
 924 05e2 B093 0000 		sts task_2+11+3,r27
 925 05e6 1092 0000 		sts task_2+15,__zero_reg__
 926 05ea 1092 0000 		sts task_2+15+1,__zero_reg__
 927 05ee 1092 0000 		sts task_2+15+2,__zero_reg__
 928 05f2 1092 0000 		sts task_2+15+3,__zero_reg__
 929 05f6 8091 0000 		lds r24,task_2_execution
 930 05fa 9091 0000 		lds r25,task_2_execution+1
 931 05fe A091 0000 		lds r26,task_2_execution+2
 932 0602 B091 0000 		lds r27,task_2_execution+3
 933 0606 8093 0000 		sts task_2+19,r24
 934 060a 9093 0000 		sts task_2+19+1,r25
 935 060e A093 0000 		sts task_2+19+2,r26
 936 0612 B093 0000 		sts task_2+19+3,r27
 937 0616 1092 0000 		sts task_2+23,__zero_reg__
 938 061a 1092 0000 		sts task_2+23+1,__zero_reg__
 939 061e 1092 0000 		sts task_2+23+2,__zero_reg__
 940 0622 1092 0000 		sts task_2+23+3,__zero_reg__
 941 0626 1092 0000 		sts task_2+27,__zero_reg__
 942 062a 1092 0000 		sts task_2+27+1,__zero_reg__
 943 062e 1092 0000 		sts task_2+27+2,__zero_reg__
 944 0632 1092 0000 		sts task_2+27+3,__zero_reg__
 945 0636 1092 0000 		sts task_2+31,__zero_reg__
 946 063a 1092 0000 		sts task_2+31+1,__zero_reg__
 947 063e 1092 0000 		sts task_2+31+2,__zero_reg__
 948 0642 1092 0000 		sts task_2+31+3,__zero_reg__
 949 0646 80E0      		ldi r24,lo8(task_2)
 950 0648 90E0      		ldi r25,hi8(task_2)
 951 064a 0E94 0000 		call nrk_activate_task
 108:main.c        ****     INITIALIZE_TASK(3, 3);
 953               	.LM29:
 954 064e 1093 0000 		sts task_3+7,r17
 955 0652 80E0      		ldi r24,lo8(stack_3+128)
 956 0654 90E0      		ldi r25,hi8(stack_3+128)
 957 0656 9093 0000 		sts task_3+1+1,r25
 958 065a 8093 0000 		sts task_3+1,r24
 959 065e 80E0      		ldi r24,lo8(stack_3)
 960 0660 90E0      		ldi r25,hi8(stack_3)
 961 0662 9093 0000 		sts task_3+3+1,r25
 962 0666 8093 0000 		sts task_3+3,r24
 963 066a 1093 0000 		sts task_3+9,r17
 964 066e 80E0      		ldi r24,lo8(gs(task_3_activity))
 965 0670 90E0      		ldi r25,hi8(gs(task_3_activity))
 966 0672 9093 0000 		sts task_3+5+1,r25
 967 0676 8093 0000 		sts task_3+5,r24
 968 067a 1093 0000 		sts task_3+10,r17
 969 067e 1093 0000 		sts task_3+8,r17
 970 0682 8091 0000 		lds r24,task_3_period
 971 0686 9091 0000 		lds r25,task_3_period+1
 972 068a A091 0000 		lds r26,task_3_period+2
 973 068e B091 0000 		lds r27,task_3_period+3
 974 0692 8093 0000 		sts task_3+11,r24
 975 0696 9093 0000 		sts task_3+11+1,r25
 976 069a A093 0000 		sts task_3+11+2,r26
 977 069e B093 0000 		sts task_3+11+3,r27
 978 06a2 1092 0000 		sts task_3+15,__zero_reg__
 979 06a6 1092 0000 		sts task_3+15+1,__zero_reg__
 980 06aa 1092 0000 		sts task_3+15+2,__zero_reg__
 981 06ae 1092 0000 		sts task_3+15+3,__zero_reg__
 982 06b2 8091 0000 		lds r24,task_3_execution
 983 06b6 9091 0000 		lds r25,task_3_execution+1
 984 06ba A091 0000 		lds r26,task_3_execution+2
 985 06be B091 0000 		lds r27,task_3_execution+3
 986 06c2 8093 0000 		sts task_3+19,r24
 987 06c6 9093 0000 		sts task_3+19+1,r25
 988 06ca A093 0000 		sts task_3+19+2,r26
 989 06ce B093 0000 		sts task_3+19+3,r27
 990 06d2 1092 0000 		sts task_3+23,__zero_reg__
 991 06d6 1092 0000 		sts task_3+23+1,__zero_reg__
 992 06da 1092 0000 		sts task_3+23+2,__zero_reg__
 993 06de 1092 0000 		sts task_3+23+3,__zero_reg__
 994 06e2 1092 0000 		sts task_3+27,__zero_reg__
 995 06e6 1092 0000 		sts task_3+27+1,__zero_reg__
 996 06ea 1092 0000 		sts task_3+27+2,__zero_reg__
 997 06ee 1092 0000 		sts task_3+27+3,__zero_reg__
 998 06f2 1092 0000 		sts task_3+31,__zero_reg__
 999 06f6 1092 0000 		sts task_3+31+1,__zero_reg__
 1000 06fa 1092 0000 		sts task_3+31+2,__zero_reg__
 1001 06fe 1092 0000 		sts task_3+31+3,__zero_reg__
 1002 0702 80E0      		ldi r24,lo8(task_3)
 1003 0704 90E0      		ldi r25,hi8(task_3)
 1004 0706 0E94 0000 		call nrk_activate_task
 109:main.c        ****     	
 110:main.c        ****     //instead of passing the ceiling priority, the task with the shortest period that accesses the 
 111:main.c        ****     //in this case, task1 which has a period 350*NANOS_PER_MS
 112:main.c        ****     my_semaphore = nrk_sem_create(1, 2);
 1006               	.LM30:
 1007 070a 81E0      		ldi r24,lo8(1)
 1008 070c 62E0      		ldi r22,lo8(2)
 1009 070e 0E94 0000 		call nrk_sem_create
 1010 0712 9093 0000 		sts my_semaphore+1,r25
 1011 0716 8093 0000 		sts my_semaphore,r24
 113:main.c        ****     if(my_semaphore==NULL) nrk_kprintf( PSTR("Error creating sem\r\n" ));
 1013               	.LM31:
 1014 071a 0097      		sbiw r24,0
 1015 071c 01F4      		brne .L14
 1017               	.LM32:
 1018 071e 80E0      		ldi r24,lo8(__c.2130)
 1019 0720 90E0      		ldi r25,hi8(__c.2130)
 1020 0722 0E94 0000 		call nrk_kprintf
 1021               	.L14:
 114:main.c        ****     nrk_start();
 1023               	.LM33:
 1024 0726 0E94 0000 		call nrk_start
 115:main.c        **** 
 116:main.c        ****     return 0;
 117:main.c        **** }
 1026               	.LM34:
 1027 072a 80E0      		ldi r24,lo8(0)
 1028 072c 90E0      		ldi r25,hi8(0)
 1029               	/* epilogue start */
 1030 072e 1F91      		pop r17
 1031 0730 0895      		ret
 1033               	.Lscope4:
 1035               		.stabd	78,0,0
 1036               	.global	task_1_period
 1037               		.data
 1040               	task_1_period:
 1041 00e0 02        		.byte	2
 1042 00e1 00        		.byte	0
 1043 00e2 00        		.byte	0
 1044 00e3 00        		.byte	0
 1045               	.global	task_1_execution
 1046               	.global	task_1_execution
 1047               		.section .bss
 1050               	task_1_execution:
 1051 0000 0000 0000 		.skip 4,0
 1052               	.global	task_2_period
 1053               		.data
 1056               	task_2_period:
 1057 00e4 03        		.byte	3
 1058 00e5 00        		.byte	0
 1059 00e6 00        		.byte	0
 1060 00e7 00        		.byte	0
 1061               	.global	task_2_execution
 1062               	.global	task_2_execution
 1063               		.section .bss
 1066               	task_2_execution:
 1067 0004 0000 0000 		.skip 4,0
 1068               	.global	task_3_period
 1069               		.data
 1072               	task_3_period:
 1073 00e8 05        		.byte	5
 1074 00e9 00        		.byte	0
 1075 00ea 00        		.byte	0
 1076 00eb 00        		.byte	0
 1077               	.global	task_3_execution
 1078               	.global	task_3_execution
 1079               		.section .bss
 1082               	task_3_execution:
 1083 0008 0000 0000 		.skip 4,0
 1084               		.comm _nrk_signal_list,4,1
 1085               		.comm nrk_idle_task_stk,128,1
 1086               		.comm nrk_kernel_stk_ptr,2,1
 1087               		.comm error_task,1,1
 1088               		.comm error_num,1,1
 1089               		.comm _nrk_prev_timer_val,1,1
 1090               		.comm _nrk_time_trigger,1,1
 1091               		.comm app_timer0_callback,2,1
 1092               		.comm app_timer0_prescale,1,1
 1093               		.comm my_semaphore,2,1
 1094               		.comm stack_1,128,1
 1095               		.comm task_1,35,1
 1096               		.comm stack_2,128,1
 1097               		.comm task_2,35,1
 1098               		.comm stack_3,128,1
 1099               		.comm task_3,35,1
 1100               		.section	.progmem.data,"a",@progbits
 1103               	__c.2130:
 1104 0000 4572 726F 		.string	"Error creating sem\r\n"
 1104      7220 6372 
 1104      6561 7469 
 1104      6E67 2073 
 1104      656D 0D0A 
 1127               		.text
 1129               	.Letext0:
 1130               	.global __do_copy_data
 1131               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccOdHNpq.s:2      *ABS*:0000003f __SREG__
     /tmp/ccOdHNpq.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccOdHNpq.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccOdHNpq.s:5      *ABS*:00000034 __CCP__
     /tmp/ccOdHNpq.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccOdHNpq.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccOdHNpq.s:158    .text:00000000 task_3_activity
                            *COM*:00000002 my_semaphore
     /tmp/ccOdHNpq.s:374    .text:0000018e task_2_activity
     /tmp/ccOdHNpq.s:590    .text:0000031c task_1_activity
     /tmp/ccOdHNpq.s:810    .text:000004aa main
                            *COM*:00000023 task_1
                            *COM*:00000080 stack_1
     /tmp/ccOdHNpq.s:1040   .data:000000e0 task_1_period
     /tmp/ccOdHNpq.s:1050   .bss:00000000 task_1_execution
                            *COM*:00000023 task_2
                            *COM*:00000080 stack_2
     /tmp/ccOdHNpq.s:1056   .data:000000e4 task_2_period
     /tmp/ccOdHNpq.s:1066   .bss:00000004 task_2_execution
                            *COM*:00000023 task_3
                            *COM*:00000080 stack_3
     /tmp/ccOdHNpq.s:1072   .data:000000e8 task_3_period
     /tmp/ccOdHNpq.s:1082   .bss:00000008 task_3_execution
     /tmp/ccOdHNpq.s:1103   .progmem.data:00000000 __c.2130
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale

UNDEFINED SYMBOLS
printf
nrk_get_pid
nrk_sem_pend
puts
nrk_wait_until_next_period
nrk_sem_post
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
nrk_activate_task
nrk_sem_create
nrk_kprintf
nrk_start
__do_copy_data
__do_clear_bss
