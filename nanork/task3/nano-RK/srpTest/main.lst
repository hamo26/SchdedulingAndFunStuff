   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 137               		.data
 138               	.LC0:
 139 0000 4D79 206E 		.string	"My node's address is %d\r\n"
 139      6F64 6527 
 139      7320 6164 
 139      6472 6573 
 139      7320 6973 
 140               	.LC1:
 141 001a 5461 736B 		.string	"Task%d PID=%d\r\n"
 141      2564 2050 
 141      4944 3D25 
 141      640D 0A00 
 142               	.LC2:
 143 002a 5461 736B 		.string	"Task%d has held resource %d times\r\n"
 143      2564 2068 
 143      6173 2068 
 143      656C 6420 
 143      7265 736F 
 144               	.LC3:
 145 004e 5461 736B 		.string	"Task%d attempting to access semaphore\r\n"
 145      2564 2061 
 145      7474 656D 
 145      7074 696E 
 145      6720 746F 
 146               	.LC4:
 147 0076 5423 236E 		.string	"T##n error pend\r"
 147      2065 7272 
 147      6F72 2070 
 147      656E 640D 
 147      00
 148               	.LC5:
 149 0087 5461 736B 		.string	"Task%d holding semaphore\r\n"
 149      2564 2068 
 149      6F6C 6469 
 149      6E67 2073 
 149      656D 6170 
 150               	.LC6:
 151 00a2 5425 6420 		.string	"T%d error post\r\n"
 151      6572 726F 
 151      7220 706F 
 151      7374 0D0A 
 151      00
 152               	.LC7:
 153 00b3 5461 736B 		.string	"Task%d released semaphore\r\n"
 153      2564 2072 
 153      656C 6561 
 153      7365 6420 
 153      7365 6D61 
 154               		.text
 156               	.global	task_3_activity
 158               	task_3_activity:
 159               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        ****  *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        ****  *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        ****  *  All rights reserved.
   5:main.c        ****  *
   6:main.c        ****  *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        ****  *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        ****  *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        ****  *
  10:main.c        ****  *  This program is free software: you can redistribute it and/or modify
  11:main.c        ****  *  it under the terms of the GNU General Public License as published by
  12:main.c        ****  *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        ****  *
  14:main.c        ****  *  This program is distributed in the hope that it will be useful,
  15:main.c        ****  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        ****  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        ****  *  GNU General Public License for more details.
  18:main.c        ****  *
  19:main.c        ****  *  You should have received a copy of the GNU General Public License
  20:main.c        ****  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        ****  *
  22:main.c        ****  *  Contributing Authors (specific to this file):
  23:main.c        ****  *  Zane Starr
  24:main.c        ****  *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** #include <nrk.h>
  27:main.c        **** #include <include.h>
  28:main.c        **** #include <ulib.h>
  29:main.c        **** #include <stdio.h>
  30:main.c        **** #include <avr/sleep.h>
  31:main.c        **** #include <hal.h>
  32:main.c        **** #include <nrk_error.h>
  33:main.c        **** #include <nrk_events.h>
  34:main.c        **** #include <nrk_timer.h>
  35:main.c        **** 
  36:main.c        **** 
  37:main.c        **** /*
  38:main.c        ****    To stay inline (no pun intended) with the nano-rk direction of using guards for 
  39:main.c        ****    optimization and potential performance, we use macros rather than methods.
  40:main.c        ****    We could have created a method, but the call may be expensive and impede the performance of the 
  41:main.c        ****  */
  42:main.c        **** #define TASK(n, taskPeriod, taskExecution)                                      \
  43:main.c        ****     	NRK_STK stack_##n[NRK_APP_STACKSIZE];                               	\
  44:main.c        **** 	nrk_task_type task_##n;                                                 \
  45:main.c        **** 	uint32_t task_##n##_period = taskPeriod;                               	\
  46:main.c        **** 	uint32_t task_##n##_execution = taskExecution;                         	\
  47:main.c        **** 	void task_##n##_activity(void)                                              \
  48:main.c        **** 	{									\
  49:main.c        **** 	    uint16_t cnt;                                                       \
  50:main.c        **** 	    int8_t v;								\
  51:main.c        **** 	    printf( "My node's address is %d\r\n",NODE_ADDR );			\
  52:main.c        **** 	    printf( "Task%d PID=%d\r\n", n, nrk_get_pid());			\
  53:main.c        **** 	    cnt=0;								\
  54:main.c        **** 	    while(1) {								\
  55:main.c        **** 		printf( "Task%d has held resource %d times\r\n", n, cnt );	\
  56:main.c        **** 		printf("Task%d attempting to access semaphore\r\n", n);		\
  57:main.c        **** 		v = nrk_sem_pend(my_semaphore);					\
  58:main.c        **** 		if(v==NRK_ERROR) printf("T##n error pend\r\n");			\
  59:main.c        **** 		printf("Task%d holding semaphore\r\n", n);			\
  60:main.c        **** 		v = nrk_sem_post(my_semaphore);					\
  61:main.c        **** 		if(v==NRK_ERROR) printf("T%d error post\r\n", n);		\
  62:main.c        **** 		printf("Task%d released semaphore\r\n", n);			\
  63:main.c        **** 		nrk_wait_until_next_period();					\
  64:main.c        **** 		cnt++;								\
  65:main.c        **** 	    }									\
  66:main.c        **** 	}									\
  67:main.c        **** 
  68:main.c        **** /*"Instantiate" the task*/
  69:main.c        **** #define INITIALIZE_TASK(n, total_tasks)						\
  70:main.c        ****     task_##n.FirstActivation = TRUE;                                    \
  71:main.c        **** task_##n.Ptos = (void *) &stack_##n[NRK_APP_STACKSIZE];			\
  72:main.c        **** task_##n.Pbos = (void *) &stack_##n[0];					\
  73:main.c        **** task_##n.Type = BASIC_TASK;                                             \
  74:main.c        **** task_##n.task = task_##n##_activity;						\
  75:main.c        **** task_##n.prio = total_tasks - n;							\
  76:main.c        **** task_##n.SchType = PREEMPTIVE;                                          \
  77:main.c        **** task_##n.period.secs = task_##n##_period;                               \
  78:main.c        **** task_##n.period.nano_secs = 0;                                          \
  79:main.c        **** task_##n.cpu_reserve.secs = task_##n##_execution;                       \
  80:main.c        **** task_##n.cpu_reserve.nano_secs = 0;                                     \
  81:main.c        **** task_##n.offset.secs = 0;                                               \
  82:main.c        **** task_##n.offset.nano_secs = 0;                                          \
  83:main.c        **** nrk_activate_task(&task_##n)				
  84:main.c        **** 
  85:main.c        **** //Semaphore shared among resources.
  86:main.c        **** nrk_sem_t *my_semaphore;
  87:main.c        **** 
  88:main.c        **** //"Instantiate" tasks.
  89:main.c        **** TASK(1, 2, 0.5);
  90:main.c        **** TASK(2, 3, 0.5);
  91:main.c        **** TASK(3, 5, 0.5);
 161               	.LM0:
 162               	.LFBB1:
 163 0000 6F92      		push r6
 164 0002 7F92      		push r7
 165 0004 8F92      		push r8
 166 0006 9F92      		push r9
 167 0008 AF92      		push r10
 168 000a BF92      		push r11
 169 000c CF92      		push r12
 170 000e DF92      		push r13
 171 0010 EF92      		push r14
 172 0012 FF92      		push r15
 173 0014 0F93      		push r16
 174 0016 1F93      		push r17
 175 0018 CF93      		push r28
 176 001a DF93      		push r29
 177               	/* prologue: function */
 178               	/* frame size = 0 */
 179               	/* stack size = 14 */
 180               	.L__stack_usage = 14
 182               	.LM1:
 183 001c 00D0      		rcall .
 184 001e 00D0      		rcall .
 185 0020 80E0      		ldi r24,lo8(.LC0)
 186 0022 90E0      		ldi r25,hi8(.LC0)
 187 0024 ADB7      		in r26,__SP_L__
 188 0026 BEB7      		in r27,__SP_H__
 189 0028 1296      		adiw r26,1+1
 190 002a 9C93      		st X,r25
 191 002c 8E93      		st -X,r24
 192 002e 1197      		sbiw r26,1
 193 0030 1496      		adiw r26,3+1
 194 0032 1C92      		st X,__zero_reg__
 195 0034 1E92      		st -X,__zero_reg__
 196 0036 1397      		sbiw r26,3
 197 0038 0E94 0000 		call printf
 198 003c 0F90      		pop __tmp_reg__
 199 003e 0F90      		pop __tmp_reg__
 200 0040 0F90      		pop __tmp_reg__
 201 0042 0F90      		pop __tmp_reg__
 202 0044 0E94 0000 		call nrk_get_pid
 203 0048 00D0      		rcall .
 204 004a 00D0      		rcall .
 205 004c 00D0      		rcall .
 206 004e EDB7      		in r30,__SP_L__
 207 0050 FEB7      		in r31,__SP_H__
 208 0052 3196      		adiw r30,1
 209 0054 20E0      		ldi r18,lo8(.LC1)
 210 0056 30E0      		ldi r19,hi8(.LC1)
 211 0058 ADB7      		in r26,__SP_L__
 212 005a BEB7      		in r27,__SP_H__
 213 005c 1296      		adiw r26,1+1
 214 005e 3C93      		st X,r19
 215 0060 2E93      		st -X,r18
 216 0062 1197      		sbiw r26,1
 217 0064 23E0      		ldi r18,lo8(3)
 218 0066 30E0      		ldi r19,hi8(3)
 219 0068 3383      		std Z+3,r19
 220 006a 2283      		std Z+2,r18
 221 006c 8483      		std Z+4,r24
 222 006e 1582      		std Z+5,__zero_reg__
 223 0070 0E94 0000 		call printf
 224 0074 EDB7      		in r30,__SP_L__
 225 0076 FEB7      		in r31,__SP_H__
 226 0078 3696      		adiw r30,6
 227 007a 0FB6      		in __tmp_reg__,__SREG__
 228 007c F894      		cli
 229 007e FEBF      		out __SP_H__,r31
 230 0080 0FBE      		out __SREG__,__tmp_reg__
 231 0082 EDBF      		out __SP_L__,r30
 232 0084 00E0      		ldi r16,lo8(0)
 233 0086 10E0      		ldi r17,hi8(0)
 234 0088 40E0      		ldi r20,lo8(.LC2)
 235 008a E42E      		mov r14,r20
 236 008c 40E0      		ldi r20,hi8(.LC2)
 237 008e F42E      		mov r15,r20
 238 0090 C3E0      		ldi r28,lo8(3)
 239 0092 D0E0      		ldi r29,hi8(3)
 240 0094 30E0      		ldi r19,lo8(.LC3)
 241 0096 C32E      		mov r12,r19
 242 0098 30E0      		ldi r19,hi8(.LC3)
 243 009a D32E      		mov r13,r19
 244 009c 20E0      		ldi r18,lo8(.LC5)
 245 009e A22E      		mov r10,r18
 246 00a0 20E0      		ldi r18,hi8(.LC5)
 247 00a2 B22E      		mov r11,r18
 248 00a4 90E0      		ldi r25,lo8(.LC6)
 249 00a6 892E      		mov r8,r25
 250 00a8 90E0      		ldi r25,hi8(.LC6)
 251 00aa 992E      		mov r9,r25
 252 00ac 80E0      		ldi r24,lo8(.LC7)
 253 00ae 682E      		mov r6,r24
 254 00b0 80E0      		ldi r24,hi8(.LC7)
 255 00b2 782E      		mov r7,r24
 256               	.L4:
 258               	.LM2:
 259 00b4 00D0      		rcall .
 260 00b6 00D0      		rcall .
 261 00b8 00D0      		rcall .
 262 00ba EDB7      		in r30,__SP_L__
 263 00bc FEB7      		in r31,__SP_H__
 264 00be 3196      		adiw r30,1
 265 00c0 ADB7      		in r26,__SP_L__
 266 00c2 BEB7      		in r27,__SP_H__
 267 00c4 1296      		adiw r26,1+1
 268 00c6 FC92      		st X,r15
 269 00c8 EE92      		st -X,r14
 270 00ca 1197      		sbiw r26,1
 271 00cc D383      		std Z+3,r29
 272 00ce C283      		std Z+2,r28
 273 00d0 1583      		std Z+5,r17
 274 00d2 0483      		std Z+4,r16
 275 00d4 0E94 0000 		call printf
 276 00d8 0F90      		pop __tmp_reg__
 277 00da 0F90      		pop __tmp_reg__
 278 00dc EDB7      		in r30,__SP_L__
 279 00de FEB7      		in r31,__SP_H__
 280 00e0 D282      		std Z+2,r13
 281 00e2 C182      		std Z+1,r12
 282 00e4 D483      		std Z+4,r29
 283 00e6 C383      		std Z+3,r28
 284 00e8 0E94 0000 		call printf
 285 00ec 0F90      		pop __tmp_reg__
 286 00ee 0F90      		pop __tmp_reg__
 287 00f0 0F90      		pop __tmp_reg__
 288 00f2 0F90      		pop __tmp_reg__
 289 00f4 8091 0000 		lds r24,my_semaphore
 290 00f8 9091 0000 		lds r25,my_semaphore+1
 291 00fc 0E94 0000 		call nrk_sem_pend
 292 0100 8F3F      		cpi r24,lo8(-1)
 293 0102 01F4      		brne .L2
 295               	.LM3:
 296 0104 80E0      		ldi r24,lo8(.LC4)
 297 0106 90E0      		ldi r25,hi8(.LC4)
 298 0108 0E94 0000 		call puts
 299               	.L2:
 301               	.LM4:
 302 010c 00D0      		rcall .
 303 010e 00D0      		rcall .
 304 0110 ADB7      		in r26,__SP_L__
 305 0112 BEB7      		in r27,__SP_H__
 306 0114 1296      		adiw r26,1+1
 307 0116 BC92      		st X,r11
 308 0118 AE92      		st -X,r10
 309 011a 1197      		sbiw r26,1
 310 011c 1496      		adiw r26,3+1
 311 011e DC93      		st X,r29
 312 0120 CE93      		st -X,r28
 313 0122 1397      		sbiw r26,3
 314 0124 0E94 0000 		call printf
 315 0128 0F90      		pop __tmp_reg__
 316 012a 0F90      		pop __tmp_reg__
 317 012c 0F90      		pop __tmp_reg__
 318 012e 0F90      		pop __tmp_reg__
 319 0130 8091 0000 		lds r24,my_semaphore
 320 0134 9091 0000 		lds r25,my_semaphore+1
 321 0138 0E94 0000 		call nrk_sem_post
 322 013c 8F3F      		cpi r24,lo8(-1)
 323 013e 01F4      		brne .L3
 325               	.LM5:
 326 0140 00D0      		rcall .
 327 0142 00D0      		rcall .
 328 0144 EDB7      		in r30,__SP_L__
 329 0146 FEB7      		in r31,__SP_H__
 330 0148 9282      		std Z+2,r9
 331 014a 8182      		std Z+1,r8
 332 014c D483      		std Z+4,r29
 333 014e C383      		std Z+3,r28
 334 0150 0E94 0000 		call printf
 335 0154 0F90      		pop __tmp_reg__
 336 0156 0F90      		pop __tmp_reg__
 337 0158 0F90      		pop __tmp_reg__
 338 015a 0F90      		pop __tmp_reg__
 339               	.L3:
 341               	.LM6:
 342 015c 00D0      		rcall .
 343 015e 00D0      		rcall .
 344 0160 ADB7      		in r26,__SP_L__
 345 0162 BEB7      		in r27,__SP_H__
 346 0164 1296      		adiw r26,1+1
 347 0166 7C92      		st X,r7
 348 0168 6E92      		st -X,r6
 349 016a 1197      		sbiw r26,1
 350 016c 1496      		adiw r26,3+1
 351 016e DC93      		st X,r29
 352 0170 CE93      		st -X,r28
 353 0172 1397      		sbiw r26,3
 354 0174 0E94 0000 		call printf
 355 0178 0F90      		pop __tmp_reg__
 356 017a 0F90      		pop __tmp_reg__
 357 017c 0F90      		pop __tmp_reg__
 358 017e 0F90      		pop __tmp_reg__
 359 0180 0E94 0000 		call nrk_wait_until_next_period
 360 0184 0F5F      		subi r16,lo8(-(1))
 361 0186 1F4F      		sbci r17,hi8(-(1))
 362 0188 00C0      		rjmp .L4
 367               	.Lscope1:
 369               		.stabd	78,0,0
 371               	.global	task_2_activity
 373               	task_2_activity:
 374               		.stabd	46,0,0
  90:main.c        **** TASK(2, 3, 0.5);
 376               	.LM7:
 377               	.LFBB2:
 378 018a 6F92      		push r6
 379 018c 7F92      		push r7
 380 018e 8F92      		push r8
 381 0190 9F92      		push r9
 382 0192 AF92      		push r10
 383 0194 BF92      		push r11
 384 0196 CF92      		push r12
 385 0198 DF92      		push r13
 386 019a EF92      		push r14
 387 019c FF92      		push r15
 388 019e 0F93      		push r16
 389 01a0 1F93      		push r17
 390 01a2 CF93      		push r28
 391 01a4 DF93      		push r29
 392               	/* prologue: function */
 393               	/* frame size = 0 */
 394               	/* stack size = 14 */
 395               	.L__stack_usage = 14
  90:main.c        **** TASK(2, 3, 0.5);
 397               	.LM8:
 398 01a6 00D0      		rcall .
 399 01a8 00D0      		rcall .
 400 01aa 80E0      		ldi r24,lo8(.LC0)
 401 01ac 90E0      		ldi r25,hi8(.LC0)
 402 01ae ADB7      		in r26,__SP_L__
 403 01b0 BEB7      		in r27,__SP_H__
 404 01b2 1296      		adiw r26,1+1
 405 01b4 9C93      		st X,r25
 406 01b6 8E93      		st -X,r24
 407 01b8 1197      		sbiw r26,1
 408 01ba 1496      		adiw r26,3+1
 409 01bc 1C92      		st X,__zero_reg__
 410 01be 1E92      		st -X,__zero_reg__
 411 01c0 1397      		sbiw r26,3
 412 01c2 0E94 0000 		call printf
 413 01c6 0F90      		pop __tmp_reg__
 414 01c8 0F90      		pop __tmp_reg__
 415 01ca 0F90      		pop __tmp_reg__
 416 01cc 0F90      		pop __tmp_reg__
 417 01ce 0E94 0000 		call nrk_get_pid
 418 01d2 00D0      		rcall .
 419 01d4 00D0      		rcall .
 420 01d6 00D0      		rcall .
 421 01d8 EDB7      		in r30,__SP_L__
 422 01da FEB7      		in r31,__SP_H__
 423 01dc 3196      		adiw r30,1
 424 01de 20E0      		ldi r18,lo8(.LC1)
 425 01e0 30E0      		ldi r19,hi8(.LC1)
 426 01e2 ADB7      		in r26,__SP_L__
 427 01e4 BEB7      		in r27,__SP_H__
 428 01e6 1296      		adiw r26,1+1
 429 01e8 3C93      		st X,r19
 430 01ea 2E93      		st -X,r18
 431 01ec 1197      		sbiw r26,1
 432 01ee 22E0      		ldi r18,lo8(2)
 433 01f0 30E0      		ldi r19,hi8(2)
 434 01f2 3383      		std Z+3,r19
 435 01f4 2283      		std Z+2,r18
 436 01f6 8483      		std Z+4,r24
 437 01f8 1582      		std Z+5,__zero_reg__
 438 01fa 0E94 0000 		call printf
 439 01fe EDB7      		in r30,__SP_L__
 440 0200 FEB7      		in r31,__SP_H__
 441 0202 3696      		adiw r30,6
 442 0204 0FB6      		in __tmp_reg__,__SREG__
 443 0206 F894      		cli
 444 0208 FEBF      		out __SP_H__,r31
 445 020a 0FBE      		out __SREG__,__tmp_reg__
 446 020c EDBF      		out __SP_L__,r30
 447 020e 00E0      		ldi r16,lo8(0)
 448 0210 10E0      		ldi r17,hi8(0)
 449 0212 F0E0      		ldi r31,lo8(.LC2)
 450 0214 EF2E      		mov r14,r31
 451 0216 F0E0      		ldi r31,hi8(.LC2)
 452 0218 FF2E      		mov r15,r31
 453 021a C2E0      		ldi r28,lo8(2)
 454 021c D0E0      		ldi r29,hi8(2)
 455 021e E0E0      		ldi r30,lo8(.LC3)
 456 0220 CE2E      		mov r12,r30
 457 0222 E0E0      		ldi r30,hi8(.LC3)
 458 0224 DE2E      		mov r13,r30
 459 0226 70E0      		ldi r23,lo8(.LC5)
 460 0228 A72E      		mov r10,r23
 461 022a 70E0      		ldi r23,hi8(.LC5)
 462 022c B72E      		mov r11,r23
 463 022e 60E0      		ldi r22,lo8(.LC6)
 464 0230 862E      		mov r8,r22
 465 0232 60E0      		ldi r22,hi8(.LC6)
 466 0234 962E      		mov r9,r22
 467 0236 50E0      		ldi r21,lo8(.LC7)
 468 0238 652E      		mov r6,r21
 469 023a 50E0      		ldi r21,hi8(.LC7)
 470 023c 752E      		mov r7,r21
 471               	.L8:
  90:main.c        **** TASK(2, 3, 0.5);
 473               	.LM9:
 474 023e 00D0      		rcall .
 475 0240 00D0      		rcall .
 476 0242 00D0      		rcall .
 477 0244 EDB7      		in r30,__SP_L__
 478 0246 FEB7      		in r31,__SP_H__
 479 0248 3196      		adiw r30,1
 480 024a ADB7      		in r26,__SP_L__
 481 024c BEB7      		in r27,__SP_H__
 482 024e 1296      		adiw r26,1+1
 483 0250 FC92      		st X,r15
 484 0252 EE92      		st -X,r14
 485 0254 1197      		sbiw r26,1
 486 0256 D383      		std Z+3,r29
 487 0258 C283      		std Z+2,r28
 488 025a 1583      		std Z+5,r17
 489 025c 0483      		std Z+4,r16
 490 025e 0E94 0000 		call printf
 491 0262 0F90      		pop __tmp_reg__
 492 0264 0F90      		pop __tmp_reg__
 493 0266 EDB7      		in r30,__SP_L__
 494 0268 FEB7      		in r31,__SP_H__
 495 026a D282      		std Z+2,r13
 496 026c C182      		std Z+1,r12
 497 026e D483      		std Z+4,r29
 498 0270 C383      		std Z+3,r28
 499 0272 0E94 0000 		call printf
 500 0276 0F90      		pop __tmp_reg__
 501 0278 0F90      		pop __tmp_reg__
 502 027a 0F90      		pop __tmp_reg__
 503 027c 0F90      		pop __tmp_reg__
 504 027e 8091 0000 		lds r24,my_semaphore
 505 0282 9091 0000 		lds r25,my_semaphore+1
 506 0286 0E94 0000 		call nrk_sem_pend
 507 028a 8F3F      		cpi r24,lo8(-1)
 508 028c 01F4      		brne .L6
  90:main.c        **** TASK(2, 3, 0.5);
 510               	.LM10:
 511 028e 80E0      		ldi r24,lo8(.LC4)
 512 0290 90E0      		ldi r25,hi8(.LC4)
 513 0292 0E94 0000 		call puts
 514               	.L6:
  90:main.c        **** TASK(2, 3, 0.5);
 516               	.LM11:
 517 0296 00D0      		rcall .
 518 0298 00D0      		rcall .
 519 029a ADB7      		in r26,__SP_L__
 520 029c BEB7      		in r27,__SP_H__
 521 029e 1296      		adiw r26,1+1
 522 02a0 BC92      		st X,r11
 523 02a2 AE92      		st -X,r10
 524 02a4 1197      		sbiw r26,1
 525 02a6 1496      		adiw r26,3+1
 526 02a8 DC93      		st X,r29
 527 02aa CE93      		st -X,r28
 528 02ac 1397      		sbiw r26,3
 529 02ae 0E94 0000 		call printf
 530 02b2 0F90      		pop __tmp_reg__
 531 02b4 0F90      		pop __tmp_reg__
 532 02b6 0F90      		pop __tmp_reg__
 533 02b8 0F90      		pop __tmp_reg__
 534 02ba 8091 0000 		lds r24,my_semaphore
 535 02be 9091 0000 		lds r25,my_semaphore+1
 536 02c2 0E94 0000 		call nrk_sem_post
 537 02c6 8F3F      		cpi r24,lo8(-1)
 538 02c8 01F4      		brne .L7
  90:main.c        **** TASK(2, 3, 0.5);
 540               	.LM12:
 541 02ca 00D0      		rcall .
 542 02cc 00D0      		rcall .
 543 02ce EDB7      		in r30,__SP_L__
 544 02d0 FEB7      		in r31,__SP_H__
 545 02d2 9282      		std Z+2,r9
 546 02d4 8182      		std Z+1,r8
 547 02d6 D483      		std Z+4,r29
 548 02d8 C383      		std Z+3,r28
 549 02da 0E94 0000 		call printf
 550 02de 0F90      		pop __tmp_reg__
 551 02e0 0F90      		pop __tmp_reg__
 552 02e2 0F90      		pop __tmp_reg__
 553 02e4 0F90      		pop __tmp_reg__
 554               	.L7:
  90:main.c        **** TASK(2, 3, 0.5);
 556               	.LM13:
 557 02e6 00D0      		rcall .
 558 02e8 00D0      		rcall .
 559 02ea ADB7      		in r26,__SP_L__
 560 02ec BEB7      		in r27,__SP_H__
 561 02ee 1296      		adiw r26,1+1
 562 02f0 7C92      		st X,r7
 563 02f2 6E92      		st -X,r6
 564 02f4 1197      		sbiw r26,1
 565 02f6 1496      		adiw r26,3+1
 566 02f8 DC93      		st X,r29
 567 02fa CE93      		st -X,r28
 568 02fc 1397      		sbiw r26,3
 569 02fe 0E94 0000 		call printf
 570 0302 0F90      		pop __tmp_reg__
 571 0304 0F90      		pop __tmp_reg__
 572 0306 0F90      		pop __tmp_reg__
 573 0308 0F90      		pop __tmp_reg__
 574 030a 0E94 0000 		call nrk_wait_until_next_period
 575 030e 0F5F      		subi r16,lo8(-(1))
 576 0310 1F4F      		sbci r17,hi8(-(1))
 577 0312 00C0      		rjmp .L8
 582               	.Lscope2:
 584               		.stabd	78,0,0
 586               	.global	task_1_activity
 588               	task_1_activity:
 589               		.stabd	46,0,0
  89:main.c        **** TASK(1, 2, 0.5);
 591               	.LM14:
 592               	.LFBB3:
 593 0314 6F92      		push r6
 594 0316 7F92      		push r7
 595 0318 8F92      		push r8
 596 031a 9F92      		push r9
 597 031c AF92      		push r10
 598 031e BF92      		push r11
 599 0320 CF92      		push r12
 600 0322 DF92      		push r13
 601 0324 EF92      		push r14
 602 0326 FF92      		push r15
 603 0328 0F93      		push r16
 604 032a 1F93      		push r17
 605 032c CF93      		push r28
 606 032e DF93      		push r29
 607               	/* prologue: function */
 608               	/* frame size = 0 */
 609               	/* stack size = 14 */
 610               	.L__stack_usage = 14
  89:main.c        **** TASK(1, 2, 0.5);
 612               	.LM15:
 613 0330 00D0      		rcall .
 614 0332 00D0      		rcall .
 615 0334 80E0      		ldi r24,lo8(.LC0)
 616 0336 90E0      		ldi r25,hi8(.LC0)
 617 0338 ADB7      		in r26,__SP_L__
 618 033a BEB7      		in r27,__SP_H__
 619 033c 1296      		adiw r26,1+1
 620 033e 9C93      		st X,r25
 621 0340 8E93      		st -X,r24
 622 0342 1197      		sbiw r26,1
 623 0344 1496      		adiw r26,3+1
 624 0346 1C92      		st X,__zero_reg__
 625 0348 1E92      		st -X,__zero_reg__
 626 034a 1397      		sbiw r26,3
 627 034c 0E94 0000 		call printf
 628 0350 0F90      		pop __tmp_reg__
 629 0352 0F90      		pop __tmp_reg__
 630 0354 0F90      		pop __tmp_reg__
 631 0356 0F90      		pop __tmp_reg__
 632 0358 0E94 0000 		call nrk_get_pid
 633 035c 00D0      		rcall .
 634 035e 00D0      		rcall .
 635 0360 00D0      		rcall .
 636 0362 EDB7      		in r30,__SP_L__
 637 0364 FEB7      		in r31,__SP_H__
 638 0366 3196      		adiw r30,1
 639 0368 20E0      		ldi r18,lo8(.LC1)
 640 036a 30E0      		ldi r19,hi8(.LC1)
 641 036c ADB7      		in r26,__SP_L__
 642 036e BEB7      		in r27,__SP_H__
 643 0370 1296      		adiw r26,1+1
 644 0372 3C93      		st X,r19
 645 0374 2E93      		st -X,r18
 646 0376 1197      		sbiw r26,1
 647 0378 21E0      		ldi r18,lo8(1)
 648 037a 30E0      		ldi r19,hi8(1)
 649 037c 3383      		std Z+3,r19
 650 037e 2283      		std Z+2,r18
 651 0380 8483      		std Z+4,r24
 652 0382 1582      		std Z+5,__zero_reg__
 653 0384 0E94 0000 		call printf
 654 0388 EDB7      		in r30,__SP_L__
 655 038a FEB7      		in r31,__SP_H__
 656 038c 3696      		adiw r30,6
 657 038e 0FB6      		in __tmp_reg__,__SREG__
 658 0390 F894      		cli
 659 0392 FEBF      		out __SP_H__,r31
 660 0394 0FBE      		out __SREG__,__tmp_reg__
 661 0396 EDBF      		out __SP_L__,r30
 662 0398 00E0      		ldi r16,lo8(0)
 663 039a 10E0      		ldi r17,hi8(0)
 664 039c 20E0      		ldi r18,lo8(.LC2)
 665 039e E22E      		mov r14,r18
 666 03a0 20E0      		ldi r18,hi8(.LC2)
 667 03a2 F22E      		mov r15,r18
 668 03a4 C1E0      		ldi r28,lo8(1)
 669 03a6 D0E0      		ldi r29,hi8(1)
 670 03a8 90E0      		ldi r25,lo8(.LC3)
 671 03aa C92E      		mov r12,r25
 672 03ac 90E0      		ldi r25,hi8(.LC3)
 673 03ae D92E      		mov r13,r25
 674 03b0 80E0      		ldi r24,lo8(.LC5)
 675 03b2 A82E      		mov r10,r24
 676 03b4 80E0      		ldi r24,hi8(.LC5)
 677 03b6 B82E      		mov r11,r24
 678 03b8 B0E0      		ldi r27,lo8(.LC6)
 679 03ba 8B2E      		mov r8,r27
 680 03bc B0E0      		ldi r27,hi8(.LC6)
 681 03be 9B2E      		mov r9,r27
 682 03c0 A0E0      		ldi r26,lo8(.LC7)
 683 03c2 6A2E      		mov r6,r26
 684 03c4 A0E0      		ldi r26,hi8(.LC7)
 685 03c6 7A2E      		mov r7,r26
 686               	.L12:
  89:main.c        **** TASK(1, 2, 0.5);
 688               	.LM16:
 689 03c8 00D0      		rcall .
 690 03ca 00D0      		rcall .
 691 03cc 00D0      		rcall .
 692 03ce EDB7      		in r30,__SP_L__
 693 03d0 FEB7      		in r31,__SP_H__
 694 03d2 3196      		adiw r30,1
 695 03d4 ADB7      		in r26,__SP_L__
 696 03d6 BEB7      		in r27,__SP_H__
 697 03d8 1296      		adiw r26,1+1
 698 03da FC92      		st X,r15
 699 03dc EE92      		st -X,r14
 700 03de 1197      		sbiw r26,1
 701 03e0 D383      		std Z+3,r29
 702 03e2 C283      		std Z+2,r28
 703 03e4 1583      		std Z+5,r17
 704 03e6 0483      		std Z+4,r16
 705 03e8 0E94 0000 		call printf
 706 03ec 0F90      		pop __tmp_reg__
 707 03ee 0F90      		pop __tmp_reg__
 708 03f0 EDB7      		in r30,__SP_L__
 709 03f2 FEB7      		in r31,__SP_H__
 710 03f4 D282      		std Z+2,r13
 711 03f6 C182      		std Z+1,r12
 712 03f8 D483      		std Z+4,r29
 713 03fa C383      		std Z+3,r28
 714 03fc 0E94 0000 		call printf
 715 0400 0F90      		pop __tmp_reg__
 716 0402 0F90      		pop __tmp_reg__
 717 0404 0F90      		pop __tmp_reg__
 718 0406 0F90      		pop __tmp_reg__
 719 0408 8091 0000 		lds r24,my_semaphore
 720 040c 9091 0000 		lds r25,my_semaphore+1
 721 0410 0E94 0000 		call nrk_sem_pend
 722 0414 8F3F      		cpi r24,lo8(-1)
 723 0416 01F4      		brne .L10
  89:main.c        **** TASK(1, 2, 0.5);
 725               	.LM17:
 726 0418 80E0      		ldi r24,lo8(.LC4)
 727 041a 90E0      		ldi r25,hi8(.LC4)
 728 041c 0E94 0000 		call puts
 729               	.L10:
  89:main.c        **** TASK(1, 2, 0.5);
 731               	.LM18:
 732 0420 00D0      		rcall .
 733 0422 00D0      		rcall .
 734 0424 ADB7      		in r26,__SP_L__
 735 0426 BEB7      		in r27,__SP_H__
 736 0428 1296      		adiw r26,1+1
 737 042a BC92      		st X,r11
 738 042c AE92      		st -X,r10
 739 042e 1197      		sbiw r26,1
 740 0430 1496      		adiw r26,3+1
 741 0432 DC93      		st X,r29
 742 0434 CE93      		st -X,r28
 743 0436 1397      		sbiw r26,3
 744 0438 0E94 0000 		call printf
 745 043c 0F90      		pop __tmp_reg__
 746 043e 0F90      		pop __tmp_reg__
 747 0440 0F90      		pop __tmp_reg__
 748 0442 0F90      		pop __tmp_reg__
 749 0444 8091 0000 		lds r24,my_semaphore
 750 0448 9091 0000 		lds r25,my_semaphore+1
 751 044c 0E94 0000 		call nrk_sem_post
 752 0450 8F3F      		cpi r24,lo8(-1)
 753 0452 01F4      		brne .L11
  89:main.c        **** TASK(1, 2, 0.5);
 755               	.LM19:
 756 0454 00D0      		rcall .
 757 0456 00D0      		rcall .
 758 0458 EDB7      		in r30,__SP_L__
 759 045a FEB7      		in r31,__SP_H__
 760 045c 9282      		std Z+2,r9
 761 045e 8182      		std Z+1,r8
 762 0460 D483      		std Z+4,r29
 763 0462 C383      		std Z+3,r28
 764 0464 0E94 0000 		call printf
 765 0468 0F90      		pop __tmp_reg__
 766 046a 0F90      		pop __tmp_reg__
 767 046c 0F90      		pop __tmp_reg__
 768 046e 0F90      		pop __tmp_reg__
 769               	.L11:
  89:main.c        **** TASK(1, 2, 0.5);
 771               	.LM20:
 772 0470 00D0      		rcall .
 773 0472 00D0      		rcall .
 774 0474 ADB7      		in r26,__SP_L__
 775 0476 BEB7      		in r27,__SP_H__
 776 0478 1296      		adiw r26,1+1
 777 047a 7C92      		st X,r7
 778 047c 6E92      		st -X,r6
 779 047e 1197      		sbiw r26,1
 780 0480 1496      		adiw r26,3+1
 781 0482 DC93      		st X,r29
 782 0484 CE93      		st -X,r28
 783 0486 1397      		sbiw r26,3
 784 0488 0E94 0000 		call printf
 785 048c 0F90      		pop __tmp_reg__
 786 048e 0F90      		pop __tmp_reg__
 787 0490 0F90      		pop __tmp_reg__
 788 0492 0F90      		pop __tmp_reg__
 789 0494 0E94 0000 		call nrk_wait_until_next_period
 790 0498 0F5F      		subi r16,lo8(-(1))
 791 049a 1F4F      		sbci r17,hi8(-(1))
 792 049c 00C0      		rjmp .L12
 797               	.Lscope3:
 799               		.stabd	78,0,0
 800               		.data
 801               	.LC8:
 802 00cf 5374 6172 		.string	"Starting up...\r"
 802      7469 6E67 
 802      2075 702E 
 802      2E2E 0D00 
 803               		.text
 805               	.global	main
 807               	main:
 808               		.stabd	46,0,0
  92:main.c        **** 
  93:main.c        **** int main ()
  94:main.c        **** {
 810               	.LM21:
 811               	.LFBB4:
 812 049e 1F93      		push r17
 813               	/* prologue: function */
 814               	/* frame size = 0 */
 815               	/* stack size = 1 */
 816               	.L__stack_usage = 1
  95:main.c        ****     nrk_setup_ports();
 818               	.LM22:
 819 04a0 0E94 0000 		call nrk_setup_ports
  96:main.c        ****     nrk_setup_uart(UART_BAUDRATE_115K2);
 821               	.LM23:
 822 04a4 87E0      		ldi r24,lo8(7)
 823 04a6 90E0      		ldi r25,hi8(7)
 824 04a8 0E94 0000 		call nrk_setup_uart
  97:main.c        **** 
  98:main.c        ****     printf( "Starting up...\r\n" );
 826               	.LM24:
 827 04ac 80E0      		ldi r24,lo8(.LC8)
 828 04ae 90E0      		ldi r25,hi8(.LC8)
 829 04b0 0E94 0000 		call puts
  99:main.c        **** 
 100:main.c        ****     nrk_init();
 831               	.LM25:
 832 04b4 0E94 0000 		call nrk_init
 101:main.c        **** 
 102:main.c        ****     nrk_time_set(0,0);
 834               	.LM26:
 835 04b8 60E0      		ldi r22,lo8(0)
 836 04ba 70E0      		ldi r23,hi8(0)
 837 04bc CB01      		movw r24,r22
 838 04be 20E0      		ldi r18,lo8(0)
 839 04c0 30E0      		ldi r19,hi8(0)
 840 04c2 A901      		movw r20,r18
 841 04c4 0E94 0000 		call nrk_time_set
 103:main.c        **** 
 104:main.c        ****     //Initialize tasks 
 105:main.c        ****     INITIALIZE_TASK(1, 3);
 843               	.LM27:
 844 04c8 11E0      		ldi r17,lo8(1)
 845 04ca 1093 0000 		sts task_1+7,r17
 846 04ce 80E0      		ldi r24,lo8(stack_1+128)
 847 04d0 90E0      		ldi r25,hi8(stack_1+128)
 848 04d2 9093 0000 		sts task_1+1+1,r25
 849 04d6 8093 0000 		sts task_1+1,r24
 850 04da 80E0      		ldi r24,lo8(stack_1)
 851 04dc 90E0      		ldi r25,hi8(stack_1)
 852 04de 9093 0000 		sts task_1+3+1,r25
 853 04e2 8093 0000 		sts task_1+3,r24
 854 04e6 1093 0000 		sts task_1+9,r17
 855 04ea 80E0      		ldi r24,lo8(gs(task_1_activity))
 856 04ec 90E0      		ldi r25,hi8(gs(task_1_activity))
 857 04ee 9093 0000 		sts task_1+5+1,r25
 858 04f2 8093 0000 		sts task_1+5,r24
 859 04f6 82E0      		ldi r24,lo8(2)
 860 04f8 8093 0000 		sts task_1+8,r24
 861 04fc 1093 0000 		sts task_1+10,r17
 862 0500 8091 0000 		lds r24,task_1_period
 863 0504 9091 0000 		lds r25,task_1_period+1
 864 0508 A091 0000 		lds r26,task_1_period+2
 865 050c B091 0000 		lds r27,task_1_period+3
 866 0510 8093 0000 		sts task_1+11,r24
 867 0514 9093 0000 		sts task_1+11+1,r25
 868 0518 A093 0000 		sts task_1+11+2,r26
 869 051c B093 0000 		sts task_1+11+3,r27
 870 0520 1092 0000 		sts task_1+15,__zero_reg__
 871 0524 1092 0000 		sts task_1+15+1,__zero_reg__
 872 0528 1092 0000 		sts task_1+15+2,__zero_reg__
 873 052c 1092 0000 		sts task_1+15+3,__zero_reg__
 874 0530 8091 0000 		lds r24,task_1_execution
 875 0534 9091 0000 		lds r25,task_1_execution+1
 876 0538 A091 0000 		lds r26,task_1_execution+2
 877 053c B091 0000 		lds r27,task_1_execution+3
 878 0540 8093 0000 		sts task_1+19,r24
 879 0544 9093 0000 		sts task_1+19+1,r25
 880 0548 A093 0000 		sts task_1+19+2,r26
 881 054c B093 0000 		sts task_1+19+3,r27
 882 0550 1092 0000 		sts task_1+23,__zero_reg__
 883 0554 1092 0000 		sts task_1+23+1,__zero_reg__
 884 0558 1092 0000 		sts task_1+23+2,__zero_reg__
 885 055c 1092 0000 		sts task_1+23+3,__zero_reg__
 886 0560 1092 0000 		sts task_1+27,__zero_reg__
 887 0564 1092 0000 		sts task_1+27+1,__zero_reg__
 888 0568 1092 0000 		sts task_1+27+2,__zero_reg__
 889 056c 1092 0000 		sts task_1+27+3,__zero_reg__
 890 0570 1092 0000 		sts task_1+31,__zero_reg__
 891 0574 1092 0000 		sts task_1+31+1,__zero_reg__
 892 0578 1092 0000 		sts task_1+31+2,__zero_reg__
 893 057c 1092 0000 		sts task_1+31+3,__zero_reg__
 894 0580 80E0      		ldi r24,lo8(task_1)
 895 0582 90E0      		ldi r25,hi8(task_1)
 896 0584 0E94 0000 		call nrk_activate_task
 106:main.c        ****     INITIALIZE_TASK(2, 3);
 898               	.LM28:
 899 0588 1093 0000 		sts task_2+7,r17
 900 058c 80E0      		ldi r24,lo8(stack_2+128)
 901 058e 90E0      		ldi r25,hi8(stack_2+128)
 902 0590 9093 0000 		sts task_2+1+1,r25
 903 0594 8093 0000 		sts task_2+1,r24
 904 0598 80E0      		ldi r24,lo8(stack_2)
 905 059a 90E0      		ldi r25,hi8(stack_2)
 906 059c 9093 0000 		sts task_2+3+1,r25
 907 05a0 8093 0000 		sts task_2+3,r24
 908 05a4 1093 0000 		sts task_2+9,r17
 909 05a8 80E0      		ldi r24,lo8(gs(task_2_activity))
 910 05aa 90E0      		ldi r25,hi8(gs(task_2_activity))
 911 05ac 9093 0000 		sts task_2+5+1,r25
 912 05b0 8093 0000 		sts task_2+5,r24
 913 05b4 1093 0000 		sts task_2+8,r17
 914 05b8 1093 0000 		sts task_2+10,r17
 915 05bc 8091 0000 		lds r24,task_2_period
 916 05c0 9091 0000 		lds r25,task_2_period+1
 917 05c4 A091 0000 		lds r26,task_2_period+2
 918 05c8 B091 0000 		lds r27,task_2_period+3
 919 05cc 8093 0000 		sts task_2+11,r24
 920 05d0 9093 0000 		sts task_2+11+1,r25
 921 05d4 A093 0000 		sts task_2+11+2,r26
 922 05d8 B093 0000 		sts task_2+11+3,r27
 923 05dc 1092 0000 		sts task_2+15,__zero_reg__
 924 05e0 1092 0000 		sts task_2+15+1,__zero_reg__
 925 05e4 1092 0000 		sts task_2+15+2,__zero_reg__
 926 05e8 1092 0000 		sts task_2+15+3,__zero_reg__
 927 05ec 8091 0000 		lds r24,task_2_execution
 928 05f0 9091 0000 		lds r25,task_2_execution+1
 929 05f4 A091 0000 		lds r26,task_2_execution+2
 930 05f8 B091 0000 		lds r27,task_2_execution+3
 931 05fc 8093 0000 		sts task_2+19,r24
 932 0600 9093 0000 		sts task_2+19+1,r25
 933 0604 A093 0000 		sts task_2+19+2,r26
 934 0608 B093 0000 		sts task_2+19+3,r27
 935 060c 1092 0000 		sts task_2+23,__zero_reg__
 936 0610 1092 0000 		sts task_2+23+1,__zero_reg__
 937 0614 1092 0000 		sts task_2+23+2,__zero_reg__
 938 0618 1092 0000 		sts task_2+23+3,__zero_reg__
 939 061c 1092 0000 		sts task_2+27,__zero_reg__
 940 0620 1092 0000 		sts task_2+27+1,__zero_reg__
 941 0624 1092 0000 		sts task_2+27+2,__zero_reg__
 942 0628 1092 0000 		sts task_2+27+3,__zero_reg__
 943 062c 1092 0000 		sts task_2+31,__zero_reg__
 944 0630 1092 0000 		sts task_2+31+1,__zero_reg__
 945 0634 1092 0000 		sts task_2+31+2,__zero_reg__
 946 0638 1092 0000 		sts task_2+31+3,__zero_reg__
 947 063c 80E0      		ldi r24,lo8(task_2)
 948 063e 90E0      		ldi r25,hi8(task_2)
 949 0640 0E94 0000 		call nrk_activate_task
 107:main.c        ****     INITIALIZE_TASK(3, 3);
 951               	.LM29:
 952 0644 1093 0000 		sts task_3+7,r17
 953 0648 80E0      		ldi r24,lo8(stack_3+128)
 954 064a 90E0      		ldi r25,hi8(stack_3+128)
 955 064c 9093 0000 		sts task_3+1+1,r25
 956 0650 8093 0000 		sts task_3+1,r24
 957 0654 80E0      		ldi r24,lo8(stack_3)
 958 0656 90E0      		ldi r25,hi8(stack_3)
 959 0658 9093 0000 		sts task_3+3+1,r25
 960 065c 8093 0000 		sts task_3+3,r24
 961 0660 1093 0000 		sts task_3+9,r17
 962 0664 80E0      		ldi r24,lo8(gs(task_3_activity))
 963 0666 90E0      		ldi r25,hi8(gs(task_3_activity))
 964 0668 9093 0000 		sts task_3+5+1,r25
 965 066c 8093 0000 		sts task_3+5,r24
 966 0670 1092 0000 		sts task_3+8,__zero_reg__
 967 0674 1093 0000 		sts task_3+10,r17
 968 0678 8091 0000 		lds r24,task_3_period
 969 067c 9091 0000 		lds r25,task_3_period+1
 970 0680 A091 0000 		lds r26,task_3_period+2
 971 0684 B091 0000 		lds r27,task_3_period+3
 972 0688 8093 0000 		sts task_3+11,r24
 973 068c 9093 0000 		sts task_3+11+1,r25
 974 0690 A093 0000 		sts task_3+11+2,r26
 975 0694 B093 0000 		sts task_3+11+3,r27
 976 0698 1092 0000 		sts task_3+15,__zero_reg__
 977 069c 1092 0000 		sts task_3+15+1,__zero_reg__
 978 06a0 1092 0000 		sts task_3+15+2,__zero_reg__
 979 06a4 1092 0000 		sts task_3+15+3,__zero_reg__
 980 06a8 8091 0000 		lds r24,task_3_execution
 981 06ac 9091 0000 		lds r25,task_3_execution+1
 982 06b0 A091 0000 		lds r26,task_3_execution+2
 983 06b4 B091 0000 		lds r27,task_3_execution+3
 984 06b8 8093 0000 		sts task_3+19,r24
 985 06bc 9093 0000 		sts task_3+19+1,r25
 986 06c0 A093 0000 		sts task_3+19+2,r26
 987 06c4 B093 0000 		sts task_3+19+3,r27
 988 06c8 1092 0000 		sts task_3+23,__zero_reg__
 989 06cc 1092 0000 		sts task_3+23+1,__zero_reg__
 990 06d0 1092 0000 		sts task_3+23+2,__zero_reg__
 991 06d4 1092 0000 		sts task_3+23+3,__zero_reg__
 992 06d8 1092 0000 		sts task_3+27,__zero_reg__
 993 06dc 1092 0000 		sts task_3+27+1,__zero_reg__
 994 06e0 1092 0000 		sts task_3+27+2,__zero_reg__
 995 06e4 1092 0000 		sts task_3+27+3,__zero_reg__
 996 06e8 1092 0000 		sts task_3+31,__zero_reg__
 997 06ec 1092 0000 		sts task_3+31+1,__zero_reg__
 998 06f0 1092 0000 		sts task_3+31+2,__zero_reg__
 999 06f4 1092 0000 		sts task_3+31+3,__zero_reg__
 1000 06f8 80E0      		ldi r24,lo8(task_3)
 1001 06fa 90E0      		ldi r25,hi8(task_3)
 1002 06fc 0E94 0000 		call nrk_activate_task
 108:main.c        ****     	
 109:main.c        ****     //instead of passing the ceiling priority, the task with the shortest period that accesses the 
 110:main.c        ****     //in this case, task1 which has a period 350*NANOS_PER_MS
 111:main.c        ****     my_semaphore = nrk_sem_create(1, 2);
 1004               	.LM30:
 1005 0700 81E0      		ldi r24,lo8(1)
 1006 0702 62E0      		ldi r22,lo8(2)
 1007 0704 0E94 0000 		call nrk_sem_create
 1008 0708 9093 0000 		sts my_semaphore+1,r25
 1009 070c 8093 0000 		sts my_semaphore,r24
 112:main.c        ****     if(my_semaphore==NULL) nrk_kprintf( PSTR("Error creating sem\r\n" ));
 1011               	.LM31:
 1012 0710 0097      		sbiw r24,0
 1013 0712 01F4      		brne .L14
 1015               	.LM32:
 1016 0714 80E0      		ldi r24,lo8(__c.2130)
 1017 0716 90E0      		ldi r25,hi8(__c.2130)
 1018 0718 0E94 0000 		call nrk_kprintf
 1019               	.L14:
 113:main.c        ****     nrk_start();
 1021               	.LM33:
 1022 071c 0E94 0000 		call nrk_start
 114:main.c        **** 
 115:main.c        ****     return 0;
 116:main.c        **** }
 1024               	.LM34:
 1025 0720 80E0      		ldi r24,lo8(0)
 1026 0722 90E0      		ldi r25,hi8(0)
 1027               	/* epilogue start */
 1028 0724 1F91      		pop r17
 1029 0726 0895      		ret
 1031               	.Lscope4:
 1033               		.stabd	78,0,0
 1034               	.global	task_1_period
 1035               		.data
 1038               	task_1_period:
 1039 00df 02        		.byte	2
 1040 00e0 00        		.byte	0
 1041 00e1 00        		.byte	0
 1042 00e2 00        		.byte	0
 1043               	.global	task_1_execution
 1044               	.global	task_1_execution
 1045               		.section .bss
 1048               	task_1_execution:
 1049 0000 0000 0000 		.skip 4,0
 1050               	.global	task_2_period
 1051               		.data
 1054               	task_2_period:
 1055 00e3 03        		.byte	3
 1056 00e4 00        		.byte	0
 1057 00e5 00        		.byte	0
 1058 00e6 00        		.byte	0
 1059               	.global	task_2_execution
 1060               	.global	task_2_execution
 1061               		.section .bss
 1064               	task_2_execution:
 1065 0004 0000 0000 		.skip 4,0
 1066               	.global	task_3_period
 1067               		.data
 1070               	task_3_period:
 1071 00e7 05        		.byte	5
 1072 00e8 00        		.byte	0
 1073 00e9 00        		.byte	0
 1074 00ea 00        		.byte	0
 1075               	.global	task_3_execution
 1076               	.global	task_3_execution
 1077               		.section .bss
 1080               	task_3_execution:
 1081 0008 0000 0000 		.skip 4,0
 1082               		.comm _nrk_signal_list,4,1
 1083               		.comm nrk_idle_task_stk,128,1
 1084               		.comm nrk_kernel_stk_ptr,2,1
 1085               		.comm error_task,1,1
 1086               		.comm error_num,1,1
 1087               		.comm _nrk_prev_timer_val,1,1
 1088               		.comm _nrk_time_trigger,1,1
 1089               		.comm app_timer0_callback,2,1
 1090               		.comm app_timer0_prescale,1,1
 1091               		.comm my_semaphore,2,1
 1092               		.comm stack_1,128,1
 1093               		.comm task_1,35,1
 1094               		.comm stack_2,128,1
 1095               		.comm task_2,35,1
 1096               		.comm stack_3,128,1
 1097               		.comm task_3,35,1
 1098               		.section	.progmem.data,"a",@progbits
 1101               	__c.2130:
 1102 0000 4572 726F 		.string	"Error creating sem\r\n"
 1102      7220 6372 
 1102      6561 7469 
 1102      6E67 2073 
 1102      656D 0D0A 
 1125               		.text
 1127               	.Letext0:
 1128               	.global __do_copy_data
 1129               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccx9Ucb9.s:2      *ABS*:0000003f __SREG__
     /tmp/ccx9Ucb9.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccx9Ucb9.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccx9Ucb9.s:5      *ABS*:00000034 __CCP__
     /tmp/ccx9Ucb9.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccx9Ucb9.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccx9Ucb9.s:158    .text:00000000 task_3_activity
                            *COM*:00000002 my_semaphore
     /tmp/ccx9Ucb9.s:373    .text:0000018a task_2_activity
     /tmp/ccx9Ucb9.s:588    .text:00000314 task_1_activity
     /tmp/ccx9Ucb9.s:807    .text:0000049e main
                            *COM*:00000023 task_1
                            *COM*:00000080 stack_1
     /tmp/ccx9Ucb9.s:1038   .data:000000df task_1_period
     /tmp/ccx9Ucb9.s:1048   .bss:00000000 task_1_execution
                            *COM*:00000023 task_2
                            *COM*:00000080 stack_2
     /tmp/ccx9Ucb9.s:1054   .data:000000e3 task_2_period
     /tmp/ccx9Ucb9.s:1064   .bss:00000004 task_2_execution
                            *COM*:00000023 task_3
                            *COM*:00000080 stack_3
     /tmp/ccx9Ucb9.s:1070   .data:000000e7 task_3_period
     /tmp/ccx9Ucb9.s:1080   .bss:00000008 task_3_execution
     /tmp/ccx9Ucb9.s:1101   .progmem.data:00000000 __c.2130
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:00000001 _nrk_prev_timer_val
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale

UNDEFINED SYMBOLS
printf
nrk_get_pid
nrk_sem_pend
puts
nrk_sem_post
nrk_wait_until_next_period
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
nrk_activate_task
nrk_sem_create
nrk_kprintf
nrk_start
__do_copy_data
__do_clear_bss
