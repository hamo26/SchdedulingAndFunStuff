   1               		.file	"nrk_task.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 138               	.global	nrk_get_high_ready_task_ID
 140               	nrk_get_high_ready_task_ID:
 141               		.stabd	46,0,0
   1:..//src/kernel/source/nrk_task.c **** /******************************************************************************
   2:..//src/kernel/source/nrk_task.c **** *  Nano-RK, a real-time operating system for sensor networks.
   3:..//src/kernel/source/nrk_task.c **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:..//src/kernel/source/nrk_task.c **** *  All rights reserved.
   5:..//src/kernel/source/nrk_task.c **** *
   6:..//src/kernel/source/nrk_task.c **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:..//src/kernel/source/nrk_task.c **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:..//src/kernel/source/nrk_task.c **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:..//src/kernel/source/nrk_task.c **** *
  10:..//src/kernel/source/nrk_task.c **** *  This program is free software: you can redistribute it and/or modify
  11:..//src/kernel/source/nrk_task.c **** *  it under the terms of the GNU General Public License as published by
  12:..//src/kernel/source/nrk_task.c **** *  the Free Software Foundation, version 2.0 of the License.
  13:..//src/kernel/source/nrk_task.c **** *
  14:..//src/kernel/source/nrk_task.c **** *  This program is distributed in the hope that it will be useful,
  15:..//src/kernel/source/nrk_task.c **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:..//src/kernel/source/nrk_task.c **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:..//src/kernel/source/nrk_task.c **** *  GNU General Public License for more details.
  18:..//src/kernel/source/nrk_task.c **** *
  19:..//src/kernel/source/nrk_task.c **** *  You should have received a copy of the GNU General Public License
  20:..//src/kernel/source/nrk_task.c **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:..//src/kernel/source/nrk_task.c **** *
  22:..//src/kernel/source/nrk_task.c **** *  Contributing Authors (specific to this file):
  23:..//src/kernel/source/nrk_task.c **** *  Anthony Rowe
  24:..//src/kernel/source/nrk_task.c **** *  Zane Starr
  25:..//src/kernel/source/nrk_task.c **** *  Anand Eswaren
  26:..//src/kernel/source/nrk_task.c **** *******************************************************************************/
  27:..//src/kernel/source/nrk_task.c **** 
  28:..//src/kernel/source/nrk_task.c **** #include <nrk.h>
  29:..//src/kernel/source/nrk_task.c **** #include <nrk_task.h>
  30:..//src/kernel/source/nrk_task.c **** #include <include.h>
  31:..//src/kernel/source/nrk_task.c **** #include <ulib.h>
  32:..//src/kernel/source/nrk_task.c **** #include <nrk_timer.h>
  33:..//src/kernel/source/nrk_task.c **** #include <nrk_scheduler.h>
  34:..//src/kernel/source/nrk_task.c **** #include <nrk_error.h>
  35:..//src/kernel/source/nrk_task.c **** #include <nrk_defs.h>
  36:..//src/kernel/source/nrk_task.c **** #include <nrk_stack_check.h>
  37:..//src/kernel/source/nrk_task.c **** 
  38:..//src/kernel/source/nrk_task.c **** //#define TIME_PAD  2
  39:..//src/kernel/source/nrk_task.c **** 
  40:..//src/kernel/source/nrk_task.c **** inline void _nrk_wait_for_scheduler ();
  41:..//src/kernel/source/nrk_task.c **** 
  42:..//src/kernel/source/nrk_task.c **** uint8_t nrk_get_high_ready_task_ID ()
  43:..//src/kernel/source/nrk_task.c **** {
 143               	.LM0:
 144               	.LFBB1:
 145               	/* prologue: function */
 146               	/* frame size = 0 */
 147               	/* stack size = 0 */
 148               	.L__stack_usage = 0
  44:..//src/kernel/source/nrk_task.c **** 	return (_head_node->task_ID);
 150               	.LM1:
 151 0000 E091 0000 		lds r30,_head_node
 152 0004 F091 0000 		lds r31,_head_node+1
  45:..//src/kernel/source/nrk_task.c **** }
 154               	.LM2:
 155 0008 8081      		ld r24,Z
 156               	/* epilogue start */
 157 000a 0895      		ret
 159               	.Lscope1:
 161               		.stabd	78,0,0
 162               		.data
 163               	.LC0:
 164 0000 2564 2000 		.string	"%d "
 165               		.text
 167               	.global	nrk_print_readyQ
 169               	nrk_print_readyQ:
 170               		.stabd	46,0,0
  46:..//src/kernel/source/nrk_task.c **** 
  47:..//src/kernel/source/nrk_task.c **** void nrk_print_readyQ ()
  48:..//src/kernel/source/nrk_task.c **** {
 172               	.LM3:
 173               	.LFBB2:
 174 000c 0F93      		push r16
 175 000e 1F93      		push r17
 176 0010 CF93      		push r28
 177 0012 DF93      		push r29
 178               	/* prologue: function */
 179               	/* frame size = 0 */
 180               	/* stack size = 4 */
 181               	.L__stack_usage = 4
  49:..//src/kernel/source/nrk_task.c **** 	nrk_queue *ptr;
  50:..//src/kernel/source/nrk_task.c **** 	ptr = _head_node;
 183               	.LM4:
 184 0014 C091 0000 		lds r28,_head_node
 185 0018 D091 0000 		lds r29,_head_node+1
  51:..//src/kernel/source/nrk_task.c **** 	nrk_kprintf (PSTR ("nrk_queue: "));
 187               	.LM5:
 188 001c 80E0      		ldi r24,lo8(__c.2128)
 189 001e 90E0      		ldi r25,hi8(__c.2128)
 190 0020 0E94 0000 		call nrk_kprintf
  52:..//src/kernel/source/nrk_task.c **** 	while (ptr != NULL)
  53:..//src/kernel/source/nrk_task.c **** 	{
  54:..//src/kernel/source/nrk_task.c **** 		printf("%d ", &nrk_task_TCB[ptr->task_ID].next_period);
 192               	.LM6:
 193 0024 00E0      		ldi r16,lo8(.LC0)
 194 0026 10E0      		ldi r17,hi8(.LC0)
  52:..//src/kernel/source/nrk_task.c **** 	while (ptr != NULL)
 196               	.LM7:
 197 0028 00C0      		rjmp .L3
 198               	.L4:
 200               	.LM8:
 201 002a 00D0      		rcall .
 202 002c 00D0      		rcall .
 203 002e EDB7      		in r30,__SP_L__
 204 0030 FEB7      		in r31,__SP_H__
 205 0032 1283      		std Z+2,r17
 206 0034 0183      		std Z+1,r16
 207 0036 2881      		ld r18,Y
 208 0038 30E0      		ldi r19,lo8(0)
 209 003a C901      		movw r24,r18
 210 003c 45E0      		ldi r20,5
 211 003e 880F      	1:	lsl r24
 212 0040 991F      		rol r25
 213 0042 4A95      		dec r20
 214 0044 01F4      		brne 1b
 215 0046 820F      		add r24,r18
 216 0048 931F      		adc r25,r19
 217 004a 8050      		subi r24,lo8(-(nrk_task_TCB+23))
 218 004c 9040      		sbci r25,hi8(-(nrk_task_TCB+23))
 219 004e 9483      		std Z+4,r25
 220 0050 8383      		std Z+3,r24
 221 0052 0E94 0000 		call printf
  55:..//src/kernel/source/nrk_task.c **** 		ptr = ptr->Next;
 223               	.LM9:
 224 0056 0B80      		ldd __tmp_reg__,Y+3
 225 0058 DC81      		ldd r29,Y+4
 226 005a C02D      		mov r28,__tmp_reg__
 227 005c 0F90      		pop __tmp_reg__
 228 005e 0F90      		pop __tmp_reg__
 229 0060 0F90      		pop __tmp_reg__
 230 0062 0F90      		pop __tmp_reg__
 231               	.L3:
  52:..//src/kernel/source/nrk_task.c **** 	while (ptr != NULL)
 233               	.LM10:
 234 0064 2097      		sbiw r28,0
 235 0066 01F4      		brne .L4
  56:..//src/kernel/source/nrk_task.c **** 	}
  57:..//src/kernel/source/nrk_task.c **** 	nrk_kprintf (PSTR ("\n\r"));
 237               	.LM11:
 238 0068 80E0      		ldi r24,lo8(__c.2133)
 239 006a 90E0      		ldi r25,hi8(__c.2133)
 240 006c 0E94 0000 		call nrk_kprintf
 241               	/* epilogue start */
  58:..//src/kernel/source/nrk_task.c **** }
 243               	.LM12:
 244 0070 DF91      		pop r29
 245 0072 CF91      		pop r28
 246 0074 1F91      		pop r17
 247 0076 0F91      		pop r16
 248 0078 0895      		ret
 253               	.Lscope2:
 255               		.stabd	78,0,0
 258               	.global	nrk_add_to_readyQ
 260               	nrk_add_to_readyQ:
 261               		.stabd	46,0,0
  59:..//src/kernel/source/nrk_task.c **** 
  60:..//src/kernel/source/nrk_task.c **** 
  61:..//src/kernel/source/nrk_task.c **** void nrk_add_to_readyQ (int8_t task_ID)
  62:..//src/kernel/source/nrk_task.c **** {
 263               	.LM13:
 264               	.LFBB3:
 265 007a DF92      		push r13
 266 007c EF92      		push r14
 267 007e FF92      		push r15
 268 0080 0F93      		push r16
 269 0082 1F93      		push r17
 270 0084 CF93      		push r28
 271 0086 DF93      		push r29
 272               	/* prologue: function */
 273               	/* frame size = 0 */
 274               	/* stack size = 7 */
 275               	.L__stack_usage = 7
  63:..//src/kernel/source/nrk_task.c **** 	//printf("passed in task period: %d\n", &nrk_task_TCB[task_ID].next_period);
  64:..//src/kernel/source/nrk_task.c **** 
  65:..//src/kernel/source/nrk_task.c **** 	nrk_queue *NextNode;
  66:..//src/kernel/source/nrk_task.c **** 	nrk_queue *CurNode;
  67:..//src/kernel/source/nrk_task.c **** 
  68:..//src/kernel/source/nrk_task.c **** 	//printf( "nrk_add_to_readyQ %d\n",task_ID );
  69:..//src/kernel/source/nrk_task.c **** 	//nrk_print_readyQ();
  70:..//src/kernel/source/nrk_task.c **** 	// nrk_queue full
  71:..//src/kernel/source/nrk_task.c **** 	if (_free_node == NULL)
 277               	.LM14:
 278 0088 E091 0000 		lds r30,_free_node
 279 008c F091 0000 		lds r31,_free_node+1
 280 0090 3097      		sbiw r30,0
 281 0092 01F4      		brne .+2
 282 0094 00C0      		rjmp .L5
  72:..//src/kernel/source/nrk_task.c **** 	{
  73:..//src/kernel/source/nrk_task.c **** 		return;
  74:..//src/kernel/source/nrk_task.c **** 	}
  75:..//src/kernel/source/nrk_task.c **** 
  76:..//src/kernel/source/nrk_task.c **** 
  77:..//src/kernel/source/nrk_task.c **** 	NextNode = _head_node;
 284               	.LM15:
 285 0096 4091 0000 		lds r20,_head_node
 286 009a 5091 0000 		lds r21,_head_node+1
  78:..//src/kernel/source/nrk_task.c **** 	CurNode = _free_node;
  79:..//src/kernel/source/nrk_task.c **** 
  80:..//src/kernel/source/nrk_task.c **** 	if (_head_node != NULL)
 288               	.LM16:
 289 009e 4115      		cp r20,__zero_reg__
 290 00a0 5105      		cpc r21,__zero_reg__
 291 00a2 01F4      		brne .+2
 292 00a4 00C0      		rjmp .L15
 293 00a6 DA01      		movw r26,r20
  81:..//src/kernel/source/nrk_task.c **** 	{
  82:..//src/kernel/source/nrk_task.c **** 
  83:..//src/kernel/source/nrk_task.c **** 		while (NextNode != NULL)
  84:..//src/kernel/source/nrk_task.c **** 		{
  85:..//src/kernel/source/nrk_task.c **** #ifdef NRK_EDF
  86:..//src/kernel/source/nrk_task.c **** 			//
  87:..//src/kernel/source/nrk_task.c **** 			//printf("%d\n",&NextNode->task_ID);
  88:..//src/kernel/source/nrk_task.c **** 			//printf("task id: %d", &task_ID);
  89:..//src/kernel/source/nrk_task.c **** 
  90:..//src/kernel/source/nrk_task.c **** 			if (NextNode->task_ID == NRK_IDLE_TASK_ID ||
  91:..//src/kernel/source/nrk_task.c **** 				nrk_task_TCB[NextNode->task_ID].next_period > nrk_task_TCB[task_ID].next_period {break;}	//Smal
  92:..//src/kernel/source/nrk_task.c **** 
  93:..//src/kernel/source/nrk_task.c **** #elseif SRP
  94:..//src/kernel/source/nrk_task.c **** 			if (NextNode->task_ID == NRK_IDLE_TASK_ID ||
  95:..//src/kernel/source/nrk_task.c **** 				(nrk_task_TCB[NextNode->task_ID].next_period > nrk_task_TCB[task_ID].next_period &&
  96:..//src/kernel/source/nrk_task.c **** 				nrk_task_TCB[task_ID].next_period < systemceiling)) {break;}	//Small absolute deadline = larger
  97:..//src/kernel/source/nrk_task.c **** 
  98:..//src/kernel/source/nrk_task.c **** #else
  99:..//src/kernel/source/nrk_task.c **** 			if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
 100:..//src/kernel/source/nrk_task.c **** 				if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
 101:..//src/kernel/source/nrk_task.c **** 					nrk_task_TCB[task_ID].task_prio)
 295               	.LM17:
 296 00a8 682F      		mov r22,r24
 297 00aa 7727      		clr r23
 298 00ac 67FD      		sbrc r22,7
 299 00ae 7095      		com r23
 300 00b0 9B01      		movw r18,r22
 301 00b2 15E0      		ldi r17,5
 302 00b4 220F      	1:	lsl r18
 303 00b6 331F      		rol r19
 304 00b8 1A95      		dec r17
 305 00ba 01F4      		brne 1b
 306 00bc 260F      		add r18,r22
 307 00be 371F      		adc r19,r23
 308 00c0 2050      		subi r18,lo8(-(nrk_task_TCB))
 309 00c2 3040      		sbci r19,hi8(-(nrk_task_TCB))
 310 00c4 B901      		movw r22,r18
 311 00c6 665F      		subi r22,lo8(-(10))
 312 00c8 7F4F      		sbci r23,hi8(-(10))
 102:..//src/kernel/source/nrk_task.c **** 					break;
 103:..//src/kernel/source/nrk_task.c **** 			if (nrk_task_TCB[task_ID].elevated_prio_flag)
 314               	.LM18:
 315 00ca 8901      		movw r16,r18
 316 00cc 0C5F      		subi r16,lo8(-(4))
 317 00ce 1F4F      		sbci r17,hi8(-(4))
 104:..//src/kernel/source/nrk_task.c **** 				if (nrk_task_TCB[NextNode->task_ID].task_prio <
 105:..//src/kernel/source/nrk_task.c **** 					nrk_task_TCB[task_ID].task_prio_ceil)
 319               	.LM19:
 320 00d0 9BE0      		ldi r25,lo8(11)
 321 00d2 E92E      		mov r14,r25
 322 00d4 F12C      		mov r15,__zero_reg__
 323 00d6 E20E      		add r14,r18
 324 00d8 F31E      		adc r15,r19
 325               	.L10:
  99:..//src/kernel/source/nrk_task.c **** 			if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
 327               	.LM20:
 328 00da 2C91      		ld r18,X
 329 00dc 30E0      		ldi r19,lo8(0)
 330 00de E901      		movw r28,r18
 331 00e0 95E0      		ldi r25,5
 332 00e2 CC0F      	1:	lsl r28
 333 00e4 DD1F      		rol r29
 334 00e6 9A95      		dec r25
 335 00e8 01F4      		brne 1b
 336 00ea C20F      		add r28,r18
 337 00ec D31F      		adc r29,r19
 338 00ee C050      		subi r28,lo8(-(nrk_task_TCB))
 339 00f0 D040      		sbci r29,hi8(-(nrk_task_TCB))
 340 00f2 9C81      		ldd r25,Y+4
 341 00f4 9923      		tst r25
 342 00f6 01F0      		breq .L8
 100:..//src/kernel/source/nrk_task.c **** 				if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
 344               	.LM21:
 345 00f8 DB84      		ldd r13,Y+11
 346 00fa EB01      		movw r28,r22
 347 00fc 9881      		ld r25,Y
 348 00fe D916      		cp r13,r25
 349 0100 00F0      		brlo .L7
 350               	.L8:
 103:..//src/kernel/source/nrk_task.c **** 			if (nrk_task_TCB[task_ID].elevated_prio_flag)
 352               	.LM22:
 353 0102 E801      		movw r28,r16
 354 0104 9881      		ld r25,Y
 355 0106 9923      		tst r25
 356 0108 01F0      		breq .L9
 104:..//src/kernel/source/nrk_task.c **** 				if (nrk_task_TCB[NextNode->task_ID].task_prio <
 358               	.LM23:
 359 010a E901      		movw r28,r18
 360 010c 95E0      		ldi r25,5
 361 010e CC0F      	1:	lsl r28
 362 0110 DD1F      		rol r29
 363 0112 9A95      		dec r25
 364 0114 01F4      		brne 1b
 365 0116 C20F      		add r28,r18
 366 0118 D31F      		adc r29,r19
 367 011a C050      		subi r28,lo8(-(nrk_task_TCB))
 368 011c D040      		sbci r29,hi8(-(nrk_task_TCB))
 369 011e DA84      		ldd r13,Y+10
 370 0120 E701      		movw r28,r14
 371 0122 9881      		ld r25,Y
 372 0124 D916      		cp r13,r25
 373 0126 00F0      		brlo .L7
 374               	.L9:
 106:..//src/kernel/source/nrk_task.c **** 					break;
 107:..//src/kernel/source/nrk_task.c **** 			if (nrk_task_TCB[NextNode->task_ID].task_prio <
 376               	.LM24:
 377 0128 E901      		movw r28,r18
 378 012a 95E0      		ldi r25,5
 379 012c CC0F      	1:	lsl r28
 380 012e DD1F      		rol r29
 381 0130 9A95      		dec r25
 382 0132 01F4      		brne 1b
 383 0134 C20F      		add r28,r18
 384 0136 D31F      		adc r29,r19
 385 0138 C050      		subi r28,lo8(-(nrk_task_TCB))
 386 013a D040      		sbci r29,hi8(-(nrk_task_TCB))
 387 013c 2A85      		ldd r18,Y+10
 388 013e EB01      		movw r28,r22
 389 0140 9881      		ld r25,Y
 390 0142 2917      		cp r18,r25
 391 0144 00F0      		brlo .L7
 108:..//src/kernel/source/nrk_task.c **** 				nrk_task_TCB[task_ID].task_prio)
 109:..//src/kernel/source/nrk_task.c **** 				break; 
 110:..//src/kernel/source/nrk_task.c **** #endif    
 111:..//src/kernel/source/nrk_task.c **** 			NextNode = NextNode->Next;
 393               	.LM25:
 394 0146 1396      		adiw r26,3
 395 0148 0D90      		ld __tmp_reg__,X+
 396 014a BC91      		ld r27,X
 397 014c A02D      		mov r26,__tmp_reg__
  83:..//src/kernel/source/nrk_task.c **** 		while (NextNode != NULL)
 399               	.LM26:
 400 014e 1097      		sbiw r26,0
 401 0150 01F4      		brne .L10
 402 0152 00C0      		rjmp .L7
 403               	.L15:
  80:..//src/kernel/source/nrk_task.c **** 	if (_head_node != NULL)
 405               	.LM27:
 406 0154 A0E0      		ldi r26,lo8(0)
 407 0156 B0E0      		ldi r27,hi8(0)
 408               	.L7:
 112:..//src/kernel/source/nrk_task.c **** 		}
 113:..//src/kernel/source/nrk_task.c **** 
 114:..//src/kernel/source/nrk_task.c **** 
 115:..//src/kernel/source/nrk_task.c **** 		//      while ((NextNode != NULL) && ((nrk_task_TCB[NextNode->task_ID].task_prio >= nrk_task_TCB[
 116:..//src/kernel/source/nrk_task.c **** 		//              NextNode = NextNode->Next;}
 117:..//src/kernel/source/nrk_task.c **** 		// Stop if nextNode is freenode or next node less prio or (equal and elevated
 118:..//src/kernel/source/nrk_task.c **** 		// Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
 119:..//src/kernel/source/nrk_task.c **** 		// 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2
 120:..//src/kernel/source/nrk_task.c **** 		//printf("Im out of the while loop.\n");
 121:..//src/kernel/source/nrk_task.c **** 	}
 122:..//src/kernel/source/nrk_task.c **** 
 123:..//src/kernel/source/nrk_task.c **** 	CurNode->task_ID = task_ID;
 410               	.LM28:
 411 0158 8083      		st Z,r24
 124:..//src/kernel/source/nrk_task.c **** 	_free_node = _free_node->Next;
 413               	.LM29:
 414 015a C381      		ldd r28,Z+3
 415 015c D481      		ldd r29,Z+4
 416 015e D093 0000 		sts _free_node+1,r29
 417 0162 C093 0000 		sts _free_node,r28
 125:..//src/kernel/source/nrk_task.c **** 
 126:..//src/kernel/source/nrk_task.c **** 
 127:..//src/kernel/source/nrk_task.c **** 	if (NextNode == _head_node)
 419               	.LM30:
 420 0166 A417      		cp r26,r20
 421 0168 B507      		cpc r27,r21
 422 016a 01F4      		brne .L11
 128:..//src/kernel/source/nrk_task.c **** 	{
 129:..//src/kernel/source/nrk_task.c **** 		//at start
 130:..//src/kernel/source/nrk_task.c **** 		if (_head_node != NULL)
 424               	.LM31:
 425 016c 1097      		sbiw r26,0
 426 016e 01F0      		breq .L12
 131:..//src/kernel/source/nrk_task.c **** 		{
 132:..//src/kernel/source/nrk_task.c **** 			CurNode->Next = _head_node;
 428               	.LM32:
 429 0170 B483      		std Z+4,r27
 430 0172 A383      		std Z+3,r26
 133:..//src/kernel/source/nrk_task.c **** 			CurNode->Prev = NULL;
 432               	.LM33:
 433 0174 1282      		std Z+2,__zero_reg__
 434 0176 1182      		std Z+1,__zero_reg__
 134:..//src/kernel/source/nrk_task.c **** 			_head_node->Prev = CurNode;
 436               	.LM34:
 437 0178 1296      		adiw r26,1+1
 438 017a FC93      		st X,r31
 439 017c EE93      		st -X,r30
 440 017e 1197      		sbiw r26,1
 441 0180 00C0      		rjmp .L13
 442               	.L12:
 135:..//src/kernel/source/nrk_task.c **** 		}
 136:..//src/kernel/source/nrk_task.c **** 		else
 137:..//src/kernel/source/nrk_task.c **** 		{
 138:..//src/kernel/source/nrk_task.c **** 			CurNode->Next = NULL;
 444               	.LM35:
 445 0182 1482      		std Z+4,__zero_reg__
 446 0184 1382      		std Z+3,__zero_reg__
 139:..//src/kernel/source/nrk_task.c **** 			CurNode->Prev = NULL;
 448               	.LM36:
 449 0186 1282      		std Z+2,__zero_reg__
 450 0188 1182      		std Z+1,__zero_reg__
 140:..//src/kernel/source/nrk_task.c **** 			_free_node->Prev = CurNode;
 452               	.LM37:
 453 018a FA83      		std Y+2,r31
 454 018c E983      		std Y+1,r30
 455               	.L13:
 141:..//src/kernel/source/nrk_task.c **** 		}
 142:..//src/kernel/source/nrk_task.c **** 		_head_node = CurNode;
 457               	.LM38:
 458 018e F093 0000 		sts _head_node+1,r31
 459 0192 E093 0000 		sts _head_node,r30
 460 0196 00C0      		rjmp .L5
 461               	.L11:
 462 0198 1196      		adiw r26,1
 463 019a 8D91      		ld r24,X+
 464 019c 9C91      		ld r25,X
 465 019e 1297      		sbiw r26,1+1
 143:..//src/kernel/source/nrk_task.c **** 		//	printf("Fucking head node period: %d\n", &nrk_task_TCB[_head_node->task_ID].next_period);
 144:..//src/kernel/source/nrk_task.c **** 	}
 145:..//src/kernel/source/nrk_task.c **** 	else
 146:..//src/kernel/source/nrk_task.c **** 	{
 147:..//src/kernel/source/nrk_task.c **** 		if (NextNode != _free_node)
 467               	.LM39:
 468 01a0 AC17      		cp r26,r28
 469 01a2 BD07      		cpc r27,r29
 470 01a4 01F0      		breq .L14
 148:..//src/kernel/source/nrk_task.c **** 		{
 149:..//src/kernel/source/nrk_task.c **** 			// Insert  in middle
 150:..//src/kernel/source/nrk_task.c **** 
 151:..//src/kernel/source/nrk_task.c **** 			CurNode->Prev = NextNode->Prev;
 472               	.LM40:
 473 01a6 9283      		std Z+2,r25
 474 01a8 8183      		std Z+1,r24
 152:..//src/kernel/source/nrk_task.c **** 			CurNode->Next = NextNode;
 476               	.LM41:
 477 01aa B483      		std Z+4,r27
 478 01ac A383      		std Z+3,r26
 153:..//src/kernel/source/nrk_task.c **** 			(NextNode->Prev)->Next = CurNode;
 480               	.LM42:
 481 01ae 1196      		adiw r26,1
 482 01b0 CD91      		ld r28,X+
 483 01b2 DC91      		ld r29,X
 484 01b4 1297      		sbiw r26,1+1
 485 01b6 FC83      		std Y+4,r31
 486 01b8 EB83      		std Y+3,r30
 487 01ba 00C0      		rjmp .L17
 488               	.L14:
 154:..//src/kernel/source/nrk_task.c **** 			NextNode->Prev = CurNode;
 155:..//src/kernel/source/nrk_task.c **** 		}
 156:..//src/kernel/source/nrk_task.c **** 		else
 157:..//src/kernel/source/nrk_task.c **** 		{
 158:..//src/kernel/source/nrk_task.c **** 			//insert at end
 159:..//src/kernel/source/nrk_task.c **** 			CurNode->Next = NULL;
 490               	.LM43:
 491 01bc 1482      		std Z+4,__zero_reg__
 492 01be 1382      		std Z+3,__zero_reg__
 160:..//src/kernel/source/nrk_task.c **** 			CurNode->Prev = _free_node->Prev;
 494               	.LM44:
 495 01c0 9283      		std Z+2,r25
 496 01c2 8183      		std Z+1,r24
 497               	.L17:
 161:..//src/kernel/source/nrk_task.c **** 			_free_node->Prev = CurNode;
 499               	.LM45:
 500 01c4 1296      		adiw r26,1+1
 501 01c6 FC93      		st X,r31
 502 01c8 EE93      		st -X,r30
 503 01ca 1197      		sbiw r26,1
 504               	.L5:
 505               	/* epilogue start */
 162:..//src/kernel/source/nrk_task.c **** 		}
 163:..//src/kernel/source/nrk_task.c **** 
 164:..//src/kernel/source/nrk_task.c **** 	}
 165:..//src/kernel/source/nrk_task.c **** 	//nrk_print_readyQ();
 166:..//src/kernel/source/nrk_task.c **** 	//printf("Im out of the method\n");
 167:..//src/kernel/source/nrk_task.c **** 
 168:..//src/kernel/source/nrk_task.c **** }
 507               	.LM46:
 508 01cc DF91      		pop r29
 509 01ce CF91      		pop r28
 510 01d0 1F91      		pop r17
 511 01d2 0F91      		pop r16
 512 01d4 FF90      		pop r15
 513 01d6 EF90      		pop r14
 514 01d8 DF90      		pop r13
 515 01da 0895      		ret
 517               	.Lscope3:
 519               		.stabd	78,0,0
 522               	.global	nrk_rem_from_readyQ
 524               	nrk_rem_from_readyQ:
 525               		.stabd	46,0,0
 169:..//src/kernel/source/nrk_task.c **** 
 170:..//src/kernel/source/nrk_task.c **** 
 171:..//src/kernel/source/nrk_task.c **** void nrk_rem_from_readyQ (int8_t task_ID)
 172:..//src/kernel/source/nrk_task.c **** {
 527               	.LM47:
 528               	.LFBB4:
 529 01dc CF93      		push r28
 530 01de DF93      		push r29
 531               	/* prologue: function */
 532               	/* frame size = 0 */
 533               	/* stack size = 2 */
 534               	.L__stack_usage = 2
 173:..//src/kernel/source/nrk_task.c **** 
 174:..//src/kernel/source/nrk_task.c **** 	nrk_queue *CurNode;
 175:..//src/kernel/source/nrk_task.c **** 	//      nrk_queue       *tempNode;
 176:..//src/kernel/source/nrk_task.c **** 
 177:..//src/kernel/source/nrk_task.c **** 	//return;
 178:..//src/kernel/source/nrk_task.c **** 
 179:..//src/kernel/source/nrk_task.c **** 	/*CurNode = _head_node;
 180:..//src/kernel/source/nrk_task.c **** 
 181:..//src/kernel/source/nrk_task.c **** 	_head_node = _head_node->Next;
 182:..//src/kernel/source/nrk_task.c **** 	_head_node->Prev = NULL;
 183:..//src/kernel/source/nrk_task.c **** 
 184:..//src/kernel/source/nrk_task.c **** 	if (_free_node == NULL)
 185:..//src/kernel/source/nrk_task.c **** 	{
 186:..//src/kernel/source/nrk_task.c **** 	tempNode = _head_node;
 187:..//src/kernel/source/nrk_task.c **** 	while (tempNode->Next!=NULL) tempNode=tempNode->Next;
 188:..//src/kernel/source/nrk_task.c **** 	CurNode->Next = NULL;
 189:..//src/kernel/source/nrk_task.c **** 	CurNode->Prev = tempNode;
 190:..//src/kernel/source/nrk_task.c **** 	tempNode->Next = CurNode;
 191:..//src/kernel/source/nrk_task.c **** 	_free_node = CurNode;
 192:..//src/kernel/source/nrk_task.c **** 	}
 193:..//src/kernel/source/nrk_task.c **** 	else
 194:..//src/kernel/source/nrk_task.c **** 	{
 195:..//src/kernel/source/nrk_task.c **** 	CurNode->Next = _free_node;
 196:..//src/kernel/source/nrk_task.c **** 	_free_node->Prev = CurNode;
 197:..//src/kernel/source/nrk_task.c **** 	_free_node = CurNode;
 198:..//src/kernel/source/nrk_task.c **** 	}
 199:..//src/kernel/source/nrk_task.c **** 	*/
 200:..//src/kernel/source/nrk_task.c **** 
 201:..//src/kernel/source/nrk_task.c **** 	//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);
 202:..//src/kernel/source/nrk_task.c **** 
 203:..//src/kernel/source/nrk_task.c **** 	if (_head_node == NULL)
 536               	.LM48:
 537 01e0 E091 0000 		lds r30,_head_node
 538 01e4 F091 0000 		lds r31,_head_node+1
 539 01e8 3097      		sbiw r30,0
 540 01ea 01F4      		brne .+2
 541 01ec 00C0      		rjmp .L18
 204:..//src/kernel/source/nrk_task.c **** 		return;
 205:..//src/kernel/source/nrk_task.c **** 
 206:..//src/kernel/source/nrk_task.c **** 	CurNode = _head_node;
 207:..//src/kernel/source/nrk_task.c **** 
 208:..//src/kernel/source/nrk_task.c **** 	if (_head_node->task_ID == task_ID)
 543               	.LM49:
 544 01ee 9927      		clr r25
 545 01f0 87FD      		sbrc r24,7
 546 01f2 9095      		com r25
 547 01f4 2081      		ld r18,Z
 548 01f6 30E0      		ldi r19,lo8(0)
 549 01f8 2817      		cp r18,r24
 550 01fa 3907      		cpc r19,r25
 551 01fc 01F4      		brne .L28
 209:..//src/kernel/source/nrk_task.c **** 	{
 210:..//src/kernel/source/nrk_task.c **** 		//REmove from start
 211:..//src/kernel/source/nrk_task.c **** 		_head_node = _head_node->Next;
 553               	.LM50:
 554 01fe A381      		ldd r26,Z+3
 555 0200 B481      		ldd r27,Z+4
 556 0202 B093 0000 		sts _head_node+1,r27
 557 0206 A093 0000 		sts _head_node,r26
 212:..//src/kernel/source/nrk_task.c **** 		_head_node->Prev = NULL;
 559               	.LM51:
 560 020a 1296      		adiw r26,1+1
 561 020c 1C92      		st X,__zero_reg__
 562 020e 1E92      		st -X,__zero_reg__
 563 0210 1197      		sbiw r26,1
 564 0212 00C0      		rjmp .L21
 565               	.L23:
 213:..//src/kernel/source/nrk_task.c **** 	}
 214:..//src/kernel/source/nrk_task.c **** 	else
 215:..//src/kernel/source/nrk_task.c **** 	{
 216:..//src/kernel/source/nrk_task.c **** 		while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
 217:..//src/kernel/source/nrk_task.c **** 			CurNode = CurNode->Next;
 567               	.LM52:
 568 0214 0380      		ldd __tmp_reg__,Z+3
 569 0216 F481      		ldd r31,Z+4
 570 0218 E02D      		mov r30,__tmp_reg__
 216:..//src/kernel/source/nrk_task.c **** 		while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
 572               	.LM53:
 573 021a 3097      		sbiw r30,0
 574 021c 01F0      		breq .L18
 575               	.L28:
 216:..//src/kernel/source/nrk_task.c **** 		while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
 577               	.LM54:
 578 021e 2081      		ld r18,Z
 579 0220 30E0      		ldi r19,lo8(0)
 580 0222 2817      		cp r18,r24
 581 0224 3907      		cpc r19,r25
 582 0226 01F4      		brne .L23
 218:..//src/kernel/source/nrk_task.c **** 		if (CurNode == NULL)
 219:..//src/kernel/source/nrk_task.c **** 			return;
 220:..//src/kernel/source/nrk_task.c **** 
 221:..//src/kernel/source/nrk_task.c **** 
 222:..//src/kernel/source/nrk_task.c **** 		(CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
 584               	.LM55:
 585 0228 C181      		ldd r28,Z+1
 586 022a D281      		ldd r29,Z+2
 587 022c 8381      		ldd r24,Z+3
 588 022e 9481      		ldd r25,Z+4
 589 0230 9C83      		std Y+4,r25
 590 0232 8B83      		std Y+3,r24
 223:..//src/kernel/source/nrk_task.c **** 		if (CurNode->Next != NULL)
 592               	.LM56:
 593 0234 A381      		ldd r26,Z+3
 594 0236 B481      		ldd r27,Z+4
 595 0238 1097      		sbiw r26,0
 596 023a 01F0      		breq .L21
 224:..//src/kernel/source/nrk_task.c **** 			(CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
 598               	.LM57:
 599 023c 1296      		adiw r26,1+1
 600 023e DC93      		st X,r29
 601 0240 CE93      		st -X,r28
 602 0242 1197      		sbiw r26,1
 603               	.L21:
 225:..//src/kernel/source/nrk_task.c **** 
 226:..//src/kernel/source/nrk_task.c **** 	}
 227:..//src/kernel/source/nrk_task.c **** 
 228:..//src/kernel/source/nrk_task.c **** 
 229:..//src/kernel/source/nrk_task.c **** 
 230:..//src/kernel/source/nrk_task.c **** 	// Add to free list
 231:..//src/kernel/source/nrk_task.c **** 	if (_free_node == NULL)
 605               	.LM58:
 606 0244 A091 0000 		lds r26,_free_node
 607 0248 B091 0000 		lds r27,_free_node+1
 608 024c 1097      		sbiw r26,0
 609 024e 01F4      		brne .L25
 232:..//src/kernel/source/nrk_task.c **** 	{
 233:..//src/kernel/source/nrk_task.c **** 		_free_node = CurNode;
 611               	.LM59:
 612 0250 F093 0000 		sts _free_node+1,r31
 613 0254 E093 0000 		sts _free_node,r30
 234:..//src/kernel/source/nrk_task.c **** 		_free_node->Next = NULL;
 615               	.LM60:
 616 0258 1482      		std Z+4,__zero_reg__
 617 025a 1382      		std Z+3,__zero_reg__
 618 025c 00C0      		rjmp .L26
 619               	.L25:
 235:..//src/kernel/source/nrk_task.c **** 	}
 236:..//src/kernel/source/nrk_task.c **** 	else
 237:..//src/kernel/source/nrk_task.c **** 	{
 238:..//src/kernel/source/nrk_task.c **** 		CurNode->Next = _free_node;
 621               	.LM61:
 622 025e B483      		std Z+4,r27
 623 0260 A383      		std Z+3,r26
 239:..//src/kernel/source/nrk_task.c **** 		_free_node->Prev = CurNode;
 625               	.LM62:
 626 0262 1296      		adiw r26,1+1
 627 0264 FC93      		st X,r31
 628 0266 EE93      		st -X,r30
 629 0268 1197      		sbiw r26,1
 240:..//src/kernel/source/nrk_task.c **** 		_free_node = CurNode;
 631               	.LM63:
 632 026a F093 0000 		sts _free_node+1,r31
 633 026e E093 0000 		sts _free_node,r30
 634               	.L26:
 241:..//src/kernel/source/nrk_task.c **** 	}
 242:..//src/kernel/source/nrk_task.c **** 	_free_node->Prev = NULL;
 636               	.LM64:
 637 0272 1282      		std Z+2,__zero_reg__
 638 0274 1182      		std Z+1,__zero_reg__
 639               	.L18:
 640               	/* epilogue start */
 243:..//src/kernel/source/nrk_task.c **** }
 642               	.LM65:
 643 0276 DF91      		pop r29
 644 0278 CF91      		pop r28
 645 027a 0895      		ret
 647               	.Lscope4:
 649               		.stabd	78,0,0
 652               	.global	nrk_activate_task
 654               	nrk_activate_task:
 655               		.stabd	46,0,0
 244:..//src/kernel/source/nrk_task.c **** 
 245:..//src/kernel/source/nrk_task.c **** 
 246:..//src/kernel/source/nrk_task.c **** 
 247:..//src/kernel/source/nrk_task.c **** 
 248:..//src/kernel/source/nrk_task.c **** 
 249:..//src/kernel/source/nrk_task.c **** nrk_status_t nrk_activate_task (nrk_task_type * Task)
 250:..//src/kernel/source/nrk_task.c **** {
 657               	.LM66:
 658               	.LFBB5:
 659 027c EF92      		push r14
 660 027e FF92      		push r15
 661 0280 0F93      		push r16
 662 0282 1F93      		push r17
 663 0284 CF93      		push r28
 664 0286 DF93      		push r29
 665               	/* prologue: function */
 666               	/* frame size = 0 */
 667               	/* stack size = 6 */
 668               	.L__stack_usage = 6
 669 0288 EC01      		movw r28,r24
 251:..//src/kernel/source/nrk_task.c **** 	uint8_t rtype;
 252:..//src/kernel/source/nrk_task.c **** 	void *topOfStackPtr;
 253:..//src/kernel/source/nrk_task.c **** 
 254:..//src/kernel/source/nrk_task.c **** 	topOfStackPtr =
 671               	.LM67:
 672 028a 6981      		ldd r22,Y+1
 673 028c 7A81      		ldd r23,Y+2
 674 028e 4B81      		ldd r20,Y+3
 675 0290 5C81      		ldd r21,Y+4
 676 0292 8D81      		ldd r24,Y+5
 677 0294 9E81      		ldd r25,Y+6
 678 0296 0E94 0000 		call nrk_task_stk_init
 679 029a BC01      		movw r22,r24
 255:..//src/kernel/source/nrk_task.c **** 		(void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);
 256:..//src/kernel/source/nrk_task.c **** 
 257:..//src/kernel/source/nrk_task.c **** 	//printf("activate %d\n",(int)Task.task_ID);
 258:..//src/kernel/source/nrk_task.c **** 	if (Task->FirstActivation == TRUE)
 681               	.LM68:
 682 029c 8F81      		ldd r24,Y+7
 683 029e 8823      		tst r24
 684 02a0 01F0      		breq .L31
 259:..//src/kernel/source/nrk_task.c **** 	{
 260:..//src/kernel/source/nrk_task.c **** 		rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
 686               	.LM69:
 687 02a2 4B81      		ldd r20,Y+3
 688 02a4 5C81      		ldd r21,Y+4
 689 02a6 CE01      		movw r24,r28
 690 02a8 20E0      		ldi r18,lo8(0)
 691 02aa 30E0      		ldi r19,hi8(0)
 692 02ac 00E0      		ldi r16,lo8(0)
 693 02ae 10E0      		ldi r17,hi8(0)
 694 02b0 EE24      		clr r14
 695 02b2 FF24      		clr r15
 696 02b4 0E94 0000 		call nrk_TCB_init
 261:..//src/kernel/source/nrk_task.c **** 		Task->FirstActivation = FALSE;
 698               	.LM70:
 699 02b8 1F82      		std Y+7,__zero_reg__
 700 02ba 00C0      		rjmp .L32
 701               	.L31:
 262:..//src/kernel/source/nrk_task.c **** 
 263:..//src/kernel/source/nrk_task.c **** 	}
 264:..//src/kernel/source/nrk_task.c **** 	else
 265:..//src/kernel/source/nrk_task.c **** 	{
 266:..//src/kernel/source/nrk_task.c **** 		if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
 703               	.LM71:
 704 02bc 8881      		ld r24,Y
 705 02be 9927      		clr r25
 706 02c0 87FD      		sbrc r24,7
 707 02c2 9095      		com r25
 708 02c4 FC01      		movw r30,r24
 709 02c6 25E0      		ldi r18,5
 710 02c8 EE0F      	1:	lsl r30
 711 02ca FF1F      		rol r31
 712 02cc 2A95      		dec r18
 713 02ce 01F4      		brne 1b
 714 02d0 E80F      		add r30,r24
 715 02d2 F91F      		adc r31,r25
 716 02d4 E050      		subi r30,lo8(-(nrk_task_TCB))
 717 02d6 F040      		sbci r31,hi8(-(nrk_task_TCB))
 718 02d8 8185      		ldd r24,Z+9
 719 02da 8330      		cpi r24,lo8(3)
 720 02dc 01F4      		brne .L34
 267:..//src/kernel/source/nrk_task.c **** 			return NRK_ERROR;
 268:..//src/kernel/source/nrk_task.c **** 		//Re-init some parts of TCB
 269:..//src/kernel/source/nrk_task.c **** 
 270:..//src/kernel/source/nrk_task.c **** 		nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
 722               	.LM72:
 723 02de 7183      		std Z+1,r23
 724 02e0 6083      		st Z,r22
 725               	.L32:
 271:..//src/kernel/source/nrk_task.c **** 
 272:..//src/kernel/source/nrk_task.c **** 
 273:..//src/kernel/source/nrk_task.c **** 
 274:..//src/kernel/source/nrk_task.c **** 	}
 275:..//src/kernel/source/nrk_task.c **** 
 276:..//src/kernel/source/nrk_task.c **** 	//nrk_task_TCB[Task->task_ID].task_state = READY;
 277:..//src/kernel/source/nrk_task.c **** 
 278:..//src/kernel/source/nrk_task.c **** 	// Remove from suspended or waiting if extended
 279:..//src/kernel/source/nrk_task.c **** 
 280:..//src/kernel/source/nrk_task.c **** 	// OSSchedLock();
 281:..//src/kernel/source/nrk_task.c **** 
 282:..//src/kernel/source/nrk_task.c **** 
 283:..//src/kernel/source/nrk_task.c **** 	// If Idle Task then Add to ready Q
 284:..//src/kernel/source/nrk_task.c **** 	//if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
 285:..//src/kernel/source/nrk_task.c **** 	//nrk_add_to_readyQ(Task->task_ID);
 286:..//src/kernel/source/nrk_task.c **** 	//printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
 287:..//src/kernel/source/nrk_task.c **** 	//printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
 288:..//src/kernel/source/nrk_task.c **** 	if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
 727               	.LM73:
 728 02e2 8881      		ld r24,Y
 729 02e4 9927      		clr r25
 730 02e6 87FD      		sbrc r24,7
 731 02e8 9095      		com r25
 732 02ea FC01      		movw r30,r24
 733 02ec 05E0      		ldi r16,5
 734 02ee EE0F      	1:	lsl r30
 735 02f0 FF1F      		rol r31
 736 02f2 0A95      		dec r16
 737 02f4 01F4      		brne 1b
 738 02f6 E80F      		add r30,r24
 739 02f8 F91F      		adc r31,r25
 740 02fa E050      		subi r30,lo8(-(nrk_task_TCB))
 741 02fc F040      		sbci r31,hi8(-(nrk_task_TCB))
 742 02fe 8589      		ldd r24,Z+21
 743 0300 9689      		ldd r25,Z+22
 744 0302 0097      		sbiw r24,0
 745 0304 01F4      		brne .L35
 289:..//src/kernel/source/nrk_task.c **** 	{
 290:..//src/kernel/source/nrk_task.c **** 		nrk_task_TCB[Task->task_ID].task_state = READY;
 747               	.LM74:
 748 0306 82E0      		ldi r24,lo8(2)
 749 0308 8187      		std Z+9,r24
 291:..//src/kernel/source/nrk_task.c **** 		nrk_add_to_readyQ (Task->task_ID);
 751               	.LM75:
 752 030a 8881      		ld r24,Y
 753 030c 0E94 0000 		call nrk_add_to_readyQ
 754 0310 00C0      		rjmp .L35
 755               	.L34:
 267:..//src/kernel/source/nrk_task.c **** 			return NRK_ERROR;
 757               	.LM76:
 758 0312 8FEF      		ldi r24,lo8(-1)
 759 0314 00C0      		rjmp .L33
 760               	.L35:
 292:..//src/kernel/source/nrk_task.c **** 	}
 293:..//src/kernel/source/nrk_task.c **** 
 294:..//src/kernel/source/nrk_task.c **** 	return NRK_OK;
 762               	.LM77:
 763 0316 81E0      		ldi r24,lo8(1)
 764               	.L33:
 765               	/* epilogue start */
 295:..//src/kernel/source/nrk_task.c **** }
 767               	.LM78:
 768 0318 DF91      		pop r29
 769 031a CF91      		pop r28
 770 031c 1F91      		pop r17
 771 031e 0F91      		pop r16
 772 0320 FF90      		pop r15
 773 0322 EF90      		pop r14
 774 0324 0895      		ret
 779               	.Lscope5:
 781               		.stabd	78,0,0
 784               	.global	nrk_set_next_wakeup
 786               	nrk_set_next_wakeup:
 787               		.stabd	46,0,0
 296:..//src/kernel/source/nrk_task.c **** 
 297:..//src/kernel/source/nrk_task.c **** 
 298:..//src/kernel/source/nrk_task.c **** 
 299:..//src/kernel/source/nrk_task.c **** nrk_status_t nrk_terminate_task ()
 300:..//src/kernel/source/nrk_task.c **** {
 301:..//src/kernel/source/nrk_task.c **** 	nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
 302:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->task_state = FINISHED;
 303:..//src/kernel/source/nrk_task.c **** 
 304:..//src/kernel/source/nrk_task.c **** 	// HAHA, there is NO next period...
 305:..//src/kernel/source/nrk_task.c **** 	nrk_wait_until_next_period ();
 306:..//src/kernel/source/nrk_task.c **** 	return NRK_OK;
 307:..//src/kernel/source/nrk_task.c **** }
 308:..//src/kernel/source/nrk_task.c **** 
 309:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_next_period ()
 310:..//src/kernel/source/nrk_task.c **** {
 311:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 312:..//src/kernel/source/nrk_task.c **** 
 313:..//src/kernel/source/nrk_task.c **** 	nrk_stack_check ();
 314:..//src/kernel/source/nrk_task.c **** 	// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
 315:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 316:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->num_periods = 1;
 317:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 318:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 319:..//src/kernel/source/nrk_task.c **** 
 320:..//src/kernel/source/nrk_task.c **** 	//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
 321:..//src/kernel/source/nrk_task.c **** 
 322:..//src/kernel/source/nrk_task.c **** 	if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 323:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 324:..//src/kernel/source/nrk_task.c **** 		{
 325:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 326:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special c
 327:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
 328:..//src/kernel/source/nrk_task.c **** 		}
 329:..//src/kernel/source/nrk_task.c **** 
 330:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 331:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 332:..//src/kernel/source/nrk_task.c **** 		return NRK_OK;
 333:..//src/kernel/source/nrk_task.c **** }
 334:..//src/kernel/source/nrk_task.c **** 
 335:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_next_n_periods (uint16_t p)
 336:..//src/kernel/source/nrk_task.c **** {
 337:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 338:..//src/kernel/source/nrk_task.c **** 
 339:..//src/kernel/source/nrk_task.c **** 	nrk_stack_check ();
 340:..//src/kernel/source/nrk_task.c **** 
 341:..//src/kernel/source/nrk_task.c **** 	if (p == 0)
 342:..//src/kernel/source/nrk_task.c **** 		p = 1;
 343:..//src/kernel/source/nrk_task.c **** 	// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
 344:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 345:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 346:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->num_periods = p;
 347:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 348:..//src/kernel/source/nrk_task.c **** 
 349:..//src/kernel/source/nrk_task.c **** 	//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;
 350:..//src/kernel/source/nrk_task.c **** 
 351:..//src/kernel/source/nrk_task.c **** 	// +2 allows for potential time conflict resolution
 352:..//src/kernel/source/nrk_task.c **** 	if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
 353:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 354:..//src/kernel/source/nrk_task.c **** 		{
 355:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 356:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 357:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
 358:..//src/kernel/source/nrk_task.c **** 		}
 359:..//src/kernel/source/nrk_task.c **** 
 360:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 361:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 362:..//src/kernel/source/nrk_task.c **** 		return NRK_OK;
 363:..//src/kernel/source/nrk_task.c **** }
 364:..//src/kernel/source/nrk_task.c **** 
 365:..//src/kernel/source/nrk_task.c **** /*
 366:..//src/kernel/source/nrk_task.c **** * nrk_wait_ticks()
 367:..//src/kernel/source/nrk_task.c **** *
 368:..//src/kernel/source/nrk_task.c **** * This function will wait until a specified number of
 369:..//src/kernel/source/nrk_task.c **** * timer ticks after the curret OS tick timer.
 370:..//src/kernel/source/nrk_task.c **** *
 371:..//src/kernel/source/nrk_task.c **** */
 372:..//src/kernel/source/nrk_task.c **** 
 373:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait_ticks (uint16_t ticks)
 374:..//src/kernel/source/nrk_task.c **** {
 375:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 376:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 377:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 378:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 379:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = ticks + timer;
 380:..//src/kernel/source/nrk_task.c **** 
 381:..//src/kernel/source/nrk_task.c **** 	if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 382:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 383:..//src/kernel/source/nrk_task.c **** 		{
 384:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 385:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 386:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 387:..//src/kernel/source/nrk_task.c **** 		}
 388:..//src/kernel/source/nrk_task.c **** 		//else nrk_cur_task_TCB->next_wakeup=ticks+1;
 389:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 390:..//src/kernel/source/nrk_task.c **** 		//while(nrk_cur_task_TCB->suspend_flag==1);
 391:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 392:..//src/kernel/source/nrk_task.c **** 		return NRK_OK;
 393:..//src/kernel/source/nrk_task.c **** }
 394:..//src/kernel/source/nrk_task.c **** 
 395:..//src/kernel/source/nrk_task.c **** 
 396:..//src/kernel/source/nrk_task.c **** /*
 397:..//src/kernel/source/nrk_task.c **** * nrk_wait_until_ticks()
 398:..//src/kernel/source/nrk_task.c **** *
 399:..//src/kernel/source/nrk_task.c **** * This function will wait until a specified number of
 400:..//src/kernel/source/nrk_task.c **** * timer ticks starting from when the task was swapped in.
 401:..//src/kernel/source/nrk_task.c **** * This means that this function can set periodic timing
 402:..//src/kernel/source/nrk_task.c **** * taking into account any task processing time.
 403:..//src/kernel/source/nrk_task.c **** *
 404:..//src/kernel/source/nrk_task.c **** */
 405:..//src/kernel/source/nrk_task.c **** 
 406:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_ticks (uint16_t ticks)
 407:..//src/kernel/source/nrk_task.c **** {
 408:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 409:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 410:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 411:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = ticks;
 412:..//src/kernel/source/nrk_task.c **** 	// printf( "t %u\r\n",ticks );
 413:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 414:..//src/kernel/source/nrk_task.c **** 
 415:..//src/kernel/source/nrk_task.c **** 	if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 416:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 417:..//src/kernel/source/nrk_task.c **** 		{
 418:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 419:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 420:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 421:..//src/kernel/source/nrk_task.c **** 		}
 422:..//src/kernel/source/nrk_task.c **** 		//else nrk_cur_task_TCB->next_wakeup=ticks+1;
 423:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 424:..//src/kernel/source/nrk_task.c **** 		//while(nrk_cur_task_TCB->suspend_flag==1);
 425:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 426:..//src/kernel/source/nrk_task.c **** 		return NRK_OK;
 427:..//src/kernel/source/nrk_task.c **** }
 428:..//src/kernel/source/nrk_task.c **** 
 429:..//src/kernel/source/nrk_task.c **** int8_t nrk_set_next_wakeup (nrk_time_t t)
 430:..//src/kernel/source/nrk_task.c **** {
 789               	.LM79:
 790               	.LFBB6:
 791 0326 1F93      		push r17
 792 0328 DF93      		push r29
 793 032a CF93      		push r28
 794 032c CDB7      		in r28,__SP_L__
 795 032e DEB7      		in r29,__SP_H__
 796 0330 2897      		sbiw r28,8
 797 0332 0FB6      		in __tmp_reg__,__SREG__
 798 0334 F894      		cli
 799 0336 DEBF      		out __SP_H__,r29
 800 0338 0FBE      		out __SREG__,__tmp_reg__
 801 033a CDBF      		out __SP_L__,r28
 802               	/* prologue: function */
 803               	/* frame size = 8 */
 804               	/* stack size = 11 */
 805               	.L__stack_usage = 11
 806 033c 2983      		std Y+1,r18
 807 033e 3A83      		std Y+2,r19
 808 0340 4B83      		std Y+3,r20
 809 0342 5C83      		std Y+4,r21
 810 0344 6D83      		std Y+5,r22
 811 0346 7E83      		std Y+6,r23
 812 0348 8F83      		std Y+7,r24
 813 034a 9887      		std Y+8,r25
 431:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 432:..//src/kernel/source/nrk_task.c **** 	uint16_t nw;
 433:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 815               	.LM80:
 816 034c 0E94 0000 		call nrk_int_disable
 434:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 818               	.LM81:
 819 0350 0E94 0000 		call _nrk_os_timer_get
 820 0354 182F      		mov r17,r24
 435:..//src/kernel/source/nrk_task.c **** 	nw = _nrk_time_to_ticks (&t);
 822               	.LM82:
 823 0356 CE01      		movw r24,r28
 824 0358 0196      		adiw r24,1
 825 035a 0E94 0000 		call _nrk_time_to_ticks
 826 035e 9C01      		movw r18,r24
 436:..//src/kernel/source/nrk_task.c **** 	if (nw <= TIME_PAD)
 828               	.LM83:
 829 0360 8330      		cpi r24,3
 830 0362 9105      		cpc r25,__zero_reg__
 831 0364 00F0      		brlo .L38
 437:..//src/kernel/source/nrk_task.c **** 		return NRK_ERROR;
 438:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = nw + timer;
 833               	.LM84:
 834 0366 E091 0000 		lds r30,nrk_cur_task_TCB
 835 036a F091 0000 		lds r31,nrk_cur_task_TCB+1
 836 036e 210F      		add r18,r17
 837 0370 311D      		adc r19,__zero_reg__
 838 0372 368B      		std Z+22,r19
 839 0374 258B      		std Z+21,r18
 439:..//src/kernel/source/nrk_task.c **** 	/*	if(timer<(254-TIME_PAD))
 440:..//src/kernel/source/nrk_task.c **** 	if((timer+TIME_PAD)<=_nrk_get_next_wakeup())
 441:..//src/kernel/source/nrk_task.c **** 	{
 442:..//src/kernel/source/nrk_task.c **** 	timer+=TIME_PAD;
 443:..//src/kernel/source/nrk_task.c **** 	_nrk_prev_timer_val=timer;
 444:..//src/kernel/source/nrk_task.c **** 	_nrk_set_next_wakeup(timer);
 445:..//src/kernel/source/nrk_task.c **** 	}
 446:..//src/kernel/source/nrk_task.c **** 	*/
 447:..//src/kernel/source/nrk_task.c **** 	//      nrk_cur_task_TCB->nw_flag=1;
 448:..//src/kernel/source/nrk_task.c **** 	nrk_int_enable ();
 841               	.LM85:
 842 0376 0E94 0000 		call nrk_int_enable
 449:..//src/kernel/source/nrk_task.c **** 
 450:..//src/kernel/source/nrk_task.c **** 	return NRK_OK;
 844               	.LM86:
 845 037a 81E0      		ldi r24,lo8(1)
 846 037c 00C0      		rjmp .L37
 847               	.L38:
 437:..//src/kernel/source/nrk_task.c **** 		return NRK_ERROR;
 849               	.LM87:
 850 037e 8FEF      		ldi r24,lo8(-1)
 851               	.L37:
 852               	/* epilogue start */
 451:..//src/kernel/source/nrk_task.c **** }
 854               	.LM88:
 855 0380 2896      		adiw r28,8
 856 0382 0FB6      		in __tmp_reg__,__SREG__
 857 0384 F894      		cli
 858 0386 DEBF      		out __SP_H__,r29
 859 0388 0FBE      		out __SREG__,__tmp_reg__
 860 038a CDBF      		out __SP_L__,r28
 861 038c CF91      		pop r28
 862 038e DF91      		pop r29
 863 0390 1F91      		pop r17
 864 0392 0895      		ret
 870               	.Lscope6:
 872               		.stabd	78,0,0
 874               	.global	_nrk_wait_for_scheduler
 876               	_nrk_wait_for_scheduler:
 877               		.stabd	46,0,0
 452:..//src/kernel/source/nrk_task.c **** 
 453:..//src/kernel/source/nrk_task.c **** /*
 454:..//src/kernel/source/nrk_task.c **** * nrk_wait_until_nw()
 455:..//src/kernel/source/nrk_task.c **** *
 456:..//src/kernel/source/nrk_task.c **** * This function will wait until a specified number of
 457:..//src/kernel/source/nrk_task.c **** * timer ticks starting from when the task was swapped in.
 458:..//src/kernel/source/nrk_task.c **** * This means that this function can set periodic timing
 459:..//src/kernel/source/nrk_task.c **** * taking into account any task processing time.
 460:..//src/kernel/source/nrk_task.c **** *
 461:..//src/kernel/source/nrk_task.c **** */
 462:..//src/kernel/source/nrk_task.c **** 
 463:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait_until_nw ()
 464:..//src/kernel/source/nrk_task.c **** {
 465:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 466:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 467:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 468:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->nw_flag = 1;
 469:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 470:..//src/kernel/source/nrk_task.c **** 
 471:..//src/kernel/source/nrk_task.c **** 	if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 472:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 473:..//src/kernel/source/nrk_task.c **** 		{
 474:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 475:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 476:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 477:..//src/kernel/source/nrk_task.c **** 		}
 478:..//src/kernel/source/nrk_task.c **** 		//else nrk_cur_task_TCB->next_wakeup=ticks+1;
 479:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 480:..//src/kernel/source/nrk_task.c **** 		//while(nrk_cur_task_TCB->suspend_flag==1);
 481:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 482:..//src/kernel/source/nrk_task.c **** 		return NRK_OK;
 483:..//src/kernel/source/nrk_task.c **** }
 484:..//src/kernel/source/nrk_task.c **** 
 485:..//src/kernel/source/nrk_task.c **** 
 486:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait (nrk_time_t t)
 487:..//src/kernel/source/nrk_task.c **** {
 488:..//src/kernel/source/nrk_task.c **** 	uint8_t timer;
 489:..//src/kernel/source/nrk_task.c **** 	uint16_t nw;
 490:..//src/kernel/source/nrk_task.c **** 
 491:..//src/kernel/source/nrk_task.c **** 	nrk_stack_check ();
 492:..//src/kernel/source/nrk_task.c **** 
 493:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 494:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 495:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->num_periods = 1;
 496:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 497:..//src/kernel/source/nrk_task.c **** 
 498:..//src/kernel/source/nrk_task.c **** 	//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);
 499:..//src/kernel/source/nrk_task.c **** 
 500:..//src/kernel/source/nrk_task.c **** 	nw = _nrk_time_to_ticks (&t);
 501:..//src/kernel/source/nrk_task.c **** 	// printf( "t2 %u %u\r\n",timer, nw);
 502:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = nw + timer;
 503:..//src/kernel/source/nrk_task.c **** 	//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
 504:..//src/kernel/source/nrk_task.c **** 	if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 505:..//src/kernel/source/nrk_task.c **** 	{
 506:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 507:..//src/kernel/source/nrk_task.c **** 		{
 508:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 509:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 510:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 511:..//src/kernel/source/nrk_task.c **** 		}
 512:..//src/kernel/source/nrk_task.c **** 	}
 513:..//src/kernel/source/nrk_task.c **** 	nrk_int_enable ();
 514:..//src/kernel/source/nrk_task.c **** 
 515:..//src/kernel/source/nrk_task.c **** 	_nrk_wait_for_scheduler ();
 516:..//src/kernel/source/nrk_task.c **** 	return NRK_OK;
 517:..//src/kernel/source/nrk_task.c **** }
 518:..//src/kernel/source/nrk_task.c **** 
 519:..//src/kernel/source/nrk_task.c **** 
 520:..//src/kernel/source/nrk_task.c **** inline void _nrk_wait_for_scheduler ()
 521:..//src/kernel/source/nrk_task.c **** {
 879               	.LM89:
 880               	.LFBB7:
 881               	/* prologue: function */
 882               	/* frame size = 0 */
 883               	/* stack size = 0 */
 884               	.L__stack_usage = 0
 885               	.L40:
 522:..//src/kernel/source/nrk_task.c **** 
 523:..//src/kernel/source/nrk_task.c **** 	//TIMSK = BM (OCIE1A);
 524:..//src/kernel/source/nrk_task.c **** 	do
 525:..//src/kernel/source/nrk_task.c **** 	{
 526:..//src/kernel/source/nrk_task.c **** 		nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until 
 887               	.LM90:
 888 0394 0E94 0000 		call nrk_idle
 527:..//src/kernel/source/nrk_task.c **** 	}
 528:..//src/kernel/source/nrk_task.c **** 	while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was th
 890               	.LM91:
 891 0398 E091 0000 		lds r30,nrk_cur_task_TCB
 892 039c F091 0000 		lds r31,nrk_cur_task_TCB+1
 893 03a0 8581      		ldd r24,Z+5
 894 03a2 8823      		tst r24
 895 03a4 01F4      		brne .L40
 896               	/* epilogue start */
 529:..//src/kernel/source/nrk_task.c **** 
 530:..//src/kernel/source/nrk_task.c **** 	//TIMSK = BM (OCIE1A) | BM(OCIE0);
 531:..//src/kernel/source/nrk_task.c **** }
 898               	.LM92:
 899 03a6 0895      		ret
 901               	.Lscope7:
 903               		.stabd	78,0,0
 906               	.global	nrk_wait
 908               	nrk_wait:
 909               		.stabd	46,0,0
 487:..//src/kernel/source/nrk_task.c **** {
 911               	.LM93:
 912               	.LFBB8:
 913 03a8 FF92      		push r15
 914 03aa 0F93      		push r16
 915 03ac 1F93      		push r17
 916 03ae DF93      		push r29
 917 03b0 CF93      		push r28
 918 03b2 CDB7      		in r28,__SP_L__
 919 03b4 DEB7      		in r29,__SP_H__
 920 03b6 2897      		sbiw r28,8
 921 03b8 0FB6      		in __tmp_reg__,__SREG__
 922 03ba F894      		cli
 923 03bc DEBF      		out __SP_H__,r29
 924 03be 0FBE      		out __SREG__,__tmp_reg__
 925 03c0 CDBF      		out __SP_L__,r28
 926               	/* prologue: function */
 927               	/* frame size = 8 */
 928               	/* stack size = 13 */
 929               	.L__stack_usage = 13
 930 03c2 2983      		std Y+1,r18
 931 03c4 3A83      		std Y+2,r19
 932 03c6 4B83      		std Y+3,r20
 933 03c8 5C83      		std Y+4,r21
 934 03ca 6D83      		std Y+5,r22
 935 03cc 7E83      		std Y+6,r23
 936 03ce 8F83      		std Y+7,r24
 937 03d0 9887      		std Y+8,r25
 491:..//src/kernel/source/nrk_task.c **** 	nrk_stack_check ();
 939               	.LM94:
 940 03d2 0E94 0000 		call nrk_stack_check
 493:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 942               	.LM95:
 943 03d6 0E94 0000 		call nrk_int_disable
 494:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 945               	.LM96:
 946 03da E091 0000 		lds r30,nrk_cur_task_TCB
 947 03de F091 0000 		lds r31,nrk_cur_task_TCB+1
 948 03e2 81E0      		ldi r24,lo8(1)
 949 03e4 8583      		std Z+5,r24
 495:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->num_periods = 1;
 951               	.LM97:
 952 03e6 81E0      		ldi r24,lo8(1)
 953 03e8 90E0      		ldi r25,hi8(1)
 954 03ea 90A3      		std Z+32,r25
 955 03ec 878F      		std Z+31,r24
 496:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 957               	.LM98:
 958 03ee 0E94 0000 		call _nrk_os_timer_get
 959 03f2 F82E      		mov r15,r24
 500:..//src/kernel/source/nrk_task.c **** 	nw = _nrk_time_to_ticks (&t);
 961               	.LM99:
 962 03f4 CE01      		movw r24,r28
 963 03f6 0196      		adiw r24,1
 964 03f8 0E94 0000 		call _nrk_time_to_ticks
 502:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = nw + timer;
 966               	.LM100:
 967 03fc E091 0000 		lds r30,nrk_cur_task_TCB
 968 0400 F091 0000 		lds r31,nrk_cur_task_TCB+1
 969 0404 0F2D      		mov r16,r15
 970 0406 10E0      		ldi r17,lo8(0)
 971 0408 9801      		movw r18,r16
 972 040a 280F      		add r18,r24
 973 040c 391F      		adc r19,r25
 974 040e 368B      		std Z+22,r19
 975 0410 258B      		std Z+21,r18
 504:..//src/kernel/source/nrk_task.c **** 	if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 977               	.LM101:
 978 0412 8F2D      		mov r24,r15
 979 0414 883F      		cpi r24,lo8(-8)
 980 0416 00F4      		brsh .L43
 506:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 982               	.LM102:
 983 0418 0E94 0000 		call _nrk_get_next_wakeup
 984 041c 0F5F      		subi r16,lo8(-(1))
 985 041e 1F4F      		sbci r17,hi8(-(1))
 986 0420 282F      		mov r18,r24
 987 0422 30E0      		ldi r19,lo8(0)
 988 0424 0217      		cp r16,r18
 989 0426 1307      		cpc r17,r19
 990 0428 04F4      		brge .L43
 508:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 992               	.LM103:
 993 042a 8F2D      		mov r24,r15
 994 042c 8E5F      		subi r24,lo8(-(2))
 509:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 996               	.LM104:
 997 042e 8093 0000 		sts _nrk_prev_timer_val,r24
 510:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 999               	.LM105:
 1000 0432 0E94 0000 		call _nrk_set_next_wakeup
 1001               	.L43:
 513:..//src/kernel/source/nrk_task.c **** 	nrk_int_enable ();
 1003               	.LM106:
 1004 0436 0E94 0000 		call nrk_int_enable
 515:..//src/kernel/source/nrk_task.c **** 	_nrk_wait_for_scheduler ();
 1006               	.LM107:
 1007 043a 0E94 0000 		call _nrk_wait_for_scheduler
 517:..//src/kernel/source/nrk_task.c **** }
 1009               	.LM108:
 1010 043e 81E0      		ldi r24,lo8(1)
 1011               	/* epilogue start */
 1012 0440 2896      		adiw r28,8
 1013 0442 0FB6      		in __tmp_reg__,__SREG__
 1014 0444 F894      		cli
 1015 0446 DEBF      		out __SP_H__,r29
 1016 0448 0FBE      		out __SREG__,__tmp_reg__
 1017 044a CDBF      		out __SP_L__,r28
 1018 044c CF91      		pop r28
 1019 044e DF91      		pop r29
 1020 0450 1F91      		pop r17
 1021 0452 0F91      		pop r16
 1022 0454 FF90      		pop r15
 1023 0456 0895      		ret
 1025               	.Lscope8:
 1027               		.stabd	78,0,0
 1029               	.global	nrk_wait_until_nw
 1031               	nrk_wait_until_nw:
 1032               		.stabd	46,0,0
 464:..//src/kernel/source/nrk_task.c **** {
 1034               	.LM109:
 1035               	.LFBB9:
 1036 0458 1F93      		push r17
 1037               	/* prologue: function */
 1038               	/* frame size = 0 */
 1039               	/* stack size = 1 */
 1040               	.L__stack_usage = 1
 466:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 1042               	.LM110:
 1043 045a 0E94 0000 		call nrk_int_disable
 467:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 1045               	.LM111:
 1046 045e E091 0000 		lds r30,nrk_cur_task_TCB
 1047 0462 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1048 0466 81E0      		ldi r24,lo8(1)
 1049 0468 8583      		std Z+5,r24
 468:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->nw_flag = 1;
 1051               	.LM112:
 1052 046a 8683      		std Z+6,r24
 469:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 1054               	.LM113:
 1055 046c 0E94 0000 		call _nrk_os_timer_get
 1056 0470 182F      		mov r17,r24
 471:..//src/kernel/source/nrk_task.c **** 	if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 1058               	.LM114:
 1059 0472 883F      		cpi r24,lo8(-8)
 1060 0474 00F4      		brsh .L45
 472:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1062               	.LM115:
 1063 0476 0E94 0000 		call _nrk_get_next_wakeup
 1064 047a 212F      		mov r18,r17
 1065 047c 30E0      		ldi r19,lo8(0)
 1066 047e 2F5F      		subi r18,lo8(-(1))
 1067 0480 3F4F      		sbci r19,hi8(-(1))
 1068 0482 482F      		mov r20,r24
 1069 0484 50E0      		ldi r21,lo8(0)
 1070 0486 2417      		cp r18,r20
 1071 0488 3507      		cpc r19,r21
 1072 048a 04F4      		brge .L45
 474:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 1074               	.LM116:
 1075 048c 812F      		mov r24,r17
 1076 048e 8E5F      		subi r24,lo8(-(2))
 475:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 1078               	.LM117:
 1079 0490 8093 0000 		sts _nrk_prev_timer_val,r24
 476:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 1081               	.LM118:
 1082 0494 0E94 0000 		call _nrk_set_next_wakeup
 1083               	.L45:
 479:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 1085               	.LM119:
 1086 0498 0E94 0000 		call nrk_int_enable
 481:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 1088               	.LM120:
 1089 049c 0E94 0000 		call _nrk_wait_for_scheduler
 483:..//src/kernel/source/nrk_task.c **** }
 1091               	.LM121:
 1092 04a0 81E0      		ldi r24,lo8(1)
 1093               	/* epilogue start */
 1094 04a2 1F91      		pop r17
 1095 04a4 0895      		ret
 1097               	.Lscope9:
 1099               		.stabd	78,0,0
 1102               	.global	nrk_wait_until_ticks
 1104               	nrk_wait_until_ticks:
 1105               		.stabd	46,0,0
 407:..//src/kernel/source/nrk_task.c **** {
 1107               	.LM122:
 1108               	.LFBB10:
 1109 04a6 1F93      		push r17
 1110 04a8 CF93      		push r28
 1111 04aa DF93      		push r29
 1112               	/* prologue: function */
 1113               	/* frame size = 0 */
 1114               	/* stack size = 3 */
 1115               	.L__stack_usage = 3
 1116 04ac EC01      		movw r28,r24
 409:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 1118               	.LM123:
 1119 04ae 0E94 0000 		call nrk_int_disable
 410:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 1121               	.LM124:
 1122 04b2 E091 0000 		lds r30,nrk_cur_task_TCB
 1123 04b6 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1124 04ba 81E0      		ldi r24,lo8(1)
 1125 04bc 8583      		std Z+5,r24
 411:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = ticks;
 1127               	.LM125:
 1128 04be D68B      		std Z+22,r29
 1129 04c0 C58B      		std Z+21,r28
 413:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 1131               	.LM126:
 1132 04c2 0E94 0000 		call _nrk_os_timer_get
 1133 04c6 182F      		mov r17,r24
 415:..//src/kernel/source/nrk_task.c **** 	if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 1135               	.LM127:
 1136 04c8 883F      		cpi r24,lo8(-8)
 1137 04ca 00F4      		brsh .L47
 416:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1139               	.LM128:
 1140 04cc 0E94 0000 		call _nrk_get_next_wakeup
 1141 04d0 212F      		mov r18,r17
 1142 04d2 30E0      		ldi r19,lo8(0)
 1143 04d4 2F5F      		subi r18,lo8(-(1))
 1144 04d6 3F4F      		sbci r19,hi8(-(1))
 1145 04d8 482F      		mov r20,r24
 1146 04da 50E0      		ldi r21,lo8(0)
 1147 04dc 2417      		cp r18,r20
 1148 04de 3507      		cpc r19,r21
 1149 04e0 04F4      		brge .L47
 418:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 1151               	.LM129:
 1152 04e2 812F      		mov r24,r17
 1153 04e4 8E5F      		subi r24,lo8(-(2))
 419:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 1155               	.LM130:
 1156 04e6 8093 0000 		sts _nrk_prev_timer_val,r24
 420:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 1158               	.LM131:
 1159 04ea 0E94 0000 		call _nrk_set_next_wakeup
 1160               	.L47:
 423:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 1162               	.LM132:
 1163 04ee 0E94 0000 		call nrk_int_enable
 425:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 1165               	.LM133:
 1166 04f2 0E94 0000 		call _nrk_wait_for_scheduler
 427:..//src/kernel/source/nrk_task.c **** }
 1168               	.LM134:
 1169 04f6 81E0      		ldi r24,lo8(1)
 1170               	/* epilogue start */
 1171 04f8 DF91      		pop r29
 1172 04fa CF91      		pop r28
 1173 04fc 1F91      		pop r17
 1174 04fe 0895      		ret
 1176               	.Lscope10:
 1178               		.stabd	78,0,0
 1181               	.global	nrk_wait_ticks
 1183               	nrk_wait_ticks:
 1184               		.stabd	46,0,0
 374:..//src/kernel/source/nrk_task.c **** {
 1186               	.LM135:
 1187               	.LFBB11:
 1188 0500 EF92      		push r14
 1189 0502 FF92      		push r15
 1190 0504 0F93      		push r16
 1191 0506 1F93      		push r17
 1192 0508 DF93      		push r29
 1193 050a CF93      		push r28
 1194 050c 0F92      		push __tmp_reg__
 1195 050e CDB7      		in r28,__SP_L__
 1196 0510 DEB7      		in r29,__SP_H__
 1197               	/* prologue: function */
 1198               	/* frame size = 1 */
 1199               	/* stack size = 7 */
 1200               	.L__stack_usage = 7
 1201 0512 8C01      		movw r16,r24
 376:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 1203               	.LM136:
 1204 0514 0E94 0000 		call nrk_int_disable
 377:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 1206               	.LM137:
 1207 0518 E091 0000 		lds r30,nrk_cur_task_TCB
 1208 051c F091 0000 		lds r31,nrk_cur_task_TCB+1
 1209 0520 81E0      		ldi r24,lo8(1)
 1210 0522 8583      		std Z+5,r24
 378:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 1212               	.LM138:
 1213 0524 0E94 0000 		call _nrk_os_timer_get
 379:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->next_wakeup = ticks + timer;
 1215               	.LM139:
 1216 0528 E091 0000 		lds r30,nrk_cur_task_TCB
 1217 052c F091 0000 		lds r31,nrk_cur_task_TCB+1
 1218 0530 E82E      		mov r14,r24
 1219 0532 FF24      		clr r15
 1220 0534 0E0D      		add r16,r14
 1221 0536 1F1D      		adc r17,r15
 1222 0538 168B      		std Z+22,r17
 1223 053a 058B      		std Z+21,r16
 381:..//src/kernel/source/nrk_task.c **** 	if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
 1225               	.LM140:
 1226 053c 883F      		cpi r24,lo8(-8)
 1227 053e 00F4      		brsh .L49
 382:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1229               	.LM141:
 1230 0540 8983      		std Y+1,r24
 1231 0542 0E94 0000 		call _nrk_get_next_wakeup
 1232 0546 0894      		sec
 1233 0548 E11C      		adc r14,__zero_reg__
 1234 054a F11C      		adc r15,__zero_reg__
 1235 054c 282F      		mov r18,r24
 1236 054e 30E0      		ldi r19,lo8(0)
 1237 0550 9981      		ldd r25,Y+1
 1238 0552 E216      		cp r14,r18
 1239 0554 F306      		cpc r15,r19
 1240 0556 04F4      		brge .L49
 384:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 1242               	.LM142:
 1243 0558 892F      		mov r24,r25
 1244 055a 8E5F      		subi r24,lo8(-(2))
 385:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 1246               	.LM143:
 1247 055c 8093 0000 		sts _nrk_prev_timer_val,r24
 386:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);
 1249               	.LM144:
 1250 0560 0E94 0000 		call _nrk_set_next_wakeup
 1251               	.L49:
 389:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 1253               	.LM145:
 1254 0564 0E94 0000 		call nrk_int_enable
 391:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 1256               	.LM146:
 1257 0568 0E94 0000 		call _nrk_wait_for_scheduler
 393:..//src/kernel/source/nrk_task.c **** }
 1259               	.LM147:
 1260 056c 81E0      		ldi r24,lo8(1)
 1261               	/* epilogue start */
 1262 056e 0F90      		pop __tmp_reg__
 1263 0570 CF91      		pop r28
 1264 0572 DF91      		pop r29
 1265 0574 1F91      		pop r17
 1266 0576 0F91      		pop r16
 1267 0578 FF90      		pop r15
 1268 057a EF90      		pop r14
 1269 057c 0895      		ret
 1271               	.Lscope11:
 1273               		.stabd	78,0,0
 1276               	.global	nrk_wait_until_next_n_periods
 1278               	nrk_wait_until_next_n_periods:
 1279               		.stabd	46,0,0
 336:..//src/kernel/source/nrk_task.c **** {
 1281               	.LM148:
 1282               	.LFBB12:
 1283 057e 1F93      		push r17
 1284 0580 CF93      		push r28
 1285 0582 DF93      		push r29
 1286               	/* prologue: function */
 1287               	/* frame size = 0 */
 1288               	/* stack size = 3 */
 1289               	.L__stack_usage = 3
 1290 0584 EC01      		movw r28,r24
 339:..//src/kernel/source/nrk_task.c **** 	nrk_stack_check ();
 1292               	.LM149:
 1293 0586 0E94 0000 		call nrk_stack_check
 341:..//src/kernel/source/nrk_task.c **** 	if (p == 0)
 1295               	.LM150:
 1296 058a 2097      		sbiw r28,0
 1297 058c 01F4      		brne .L51
 342:..//src/kernel/source/nrk_task.c **** 		p = 1;
 1299               	.LM151:
 1300 058e C1E0      		ldi r28,lo8(1)
 1301 0590 D0E0      		ldi r29,hi8(1)
 1302               	.L51:
 344:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 1304               	.LM152:
 1305 0592 0E94 0000 		call nrk_int_disable
 345:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 1307               	.LM153:
 1308 0596 E091 0000 		lds r30,nrk_cur_task_TCB
 1309 059a F091 0000 		lds r31,nrk_cur_task_TCB+1
 1310 059e 81E0      		ldi r24,lo8(1)
 1311 05a0 8583      		std Z+5,r24
 346:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->num_periods = p;
 1313               	.LM154:
 1314 05a2 D0A3      		std Z+32,r29
 1315 05a4 C78F      		std Z+31,r28
 347:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 1317               	.LM155:
 1318 05a6 0E94 0000 		call _nrk_os_timer_get
 1319 05aa 182F      		mov r17,r24
 352:..//src/kernel/source/nrk_task.c **** 	if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
 1321               	.LM156:
 1322 05ac 883F      		cpi r24,lo8(-8)
 1323 05ae 00F4      		brsh .L52
 353:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1325               	.LM157:
 1326 05b0 0E94 0000 		call _nrk_get_next_wakeup
 1327 05b4 212F      		mov r18,r17
 1328 05b6 30E0      		ldi r19,lo8(0)
 1329 05b8 2F5F      		subi r18,lo8(-(1))
 1330 05ba 3F4F      		sbci r19,hi8(-(1))
 1331 05bc 482F      		mov r20,r24
 1332 05be 50E0      		ldi r21,lo8(0)
 1333 05c0 2417      		cp r18,r20
 1334 05c2 3507      		cpc r19,r21
 1335 05c4 04F4      		brge .L52
 355:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 1337               	.LM158:
 1338 05c6 812F      		mov r24,r17
 1339 05c8 8E5F      		subi r24,lo8(-(2))
 356:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;
 1341               	.LM159:
 1342 05ca 8093 0000 		sts _nrk_prev_timer_val,r24
 357:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
 1344               	.LM160:
 1345 05ce 0E94 0000 		call _nrk_set_next_wakeup
 1346               	.L52:
 360:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 1348               	.LM161:
 1349 05d2 0E94 0000 		call nrk_int_enable
 361:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 1351               	.LM162:
 1352 05d6 0E94 0000 		call _nrk_wait_for_scheduler
 363:..//src/kernel/source/nrk_task.c **** }
 1354               	.LM163:
 1355 05da 81E0      		ldi r24,lo8(1)
 1356               	/* epilogue start */
 1357 05dc DF91      		pop r29
 1358 05de CF91      		pop r28
 1359 05e0 1F91      		pop r17
 1360 05e2 0895      		ret
 1362               	.Lscope12:
 1364               		.stabd	78,0,0
 1366               	.global	nrk_wait_until_next_period
 1368               	nrk_wait_until_next_period:
 1369               		.stabd	46,0,0
 310:..//src/kernel/source/nrk_task.c **** {
 1371               	.LM164:
 1372               	.LFBB13:
 1373 05e4 1F93      		push r17
 1374               	/* prologue: function */
 1375               	/* frame size = 0 */
 1376               	/* stack size = 1 */
 1377               	.L__stack_usage = 1
 313:..//src/kernel/source/nrk_task.c **** 	nrk_stack_check ();
 1379               	.LM165:
 1380 05e6 0E94 0000 		call nrk_stack_check
 315:..//src/kernel/source/nrk_task.c **** 	nrk_int_disable ();
 1382               	.LM166:
 1383 05ea 0E94 0000 		call nrk_int_disable
 316:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->num_periods = 1;
 1385               	.LM167:
 1386 05ee E091 0000 		lds r30,nrk_cur_task_TCB
 1387 05f2 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1388 05f6 81E0      		ldi r24,lo8(1)
 1389 05f8 90E0      		ldi r25,hi8(1)
 1390 05fa 90A3      		std Z+32,r25
 1391 05fc 878F      		std Z+31,r24
 317:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->suspend_flag = 1;
 1393               	.LM168:
 1394 05fe 81E0      		ldi r24,lo8(1)
 1395 0600 8583      		std Z+5,r24
 318:..//src/kernel/source/nrk_task.c **** 	timer = _nrk_os_timer_get ();
 1397               	.LM169:
 1398 0602 0E94 0000 		call _nrk_os_timer_get
 1399 0606 182F      		mov r17,r24
 322:..//src/kernel/source/nrk_task.c **** 	if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
 1401               	.LM170:
 1402 0608 883F      		cpi r24,lo8(-8)
 1403 060a 00F4      		brsh .L55
 323:..//src/kernel/source/nrk_task.c **** 		if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
 1405               	.LM171:
 1406 060c 0E94 0000 		call _nrk_get_next_wakeup
 1407 0610 212F      		mov r18,r17
 1408 0612 30E0      		ldi r19,lo8(0)
 1409 0614 2F5F      		subi r18,lo8(-(1))
 1410 0616 3F4F      		sbci r19,hi8(-(1))
 1411 0618 482F      		mov r20,r24
 1412 061a 50E0      		ldi r21,lo8(0)
 1413 061c 2417      		cp r18,r20
 1414 061e 3507      		cpc r19,r21
 1415 0620 04F4      		brge .L55
 325:..//src/kernel/source/nrk_task.c **** 			timer += TIME_PAD;
 1417               	.LM172:
 1418 0622 812F      		mov r24,r17
 1419 0624 8E5F      		subi r24,lo8(-(2))
 326:..//src/kernel/source/nrk_task.c **** 			_nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special c
 1421               	.LM173:
 1422 0626 8093 0000 		sts _nrk_prev_timer_val,r24
 327:..//src/kernel/source/nrk_task.c **** 			_nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
 1424               	.LM174:
 1425 062a 0E94 0000 		call _nrk_set_next_wakeup
 1426               	.L55:
 330:..//src/kernel/source/nrk_task.c **** 		nrk_int_enable ();
 1428               	.LM175:
 1429 062e 0E94 0000 		call nrk_int_enable
 331:..//src/kernel/source/nrk_task.c **** 		_nrk_wait_for_scheduler ();
 1431               	.LM176:
 1432 0632 0E94 0000 		call _nrk_wait_for_scheduler
 333:..//src/kernel/source/nrk_task.c **** }
 1434               	.LM177:
 1435 0636 81E0      		ldi r24,lo8(1)
 1436               	/* epilogue start */
 1437 0638 1F91      		pop r17
 1438 063a 0895      		ret
 1440               	.Lscope13:
 1442               		.stabd	78,0,0
 1444               	.global	nrk_terminate_task
 1446               	nrk_terminate_task:
 1447               		.stabd	46,0,0
 300:..//src/kernel/source/nrk_task.c **** {
 1449               	.LM178:
 1450               	.LFBB14:
 1451               	/* prologue: function */
 1452               	/* frame size = 0 */
 1453               	/* stack size = 0 */
 1454               	.L__stack_usage = 0
 301:..//src/kernel/source/nrk_task.c **** 	nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
 1456               	.LM179:
 1457 063c E091 0000 		lds r30,nrk_cur_task_TCB
 1458 0640 F091 0000 		lds r31,nrk_cur_task_TCB+1
 1459 0644 8085      		ldd r24,Z+8
 1460 0646 0E94 0000 		call nrk_rem_from_readyQ
 302:..//src/kernel/source/nrk_task.c **** 	nrk_cur_task_TCB->task_state = FINISHED;
 1462               	.LM180:
 1463 064a E091 0000 		lds r30,nrk_cur_task_TCB
 1464 064e F091 0000 		lds r31,nrk_cur_task_TCB+1
 1465 0652 84E0      		ldi r24,lo8(4)
 1466 0654 8187      		std Z+9,r24
 305:..//src/kernel/source/nrk_task.c **** 	nrk_wait_until_next_period ();
 1468               	.LM181:
 1469 0656 0E94 0000 		call nrk_wait_until_next_period
 307:..//src/kernel/source/nrk_task.c **** }
 1471               	.LM182:
 1472 065a 81E0      		ldi r24,lo8(1)
 1473               	/* epilogue start */
 1474 065c 0895      		ret
 1476               	.Lscope14:
 1478               		.stabd	78,0,0
 1481               	.global	nrk_wait_until
 1483               	nrk_wait_until:
 1484               		.stabd	46,0,0
 532:..//src/kernel/source/nrk_task.c **** 
 533:..//src/kernel/source/nrk_task.c **** 
 534:..//src/kernel/source/nrk_task.c **** int8_t nrk_wait_until (nrk_time_t t)
 535:..//src/kernel/source/nrk_task.c **** {
 1486               	.LM183:
 1487               	.LFBB15:
 1488 065e 8F92      		push r8
 1489 0660 9F92      		push r9
 1490 0662 AF92      		push r10
 1491 0664 BF92      		push r11
 1492 0666 CF92      		push r12
 1493 0668 DF92      		push r13
 1494 066a EF92      		push r14
 1495 066c FF92      		push r15
 1496 066e 0F93      		push r16
 1497 0670 1F93      		push r17
 1498 0672 DF93      		push r29
 1499 0674 CF93      		push r28
 1500 0676 CDB7      		in r28,__SP_L__
 1501 0678 DEB7      		in r29,__SP_H__
 1502 067a 6097      		sbiw r28,16
 1503 067c 0FB6      		in __tmp_reg__,__SREG__
 1504 067e F894      		cli
 1505 0680 DEBF      		out __SP_H__,r29
 1506 0682 0FBE      		out __SREG__,__tmp_reg__
 1507 0684 CDBF      		out __SP_L__,r28
 1508               	/* prologue: function */
 1509               	/* frame size = 16 */
 1510               	/* stack size = 28 */
 1511               	.L__stack_usage = 28
 1512 0686 2987      		std Y+9,r18
 1513 0688 3A87      		std Y+10,r19
 1514 068a 4B87      		std Y+11,r20
 1515 068c 5C87      		std Y+12,r21
 1516 068e 6D87      		std Y+13,r22
 1517 0690 7E87      		std Y+14,r23
 1518 0692 8F87      		std Y+15,r24
 1519 0694 988B      		std Y+16,r25
 536:..//src/kernel/source/nrk_task.c **** 	nrk_time_t ct;
 537:..//src/kernel/source/nrk_task.c **** 	int8_t v;
 538:..//src/kernel/source/nrk_task.c **** 	//    uint8_t c;
 539:..//src/kernel/source/nrk_task.c **** 
 540:..//src/kernel/source/nrk_task.c **** 	//c = _nrk_os_timer_get ();
 541:..//src/kernel/source/nrk_task.c **** 	//do{
 542:..//src/kernel/source/nrk_task.c **** 	//}while(_nrk_os_timer_get()==c);
 543:..//src/kernel/source/nrk_task.c **** 
 544:..//src/kernel/source/nrk_task.c **** 	//ttt=c+1;
 545:..//src/kernel/source/nrk_task.c **** 	nrk_time_get (&ct);
 1521               	.LM184:
 1522 0696 CE01      		movw r24,r28
 1523 0698 0196      		adiw r24,1
 1524 069a 0E94 0000 		call nrk_time_get
 546:..//src/kernel/source/nrk_task.c **** 
 547:..//src/kernel/source/nrk_task.c **** 	v = nrk_time_sub (&t, t, ct);
 1526               	.LM185:
 1527 069e CE01      		movw r24,r28
 1528 06a0 0996      		adiw r24,9
 1529 06a2 0985      		ldd r16,Y+9
 1530 06a4 1A85      		ldd r17,Y+10
 1531 06a6 2B85      		ldd r18,Y+11
 1532 06a8 3C85      		ldd r19,Y+12
 1533 06aa 4D85      		ldd r20,Y+13
 1534 06ac 5E85      		ldd r21,Y+14
 1535 06ae 6F85      		ldd r22,Y+15
 1536 06b0 7889      		ldd r23,Y+16
 1537 06b2 8980      		ldd r8,Y+1
 1538 06b4 9A80      		ldd r9,Y+2
 1539 06b6 AB80      		ldd r10,Y+3
 1540 06b8 BC80      		ldd r11,Y+4
 1541 06ba CD80      		ldd r12,Y+5
 1542 06bc DE80      		ldd r13,Y+6
 1543 06be EF80      		ldd r14,Y+7
 1544 06c0 F884      		ldd r15,Y+8
 1545 06c2 0E94 0000 		call nrk_time_sub
 548:..//src/kernel/source/nrk_task.c **** 	//nrk_time_compact_nanos(&t);
 549:..//src/kernel/source/nrk_task.c **** 	if (v == NRK_ERROR)
 1547               	.LM186:
 1548 06c6 8F3F      		cpi r24,lo8(-1)
 1549 06c8 01F0      		breq .L59
 550:..//src/kernel/source/nrk_task.c **** 	{
 551:..//src/kernel/source/nrk_task.c **** 		return NRK_ERROR;
 552:..//src/kernel/source/nrk_task.c **** 	}
 553:..//src/kernel/source/nrk_task.c **** 	//if(t.secs<ct.secs) return 0;
 554:..//src/kernel/source/nrk_task.c **** 	//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;
 555:..//src/kernel/source/nrk_task.c **** 
 556:..//src/kernel/source/nrk_task.c **** 	//t.secs-=ct.secs;
 557:..//src/kernel/source/nrk_task.c **** 	//t.nano_secs-=ct.nano_secs;
 558:..//src/kernel/source/nrk_task.c **** 	//
 559:..//src/kernel/source/nrk_task.c **** 	nrk_wait (t);
 1551               	.LM187:
 1552 06ca 2985      		ldd r18,Y+9
 1553 06cc 3A85      		ldd r19,Y+10
 1554 06ce 4B85      		ldd r20,Y+11
 1555 06d0 5C85      		ldd r21,Y+12
 1556 06d2 6D85      		ldd r22,Y+13
 1557 06d4 7E85      		ldd r23,Y+14
 1558 06d6 8F85      		ldd r24,Y+15
 1559 06d8 9889      		ldd r25,Y+16
 1560 06da 0E94 0000 		call nrk_wait
 560:..//src/kernel/source/nrk_task.c **** 
 561:..//src/kernel/source/nrk_task.c **** 	return NRK_OK;
 1562               	.LM188:
 1563 06de 81E0      		ldi r24,lo8(1)
 1564 06e0 00C0      		rjmp .L58
 1565               	.L59:
 551:..//src/kernel/source/nrk_task.c **** 		return NRK_ERROR;
 1567               	.LM189:
 1568 06e2 8FEF      		ldi r24,lo8(-1)
 1569               	.L58:
 1570               	/* epilogue start */
 562:..//src/kernel/source/nrk_task.c **** }
 1572               	.LM190:
 1573 06e4 6096      		adiw r28,16
 1574 06e6 0FB6      		in __tmp_reg__,__SREG__
 1575 06e8 F894      		cli
 1576 06ea DEBF      		out __SP_H__,r29
 1577 06ec 0FBE      		out __SREG__,__tmp_reg__
 1578 06ee CDBF      		out __SP_L__,r28
 1579 06f0 CF91      		pop r28
 1580 06f2 DF91      		pop r29
 1581 06f4 1F91      		pop r17
 1582 06f6 0F91      		pop r16
 1583 06f8 FF90      		pop r15
 1584 06fa EF90      		pop r14
 1585 06fc DF90      		pop r13
 1586 06fe CF90      		pop r12
 1587 0700 BF90      		pop r11
 1588 0702 AF90      		pop r10
 1589 0704 9F90      		pop r9
 1590 0706 8F90      		pop r8
 1591 0708 0895      		ret
 1596               	.Lscope15:
 1598               		.stabd	78,0,0
 1600               	.global	nrk_get_pid
 1602               	nrk_get_pid:
 1603               		.stabd	46,0,0
 563:..//src/kernel/source/nrk_task.c **** 
 564:..//src/kernel/source/nrk_task.c **** 
 565:..//src/kernel/source/nrk_task.c **** uint8_t nrk_get_pid ()
 566:..//src/kernel/source/nrk_task.c **** {
 1605               	.LM191:
 1606               	.LFBB16:
 1607               	/* prologue: function */
 1608               	/* frame size = 0 */
 1609               	/* stack size = 0 */
 1610               	.L__stack_usage = 0
 567:..//src/kernel/source/nrk_task.c **** 	return nrk_cur_task_TCB->task_ID;
 1612               	.LM192:
 1613 070a E091 0000 		lds r30,nrk_cur_task_TCB
 1614 070e F091 0000 		lds r31,nrk_cur_task_TCB+1
 568:..//src/kernel/source/nrk_task.c **** }
 1616               	.LM193:
 1617 0712 8085      		ldd r24,Z+8
 1618               	/* epilogue start */
 1619 0714 0895      		ret
 1621               	.Lscope16:
 1623               		.stabd	78,0,0
 1624               		.comm _nrk_signal_list,4,1
 1625               		.comm nrk_idle_task_stk,128,1
 1626               		.comm nrk_kernel_stk_ptr,2,1
 1627               		.comm nrk_task_TCB,165,1
 1628               		.comm nrk_wakeup_signal,1,1
 1629               		.comm _nrk_readyQ,30,1
 1630               		.comm _free_node,2,1
 1631               		.comm _head_node,2,1
 1632               		.comm nrk_cur_task_prio,1,1
 1633               		.comm nrk_cur_task_TCB,2,1
 1634               		.comm nrk_high_ready_prio,1,1
 1635               		.comm nrk_high_ready_TCB,2,1
 1636               		.comm _nrk_resource_cnt,1,1
 1637               		.comm nrk_system_time,8,1
 1638               		.comm _nrk_prev_timer_val,1,1
 1639               		.comm _nrk_time_trigger,1,1
 1640               		.comm app_timer0_callback,2,1
 1641               		.comm app_timer0_prescale,1,1
 1642               		.comm _nrk_cpu_state,1,1
 1643               		.comm next_next_wakeup,2,1
 1644               		.comm error_task,1,1
 1645               		.comm error_num,1,1
 1646               		.comm nrk_sem_list,15,1
 1647               		.comm systemceiling,1,1
 1648               		.section	.progmem.data,"a",@progbits
 1651               	__c.2133:
 1652 0000 0A0D 00   		.string	"\n\r"
 1655               	__c.2128:
 1656 0003 6E72 6B5F 		.string	"nrk_queue: "
 1656      7175 6575 
 1656      653A 2000 
 1681               		.text
 1683               	.Letext0:
 1684               	.global __do_copy_data
 1685               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 nrk_task.c
     /tmp/ccDGFTzY.s:2      *ABS*:0000003f __SREG__
     /tmp/ccDGFTzY.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccDGFTzY.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccDGFTzY.s:5      *ABS*:00000034 __CCP__
     /tmp/ccDGFTzY.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccDGFTzY.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccDGFTzY.s:140    .text:00000000 nrk_get_high_ready_task_ID
                            *COM*:00000002 _head_node
     /tmp/ccDGFTzY.s:169    .text:0000000c nrk_print_readyQ
     /tmp/ccDGFTzY.s:1655   .progmem.data:00000003 __c.2128
                            *COM*:000000a5 nrk_task_TCB
     /tmp/ccDGFTzY.s:1651   .progmem.data:00000000 __c.2133
     /tmp/ccDGFTzY.s:260    .text:0000007a nrk_add_to_readyQ
                            *COM*:00000002 _free_node
     /tmp/ccDGFTzY.s:524    .text:000001dc nrk_rem_from_readyQ
     /tmp/ccDGFTzY.s:654    .text:0000027c nrk_activate_task
     /tmp/ccDGFTzY.s:786    .text:00000326 nrk_set_next_wakeup
                            *COM*:00000002 nrk_cur_task_TCB
     /tmp/ccDGFTzY.s:876    .text:00000394 _nrk_wait_for_scheduler
     /tmp/ccDGFTzY.s:908    .text:000003a8 nrk_wait
                            *COM*:00000001 _nrk_prev_timer_val
     /tmp/ccDGFTzY.s:1031   .text:00000458 nrk_wait_until_nw
     /tmp/ccDGFTzY.s:1104   .text:000004a6 nrk_wait_until_ticks
     /tmp/ccDGFTzY.s:1183   .text:00000500 nrk_wait_ticks
     /tmp/ccDGFTzY.s:1278   .text:0000057e nrk_wait_until_next_n_periods
     /tmp/ccDGFTzY.s:1368   .text:000005e4 nrk_wait_until_next_period
     /tmp/ccDGFTzY.s:1446   .text:0000063c nrk_terminate_task
     /tmp/ccDGFTzY.s:1483   .text:0000065e nrk_wait_until
     /tmp/ccDGFTzY.s:1602   .text:0000070a nrk_get_pid
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 nrk_wakeup_signal
                            *COM*:0000001e _nrk_readyQ
                            *COM*:00000001 nrk_cur_task_prio
                            *COM*:00000001 nrk_high_ready_prio
                            *COM*:00000002 nrk_high_ready_TCB
                            *COM*:00000001 _nrk_resource_cnt
                            *COM*:00000008 nrk_system_time
                            *COM*:00000001 _nrk_time_trigger
                            *COM*:00000002 app_timer0_callback
                            *COM*:00000001 app_timer0_prescale
                            *COM*:00000001 _nrk_cpu_state
                            *COM*:00000002 next_next_wakeup
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num
                            *COM*:0000000f nrk_sem_list
                            *COM*:00000001 systemceiling

UNDEFINED SYMBOLS
nrk_kprintf
printf
nrk_task_stk_init
nrk_TCB_init
nrk_int_disable
_nrk_os_timer_get
_nrk_time_to_ticks
nrk_int_enable
nrk_idle
nrk_stack_check
_nrk_get_next_wakeup
_nrk_set_next_wakeup
nrk_time_get
nrk_time_sub
__do_copy_data
__do_clear_bss
